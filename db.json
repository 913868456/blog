{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"themes/fluid/source/js/clipboard-use.js","path":"js/clipboard-use.js","modified":1,"renderable":1},{"_id":"themes/fluid/source/js/color-schema.js","path":"js/color-schema.js","modified":1,"renderable":1},{"_id":"themes/fluid/source/js/debouncer.js","path":"js/debouncer.js","modified":1,"renderable":1},{"_id":"themes/fluid/source/js/lazyload.js","path":"js/lazyload.js","modified":1,"renderable":1},{"_id":"themes/fluid/source/js/local-search.js","path":"js/local-search.js","modified":1,"renderable":1},{"_id":"themes/fluid/source/js/main.js","path":"js/main.js","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/avatar.png","path":"img/avatar.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/default.png","path":"img/default.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/js/utils.js","path":"js/utils.js","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/loading.gif","path":"img/loading.gif","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/favicon.png","path":"img/favicon.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/police_beian.png","path":"img/police_beian.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/fluid/source/xml/local-search.xml","path":"xml/local-search.xml","modified":1,"renderable":1},{"_id":"themes/fluid/source/lib/hint/hint.min.css","path":"lib/hint/hint.min.css","modified":1,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"0429913050a9dbfbea865ba598b13e4230e8330e","modified":1601208136788},{"_id":"source/_data/fluid_static_prefix.yml","hash":"138196742cf7d7a2c6e2452b34b5399d26264cab","modified":1600858495022},{"_id":"source/_posts/.DS_Store","hash":"1e97bebc9156dd0438fe59ee53009904e4fbbbf0","modified":1601208183293},{"_id":"source/_data/fluid_config.yml","hash":"6aeed1596505d514a30fa9e055ac588c484b4ee1","modified":1601208650672},{"_id":"source/about/index.md","hash":"2c2851afd1cb17c442dceac38f86af101d9453fd","modified":1600857670767},{"_id":"source/_posts/Linux/Shell-Script.md","hash":"88349671fc1897a638055a8122f6a760e1c16612","modified":1601208229721},{"_id":"source/_posts/Linux/Linux-文件命令.md","hash":"e1d7bf9dcceae585fcb486c16c5b028823b7f6f8","modified":1601208263057},{"_id":"source/_posts/PHP/mac-XAMPP环境下,-使用php函数mkdir()添加新目录(文件)报错,报错信息-permission-denied;.md","hash":"9886806004a5f8e0033e1fc2b214c29debc81a90","modified":1601204441017},{"_id":"source/_posts/Linux/Vim常用命令.md","hash":"27641f3be8e748e02c8cb31b91524ef7a74c8e88","modified":1601202694998},{"_id":"source/_posts/Swift/Swift---4-Checking-API-Availability.md","hash":"59a2ca2a5eae3979b77bc448871b74404fd7e9ff","modified":1601208002019},{"_id":"source/_posts/Swift/Swift---4-函数.md","hash":"7bdeb6ad2b01531fad899bebebc20bfca9f7f82f","modified":1601207988706},{"_id":"source/_posts/Swift/-Swift---4-闭包.md","hash":"6692adc763cad0597377e51da42b201999b98de0","modified":1601207960589},{"_id":"source/_posts/Swift/Swift-4---String.md","hash":"3087194b5df6e8c2b1a43624edd1b08c98787267","modified":1601208069871},{"_id":"source/_posts/Swift/Swift---4-协议.md","hash":"7e1ada64841feff1345b35353b2e999a17de4dca","modified":1601207995572},{"_id":"source/_posts/Swift/Swift---4-Codable.md","hash":"d7f5daa2b4cd5069e6598f30291784b412d52097","modified":1601203041670},{"_id":"source/_posts/Swift/Swift---4-构造器.md","hash":"78da8b5ab4a88ed7e3df29da62faa045e9ad2f8f","modified":1601207977900},{"_id":"source/_posts/Swift/Swift-4---nil.md","hash":"b025277465b916187edec0e38c8cd18d08e36008","modified":1601208062722},{"_id":"source/_posts/Swift/Swift-4---断言.md","hash":"9974bbf6162696c9cb6976b2c0a8bffd47397a62","modified":1601208039972},{"_id":"source/_posts/Swift/Swift-4---guard语句.md","hash":"94282b3d1d375ee6fd2f8030f1d3c3514e1dfca7","modified":1601208055667},{"_id":"source/_posts/Swift/Swift-4---元组.md","hash":"c405c1b8cc4ba8eb87b2eba6378f04e30c1691cc","modified":1601208048011},{"_id":"source/_posts/Swift/Swift-4---错误处理.md","hash":"410e3f6275d71163d42a4a49967261bf90c67529","modified":1601208029184},{"_id":"source/_posts/Swift/Swift-项目桥接OC第三方库.md","hash":"e019876f51b180ecad56e7dbbd632e4780405f84","modified":1601208078602},{"_id":"source/_posts/iOS/-Objective-C-Runtime.md","hash":"e44b99a910485a662385b631a10b136ae603face","modified":1601205008118},{"_id":"source/_posts/iOS/Apple登录集成.md","hash":"dde17089732957acdfd7af08d9c2a0a7ef7425b5","modified":1601202083037},{"_id":"source/_posts/iOS/Aspects-简介与原理简析.md","hash":"95d48133c112061f23f4bcd4d8ef535e85b6a212","modified":1601203137200},{"_id":"source/_posts/iOS/Block-编程.md","hash":"97a16d2faa82bcecb7ee384a385b7941b41b9d76","modified":1601205180609},{"_id":"source/_posts/iOS/CALayer-和-CAAnimation.md","hash":"5e783b5d034db26bb3da53edb5f44daad14761c7","modified":1601203090129},{"_id":"source/_posts/iOS/CoreNFC.md","hash":"6e21d9f4adae3adcbeaf44d244678a086df25393","modified":1601204933877},{"_id":"source/_posts/iOS/Core-Bluetooth-编程指南.md","hash":"b7720b108ec36595364192013ef7c627085ddcda","modified":1601205241903},{"_id":"source/_posts/iOS/Dispatch.md","hash":"407e643b60c10236bdfcc9cefc20ce1a0430cec7","modified":1601204895741},{"_id":"source/_posts/iOS/Core-Graphics.md","hash":"ce83e8064872c5514a9eb43ae3d93b075f6edf9f","modified":1601202563486},{"_id":"source/_posts/iOS/JavaScriptCore.md","hash":"79e6f8bc240553ac3c22cb4cbf62d34fbd3a380d","modified":1601203329751},{"_id":"source/_posts/iOS/KVC.md","hash":"c08bda4968e1292fd8f8b9cb46ebaff8720a6c9d","modified":1601205075201},{"_id":"source/_posts/iOS/KVC-编程指南.md","hash":"66b0aa582bf256d84be25c7b7c536493db9c318f","modified":1601203183947},{"_id":"source/_posts/iOS/JavaScriptCore与WebView.md","hash":"4693d9a1ac430eded7e5f78af4c06461eadc7243","modified":1601204967327},{"_id":"source/_posts/iOS/NSLayoutConstraint.md","hash":"b9b2ee312026f5fb22033a4938edff103f4312da","modified":1601204858258},{"_id":"source/_posts/iOS/KVO.md","hash":"9fc39d3375f94df5fa3d794ed37aa6b1ef837063","modified":1601205117563},{"_id":"source/_posts/iOS/Notification-Programming-Topics.md","hash":"18189687ed656530bac2cd68df8e1a6640763b67","modified":1600941203619},{"_id":"source/_posts/iOS/TextView-高度自适应.md","hash":"b13ae397952cd7c15136d8c03d74c223aeb54e95","modified":1601202640674},{"_id":"source/_posts/iOS/PhotoKit.md","hash":"a6e6a2e334ba0306b65f03866776011dc7a92748","modified":1601202602824},{"_id":"source/_posts/iOS/Runtime-编程指南.md","hash":"f79e65d6c8976c02e337026bcf710d5f07a51206","modified":1601203365234},{"_id":"source/_posts/iOS/XIB--或者-AutoLayout-实现Cell高度自适应.md","hash":"1dfbfb44045f9877bbbc87d44b551c9d1772f19a","modified":1601202745804},{"_id":"source/_posts/iOS/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1601204398572},{"_id":"source/_posts/iOS/Xcode-module-compiled-with-Swift-3-1-cannot-be-imported-in-Swift-3-2--.md","hash":"511056c6e22dc492e8a50aebab642ab834206d3c","modified":1601204811806},{"_id":"source/_posts/iOS/YYCategories-源码分析.md","hash":"1c3f7deda2e9f425443cb5562096dd269901ab64","modified":1601203287378},{"_id":"source/_posts/iOS/iOS-App包瘦身方案.md","hash":"a2f623344c88b365bad552316dccdc99c9ce4fa3","modified":1600941454801},{"_id":"source/_posts/iOS/iOS-Router.md","hash":"29dde258182fada8e2ce61f7d932e22d2c7b4a26","modified":1601205042413},{"_id":"source/_posts/iOS/iOS-编程指南-(部分官翻).md","hash":"e89591eba97818d2adfc454994f4aa0849f8962c","modified":1600941487308},{"_id":"source/_posts/iOS/iOS友盟第三方登录.md","hash":"07b8047daf6ccb78a60266711de31f3afdfcfd1c","modified":1601203511469},{"_id":"source/_posts/工具/Carthage-安装.md","hash":"782338620ebb8d40538822026e2e49a394b3d8f5","modified":1601202327750},{"_id":"source/_posts/工具/CocoaPods.md","hash":"b7d575ddb859eda25b128df169b2f849da80eae3","modified":1603694663112},{"_id":"source/_posts/iOS/iOS自动打包Shell脚本文件.md","hash":"1f49607b103a9ef6a7caf6cf868a2e5899e613a5","modified":1601203581163},{"_id":"source/_posts/iOS/swift如何设置Debug模式下的打印输出.md","hash":"2158e47e4004bb3a7621e6ad837f078640a68b73","modified":1601204583116},{"_id":"source/_posts/iOS/常用算法.md","hash":"bc51fbe9acf0c246a5f6b3cbd6f89fdf5e9f07fc","modified":1601205352262},{"_id":"source/_posts/工具/Git-常用命令.md","hash":"e5d7dc9e1fd4ceef5865ad0119254302451ed2af","modified":1601202807223},{"_id":"source/_posts/工具/Git使用SSH-公钥认证.md","hash":"341d6176f93c9c6804d999ae05c2388ed84a73ba","modified":1601203215579},{"_id":"source/_posts/工具/MacOS-系统更新后-Cocoapods失效问题.md","hash":"2e88a163c9790f973d018e92630d6b490cb14271","modified":1600937274148},{"_id":"source/_posts/工具/fastlane--自动打包上传.md","hash":"cbdf50ce9de8090e7e560dfef3d61b69757ce76a","modified":1601202418916},{"_id":"source/_posts/工具/iOS账号续费及证书更新流程.md","hash":"9c2b37efa3c5a8b1e36ae04dbdf015e6d674edee","modified":1601203649737},{"_id":"source/_posts/工具/MAC-svn-配置及cornerstone.md","hash":"71a0a0e1fade187e2093cff30070bcbc763c0429","modified":1601204740540},{"_id":"source/_posts/工具/常用正则表达式.md","hash":"89762ca7d28373db2824a8d06d7aec956a1eab33","modified":1601204191906},{"_id":"source/_posts/工具/如何退出-macOS-beta-计划.md","hash":"b11a65c8fe936a1999cab62e8aa105910ee4bc30","modified":1600937628495},{"_id":"source/_posts/计算机基础/数据结构.md","hash":"081b7fc34521af85bfa41fcbd765ff1b0e927981","modified":1601202505863},{"_id":"source/_posts/随笔/天路旅途（一）.md","hash":"44cbc9503b0d2f4fa792bac5f65c16662513a7d9","modified":1601203470388},{"_id":"source/_posts/随笔/天路旅途-(四).md","hash":"47309f9ae19f0dfc64fa16793827909e24db860f","modified":1601202928708},{"_id":"source/_posts/随笔/天路旅途（三）.md","hash":"8a282f4ff65745d5ed361a2b26d50f59d1a10142","modified":1601203250435},{"_id":"source/_posts/计算机基础/编译原理.md","hash":"9acd25343fa32a4635e9ffcc42b1049537ad355a","modified":1601202466538},{"_id":"source/_posts/随笔/天路旅途（二）.md","hash":"de657b523c2c1b8b36d0061606161e69f2eac531","modified":1601203442887},{"_id":"themes/fluid/source/css/_pages/_tag/tag.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1599451061000},{"_id":"themes/fluid/source/css/_pages/_category/category.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1599451061000},{"_id":"themes/fluid/.DS_Store","hash":"da83e6a42c14b748f71bf5943bd24bde312aadef","modified":1600942935486},{"_id":"themes/fluid/.editorconfig","hash":"33218fbd623feb43edf5f99f15965392cecc44a6","modified":1599451061000},{"_id":"themes/fluid/.gitattributes","hash":"a54f902957d49356376b59287b894b1a3d7a003f","modified":1599451061000},{"_id":"themes/fluid/.gitignore","hash":"bd095eee271360a38772ee1a42d4f000fb722e5f","modified":1599451061000},{"_id":"themes/fluid/LICENSE","hash":"5b919c12e4f5f5cdebb7c17ded4f10f1ebe64811","modified":1599451061000},{"_id":"themes/fluid/.eslintrc","hash":"4bc2b19ce2b8c4d242f97d4ccf2d741e68ab0097","modified":1599451061000},{"_id":"themes/fluid/package.json","hash":"2390818b24d2f525bfca6cbc7f55e6650a513f3d","modified":1599451061000},{"_id":"themes/fluid/_config.yml","hash":"8208e970e1f2267a4204b4e2aec0c458b8286395","modified":1601206475855},{"_id":"themes/fluid/_static_prefix.yml","hash":"d5eb27044090c50bdee4ffcf738662ce469c870a","modified":1599451061000},{"_id":"themes/fluid/README_en.md","hash":"afdfabc2763baa03ceda722c0a05e0f6680166f7","modified":1599451061000},{"_id":"themes/fluid/gulpfile.js","hash":"dc82b6be72c786721a2f5e2acc10a2a94995c540","modified":1599451061000},{"_id":"themes/fluid/README.md","hash":"557aef4c09566a4d09e33c0575ea2fb44786e179","modified":1599451061000},{"_id":"themes/fluid/languages/en.yml","hash":"a85dcc5cc21f9cab50df31e5001b8818ee62d1e2","modified":1599451061000},{"_id":"themes/fluid/languages/ja.yml","hash":"91020031a847c0361a6fd7ab990c7be4bf17529b","modified":1599451061000},{"_id":"themes/fluid/languages/zh-CN.yml","hash":"21307b4137c3d9b04bb58243747e75af0abc5a71","modified":1599451061000},{"_id":"themes/fluid/layout/404.ejs","hash":"689d9f4efd2a7f5edfd9b24561a7ade69d46617c","modified":1599451061000},{"_id":"themes/fluid/layout/categories.ejs","hash":"6c4ab9fcdf5f7b58238bf06276b027075872c424","modified":1599451061000},{"_id":"themes/fluid/layout/category.ejs","hash":"1cfe94f46f1492a411d431b02a8d09c99cab77d5","modified":1599451061000},{"_id":"themes/fluid/source/.DS_Store","hash":"54548adf40edc00b8b9c1c4a1788b5c719eb3d24","modified":1600942941892},{"_id":"themes/fluid/layout/layout.ejs","hash":"49a7f26815a25bbc2ed0ed78a966406f5d8c1c5e","modified":1599451061000},{"_id":"themes/fluid/layout/about.ejs","hash":"e967e102bab2b35b9083165c2b8e037db8e0a32d","modified":1599451061000},{"_id":"themes/fluid/layout/index.ejs","hash":"9534043275df504d70232c07fec7e10503b85d32","modified":1599451061000},{"_id":"themes/fluid/layout/archive.ejs","hash":"094357be1c2c6b477269a3f4b725d3c5dd24ef8c","modified":1599451061000},{"_id":"themes/fluid/layout/links.ejs","hash":"6abd180ff4dd1d5d22e4c70328e3c7f83d174d9c","modified":1599451061000},{"_id":"themes/fluid/layout/tag.ejs","hash":"fd72ec9e6629facf63ce8122f0fa8d492669fa6a","modified":1599451061000},{"_id":"themes/fluid/layout/page.ejs","hash":"8cab50ead4cdb992d35710147a9a5308fb5df290","modified":1599451061000},{"_id":"themes/fluid/layout/post.ejs","hash":"59551ef5d9c0dee8c162ac39a18a96dafe5e1358","modified":1599451061000},{"_id":"themes/fluid/layout/tags.ejs","hash":"1d06af34b6cf1d8a20d2eb565e309326ceba309f","modified":1599451061000},{"_id":"themes/fluid/.github/workflows/limit.yaml","hash":"f8bd2edeb4424ee7a055b31583445d5d5dff91a4","modified":1599451061000},{"_id":"themes/fluid/.github/workflows/lint.yaml","hash":"628f8d7655fdba149f5a9b0232df5c3225eda9da","modified":1599451061000},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/bug_report_zh.md","hash":"5c5a5565bb13928bc92332d9b99b968673ea7dfb","modified":1599451061000},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/bug_report.md","hash":"8f20dca8a03aefd495d0550544f25d8c6e44333e","modified":1599451061000},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/feature_request.md","hash":"d3a3204d9bb2b43a69c9cb0be59bada8cb91e412","modified":1599451061000},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/feature_request_zh.md","hash":"a413dc14e4737dbcaa8fb797d37f85121ede6551","modified":1599451061000},{"_id":"themes/fluid/scripts/filters/post-filter.js","hash":"6665f19fa30cbbe0853d8140a0832f8638538f89","modified":1599451061000},{"_id":"themes/fluid/scripts/events/index.js","hash":"a6ab2c6d9f9ba58cd1fabb85c2817874246fd525","modified":1599451061000},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/question_zh.md","hash":"e24b470f7aa8044499a4f5e39634e5dc43899011","modified":1599451061000},{"_id":"themes/fluid/scripts/generators/local-search.js","hash":"fc2c50405b771b06b7f6cfc4e9de97b992691555","modified":1599451061000},{"_id":"themes/fluid/scripts/helpers/page.js","hash":"d45dce23532c17367c7eb86b94afa8c9e40d16c6","modified":1599451061000},{"_id":"themes/fluid/scripts/generators/pages.js","hash":"01439b3d7abdeb5e51f810d784181c1d420be55d","modified":1599451061000},{"_id":"themes/fluid/scripts/helpers/utils.js","hash":"9045f47c7a71aab39f16cffb3e3847b752c2e0f1","modified":1599451061000},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/question.md","hash":"ab5eab9e3ff889c4ba7fd82846e7f5b7ae15bebc","modified":1599451061000},{"_id":"themes/fluid/scripts/helpers/wordcount.js","hash":"e58d422eddb44c1be893f65f79f4c7feecfe6d5f","modified":1599451061000},{"_id":"themes/fluid/scripts/tags/checkbox.js","hash":"63468f7875c09d9557fe8315afc97175745d9087","modified":1599451061000},{"_id":"themes/fluid/scripts/helpers/url.js","hash":"99ab4551dc9c035abcc3bf4da5def2f63449d7ec","modified":1599451061000},{"_id":"themes/fluid/scripts/tags/button.js","hash":"3eb43a8cdea0a64576ad6b31b4df6c2bf5698d4c","modified":1599451061000},{"_id":"themes/fluid/scripts/tags/group-image.js","hash":"4aeebb797026f1df25646a5d69f7fde79b1bcd26","modified":1599451061000},{"_id":"themes/fluid/scripts/tags/note.js","hash":"0886cfe3f8589671a1d289495e359c20a9908080","modified":1599451061000},{"_id":"themes/fluid/scripts/tags/label.js","hash":"f05a6d32cca79535b22907dc03edb9d3fa2d8176","modified":1599451061000},{"_id":"themes/fluid/scripts/utils/join-path.js","hash":"629e7deb3955f750c1cfa6fc773f412e020fcef4","modified":1599451061000},{"_id":"themes/fluid/scripts/utils/object.js","hash":"61e9555f99edcb23d55361c7154e23af33153ecb","modified":1599451061000},{"_id":"themes/fluid/source/js/clipboard-use.js","hash":"f0ffe3df1deeb3cc36adfee2ab839368fb28d1c9","modified":1599451061000},{"_id":"themes/fluid/source/js/color-schema.js","hash":"03d5315b752cd3e13749cca790783a1e1cfab0a8","modified":1599451061000},{"_id":"themes/fluid/source/js/lazyload.js","hash":"792deca48c12512d3e612f0de092ffcff3ca3e34","modified":1599451061000},{"_id":"themes/fluid/source/js/debouncer.js","hash":"045f324777bdfb99d4c17b1806169f029f897a65","modified":1599451061000},{"_id":"themes/fluid/source/js/local-search.js","hash":"13d5ef2fe68c49bd6096781034dbb26c190b5176","modified":1599451061000},{"_id":"themes/fluid/source/js/main.js","hash":"a6def6368d288892088f78fd401e7170e3e81a13","modified":1599451061000},{"_id":"themes/fluid/source/js/utils.js","hash":"9b06e2e2a2bb92e27d15a700f28f880317c25cfa","modified":1599451061000},{"_id":"themes/fluid/source/img/avatar.png","hash":"fe739a158cc128f70f780eb5fa96f388b81d478f","modified":1599451061000},{"_id":"themes/fluid/source/img/loading.gif","hash":"2d2fc0f947940f98c21afafef39ecf226a2e8d55","modified":1599451061000},{"_id":"themes/fluid/source/img/default.png","hash":"7bb2b8ee07db305bcadee2985b81b942027ae940","modified":1599451061000},{"_id":"themes/fluid/source/img/police_beian.png","hash":"90efded6baa2dde599a9d6b1387973e8e64923ea","modified":1599451061000},{"_id":"themes/fluid/source/img/favicon.png","hash":"64b215db2cb3af98fe639e94537cb5209f959c78","modified":1599451061000},{"_id":"themes/fluid/source/css/main.styl","hash":"d5a8a59c8d1fd17d699a951e59c4ce9ae44c419d","modified":1599451061000},{"_id":"themes/fluid/layout/_partial/beian.ejs","hash":"4f3acc8dc822c85d0d778552a15875f71c0cd80a","modified":1599451061000},{"_id":"themes/fluid/layout/_partial/footer.ejs","hash":"03defcd4409dce27447aa8dfe7ce41a2d47e373b","modified":1599451061000},{"_id":"themes/fluid/layout/_partial/css.ejs","hash":"44d7248fb15361fd23b774f0816c6480b8fdc52e","modified":1599451061000},{"_id":"themes/fluid/source/xml/local-search.xml","hash":"8c96ba6a064705602ce28d096fd7dd9069630a55","modified":1599451061000},{"_id":"themes/fluid/layout/_partial/head.ejs","hash":"55f62c4766f5d505e8307e667f83ea459b84dfb6","modified":1599451061000},{"_id":"themes/fluid/layout/_partial/post-meta.ejs","hash":"7c40672443ba61b62b68a9aa6685ea944dbbb061","modified":1599451061000},{"_id":"themes/fluid/layout/_partial/nav.ejs","hash":"70490c67b7313ae305d39331238232fe62f094f1","modified":1599451061000},{"_id":"themes/fluid/layout/_partial/scripts.ejs","hash":"9f9e40a348771463cc70d6592198604ca49fc050","modified":1599451061000},{"_id":"themes/fluid/layout/_partial/search.ejs","hash":"cdd7919fa01f6ef7ccc09938d662ff3d77f5d999","modified":1599451061000},{"_id":"themes/fluid/layout/_partial/statistics.ejs","hash":"920bc618d357d48d2b96f8758f6ae8f9488fc4d8","modified":1599451061000},{"_id":"themes/fluid/scripts/events/lib/footnote.js","hash":"3b2abc5f5e3b681874637e98e047dc4969eb1983","modified":1599451061000},{"_id":"themes/fluid/scripts/events/lib/hello.js","hash":"da4c281a8b2d2ed813da1236950c9dff87334adc","modified":1599451061000},{"_id":"themes/fluid/scripts/events/lib/highlight.js","hash":"96d56372cad997b09c26dbd29a19f917140c6ab0","modified":1599451061000},{"_id":"themes/fluid/scripts/events/lib/lazyload.js","hash":"ee7dfef805af96195c11223cca53983deace8bda","modified":1599451061000},{"_id":"themes/fluid/scripts/events/lib/merge-configs.js","hash":"a25a40036ef38c8dc92574079007882a0d75338a","modified":1599451061000},{"_id":"themes/fluid/scripts/events/lib/version.js","hash":"0250fb16c7c798afd1f7fc816163ea0728765568","modified":1599451061000},{"_id":"themes/fluid/layout/_partial/toc.ejs","hash":"3cf1d9b9032919d6b936e1f2410911df3b325670","modified":1599451061000},{"_id":"themes/fluid/scripts/events/lib/preset-configs.js","hash":"202459c9444b1ba967396db3625af261b0b19820","modified":1599451061000},{"_id":"themes/fluid/layout/_partial/paginator.ejs","hash":"783eee847562ce14db8f723b4ae742fb69aaf620","modified":1599451061000},{"_id":"themes/fluid/layout/_partial/comments/changyan.ejs","hash":"13c0b62854668fd83287dff3792997baeeb3a2c7","modified":1599451061000},{"_id":"themes/fluid/source/css/_functions/base.styl","hash":"2e46f3f4e2c9fe34c1ff1c598738fc7349ae8188","modified":1599451061000},{"_id":"themes/fluid/source/css/_pages/pages.styl","hash":"b8e887bc7fb3b765a1f8ec9448eff8603a41984f","modified":1599451061000},{"_id":"themes/fluid/source/css/_mixins/base.styl","hash":"542e306ee9494e8a78e44d6d7d409605d94caeb3","modified":1599451061000},{"_id":"themes/fluid/source/css/_variables/base.styl","hash":"fe96204aa2e7ee4f7f404c9e90752a8ff822d779","modified":1599451061000},{"_id":"themes/fluid/layout/_partial/comments/gitalk.ejs","hash":"096fef408349db4ebbec84cf20a373dd46c8f4ff","modified":1599451061000},{"_id":"themes/fluid/layout/_partial/comments/disqus.ejs","hash":"eeb3462cbedd195156aa671fb522bebee0274b5e","modified":1599451061000},{"_id":"themes/fluid/layout/_partial/comments/remark42.ejs","hash":"3c254c1b7bc5a4c6bd5b724514d463608408018b","modified":1599451061000},{"_id":"themes/fluid/source/lib/hint/hint.min.css","hash":"b38df228460ebfb4c0b6085336ee2878fe85aafe","modified":1599451061000},{"_id":"themes/fluid/layout/_partial/comments/livere.ejs","hash":"f1e5d89cc98e2f6e067e5cd3db728127ccff0105","modified":1599451061000},{"_id":"themes/fluid/layout/_partial/comments/utterances.ejs","hash":"2b9a49594e9aea4dc8fdd606a63c8c5b9189e325","modified":1599451061000},{"_id":"themes/fluid/layout/_partial/plugins/analytics.ejs","hash":"557077a8825fffc0a2c7fe2b29f319287950244f","modified":1599451061000},{"_id":"themes/fluid/layout/_partial/comments/valine.ejs","hash":"37941b3c6f66f1f22aeff734802373657dfdfb99","modified":1599451061000},{"_id":"themes/fluid/layout/_partial/plugins/anchor.ejs","hash":"3738c2ef427b4b400225b92e638a17b7ab2125ed","modified":1599451061000},{"_id":"themes/fluid/layout/_partial/plugins/aplayer.ejs","hash":"e843cdbe64af3dee9385eb1d763539d3ac10ed72","modified":1599451061000},{"_id":"themes/fluid/layout/_partial/plugins/daovoice.ejs","hash":"cfc684ba48608abd25afd155ee373d9936bbe84e","modified":1599451061000},{"_id":"themes/fluid/layout/_partial/plugins/fancybox.ejs","hash":"c447e35c93c61a70c1c2dfc34948615832989660","modified":1599451061000},{"_id":"themes/fluid/layout/_partial/plugins/leancloud.ejs","hash":"7807e58722dcf992fba11bc879b0fac0e904dc76","modified":1599451061000},{"_id":"themes/fluid/layout/_partial/plugins/local-search.ejs","hash":"03b024c7bab51b64e5187c9dbfac039d020f1e97","modified":1599451061000},{"_id":"themes/fluid/layout/_partial/plugins/mermaid.ejs","hash":"10ed1f9a611449d37736e17c4e251127b38b3772","modified":1599451061000},{"_id":"themes/fluid/layout/_partial/plugins/math.ejs","hash":"76c4e0608ae362a265ac5e9c0fc49f75c1bc568e","modified":1599451061000},{"_id":"themes/fluid/layout/_partial/plugins/mouse-click.ejs","hash":"eb19991199c201ceb103a6ef025e4dfd1e7dbfb7","modified":1599451061000},{"_id":"themes/fluid/layout/_partial/plugins/tocjs.ejs","hash":"2d35295dba2bb912d6ce2ec7747af06bfdc82edb","modified":1599451061000},{"_id":"themes/fluid/source/css/_pages/_archive/archive.styl","hash":"6e6f22b664199772370b59ce1678b0c148b5849f","modified":1599451061000},{"_id":"themes/fluid/layout/_partial/plugins/typed.ejs","hash":"38334350425008d1f64323de221457ee0948af0e","modified":1599451061000},{"_id":"themes/fluid/source/css/_pages/_base/color-schema.styl","hash":"f7004d597163e0af7b9107b0be1df12f4c0a7bc0","modified":1599451061000},{"_id":"themes/fluid/source/css/_pages/_base/base.styl","hash":"aa2528e71c290dc43b69dfbdcf4d8d6c258015a4","modified":1599451061000},{"_id":"themes/fluid/source/css/_pages/_base/keyframes.styl","hash":"94065ea50f5bef7566d184f2422f6ac20866ba22","modified":1599451061000},{"_id":"themes/fluid/source/css/_pages/_base/inline.styl","hash":"fab8441a0b8d8f9db6c8370013659c035345ae79","modified":1599451061000},{"_id":"themes/fluid/source/css/_pages/_base/rewrite.styl","hash":"4f939807936632f2ff2504f139648033aa351957","modified":1599451061000},{"_id":"themes/fluid/source/css/_pages/_about/about.styl","hash":"15d2786d00418e61022475194ad76445d68e27ea","modified":1599451061000},{"_id":"themes/fluid/source/css/_pages/_post/tag_plugin.styl","hash":"cbb49a17fcc030029f0c2fbe1e056613109d1ecc","modified":1599451061000},{"_id":"themes/fluid/source/css/_pages/_post/post.styl","hash":"1e7e4290a7653f748e0a46c81cc6aed4564f8bf4","modified":1599451061000},{"_id":"themes/fluid/source/css/_pages/_tag/tags.styl","hash":"65bfc01c76abc927fa1a23bf2422892b0d566c3f","modified":1599451061000},{"_id":"themes/fluid/source/css/_pages/_category/categories.styl","hash":"1ab7db37c2f7dc7ccdb994dcb41c16a4c8920397","modified":1599451061000},{"_id":"themes/fluid/source/css/_pages/_index/index.styl","hash":"c443551deb389102e65cbb2441f60e8c20712ee8","modified":1599451061000},{"_id":"themes/fluid/source/css/_pages/_links/links.styl","hash":"cd4ebb1426abed9fda93b797b02c6d5dd71dc2a1","modified":1599451061000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/banner.styl","hash":"ec4e9678d2f4df03b1ad773adf57acc83a947687","modified":1599451061000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/footer.styl","hash":"6b8340a41afc6b6e5f30dc9e912a0e0265446963","modified":1599451061000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/board.styl","hash":"32d90bcc8bf2fd5d8d78e86a567973d4b69bcfa1","modified":1599451061000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/copy-btn.styl","hash":"2c9e05a354d4be820646a1c99f814740f299ed37","modified":1599451061000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/footnote.styl","hash":"ae9289cc89649af2042907f8a003303b987f3404","modified":1599451061000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/header.styl","hash":"7c8170d0e2de47570fe8ed523f10ee1c33138a9f","modified":1599451061000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/qrcode.styl","hash":"fe74d031acef4403e1510d4cce5bc7accd641780","modified":1599451061000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/scroll-btn.styl","hash":"e4ad804ab26bdbf5b55abbc5548b6db395cfed04","modified":1599451061000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/search.styl","hash":"10f7e91a91e681fb9fe46f9df7707b9ef78707c8","modified":1599451061000},{"_id":"public/local-search.xml","hash":"d93e0250b7215b2265a1c9a1bac4efe3b5323fcb","modified":1603694774729},{"_id":"public/about/index.html","hash":"4e9edf1455766f4a8d6bfd76aaf491dde448d4f7","modified":1603694774729},{"_id":"public/2020/09/23/iOS/Notification-Programming-Topics/index.html","hash":"af8cb8292f070cfff0b4bb22aee79eb786f376a6","modified":1603694774729},{"_id":"public/2020/09/23/iOS/iOS-App包瘦身方案/index.html","hash":"55ef789c671e3f5cb4a93bccbd15e817f4e8c882","modified":1603694774729},{"_id":"public/2020/09/23/iOS/iOS-编程指南-(部分官翻)/index.html","hash":"ef5a4cf687b7b3dc0dad026a668e7e19b39fb450","modified":1603694774729},{"_id":"public/2020/09/23/工具/MacOS-系统更新后-Cocoapods失效问题/index.html","hash":"93aa98fd33f3cc628e6ba1db9c0faf3322fcfff7","modified":1603694774729},{"_id":"public/2020/09/23/工具/如何退出-macOS-beta-计划/index.html","hash":"5c63d1715d031be8c495057796812e5f49178341","modified":1603694774729},{"_id":"public/2020/09/23/Swift/-Swift---4-闭包/index.html","hash":"1f99853a050ee0bd4145e7eb2644c2be118daa9e","modified":1603694774729},{"_id":"public/2020/09/23/Swift/Swift---4-Checking-API-Availability/index.html","hash":"87e5a6f1371fd7b36882cb6e2553304d8bf40abc","modified":1603694774729},{"_id":"public/2020/09/23/Swift/Swift---4-协议/index.html","hash":"489dafc5e8842eaa41edf06ff273fee99afcfe06","modified":1603694774729},{"_id":"public/2020/09/23/Swift/Swift---4-构造器/index.html","hash":"74a2785aa70a1e88909702efe12a42b22af71fcd","modified":1603694774729},{"_id":"public/2020/09/23/Swift/Swift-4---String/index.html","hash":"95fa881683c353e67eef5670df9559d150556081","modified":1603694774729},{"_id":"public/2020/09/23/Swift/Swift-4---guard语句/index.html","hash":"0d80ba6d6fddd1b361bb1a395e51a059e3beac2f","modified":1603694774729},{"_id":"public/2020/09/23/Swift/Swift-4---nil/index.html","hash":"d608ccb6b2babcc1f4ceee3514fe702558420dbe","modified":1603694774729},{"_id":"public/2020/09/23/Swift/Swift-4---元组/index.html","hash":"4a8a78f170583001dd899c5d99026c7db22d506d","modified":1603694774729},{"_id":"public/2020/09/23/Swift/Swift-4---断言/index.html","hash":"78d08c63dc23260e96059ca0997f044a476f5b61","modified":1603694774729},{"_id":"public/2020/09/23/Swift/Swift-4---错误处理/index.html","hash":"d0da8041d3e1215374b64ca75a6ee2b9e14ea7b2","modified":1603694774729},{"_id":"public/2020/09/23/Swift/Swift-项目桥接OC第三方库/index.html","hash":"306802dfcb86bee0a812b07d32792831d84339cb","modified":1603694774729},{"_id":"public/2018/12/12/Linux/Vim常用命令/index.html","hash":"d97dfcdc07dea38109a102ba291510f60f7a2184","modified":1603694774729},{"_id":"public/2018/03/09/Linux/Shell-Script/index.html","hash":"61fa1596b62fa5493bd033cd89604576c43d2254","modified":1603694774729},{"_id":"public/2018/02/11/随笔/天路旅途（三）/index.html","hash":"dce4e575d37a2597bbf906b972f44bdbb3941392","modified":1603694774729},{"_id":"public/2018/01/05/iOS/常用算法/index.html","hash":"66df4b57646e86e2b7ce16bbdc4268eeddc0ead8","modified":1603694774729},{"_id":"public/2017/10/15/随笔/天路旅途（一）/index.html","hash":"3d73356323c47309b5fefac35194fff9a7b501bf","modified":1603694774729},{"_id":"public/2017/10/10/iOS/Xcode-module-compiled-with-Swift-3-1-cannot-be-imported-in-Swift-3-2--/index.html","hash":"9d65d6653f8d8420d0f9bcb3be91706c71f7093e","modified":1603694774729},{"_id":"public/2017/05/16/iOS/iOS友盟第三方登录/index.html","hash":"59b6308a993b8ded12e6597187403c60c9fceeb5","modified":1603694774729},{"_id":"public/2017/03/17/iOS/iOS自动打包Shell脚本文件/index.html","hash":"fee2997eb38ca8255656a27196041133243c920f","modified":1603694774729},{"_id":"public/2017/03/16/工具/常用正则表达式/index.html","hash":"3f8bef6d2de4efef5ccf6a1a93ecf0c6746390a0","modified":1603694774729},{"_id":"public/2017/03/16/PHP/mac-XAMPP环境下,-使用php函数mkdir()添加新目录(文件)报错,报错信息-permission-denied;/index.html","hash":"98c2a5503e72b8ccd4e2826d3aa6b32b1c273055","modified":1603694774729},{"_id":"public/2017/03/16/iOS/swift如何设置Debug模式下的打印输出/index.html","hash":"8aaa0b206d6e76cca4d02166c1591af478ff0a63","modified":1603694774729},{"_id":"public/archives/index.html","hash":"65e2d585f4cff630fe7e16139c8c606357499d38","modified":1603694774729},{"_id":"public/archives/page/2/index.html","hash":"a22b25bbc00f287f8b215399cd3331b629597cd3","modified":1603694774729},{"_id":"public/archives/page/3/index.html","hash":"995cba2896b900c871adea5244d2e85bd02d0456","modified":1603694774729},{"_id":"public/archives/page/4/index.html","hash":"f7434a2258f4094c7087a5abf51102b75d244a2a","modified":1603694774729},{"_id":"public/archives/page/5/index.html","hash":"e35d740d0ad70e01a74d20d49fc6923ddbbe009f","modified":1603694774729},{"_id":"public/archives/2017/index.html","hash":"bc0b42756e6c719f7b8ba4b4ca9fd267509ca436","modified":1603694774729},{"_id":"public/archives/2017/page/2/index.html","hash":"f4ef5ae19c6d19be8f9acfd3d7249fed710fc664","modified":1603694774729},{"_id":"public/archives/2017/03/index.html","hash":"882ab45482f2de519ec766dab7a5759c63da1695","modified":1603694774729},{"_id":"public/archives/2017/05/index.html","hash":"73febeb82711e6315a2809e7b6d563b63d91fd86","modified":1603694774729},{"_id":"public/archives/2017/10/index.html","hash":"07ef2d311f236ab78a6c005cd2961ea6cf1efdbb","modified":1603694774729},{"_id":"public/archives/2017/11/index.html","hash":"d0c1e8f9c4cb3f7480bebc7f811b6972a73a3a66","modified":1603694774729},{"_id":"public/archives/2017/12/index.html","hash":"ead0e2d6475bb232d545aeac66013afe0c472052","modified":1603694774729},{"_id":"public/archives/2018/index.html","hash":"134887a444ac6a862c9fd0f0aa5ef9864b7d3a7c","modified":1603694774729},{"_id":"public/archives/2018/page/2/index.html","hash":"ec93a73703f1056b5f9cdb4914d13c523a2bbfaa","modified":1603694774729},{"_id":"public/archives/2018/01/index.html","hash":"05e273e64d5140777b928118393efb9a8071d071","modified":1603694774729},{"_id":"public/archives/2018/02/index.html","hash":"93d5e119ce5b1b95b3f5d5d866113ce4fda7b955","modified":1603694774729},{"_id":"public/archives/2018/03/index.html","hash":"77a3cd92216846ee865433171b4056a3363a577a","modified":1603694774729},{"_id":"public/archives/2018/04/index.html","hash":"cd5d2b2b717cc1b33f1e7c1058faeb27d2acb054","modified":1603694774729},{"_id":"public/archives/2018/08/index.html","hash":"7eb26f8a585fb8835d8e89f98cdb03ab7c1a481f","modified":1603694774729},{"_id":"public/archives/2018/11/index.html","hash":"c1b2aad2d25f9f2bd7c830b1310e329d9f71e0cd","modified":1603694774729},{"_id":"public/archives/2018/12/index.html","hash":"3f2e5c2f41c9d2d2baace03a1a83b919654e3797","modified":1603694774729},{"_id":"public/archives/2019/index.html","hash":"137c34ac0948df1917acbaca88b9e4bac103de26","modified":1603694774729},{"_id":"public/archives/2019/01/index.html","hash":"3bb93d7805eab8d1ae2c641fe79aba00f46cb4d8","modified":1603694774729},{"_id":"public/archives/2019/03/index.html","hash":"6d46851165e57fa2358f38d35e4bd2ae1251a121","modified":1603694774729},{"_id":"public/archives/2019/05/index.html","hash":"fe09ee48edbded48bb9d564c70dbb88b9f6fadb9","modified":1603694774729},{"_id":"public/archives/2020/index.html","hash":"761b54e677fdd448020767e776ba77a4ab859014","modified":1603694774729},{"_id":"public/archives/2020/03/index.html","hash":"56cfcf502b8b4980350c907860243b0c53089b58","modified":1603694774729},{"_id":"public/archives/2020/09/index.html","hash":"ef7bfeba1b8e5c9d0151dc4db5827bbaae031921","modified":1603694774729},{"_id":"public/categories/Linux/index.html","hash":"3788503adecddc92f406c4b17f15ff32fc69dcf4","modified":1603694774729},{"_id":"public/categories/PHP/index.html","hash":"259f31cdb187a86ea8647db75296f9f03c8111b2","modified":1603694774729},{"_id":"public/categories/Linux/文件及权限命令/index.html","hash":"00fe26a342f3f3a18aa16a6d1092103f124e273c","modified":1603694774729},{"_id":"public/categories/Swift/index.html","hash":"e97686c375b225f7261e64d1a53d5afc7c03a453","modified":1603694774729},{"_id":"public/categories/Linux/Shell/index.html","hash":"4f83a0abdfbc218d570611158eb99e41a6dc7b2c","modified":1603694774729},{"_id":"public/categories/Linux/Vim/index.html","hash":"c1fdf2ed08405e46391f58e9e73f8a9ad9f7d1f3","modified":1603694774729},{"_id":"public/categories/PHP/XAMPP/index.html","hash":"6418c317b7592d49a7370b68f0ff2e57b4717c17","modified":1603694774729},{"_id":"public/categories/iOS/index.html","hash":"525f3d39b2f3f98f10a70e705112213e1a9e5fe4","modified":1603694774729},{"_id":"public/categories/iOS/page/2/index.html","hash":"e73c5a1ee7bacaf2150dcc5ee8059fb6c7242a16","modified":1603694774729},{"_id":"public/categories/iOS/page/3/index.html","hash":"9b40a65be964f8d41f63ce80c87e63972f255975","modified":1603694774729},{"_id":"public/categories/工具/index.html","hash":"b932239f368cf1117aa3efddd7209e7ef9af0180","modified":1603694774729},{"_id":"public/categories/计算机基础/index.html","hash":"c318fb2f0a9975492c960eb32d51c1ca4793c717","modified":1603694774729},{"_id":"public/categories/随笔/index.html","hash":"8dc9bf183cc96faf32b7871f794353b4d0d28aa7","modified":1603694774729},{"_id":"public/tags/Linux/index.html","hash":"f5a06e92ea441fbbefeff9d82df605890ae6d142","modified":1603694774729},{"_id":"public/tags/Shell/index.html","hash":"2021e937d9a39e470a9081e7b678818240a60086","modified":1603694774729},{"_id":"public/tags/PHP/index.html","hash":"25ba03a07cf4d3c3f0467da3994137696e8864da","modified":1603694774729},{"_id":"public/tags/Swift/index.html","hash":"328cafbb7588b67bf1788e532ba8e3adb0610ef8","modified":1603694774729},{"_id":"public/tags/iOS/index.html","hash":"89249337d14a68126ed0f1595b57326577822112","modified":1603694774729},{"_id":"public/tags/切面编程/index.html","hash":"983107001dbeb0dbf9905e9f695eb5505e6d4072","modified":1603694774729},{"_id":"public/tags/CoreAnimation/index.html","hash":"35ca96ea3afb7559af7c70f796eb110ca89f72a5","modified":1603694774729},{"_id":"public/tags/CoreGraphics/index.html","hash":"63787d44e27c0f0627e5162e66561f80ff1c9b27","modified":1603694774729},{"_id":"public/tags/CoreNFC/index.html","hash":"b10ed561163a904302945308c41b65846bb41444","modified":1603694774729},{"_id":"public/tags/DispatchQueue/index.html","hash":"a8f70a9dae1c0182952129f286fe8d0fa4e4a0f4","modified":1603694774729},{"_id":"public/tags/JavaScriptCore/index.html","hash":"b6bbfbea84e3bd74c373ba271f3eb4d11de81e13","modified":1603694774729},{"_id":"public/tags/WebView/index.html","hash":"9aa8dad682fcb26a68aceb374451315abd16b5c6","modified":1603694774729},{"_id":"public/tags/KVC/index.html","hash":"b13f7dfb95424afc41d6f1dd8154d13a6bcf5804","modified":1603694774729},{"_id":"public/tags/Layout/index.html","hash":"9208c3b93fe8dbce4f959afe0204d086ecb53195","modified":1603694774729},{"_id":"public/tags/Notification/index.html","hash":"87d04ba85d6c5222ca199965fea3dbced22ea55e","modified":1603694774729},{"_id":"public/tags/UITextView/index.html","hash":"3ca4a38ae395d9c52abcbaccf73ec2567ad24e1e","modified":1603694774729},{"_id":"public/tags/AutoLayout/index.html","hash":"8bb927788d463df2823388fc203c99b5e3f2a22b","modified":1603694774729},{"_id":"public/tags/Xcode/index.html","hash":"fe5c9805563a63a950760301955313c15595c1e5","modified":1603694774729},{"_id":"public/tags/YYCategories/index.html","hash":"285b614b979f2f8866ca98214edd9a3eee9652b3","modified":1603694774729},{"_id":"public/tags/应用瘦身/index.html","hash":"315668539d160352c3b6e69b456c09f4af346fc3","modified":1603694774729},{"_id":"public/tags/Router/index.html","hash":"7aa57a2052bae8febd3a575633202bb04f990e04","modified":1603694774729},{"_id":"public/tags/编程指南/index.html","hash":"bd919c677ef87b614159a01cfba4fc9da30ab9da","modified":1603694774729},{"_id":"public/tags/友盟/index.html","hash":"a081f04b15e422312b7ae0ab3abe3efe9e970e8f","modified":1603694774729},{"_id":"public/tags/自动打包/index.html","hash":"146cac4aa76cea8693d446ad3fcac21e3ca6ffdc","modified":1603694774729},{"_id":"public/tags/算法/index.html","hash":"b35413d0e89303b6d67229bbd355320585c6cc27","modified":1603694774729},{"_id":"public/tags/依赖管理/index.html","hash":"ec1055eb328767b5bc3b9c966dbb5785acb61686","modified":1603694774729},{"_id":"public/tags/Git/index.html","hash":"8dd9d4259224b30ee1ea16d25187a9f48bf59aa9","modified":1603694774729},{"_id":"public/tags/SSH/index.html","hash":"501d0c750c1f7403dd682a4567caee4ac33fa322","modified":1603694774729},{"_id":"public/tags/SVN/index.html","hash":"360ed40040560d3a02cdb2df9505333f0802a7b4","modified":1603694774729},{"_id":"public/tags/Mac/index.html","hash":"0908a6b07bfda535c3a0a600109f36e34b456e89","modified":1603694774729},{"_id":"public/tags/CocoaPods/index.html","hash":"43e78c10561467a02c22c835dce6facd066106b6","modified":1603694774729},{"_id":"public/tags/fastlane/index.html","hash":"cc81232f5fb9270d39c972d45a8720a24571cae8","modified":1603694774729},{"_id":"public/tags/证书/index.html","hash":"0cc69e32af47fd2e6b656557083e858ea9d41f4d","modified":1603694774729},{"_id":"public/tags/MacOS/index.html","hash":"5527567ce579b9981899037ae7d58a4de24b8db8","modified":1603694774729},{"_id":"public/tags/正则表达式/index.html","hash":"c24c44380978cb99d63780346981861f29358a9f","modified":1603694774729},{"_id":"public/tags/数据结构/index.html","hash":"691829ea6fe5aefd30bea24feb62bdca89e0b45b","modified":1603694774729},{"_id":"public/tags/编译/index.html","hash":"3960d6748466987cf9252e8f7efcf8ca6892689c","modified":1603694774729},{"_id":"public/tags/旅游/index.html","hash":"deb2ba1873bf52a571bd65696b46a726a5dfedaf","modified":1603694774729},{"_id":"public/tags/runtime/index.html","hash":"557a942904cb035c9c1d61db8f5bce41c48c616f","modified":1603694774729},{"_id":"public/tags/Block/index.html","hash":"95fe7b60e72fa092b176068363d4b29376b2cd74","modified":1603694774729},{"_id":"public/tags/CoreBluetooth/index.html","hash":"80850e23faa80b32bcd95c387690d86b0a548226","modified":1603694774729},{"_id":"public/tags/KVO/index.html","hash":"1c8a24022af3bab511e41b8b053cd25c280912db","modified":1603694774729},{"_id":"public/tags/PhotoKit/index.html","hash":"f6dccae08c54556186ab543735f300708ef18ef6","modified":1603694774729},{"_id":"public/tags/Runtime/index.html","hash":"d2381823c2a86c066f97c69a3a59a35b666f587e","modified":1603694774729},{"_id":"public/404.html","hash":"6dc1e485ca28c4f843a74ce17e1de9633768fad4","modified":1603694774729},{"_id":"public/tags/index.html","hash":"f4c0ff9ff4659737c038d39cd9aac9a85088e442","modified":1603694774729},{"_id":"public/links/index.html","hash":"c62af03a56f5cb65591c4ab2e47d9e78e6c2386a","modified":1603694774729},{"_id":"public/2020/09/23/Swift/Swift---4-函数/index.html","hash":"6aa936c49127f4d22b3c2b674bdf371a24ddafec","modified":1603694774729},{"_id":"public/2020/03/30/iOS/Apple登录集成/index.html","hash":"9924eb7ec21b4e8be92c0df047789093f3d5995a","modified":1603694774729},{"_id":"public/2019/05/08/工具/fastlane--自动打包上传/index.html","hash":"2d5784d15c244c53cf46e94074eb75bdc6ae106e","modified":1603694774729},{"_id":"public/2019/05/22/工具/Carthage-安装/index.html","hash":"771781de9739c44b4510f0240c4db844e220904c","modified":1603694774729},{"_id":"public/2019/03/14/计算机基础/数据结构/index.html","hash":"8ce764ece4ed1381c29f7b862c378040c2a9f630","modified":1603694774729},{"_id":"public/2019/03/14/计算机基础/编译原理/index.html","hash":"18f3357483f1a82a1bae5b8679fad13ebae406b8","modified":1603694774729},{"_id":"public/2019/03/14/iOS/Core-Graphics/index.html","hash":"55ac207925d73434bb96ea3f72db2963abdb536e","modified":1603694774729},{"_id":"public/2019/03/13/iOS/PhotoKit/index.html","hash":"1a1296eb9bcd1087a0b2fe9766926fe16f6086df","modified":1603694774729},{"_id":"public/2019/01/11/iOS/TextView-高度自适应/index.html","hash":"5c4da88e27b56b30f3129fd49b89789dcd9f9e6f","modified":1603694774729},{"_id":"public/2018/12/11/Linux/Linux-文件命令/index.html","hash":"06e7ffcf9da7d9b4c102eb3fd5b5f3232055353f","modified":1603694774729},{"_id":"public/2018/11/22/iOS/XIB--或者-AutoLayout-实现Cell高度自适应/index.html","hash":"8b7678a38d72431a65c2319fb9bd9b5dfd104df4","modified":1603694774729},{"_id":"public/2018/08/28/工具/Git-常用命令/index.html","hash":"1e730069b528b2d3890d3c71c168919a60ef089b","modified":1603694774729},{"_id":"public/2018/08/25/随笔/天路旅途-(四)/index.html","hash":"558dfb8ec5961bf17b454e1d3573379a23cc16cb","modified":1603694774729},{"_id":"public/2018/08/17/Swift/Swift---4-Codable/index.html","hash":"f915bc2abd7d198e65f7a4f8ac210d413708af1a","modified":1603694774729},{"_id":"public/2018/04/27/iOS/CALayer-和-CAAnimation/index.html","hash":"98c9b309b8cda2e692a9f811d3c66b5e0d1de86f","modified":1603694774729},{"_id":"public/2018/03/29/iOS/Aspects-简介与原理简析/index.html","hash":"86b06a7fc5992ee03af83cb096cc879713691e6b","modified":1603694774729},{"_id":"public/2018/03/15/iOS/KVC-编程指南/index.html","hash":"184dca39459c5c9582fde5f4c9f069840d630a36","modified":1603694774729},{"_id":"public/2018/03/12/工具/Git使用SSH-公钥认证/index.html","hash":"e6625ba4d263ac068b8fef6a1943a3c40d052f93","modified":1603694774729},{"_id":"public/2018/02/09/iOS/YYCategories-源码分析/index.html","hash":"9f9b26b5735b6ca4b603a0b1367953131c1a2dbe","modified":1603694774729},{"_id":"public/2018/02/06/iOS/JavaScriptCore/index.html","hash":"2750760eaff8b69b11846b8671ed96dca818bdd6","modified":1603694774729},{"_id":"public/2018/01/16/iOS/Runtime-编程指南/index.html","hash":"4870a14cd30e792a850033af6c85a6e78d62c2ea","modified":1603694774729},{"_id":"public/2018/01/03/iOS/Core-Bluetooth-编程指南/index.html","hash":"01a0425f602f7f2057199f788c59e0e197201929","modified":1603694774729},{"_id":"public/2017/12/19/iOS/Block-编程/index.html","hash":"13d17439f68893b5ca52a6b02310201f502bacd3","modified":1603694774729},{"_id":"public/2017/12/17/iOS/KVO/index.html","hash":"e8a1866f519f0ee7860daf719f0398bee760e71b","modified":1603694774729},{"_id":"public/2017/12/10/iOS/KVC/index.html","hash":"be050d0755db6c0da2a95c909231eac391160c3f","modified":1603694774729},{"_id":"public/2017/11/26/iOS/iOS-Router/index.html","hash":"4f62d92d503b1e8b02d8164e0d7dcb6079cba9a6","modified":1603694774729},{"_id":"public/2017/11/20/iOS/-Objective-C-Runtime/index.html","hash":"61dd41b66d942f97ad9dd25d885da4aa3f6c906c","modified":1603694774729},{"_id":"public/2017/11/07/iOS/JavaScriptCore与WebView/index.html","hash":"acf5ccf26e732000fdcc30353b2c201350c6f1c0","modified":1603694774729},{"_id":"public/2017/10/30/iOS/CoreNFC/index.html","hash":"e680070e679d0319da6731b5cbdf6a7ec99be8c8","modified":1603694774729},{"_id":"public/2017/10/27/iOS/Dispatch/index.html","hash":"66be022b7ac22fbe07949822c429316c958d872a","modified":1603694774729},{"_id":"public/2017/10/19/iOS/NSLayoutConstraint/index.html","hash":"90604914f278d0996d80ce94c5f99597ef067257","modified":1603694774729},{"_id":"public/2017/10/15/随笔/天路旅途（二）/index.html","hash":"33c71d2e30db720b29db905e24604aa7ce7bbfb9","modified":1603694774729},{"_id":"public/2017/05/18/工具/CocoaPods/index.html","hash":"74aa9dcb357a1a02d6f3e85260cb87fae9bdc469","modified":1603694774729},{"_id":"public/2017/03/16/工具/iOS账号续费及证书更新流程/index.html","hash":"5525acb4afbf8693d4c60fe4bc1a8e51809df6e9","modified":1603694774729},{"_id":"public/2017/03/16/工具/MAC-svn-配置及cornerstone/index.html","hash":"9e4734175a94891a6479745610dd015c9df2e19b","modified":1603694774729},{"_id":"public/index.html","hash":"fb97b712be1a5de3f47eb4111cc494bb5c261c76","modified":1603694774729},{"_id":"public/page/2/index.html","hash":"35c5e7e81717c6f10ca1ac5463aaa728073b7e38","modified":1603694774729},{"_id":"public/page/3/index.html","hash":"cd5b1fa4ebe46a9ebe513e036cdcd09f04166488","modified":1603694774729},{"_id":"public/page/4/index.html","hash":"d0c63a66b14b01e7e7e524dbe88a2c7ce941ca9f","modified":1603694774729},{"_id":"public/page/5/index.html","hash":"cf5c7e50a235fcda03d02a0fef4ecd79a4cc6754","modified":1603694774729},{"_id":"public/categories/index.html","hash":"39964ce2dec1636dcf23b45e4722cc744cd32a0a","modified":1603694774729},{"_id":"public/img/avatar.png","hash":"fe739a158cc128f70f780eb5fa96f388b81d478f","modified":1603694774729},{"_id":"public/img/loading.gif","hash":"2d2fc0f947940f98c21afafef39ecf226a2e8d55","modified":1603694774729},{"_id":"public/img/favicon.png","hash":"64b215db2cb3af98fe639e94537cb5209f959c78","modified":1603694774729},{"_id":"public/img/police_beian.png","hash":"90efded6baa2dde599a9d6b1387973e8e64923ea","modified":1603694774729},{"_id":"public/img/default.png","hash":"7bb2b8ee07db305bcadee2985b81b942027ae940","modified":1603694774729},{"_id":"public/xml/local-search.xml","hash":"8c96ba6a064705602ce28d096fd7dd9069630a55","modified":1603694774729},{"_id":"public/js/clipboard-use.js","hash":"f0ffe3df1deeb3cc36adfee2ab839368fb28d1c9","modified":1603694774729},{"_id":"public/js/color-schema.js","hash":"03d5315b752cd3e13749cca790783a1e1cfab0a8","modified":1603694774729},{"_id":"public/js/debouncer.js","hash":"045f324777bdfb99d4c17b1806169f029f897a65","modified":1603694774729},{"_id":"public/js/local-search.js","hash":"13d5ef2fe68c49bd6096781034dbb26c190b5176","modified":1603694774729},{"_id":"public/js/lazyload.js","hash":"792deca48c12512d3e612f0de092ffcff3ca3e34","modified":1603694774729},{"_id":"public/js/main.js","hash":"a6def6368d288892088f78fd401e7170e3e81a13","modified":1603694774729},{"_id":"public/js/utils.js","hash":"9b06e2e2a2bb92e27d15a700f28f880317c25cfa","modified":1603694774729},{"_id":"public/lib/hint/hint.min.css","hash":"b38df228460ebfb4c0b6085336ee2878fe85aafe","modified":1603694774729},{"_id":"public/css/main.css","hash":"e0ae8bb467a0130d91334051cdd930d95c353537","modified":1603694774729}],"Category":[{"name":"Linux","_id":"ckgq6gnw50005t29k4ixm81qb"},{"name":"PHP","_id":"ckgq6gnwe000ht29kd9bgbon2"},{"name":"文件及权限命令","parent":"ckgq6gnw50005t29k4ixm81qb","_id":"ckgq6gnwg000ot29k04agg5lp"},{"name":"Swift","_id":"ckgq6gnwi000tt29ke45jchh7"},{"name":"Shell","parent":"ckgq6gnw50005t29k4ixm81qb","_id":"ckgq6gnwp0018t29k87raawgl"},{"name":"Vim","parent":"ckgq6gnw50005t29k4ixm81qb","_id":"ckgq6gnx2001vt29k3w8k1aj7"},{"name":"XAMPP","parent":"ckgq6gnwe000ht29kd9bgbon2","_id":"ckgq6gnx8002ft29kbnpn9mz7"},{"name":"iOS","_id":"ckgq6gnxi0039t29kbcvy857k"},{"name":"工具","_id":"ckgq6gny90061t29k0d9o331q"},{"name":"计算机基础","_id":"ckgq6gnyi0074t29k3g8bfjia"},{"name":"随笔","_id":"ckgq6gnyj007bt29k78xfb4bg"}],"Data":[{"_id":"fluid_static_prefix","data":{"internal_js":"/js","internal_css":"/css","internal_img":"/img","iconfont":"//at.alicdn.com/t/font_1736178_kmeydafke9r.css","anchor":"https://cdn.staticfile.org/anchor-js/4.2.2/","github_markdown":"https://cdn.staticfile.org/github-markdown-css/4.0.0/","jquery":"https://cdn.staticfile.org/jquery/3.4.1/","bootstrap":"https://cdn.staticfile.org/twitter-bootstrap/4.4.1/","highlightjs":"https://cdn.staticfile.org/highlight.js/10.0.0/","prismjs":"https://cdn.staticfile.org/prism/1.21.0/","tocbot":"https://cdn.staticfile.org/tocbot/4.11.1/","typed":"https://cdn.staticfile.org/typed.js/2.0.11/","fancybox":"https://cdn.staticfile.org/fancybox/3.5.7/","mathjax":"https://cdn.staticfile.org/mathjax/3.0.5/es5/","katex":"https://cdn.staticfile.org/KaTeX/0.11.1/","aplayer":"https://cdn.staticfile.org/aplayer/1.10.1/","busuanzi":"https://busuanzi.ibruce.info/busuanzi/2.3/","clipboard":"https://cdn.staticfile.org/clipboard.js/2.0.6/","mermaid":"https://cdn.staticfile.org/mermaid/8.5.0/","valine":"https://cdn.staticfile.org/valine/1.4.14/","gitalk":"https://cdn.staticfile.org/gitalk/1.6.2/","blueimp_md5":"https://cdn.staticfile.org/blueimp-md5/2.13.0/","disqusjs":"https://cdn.jsdelivr.net/npm/disqusjs@1.0/dist/","hint":"/lib/hint/"}},{"_id":"fluid_config","data":{"favicon":"/img/favicon.png","apple_touch_icon":"/img/favicon.png","title_join_string":" - ","force_https":false,"code":{"copy_btn":true,"highlight":{"enable":true,"lib":"highlightjs","highlightjs":{"style":"Github Gist","bg_color":false},"prismjs":{"style":"default","preprocess":true}}},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"_","loop":false},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"right","visible":"hover","icon":""},"mouse_click":{"enable":false,"style":"values"}},"dark_mode":{"enable":true,"default":"auto"},"color":{"body_bg_color":"#eee","body_bg_color_dark":"#181c27","navbar_bg_color":"#2f4154","navbar_bg_color_dark":"#1f3144","navbar_text_color":"#fff","navbar_text_color_dark":"#d0d0d0","text_color":"#3c4858","text_color_dark":"#c4c6c9","sec_text_color":"#718096","sec_text_color_dark":"#a7a9ad","post_text_color":"#2c3e50","post_text_color_dark":"#c4c6c9","post_heading_color":"#1a202c","post_heading_color_dark":"#c4c6c9","post_link_color":"#0366d6","post_link_color_dark":"#1589e9","link_hover_color":"#30a9de","link_hover_color_dark":"#30a9de","link_hover_bg_color":"#f8f9fa","link_hover_bg_color_dark":"#364151","board_color":"#fff","board_color_dark":"#252d38"},"font":{"font_size":"16px","font_family":null,"code_font_size":"85%"},"custom_js":null,"custom_css":null,"custom_html":"","web_analytics":{"enable":false,"baidu":null,"google":null,"gtag":null,"tencent":{"sid":null,"cid":null},"woyaola":null,"cnzz":null,"leancloud":{"app_id":null,"app_key":null,"server_url":null}},"lazyload":{"enable":true,"onlypost":false},"daovoice":{"enable":false,"appid":""},"aplayer":{"enable":false,"autoplay":false,"loop":"all","order":"random","theme":"#b7daff","songs":[{"name":"name","artist":"artist","url":"/songs/test.mp3","cover":"/img/cover.jpg"},{"name":"name","artist":"artist","url":"https://...url.mp3","cover":"https://...cover.jpg"}]},"version":{"check":false},"navbar":{"blog_title":"吃面多放葱","ground_glass":{"enable":false,"px":3,"alpha":0.7},"menu":[{"key":"home","link":"/","icon":"iconfont icon-home-fill"},{"key":"category","link":"/categories/","icon":"iconfont icon-category-fill"},{"key":"tag","link":"/tags/","icon":"iconfont icon-tags-fill"},{"key":"about","link":"/about/","icon":"iconfont icon-user-fill"}]},"search":{"enable":true,"path":"/local-search.xml","generate_path":"/local-search.xml","field":"post","content":true},"scroll_down_arrow":{"enable":true,"banner_height_limit":90,"scroll_after_turning_page":true},"banner_parallax":true,"footer":{"statistics":{"enable":false,"source":"busuanzi","pv_format":"总访问量 {} 次","uv_format":"总访客数 {} 人"},"beian":{"enable":false,"icp_text":"京ICP证123456号","police_text":"京公网安备12345678号","police_code":12345678,"police_icon":"/img/police_beian.png"}},"scroll_top_arrow":{"enable":true},"index":{"banner_img":"/img/default.png","banner_img_height":100,"banner_mask_alpha":0.3,"post_default_img":"","slogan":{"enable":true,"text":"像蚂蚁一样工作，像蝴蝶一样生活"},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"category":true,"tag":true}},"page":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3},"post":{"banner_img":"/img/default.png","banner_img_height":70,"banner_mask_alpha":0.3,"meta":{"author":{"enable":false},"date":{"enable":true,"format":"LL a"},"wordcount":{"enable":true,"format":"{} 字"},"min2read":{"enable":true,"format":"{} 分钟","words":100},"views":{"enable":false,"source":"busuanzi","format":"{} 次"}},"updated":{"enable":false,"content":"本文最后更新于：","relative":false},"toc":{"enable":true,"headingSelector":"h1,h2,h3,h4,h5,h6","collapseDepth":0},"copyright":{"enable":true,"content":"本博客所有文章除特别声明外，均采用 <a href=\"https://creativecommons.org/licenses/by-sa/4.0/deed.zh\" rel=\"nofollow noopener\">CC BY-SA 4.0 协议</a> ，转载请注明出处！"},"prev_next":{"enable":true},"custom":{"enable":false,"content":"<img src=\"https://octodex.github.com/images/jetpacktocat.png\" class=\"rounded mx-auto d-block mt-5\" style=\"width:150px; height:150px;\">"},"image_zoom":{"enable":true},"footnote":{"enable":true,"header":""},"math":{"enable":false,"specific":false,"engine":"mathjax"},"mermaid":{"enable":false,"specific":false,"options":{"theme":"default"}},"comments":{"enable":false,"type":"disqus"}},"utterances":{"repo":null,"issue_term":"pathname","label":"utterances","theme":"github-light","theme_dark":"github-dark","crossorigin":"anonymous"},"disqus":{"shortname":null,"disqusjs":false,"apikey":null},"gitalk":{"clientID":null,"clientSecret":null,"repo":null,"owner":null,"admin":["name"],"id":"location.pathname","language":"zh-CN","labels":["Gitalk"],"perPage":10,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true},"valine":{"appid":null,"appkey":null,"placeholder":"说点什么","path":"window.location.pathname","avatar":"retro","meta":["nick","mail","link"],"pageSize":10,"lang":"zh-CN","highlight":false,"recordIP":false,"serverURLs":null},"changyan":{"appid":"","appkey":""},"livere":{"uid":""},"remark42":{"host":"https://remark.haoyizebo.com","site_id":"haoyizebo","max_shown_comments":10,"locale":"zh"},"archive":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null},"category":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"post_limit":10,"order_by":"-length","collapse_depth":0},"tag":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null,"tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"avatar":"/img/avatar.png","name":"蔺国防","introduce":"移动应用开发者，历史文学爱好者","icons":[{"class":"iconfont icon-github-fill","link":"https://github.com","tip":"GitHub"},{"class":"iconfont icon-douban-fill","link":"https://douban.com","tip":"豆瓣"},{"class":"iconfont icon-wechat-fill","qrcode":"/img/favicon.png"}]},"page404":{"banner_img":"/img/default.png","banner_img_height":85,"banner_mask_alpha":0.3,"subtitle":"Page not found"},"links":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"items":[{"title":"Fluid Docs","intro":"主题使用指南","link":"https://hexo.fluid-dev.com/docs/","image":"/img/favicon.png"},{"title":"Fluid Repo","intro":"主题 GitHub 仓库","link":"https://github.com/fluid-dev/hexo-theme-fluid","image":"/img/favicon.png"},{"title":"Fluid Example","intro":"主题操作示例","link":"https://hexo.fluid-dev.com/docs/example/","image":"/img/favicon.png"}]}}}],"Page":[{"title":"about","date":"2020-09-23T10:34:03.000Z","layout":"about","_content":"\n支持MarkDown， HTML\n","source":"about/index.md","raw":"---\ntitle: about\ndate: 2020-09-23 18:34:03\nlayout: about\n---\n\n支持MarkDown， HTML\n","updated":"2020-09-23T10:41:10.767Z","path":"about/index.html","comments":1,"_id":"ckgq6gnvw0000t29k0z2uh1rc","content":"<p>支持MarkDown， HTML</p>\n","site":{"data":{"fluid_static_prefix":{"internal_js":"/js","internal_css":"/css","internal_img":"/img","iconfont":"//at.alicdn.com/t/font_1736178_kmeydafke9r.css","anchor":"https://cdn.staticfile.org/anchor-js/4.2.2/","github_markdown":"https://cdn.staticfile.org/github-markdown-css/4.0.0/","jquery":"https://cdn.staticfile.org/jquery/3.4.1/","bootstrap":"https://cdn.staticfile.org/twitter-bootstrap/4.4.1/","highlightjs":"https://cdn.staticfile.org/highlight.js/10.0.0/","prismjs":"https://cdn.staticfile.org/prism/1.21.0/","tocbot":"https://cdn.staticfile.org/tocbot/4.11.1/","typed":"https://cdn.staticfile.org/typed.js/2.0.11/","fancybox":"https://cdn.staticfile.org/fancybox/3.5.7/","mathjax":"https://cdn.staticfile.org/mathjax/3.0.5/es5/","katex":"https://cdn.staticfile.org/KaTeX/0.11.1/","aplayer":"https://cdn.staticfile.org/aplayer/1.10.1/","busuanzi":"https://busuanzi.ibruce.info/busuanzi/2.3/","clipboard":"https://cdn.staticfile.org/clipboard.js/2.0.6/","mermaid":"https://cdn.staticfile.org/mermaid/8.5.0/","valine":"https://cdn.staticfile.org/valine/1.4.14/","gitalk":"https://cdn.staticfile.org/gitalk/1.6.2/","blueimp_md5":"https://cdn.staticfile.org/blueimp-md5/2.13.0/","disqusjs":"https://cdn.jsdelivr.net/npm/disqusjs@1.0/dist/","hint":"/lib/hint/"},"fluid_config":{"favicon":"/img/favicon.png","apple_touch_icon":"/img/favicon.png","title_join_string":" - ","force_https":false,"code":{"copy_btn":true,"highlight":{"enable":true,"lib":"highlightjs","highlightjs":{"style":"Github Gist","bg_color":false},"prismjs":{"style":"default","preprocess":true}}},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"_","loop":false},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"right","visible":"hover","icon":""},"mouse_click":{"enable":false,"style":"values"}},"dark_mode":{"enable":true,"default":"auto"},"color":{"body_bg_color":"#eee","body_bg_color_dark":"#181c27","navbar_bg_color":"#2f4154","navbar_bg_color_dark":"#1f3144","navbar_text_color":"#fff","navbar_text_color_dark":"#d0d0d0","text_color":"#3c4858","text_color_dark":"#c4c6c9","sec_text_color":"#718096","sec_text_color_dark":"#a7a9ad","post_text_color":"#2c3e50","post_text_color_dark":"#c4c6c9","post_heading_color":"#1a202c","post_heading_color_dark":"#c4c6c9","post_link_color":"#0366d6","post_link_color_dark":"#1589e9","link_hover_color":"#30a9de","link_hover_color_dark":"#30a9de","link_hover_bg_color":"#f8f9fa","link_hover_bg_color_dark":"#364151","board_color":"#fff","board_color_dark":"#252d38"},"font":{"font_size":"16px","font_family":null,"code_font_size":"85%"},"custom_js":null,"custom_css":null,"custom_html":"","web_analytics":{"enable":false,"baidu":null,"google":null,"gtag":null,"tencent":{"sid":null,"cid":null},"woyaola":null,"cnzz":null,"leancloud":{"app_id":null,"app_key":null,"server_url":null}},"lazyload":{"enable":true,"onlypost":false},"daovoice":{"enable":false,"appid":""},"aplayer":{"enable":false,"autoplay":false,"loop":"all","order":"random","theme":"#b7daff","songs":[{"name":"name","artist":"artist","url":"/songs/test.mp3","cover":"/img/cover.jpg"},{"name":"name","artist":"artist","url":"https://...url.mp3","cover":"https://...cover.jpg"}]},"version":{"check":false},"navbar":{"blog_title":"吃面多放葱","ground_glass":{"enable":false,"px":3,"alpha":0.7},"menu":[{"key":"home","link":"/","icon":"iconfont icon-home-fill"},{"key":"category","link":"/categories/","icon":"iconfont icon-category-fill"},{"key":"tag","link":"/tags/","icon":"iconfont icon-tags-fill"},{"key":"about","link":"/about/","icon":"iconfont icon-user-fill"}]},"search":{"enable":true,"path":"/local-search.xml","generate_path":"/local-search.xml","field":"post","content":true},"scroll_down_arrow":{"enable":true,"banner_height_limit":90,"scroll_after_turning_page":true},"banner_parallax":true,"footer":{"statistics":{"enable":false,"source":"busuanzi","pv_format":"总访问量 {} 次","uv_format":"总访客数 {} 人"},"beian":{"enable":false,"icp_text":"京ICP证123456号","police_text":"京公网安备12345678号","police_code":12345678,"police_icon":"/img/police_beian.png"}},"scroll_top_arrow":{"enable":true},"index":{"banner_img":"/img/default.png","banner_img_height":100,"banner_mask_alpha":0.3,"post_default_img":"","slogan":{"enable":true,"text":"像蚂蚁一样工作，像蝴蝶一样生活"},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"category":true,"tag":true}},"page":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3},"post":{"banner_img":"/img/default.png","banner_img_height":70,"banner_mask_alpha":0.3,"meta":{"author":{"enable":false},"date":{"enable":true,"format":"LL a"},"wordcount":{"enable":true,"format":"{} 字"},"min2read":{"enable":true,"format":"{} 分钟","words":100},"views":{"enable":false,"source":"busuanzi","format":"{} 次"}},"updated":{"enable":false,"content":"本文最后更新于：","relative":false},"toc":{"enable":true,"headingSelector":"h1,h2,h3,h4,h5,h6","collapseDepth":0},"copyright":{"enable":true,"content":"本博客所有文章除特别声明外，均采用 <a href=\"https://creativecommons.org/licenses/by-sa/4.0/deed.zh\" rel=\"nofollow noopener\">CC BY-SA 4.0 协议</a> ，转载请注明出处！"},"prev_next":{"enable":true},"custom":{"enable":false,"content":"<img src=\"https://octodex.github.com/images/jetpacktocat.png\" class=\"rounded mx-auto d-block mt-5\" style=\"width:150px; height:150px;\">"},"image_zoom":{"enable":true},"footnote":{"enable":true,"header":""},"math":{"enable":false,"specific":false,"engine":"mathjax"},"mermaid":{"enable":false,"specific":false,"options":{"theme":"default"}},"comments":{"enable":false,"type":"disqus"}},"utterances":{"repo":null,"issue_term":"pathname","label":"utterances","theme":"github-light","theme_dark":"github-dark","crossorigin":"anonymous"},"disqus":{"shortname":null,"disqusjs":false,"apikey":null},"gitalk":{"clientID":null,"clientSecret":null,"repo":null,"owner":null,"admin":["name"],"id":"location.pathname","language":"zh-CN","labels":["Gitalk"],"perPage":10,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true},"valine":{"appid":null,"appkey":null,"placeholder":"说点什么","path":"window.location.pathname","avatar":"retro","meta":["nick","mail","link"],"pageSize":10,"lang":"zh-CN","highlight":false,"recordIP":false,"serverURLs":null},"changyan":{"appid":"","appkey":""},"livere":{"uid":""},"remark42":{"host":"https://remark.haoyizebo.com","site_id":"haoyizebo","max_shown_comments":10,"locale":"zh"},"archive":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null},"category":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"post_limit":10,"order_by":"-length","collapse_depth":0},"tag":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null,"tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"avatar":"/img/avatar.png","name":"蔺国防","introduce":"移动应用开发者，历史文学爱好者","icons":[{"class":"iconfont icon-github-fill","link":"https://github.com","tip":"GitHub"},{"class":"iconfont icon-douban-fill","link":"https://douban.com","tip":"豆瓣"},{"class":"iconfont icon-wechat-fill","qrcode":"/img/favicon.png"}]},"page404":{"banner_img":"/img/default.png","banner_img_height":85,"banner_mask_alpha":0.3,"subtitle":"Page not found"},"links":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"items":[{"title":"Fluid Docs","intro":"主题使用指南","link":"https://hexo.fluid-dev.com/docs/","image":"/img/favicon.png"},{"title":"Fluid Repo","intro":"主题 GitHub 仓库","link":"https://github.com/fluid-dev/hexo-theme-fluid","image":"/img/favicon.png"},{"title":"Fluid Example","intro":"主题操作示例","link":"https://hexo.fluid-dev.com/docs/example/","image":"/img/favicon.png"}]}}}},"excerpt":"","more":"<p>支持MarkDown， HTML</p>\n"}],"Post":[{"title":"Linux文件命令","date":"2018-12-11T11:10:00.000Z","_content":"\n## 权限\n```\n-rwxr--r--\n\n//总共9个字符\n//-表示类型,`d`为目录,`-`为文件\n//rwx 表示所有者权限,读写执行\n//r-- 表示所述用户组的权限,只读\n//r--表示其他权限,只读\n\nls -al //查阅文件详细信息\n-rw-r--r-- 1 root   root   239 5 6 13:22 test.txt \n // [文件类型与权限] [文件连接数][所有者账号] [用户组账号] [文件容量 单位 B] [修改日期] [文件名]\n\n```\n## 用户切换\n```\n//切换到root 用户\nsudo -i\n\n//root 切换到指定用户\nsu - username   //注意- 和 用户名之间有空格\n```\n\n## 文件与目录\n```\ncd filePath //切换目录\npwd //打印当前路径\n\n//新建(增加)\nmkdir dirname //新建目录\nmkdir -p test1/test2/test3  //创建多层目录\nmkdir -m 711 test2 //新建权限为rwx--x--x的目录\ntouch filename //创建文件\n\n//删除\nrm filename   //移除文件\nrm -r dirName //移除目录\nrmdir dirname //移除目录\nrmdir -p test1/test2/test3 //连同上层空的目录也一起删除\n\n//复制\ncp  源路径 目标路径\ncp -a sourcefile desfile //完全复制\ncp -i sourcefile desfile  //询问\ncp -r sourcefile desfile  //递归复制\n\n//移动\nmv [-fiu] souce destination\n-f //强制\n-i  //询问是否覆盖\n-u //更新为最新\n\n//修改\n//修改的用户组: groupname在 etc/group 文件中存在\nchgrp [-R] groupname dirname/filename\n\n//修改拥有者:  ownername 在 etc/passwd 文件中存在\nchown ownername dirname/filename\nchown :groupname dirname/filename\nchown ownername:groupname dirname/filename\n\n//修改文件权限\n//数字修改权限  各个权限加权分 r: 4 w: 2 x: 1 \nchmod 777 dirname/filename //-rwxrwxrwx\nchmod 755 dirname/filename //-rwxr-xr-x\n//修改权限(通过字符)\n//chmod      u g o a       + - =      rwx        文件目录\nchmod u=rwx,go=r filename  //-rwxr--r--\nchmod a+w filename   //增加写权限\nchmod a-x filename  //减少执行权限 \n\nbasename  dir/finename  //获取文件名\ndirname  dir/filename  //获取目录名\n\n//修改新建文件和目录的默认权限\numask 002  //owner group others  002表示拿掉others的写权限\n\nroot的umask默认是022\n一般用户umask默认是002\n\n//查看文件类型\nfile filePath \n\n//脚本文件名查找\nwhich command\n//文件查找\nwhereis 文件名\nlocate 文件名或部分文件名\nfind /home -user vbird //查找/home下面属于vbird的文件\nfind  /  name 文件名 //查找文件名\n```\n\n\n\n\n\n\n\n\n\n","source":"_posts/Linux/Linux-文件命令.md","raw":"---\ntitle:  Linux文件命令\ndate:  2018-12-11 19:10\ncategories:\n- [Linux, 文件及权限命令]\ntags: \n- Linux\n---\n\n## 权限\n```\n-rwxr--r--\n\n//总共9个字符\n//-表示类型,`d`为目录,`-`为文件\n//rwx 表示所有者权限,读写执行\n//r-- 表示所述用户组的权限,只读\n//r--表示其他权限,只读\n\nls -al //查阅文件详细信息\n-rw-r--r-- 1 root   root   239 5 6 13:22 test.txt \n // [文件类型与权限] [文件连接数][所有者账号] [用户组账号] [文件容量 单位 B] [修改日期] [文件名]\n\n```\n## 用户切换\n```\n//切换到root 用户\nsudo -i\n\n//root 切换到指定用户\nsu - username   //注意- 和 用户名之间有空格\n```\n\n## 文件与目录\n```\ncd filePath //切换目录\npwd //打印当前路径\n\n//新建(增加)\nmkdir dirname //新建目录\nmkdir -p test1/test2/test3  //创建多层目录\nmkdir -m 711 test2 //新建权限为rwx--x--x的目录\ntouch filename //创建文件\n\n//删除\nrm filename   //移除文件\nrm -r dirName //移除目录\nrmdir dirname //移除目录\nrmdir -p test1/test2/test3 //连同上层空的目录也一起删除\n\n//复制\ncp  源路径 目标路径\ncp -a sourcefile desfile //完全复制\ncp -i sourcefile desfile  //询问\ncp -r sourcefile desfile  //递归复制\n\n//移动\nmv [-fiu] souce destination\n-f //强制\n-i  //询问是否覆盖\n-u //更新为最新\n\n//修改\n//修改的用户组: groupname在 etc/group 文件中存在\nchgrp [-R] groupname dirname/filename\n\n//修改拥有者:  ownername 在 etc/passwd 文件中存在\nchown ownername dirname/filename\nchown :groupname dirname/filename\nchown ownername:groupname dirname/filename\n\n//修改文件权限\n//数字修改权限  各个权限加权分 r: 4 w: 2 x: 1 \nchmod 777 dirname/filename //-rwxrwxrwx\nchmod 755 dirname/filename //-rwxr-xr-x\n//修改权限(通过字符)\n//chmod      u g o a       + - =      rwx        文件目录\nchmod u=rwx,go=r filename  //-rwxr--r--\nchmod a+w filename   //增加写权限\nchmod a-x filename  //减少执行权限 \n\nbasename  dir/finename  //获取文件名\ndirname  dir/filename  //获取目录名\n\n//修改新建文件和目录的默认权限\numask 002  //owner group others  002表示拿掉others的写权限\n\nroot的umask默认是022\n一般用户umask默认是002\n\n//查看文件类型\nfile filePath \n\n//脚本文件名查找\nwhich command\n//文件查找\nwhereis 文件名\nlocate 文件名或部分文件名\nfind /home -user vbird //查找/home下面属于vbird的文件\nfind  /  name 文件名 //查找文件名\n```\n\n\n\n\n\n\n\n\n\n","slug":"Linux/Linux-文件命令","published":1,"updated":"2020-09-27T12:04:23.057Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgq6gnw00001t29k0hxvaawq","content":"<h2 id=\"权限\"><a href=\"#权限\" class=\"headerlink\" title=\"权限\"></a>权限</h2><pre><code class=\"hljs markdown\">-rwxr--r--\n\n//总共9个字符\n//-表示类型,<span class=\"hljs-code\">`d`</span>为目录,<span class=\"hljs-code\">`-`</span>为文件\n//rwx 表示所有者权限,读写执行\n//r-- 表示所述用户组的权限,只读\n//r--表示其他权限,只读\n\nls -al //查阅文件详细信息\n-rw-r--r-- 1 root   root   239 5 6 13:22 test.txt \n // [<span class=\"hljs-string\">文件类型与权限</span>] [<span class=\"hljs-string\">文件连接数</span>][<span class=\"hljs-symbol\">所有者账号</span>] [用户组账号] [文件容量 单位 B] [修改日期] [文件名]\n</code></pre>\n<h2 id=\"用户切换\"><a href=\"#用户切换\" class=\"headerlink\" title=\"用户切换\"></a>用户切换</h2><pre><code class=\"hljs awk\"><span class=\"hljs-regexp\">//</span>切换到root 用户\nsudo -i\n\n<span class=\"hljs-regexp\">//</span>root 切换到指定用户\nsu - username   <span class=\"hljs-regexp\">//</span>注意- 和 用户名之间有空格</code></pre>\n\n<h2 id=\"文件与目录\"><a href=\"#文件与目录\" class=\"headerlink\" title=\"文件与目录\"></a>文件与目录</h2><pre><code class=\"hljs stata\"><span class=\"hljs-keyword\">cd</span> filePath <span class=\"hljs-comment\">//切换目录</span>\n<span class=\"hljs-keyword\">pwd</span> <span class=\"hljs-comment\">//打印当前路径</span>\n\n<span class=\"hljs-comment\">//新建(增加)</span>\n<span class=\"hljs-keyword\">mkdir</span> dirname <span class=\"hljs-comment\">//新建目录</span>\n<span class=\"hljs-keyword\">mkdir</span> -p test1/test2/test3  <span class=\"hljs-comment\">//创建多层目录</span>\n<span class=\"hljs-keyword\">mkdir</span> -<span class=\"hljs-keyword\">m</span> 711 test2 <span class=\"hljs-comment\">//新建权限为rwx--x--x的目录</span>\ntouch filename <span class=\"hljs-comment\">//创建文件</span>\n\n<span class=\"hljs-comment\">//删除</span>\n<span class=\"hljs-keyword\">rm</span> filename   <span class=\"hljs-comment\">//移除文件</span>\n<span class=\"hljs-keyword\">rm</span> -r dirName <span class=\"hljs-comment\">//移除目录</span>\n<span class=\"hljs-keyword\">rmdir</span> dirname <span class=\"hljs-comment\">//移除目录</span>\n<span class=\"hljs-keyword\">rmdir</span> -p test1/test2/test3 <span class=\"hljs-comment\">//连同上层空的目录也一起删除</span>\n\n<span class=\"hljs-comment\">//复制</span>\ncp  源路径 目标路径\ncp -a sourcefile desfile <span class=\"hljs-comment\">//完全复制</span>\ncp -i sourcefile desfile  <span class=\"hljs-comment\">//询问</span>\ncp -r sourcefile desfile  <span class=\"hljs-comment\">//递归复制</span>\n\n<span class=\"hljs-comment\">//移动</span>\nmv [-fiu] souce destination\n-f <span class=\"hljs-comment\">//强制</span>\n-i  <span class=\"hljs-comment\">//询问是否覆盖</span>\n-<span class=\"hljs-keyword\">u</span> <span class=\"hljs-comment\">//更新为最新</span>\n\n<span class=\"hljs-comment\">//修改</span>\n<span class=\"hljs-comment\">//修改的用户组: groupname在 etc/group 文件中存在</span>\nchgrp [-R] groupname dirname/filename\n\n<span class=\"hljs-comment\">//修改拥有者:  ownername 在 etc/passwd 文件中存在</span>\nchown ownername dirname/filename\nchown :groupname dirname/filename\nchown ownername:groupname dirname/filename\n\n<span class=\"hljs-comment\">//修改文件权限</span>\n<span class=\"hljs-comment\">//数字修改权限  各个权限加权分 r: 4 w: 2 x: 1 </span>\nchmod 777 dirname/filename <span class=\"hljs-comment\">//-rwxrwxrwx</span>\nchmod 755 dirname/filename <span class=\"hljs-comment\">//-rwxr-xr-x</span>\n<span class=\"hljs-comment\">//修改权限(通过字符)</span>\n<span class=\"hljs-comment\">//chmod      u g o a       + - =      rwx        文件目录</span>\nchmod <span class=\"hljs-keyword\">u</span>=rwx,go=r filename  <span class=\"hljs-comment\">//-rwxr--r--</span>\nchmod a+w filename   <span class=\"hljs-comment\">//增加写权限</span>\nchmod a-x filename  <span class=\"hljs-comment\">//减少执行权限 </span>\n\nbasename  <span class=\"hljs-keyword\">dir</span>/finename  <span class=\"hljs-comment\">//获取文件名</span>\ndirname  <span class=\"hljs-keyword\">dir</span>/filename  <span class=\"hljs-comment\">//获取目录名</span>\n\n<span class=\"hljs-comment\">//修改新建文件和目录的默认权限</span>\numask 002  <span class=\"hljs-comment\">//owner group others  002表示拿掉others的写权限</span>\n\nroot的umask默认是022\n一般用户umask默认是002\n\n<span class=\"hljs-comment\">//查看文件类型</span>\n<span class=\"hljs-keyword\">file</span> filePath \n\n<span class=\"hljs-comment\">//脚本文件名查找</span>\n<span class=\"hljs-keyword\">which</span> command\n<span class=\"hljs-comment\">//文件查找</span>\nwhereis 文件名\nlocate 文件名或部分文件名\nfind /home -user vbird <span class=\"hljs-comment\">//查找/home下面属于vbird的文件</span>\nfind  /  name 文件名 <span class=\"hljs-comment\">//查找文件名</span></code></pre>\n\n\n\n\n\n\n\n\n\n","site":{"data":{"fluid_static_prefix":{"internal_js":"/js","internal_css":"/css","internal_img":"/img","iconfont":"//at.alicdn.com/t/font_1736178_kmeydafke9r.css","anchor":"https://cdn.staticfile.org/anchor-js/4.2.2/","github_markdown":"https://cdn.staticfile.org/github-markdown-css/4.0.0/","jquery":"https://cdn.staticfile.org/jquery/3.4.1/","bootstrap":"https://cdn.staticfile.org/twitter-bootstrap/4.4.1/","highlightjs":"https://cdn.staticfile.org/highlight.js/10.0.0/","prismjs":"https://cdn.staticfile.org/prism/1.21.0/","tocbot":"https://cdn.staticfile.org/tocbot/4.11.1/","typed":"https://cdn.staticfile.org/typed.js/2.0.11/","fancybox":"https://cdn.staticfile.org/fancybox/3.5.7/","mathjax":"https://cdn.staticfile.org/mathjax/3.0.5/es5/","katex":"https://cdn.staticfile.org/KaTeX/0.11.1/","aplayer":"https://cdn.staticfile.org/aplayer/1.10.1/","busuanzi":"https://busuanzi.ibruce.info/busuanzi/2.3/","clipboard":"https://cdn.staticfile.org/clipboard.js/2.0.6/","mermaid":"https://cdn.staticfile.org/mermaid/8.5.0/","valine":"https://cdn.staticfile.org/valine/1.4.14/","gitalk":"https://cdn.staticfile.org/gitalk/1.6.2/","blueimp_md5":"https://cdn.staticfile.org/blueimp-md5/2.13.0/","disqusjs":"https://cdn.jsdelivr.net/npm/disqusjs@1.0/dist/","hint":"/lib/hint/"},"fluid_config":{"favicon":"/img/favicon.png","apple_touch_icon":"/img/favicon.png","title_join_string":" - ","force_https":false,"code":{"copy_btn":true,"highlight":{"enable":true,"lib":"highlightjs","highlightjs":{"style":"Github Gist","bg_color":false},"prismjs":{"style":"default","preprocess":true}}},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"_","loop":false},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"right","visible":"hover","icon":""},"mouse_click":{"enable":false,"style":"values"}},"dark_mode":{"enable":true,"default":"auto"},"color":{"body_bg_color":"#eee","body_bg_color_dark":"#181c27","navbar_bg_color":"#2f4154","navbar_bg_color_dark":"#1f3144","navbar_text_color":"#fff","navbar_text_color_dark":"#d0d0d0","text_color":"#3c4858","text_color_dark":"#c4c6c9","sec_text_color":"#718096","sec_text_color_dark":"#a7a9ad","post_text_color":"#2c3e50","post_text_color_dark":"#c4c6c9","post_heading_color":"#1a202c","post_heading_color_dark":"#c4c6c9","post_link_color":"#0366d6","post_link_color_dark":"#1589e9","link_hover_color":"#30a9de","link_hover_color_dark":"#30a9de","link_hover_bg_color":"#f8f9fa","link_hover_bg_color_dark":"#364151","board_color":"#fff","board_color_dark":"#252d38"},"font":{"font_size":"16px","font_family":null,"code_font_size":"85%"},"custom_js":null,"custom_css":null,"custom_html":"","web_analytics":{"enable":false,"baidu":null,"google":null,"gtag":null,"tencent":{"sid":null,"cid":null},"woyaola":null,"cnzz":null,"leancloud":{"app_id":null,"app_key":null,"server_url":null}},"lazyload":{"enable":true,"onlypost":false},"daovoice":{"enable":false,"appid":""},"aplayer":{"enable":false,"autoplay":false,"loop":"all","order":"random","theme":"#b7daff","songs":[{"name":"name","artist":"artist","url":"/songs/test.mp3","cover":"/img/cover.jpg"},{"name":"name","artist":"artist","url":"https://...url.mp3","cover":"https://...cover.jpg"}]},"version":{"check":false},"navbar":{"blog_title":"吃面多放葱","ground_glass":{"enable":false,"px":3,"alpha":0.7},"menu":[{"key":"home","link":"/","icon":"iconfont icon-home-fill"},{"key":"category","link":"/categories/","icon":"iconfont icon-category-fill"},{"key":"tag","link":"/tags/","icon":"iconfont icon-tags-fill"},{"key":"about","link":"/about/","icon":"iconfont icon-user-fill"}]},"search":{"enable":true,"path":"/local-search.xml","generate_path":"/local-search.xml","field":"post","content":true},"scroll_down_arrow":{"enable":true,"banner_height_limit":90,"scroll_after_turning_page":true},"banner_parallax":true,"footer":{"statistics":{"enable":false,"source":"busuanzi","pv_format":"总访问量 {} 次","uv_format":"总访客数 {} 人"},"beian":{"enable":false,"icp_text":"京ICP证123456号","police_text":"京公网安备12345678号","police_code":12345678,"police_icon":"/img/police_beian.png"}},"scroll_top_arrow":{"enable":true},"index":{"banner_img":"/img/default.png","banner_img_height":100,"banner_mask_alpha":0.3,"post_default_img":"","slogan":{"enable":true,"text":"像蚂蚁一样工作，像蝴蝶一样生活"},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"category":true,"tag":true}},"page":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3},"post":{"banner_img":"/img/default.png","banner_img_height":70,"banner_mask_alpha":0.3,"meta":{"author":{"enable":false},"date":{"enable":true,"format":"LL a"},"wordcount":{"enable":true,"format":"{} 字"},"min2read":{"enable":true,"format":"{} 分钟","words":100},"views":{"enable":false,"source":"busuanzi","format":"{} 次"}},"updated":{"enable":false,"content":"本文最后更新于：","relative":false},"toc":{"enable":true,"headingSelector":"h1,h2,h3,h4,h5,h6","collapseDepth":0},"copyright":{"enable":true,"content":"本博客所有文章除特别声明外，均采用 <a href=\"https://creativecommons.org/licenses/by-sa/4.0/deed.zh\" rel=\"nofollow noopener\">CC BY-SA 4.0 协议</a> ，转载请注明出处！"},"prev_next":{"enable":true},"custom":{"enable":false,"content":"<img src=\"https://octodex.github.com/images/jetpacktocat.png\" class=\"rounded mx-auto d-block mt-5\" style=\"width:150px; height:150px;\">"},"image_zoom":{"enable":true},"footnote":{"enable":true,"header":""},"math":{"enable":false,"specific":false,"engine":"mathjax"},"mermaid":{"enable":false,"specific":false,"options":{"theme":"default"}},"comments":{"enable":false,"type":"disqus"}},"utterances":{"repo":null,"issue_term":"pathname","label":"utterances","theme":"github-light","theme_dark":"github-dark","crossorigin":"anonymous"},"disqus":{"shortname":null,"disqusjs":false,"apikey":null},"gitalk":{"clientID":null,"clientSecret":null,"repo":null,"owner":null,"admin":["name"],"id":"location.pathname","language":"zh-CN","labels":["Gitalk"],"perPage":10,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true},"valine":{"appid":null,"appkey":null,"placeholder":"说点什么","path":"window.location.pathname","avatar":"retro","meta":["nick","mail","link"],"pageSize":10,"lang":"zh-CN","highlight":false,"recordIP":false,"serverURLs":null},"changyan":{"appid":"","appkey":""},"livere":{"uid":""},"remark42":{"host":"https://remark.haoyizebo.com","site_id":"haoyizebo","max_shown_comments":10,"locale":"zh"},"archive":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null},"category":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"post_limit":10,"order_by":"-length","collapse_depth":0},"tag":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null,"tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"avatar":"/img/avatar.png","name":"蔺国防","introduce":"移动应用开发者，历史文学爱好者","icons":[{"class":"iconfont icon-github-fill","link":"https://github.com","tip":"GitHub"},{"class":"iconfont icon-douban-fill","link":"https://douban.com","tip":"豆瓣"},{"class":"iconfont icon-wechat-fill","qrcode":"/img/favicon.png"}]},"page404":{"banner_img":"/img/default.png","banner_img_height":85,"banner_mask_alpha":0.3,"subtitle":"Page not found"},"links":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"items":[{"title":"Fluid Docs","intro":"主题使用指南","link":"https://hexo.fluid-dev.com/docs/","image":"/img/favicon.png"},{"title":"Fluid Repo","intro":"主题 GitHub 仓库","link":"https://github.com/fluid-dev/hexo-theme-fluid","image":"/img/favicon.png"},{"title":"Fluid Example","intro":"主题操作示例","link":"https://hexo.fluid-dev.com/docs/example/","image":"/img/favicon.png"}]}}}},"excerpt":"","more":"<h2 id=\"权限\"><a href=\"#权限\" class=\"headerlink\" title=\"权限\"></a>权限</h2><pre><code class=\"hljs markdown\">-rwxr--r--\n\n//总共9个字符\n//-表示类型,<span class=\"hljs-code\">`d`</span>为目录,<span class=\"hljs-code\">`-`</span>为文件\n//rwx 表示所有者权限,读写执行\n//r-- 表示所述用户组的权限,只读\n//r--表示其他权限,只读\n\nls -al //查阅文件详细信息\n-rw-r--r-- 1 root   root   239 5 6 13:22 test.txt \n // [<span class=\"hljs-string\">文件类型与权限</span>] [<span class=\"hljs-string\">文件连接数</span>][<span class=\"hljs-symbol\">所有者账号</span>] [用户组账号] [文件容量 单位 B] [修改日期] [文件名]\n</code></pre>\n<h2 id=\"用户切换\"><a href=\"#用户切换\" class=\"headerlink\" title=\"用户切换\"></a>用户切换</h2><pre><code class=\"hljs awk\"><span class=\"hljs-regexp\">//</span>切换到root 用户\nsudo -i\n\n<span class=\"hljs-regexp\">//</span>root 切换到指定用户\nsu - username   <span class=\"hljs-regexp\">//</span>注意- 和 用户名之间有空格</code></pre>\n\n<h2 id=\"文件与目录\"><a href=\"#文件与目录\" class=\"headerlink\" title=\"文件与目录\"></a>文件与目录</h2><pre><code class=\"hljs stata\"><span class=\"hljs-keyword\">cd</span> filePath <span class=\"hljs-comment\">//切换目录</span>\n<span class=\"hljs-keyword\">pwd</span> <span class=\"hljs-comment\">//打印当前路径</span>\n\n<span class=\"hljs-comment\">//新建(增加)</span>\n<span class=\"hljs-keyword\">mkdir</span> dirname <span class=\"hljs-comment\">//新建目录</span>\n<span class=\"hljs-keyword\">mkdir</span> -p test1/test2/test3  <span class=\"hljs-comment\">//创建多层目录</span>\n<span class=\"hljs-keyword\">mkdir</span> -<span class=\"hljs-keyword\">m</span> 711 test2 <span class=\"hljs-comment\">//新建权限为rwx--x--x的目录</span>\ntouch filename <span class=\"hljs-comment\">//创建文件</span>\n\n<span class=\"hljs-comment\">//删除</span>\n<span class=\"hljs-keyword\">rm</span> filename   <span class=\"hljs-comment\">//移除文件</span>\n<span class=\"hljs-keyword\">rm</span> -r dirName <span class=\"hljs-comment\">//移除目录</span>\n<span class=\"hljs-keyword\">rmdir</span> dirname <span class=\"hljs-comment\">//移除目录</span>\n<span class=\"hljs-keyword\">rmdir</span> -p test1/test2/test3 <span class=\"hljs-comment\">//连同上层空的目录也一起删除</span>\n\n<span class=\"hljs-comment\">//复制</span>\ncp  源路径 目标路径\ncp -a sourcefile desfile <span class=\"hljs-comment\">//完全复制</span>\ncp -i sourcefile desfile  <span class=\"hljs-comment\">//询问</span>\ncp -r sourcefile desfile  <span class=\"hljs-comment\">//递归复制</span>\n\n<span class=\"hljs-comment\">//移动</span>\nmv [-fiu] souce destination\n-f <span class=\"hljs-comment\">//强制</span>\n-i  <span class=\"hljs-comment\">//询问是否覆盖</span>\n-<span class=\"hljs-keyword\">u</span> <span class=\"hljs-comment\">//更新为最新</span>\n\n<span class=\"hljs-comment\">//修改</span>\n<span class=\"hljs-comment\">//修改的用户组: groupname在 etc/group 文件中存在</span>\nchgrp [-R] groupname dirname/filename\n\n<span class=\"hljs-comment\">//修改拥有者:  ownername 在 etc/passwd 文件中存在</span>\nchown ownername dirname/filename\nchown :groupname dirname/filename\nchown ownername:groupname dirname/filename\n\n<span class=\"hljs-comment\">//修改文件权限</span>\n<span class=\"hljs-comment\">//数字修改权限  各个权限加权分 r: 4 w: 2 x: 1 </span>\nchmod 777 dirname/filename <span class=\"hljs-comment\">//-rwxrwxrwx</span>\nchmod 755 dirname/filename <span class=\"hljs-comment\">//-rwxr-xr-x</span>\n<span class=\"hljs-comment\">//修改权限(通过字符)</span>\n<span class=\"hljs-comment\">//chmod      u g o a       + - =      rwx        文件目录</span>\nchmod <span class=\"hljs-keyword\">u</span>=rwx,go=r filename  <span class=\"hljs-comment\">//-rwxr--r--</span>\nchmod a+w filename   <span class=\"hljs-comment\">//增加写权限</span>\nchmod a-x filename  <span class=\"hljs-comment\">//减少执行权限 </span>\n\nbasename  <span class=\"hljs-keyword\">dir</span>/finename  <span class=\"hljs-comment\">//获取文件名</span>\ndirname  <span class=\"hljs-keyword\">dir</span>/filename  <span class=\"hljs-comment\">//获取目录名</span>\n\n<span class=\"hljs-comment\">//修改新建文件和目录的默认权限</span>\numask 002  <span class=\"hljs-comment\">//owner group others  002表示拿掉others的写权限</span>\n\nroot的umask默认是022\n一般用户umask默认是002\n\n<span class=\"hljs-comment\">//查看文件类型</span>\n<span class=\"hljs-keyword\">file</span> filePath \n\n<span class=\"hljs-comment\">//脚本文件名查找</span>\n<span class=\"hljs-keyword\">which</span> command\n<span class=\"hljs-comment\">//文件查找</span>\nwhereis 文件名\nlocate 文件名或部分文件名\nfind /home -user vbird <span class=\"hljs-comment\">//查找/home下面属于vbird的文件</span>\nfind  /  name 文件名 <span class=\"hljs-comment\">//查找文件名</span></code></pre>\n\n\n\n\n\n\n\n\n\n"},{"title":"ShellScript","date":"2018-03-09T10:22:00.000Z","_content":"\n```\n#str    #输出字符串长度\n#array[@]     #输出数组长度\necho $array[@]    #打印数组\n\nsource ./test1.sh  #导入外部文件,可以引用外部文件的变量\n\n# shell script 追踪与debug\nsh [-nvx] xxx.sh\nOptions:\n-n: 不需要执行script,仅检查语法问题\n-v: 在执行script前,先将script内容输出到屏幕上\n-x:将使用到的script内容显示到屏幕\n\n```\n","source":"_posts/Linux/Shell-Script.md","raw":"\n---\ntitle:  ShellScript\ndate:  2018-03-09 18:22\ncategories:\n- [Linux, Shell]\ntags: \n- Shell\n- Linux\n---\n\n```\n#str    #输出字符串长度\n#array[@]     #输出数组长度\necho $array[@]    #打印数组\n\nsource ./test1.sh  #导入外部文件,可以引用外部文件的变量\n\n# shell script 追踪与debug\nsh [-nvx] xxx.sh\nOptions:\n-n: 不需要执行script,仅检查语法问题\n-v: 在执行script前,先将script内容输出到屏幕上\n-x:将使用到的script内容显示到屏幕\n\n```\n","slug":"Linux/Shell-Script","published":1,"updated":"2020-09-27T12:03:49.721Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgq6gnw20002t29kbuj24kuu","content":"<pre><code class=\"hljs applescript\"><span class=\"hljs-comment\">#str    #输出字符串长度</span>\n<span class=\"hljs-comment\">#array[@]     #输出数组长度</span>\necho $array[@]    <span class=\"hljs-comment\">#打印数组</span>\n\nsource ./test1.sh  <span class=\"hljs-comment\">#导入外部文件,可以引用外部文件的变量</span>\n\n<span class=\"hljs-comment\"># shell script 追踪与debug</span>\nsh [-nvx] xxx.sh\nOptions:\n-n: 不需要执行<span class=\"hljs-keyword\">script</span>,仅检查语法问题\n-v: 在执行<span class=\"hljs-keyword\">script</span>前,先将<span class=\"hljs-keyword\">script</span>内容输出到屏幕上\n-x:将使用到的<span class=\"hljs-keyword\">script</span>内容显示到屏幕\n</code></pre>\n","site":{"data":{"fluid_static_prefix":{"internal_js":"/js","internal_css":"/css","internal_img":"/img","iconfont":"//at.alicdn.com/t/font_1736178_kmeydafke9r.css","anchor":"https://cdn.staticfile.org/anchor-js/4.2.2/","github_markdown":"https://cdn.staticfile.org/github-markdown-css/4.0.0/","jquery":"https://cdn.staticfile.org/jquery/3.4.1/","bootstrap":"https://cdn.staticfile.org/twitter-bootstrap/4.4.1/","highlightjs":"https://cdn.staticfile.org/highlight.js/10.0.0/","prismjs":"https://cdn.staticfile.org/prism/1.21.0/","tocbot":"https://cdn.staticfile.org/tocbot/4.11.1/","typed":"https://cdn.staticfile.org/typed.js/2.0.11/","fancybox":"https://cdn.staticfile.org/fancybox/3.5.7/","mathjax":"https://cdn.staticfile.org/mathjax/3.0.5/es5/","katex":"https://cdn.staticfile.org/KaTeX/0.11.1/","aplayer":"https://cdn.staticfile.org/aplayer/1.10.1/","busuanzi":"https://busuanzi.ibruce.info/busuanzi/2.3/","clipboard":"https://cdn.staticfile.org/clipboard.js/2.0.6/","mermaid":"https://cdn.staticfile.org/mermaid/8.5.0/","valine":"https://cdn.staticfile.org/valine/1.4.14/","gitalk":"https://cdn.staticfile.org/gitalk/1.6.2/","blueimp_md5":"https://cdn.staticfile.org/blueimp-md5/2.13.0/","disqusjs":"https://cdn.jsdelivr.net/npm/disqusjs@1.0/dist/","hint":"/lib/hint/"},"fluid_config":{"favicon":"/img/favicon.png","apple_touch_icon":"/img/favicon.png","title_join_string":" - ","force_https":false,"code":{"copy_btn":true,"highlight":{"enable":true,"lib":"highlightjs","highlightjs":{"style":"Github Gist","bg_color":false},"prismjs":{"style":"default","preprocess":true}}},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"_","loop":false},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"right","visible":"hover","icon":""},"mouse_click":{"enable":false,"style":"values"}},"dark_mode":{"enable":true,"default":"auto"},"color":{"body_bg_color":"#eee","body_bg_color_dark":"#181c27","navbar_bg_color":"#2f4154","navbar_bg_color_dark":"#1f3144","navbar_text_color":"#fff","navbar_text_color_dark":"#d0d0d0","text_color":"#3c4858","text_color_dark":"#c4c6c9","sec_text_color":"#718096","sec_text_color_dark":"#a7a9ad","post_text_color":"#2c3e50","post_text_color_dark":"#c4c6c9","post_heading_color":"#1a202c","post_heading_color_dark":"#c4c6c9","post_link_color":"#0366d6","post_link_color_dark":"#1589e9","link_hover_color":"#30a9de","link_hover_color_dark":"#30a9de","link_hover_bg_color":"#f8f9fa","link_hover_bg_color_dark":"#364151","board_color":"#fff","board_color_dark":"#252d38"},"font":{"font_size":"16px","font_family":null,"code_font_size":"85%"},"custom_js":null,"custom_css":null,"custom_html":"","web_analytics":{"enable":false,"baidu":null,"google":null,"gtag":null,"tencent":{"sid":null,"cid":null},"woyaola":null,"cnzz":null,"leancloud":{"app_id":null,"app_key":null,"server_url":null}},"lazyload":{"enable":true,"onlypost":false},"daovoice":{"enable":false,"appid":""},"aplayer":{"enable":false,"autoplay":false,"loop":"all","order":"random","theme":"#b7daff","songs":[{"name":"name","artist":"artist","url":"/songs/test.mp3","cover":"/img/cover.jpg"},{"name":"name","artist":"artist","url":"https://...url.mp3","cover":"https://...cover.jpg"}]},"version":{"check":false},"navbar":{"blog_title":"吃面多放葱","ground_glass":{"enable":false,"px":3,"alpha":0.7},"menu":[{"key":"home","link":"/","icon":"iconfont icon-home-fill"},{"key":"category","link":"/categories/","icon":"iconfont icon-category-fill"},{"key":"tag","link":"/tags/","icon":"iconfont icon-tags-fill"},{"key":"about","link":"/about/","icon":"iconfont icon-user-fill"}]},"search":{"enable":true,"path":"/local-search.xml","generate_path":"/local-search.xml","field":"post","content":true},"scroll_down_arrow":{"enable":true,"banner_height_limit":90,"scroll_after_turning_page":true},"banner_parallax":true,"footer":{"statistics":{"enable":false,"source":"busuanzi","pv_format":"总访问量 {} 次","uv_format":"总访客数 {} 人"},"beian":{"enable":false,"icp_text":"京ICP证123456号","police_text":"京公网安备12345678号","police_code":12345678,"police_icon":"/img/police_beian.png"}},"scroll_top_arrow":{"enable":true},"index":{"banner_img":"/img/default.png","banner_img_height":100,"banner_mask_alpha":0.3,"post_default_img":"","slogan":{"enable":true,"text":"像蚂蚁一样工作，像蝴蝶一样生活"},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"category":true,"tag":true}},"page":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3},"post":{"banner_img":"/img/default.png","banner_img_height":70,"banner_mask_alpha":0.3,"meta":{"author":{"enable":false},"date":{"enable":true,"format":"LL a"},"wordcount":{"enable":true,"format":"{} 字"},"min2read":{"enable":true,"format":"{} 分钟","words":100},"views":{"enable":false,"source":"busuanzi","format":"{} 次"}},"updated":{"enable":false,"content":"本文最后更新于：","relative":false},"toc":{"enable":true,"headingSelector":"h1,h2,h3,h4,h5,h6","collapseDepth":0},"copyright":{"enable":true,"content":"本博客所有文章除特别声明外，均采用 <a href=\"https://creativecommons.org/licenses/by-sa/4.0/deed.zh\" rel=\"nofollow noopener\">CC BY-SA 4.0 协议</a> ，转载请注明出处！"},"prev_next":{"enable":true},"custom":{"enable":false,"content":"<img src=\"https://octodex.github.com/images/jetpacktocat.png\" class=\"rounded mx-auto d-block mt-5\" style=\"width:150px; height:150px;\">"},"image_zoom":{"enable":true},"footnote":{"enable":true,"header":""},"math":{"enable":false,"specific":false,"engine":"mathjax"},"mermaid":{"enable":false,"specific":false,"options":{"theme":"default"}},"comments":{"enable":false,"type":"disqus"}},"utterances":{"repo":null,"issue_term":"pathname","label":"utterances","theme":"github-light","theme_dark":"github-dark","crossorigin":"anonymous"},"disqus":{"shortname":null,"disqusjs":false,"apikey":null},"gitalk":{"clientID":null,"clientSecret":null,"repo":null,"owner":null,"admin":["name"],"id":"location.pathname","language":"zh-CN","labels":["Gitalk"],"perPage":10,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true},"valine":{"appid":null,"appkey":null,"placeholder":"说点什么","path":"window.location.pathname","avatar":"retro","meta":["nick","mail","link"],"pageSize":10,"lang":"zh-CN","highlight":false,"recordIP":false,"serverURLs":null},"changyan":{"appid":"","appkey":""},"livere":{"uid":""},"remark42":{"host":"https://remark.haoyizebo.com","site_id":"haoyizebo","max_shown_comments":10,"locale":"zh"},"archive":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null},"category":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"post_limit":10,"order_by":"-length","collapse_depth":0},"tag":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null,"tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"avatar":"/img/avatar.png","name":"蔺国防","introduce":"移动应用开发者，历史文学爱好者","icons":[{"class":"iconfont icon-github-fill","link":"https://github.com","tip":"GitHub"},{"class":"iconfont icon-douban-fill","link":"https://douban.com","tip":"豆瓣"},{"class":"iconfont icon-wechat-fill","qrcode":"/img/favicon.png"}]},"page404":{"banner_img":"/img/default.png","banner_img_height":85,"banner_mask_alpha":0.3,"subtitle":"Page not found"},"links":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"items":[{"title":"Fluid Docs","intro":"主题使用指南","link":"https://hexo.fluid-dev.com/docs/","image":"/img/favicon.png"},{"title":"Fluid Repo","intro":"主题 GitHub 仓库","link":"https://github.com/fluid-dev/hexo-theme-fluid","image":"/img/favicon.png"},{"title":"Fluid Example","intro":"主题操作示例","link":"https://hexo.fluid-dev.com/docs/example/","image":"/img/favicon.png"}]}}}},"excerpt":"","more":"<pre><code class=\"hljs applescript\"><span class=\"hljs-comment\">#str    #输出字符串长度</span>\n<span class=\"hljs-comment\">#array[@]     #输出数组长度</span>\necho $array[@]    <span class=\"hljs-comment\">#打印数组</span>\n\nsource ./test1.sh  <span class=\"hljs-comment\">#导入外部文件,可以引用外部文件的变量</span>\n\n<span class=\"hljs-comment\"># shell script 追踪与debug</span>\nsh [-nvx] xxx.sh\nOptions:\n-n: 不需要执行<span class=\"hljs-keyword\">script</span>,仅检查语法问题\n-v: 在执行<span class=\"hljs-keyword\">script</span>前,先将<span class=\"hljs-keyword\">script</span>内容输出到屏幕上\n-x:将使用到的<span class=\"hljs-keyword\">script</span>内容显示到屏幕\n</code></pre>\n"},{"title":"Vim常用命令","date":"2018-12-12T09:22:00.000Z","_content":"```\n//进入文件\nvi xxx.txt\n\n//退出文件\n:q\n//强制脱出文件\n:q!\n//保存文件\n:w\n//保存并退出文件\n:wq\n\n/*****命令模式*******/\n//向下翻页\ncontrol + f\n//向上翻页\ncontrol + b\n//撤销\nu\n//向下查找\n/word\n//查找下一个\nn\n//重复上个动作\n.\n//复制一行\nyy\n//粘贴一行\np\n//删除一行\ndd\n//删除光标下的n行\nndd\n\n/****输入模式*****/\ni\n//退出输入模式,切换到命令模式\nesc\n\n/****底线命令模式****/\n:\n//用户刚刚启动vi/vim便进入了命令模式\n//删除光标所在处字符\nx\n//退出底线命令模式\nesc\n\n```\n","source":"_posts/Linux/Vim常用命令.md","raw":"\n---\ntitle:  Vim常用命令\ndate:  2018-12-12 17:22\ncategories:\n-  [Linux, Vim]\ntags: \n- Linux\n---\n```\n//进入文件\nvi xxx.txt\n\n//退出文件\n:q\n//强制脱出文件\n:q!\n//保存文件\n:w\n//保存并退出文件\n:wq\n\n/*****命令模式*******/\n//向下翻页\ncontrol + f\n//向上翻页\ncontrol + b\n//撤销\nu\n//向下查找\n/word\n//查找下一个\nn\n//重复上个动作\n.\n//复制一行\nyy\n//粘贴一行\np\n//删除一行\ndd\n//删除光标下的n行\nndd\n\n/****输入模式*****/\ni\n//退出输入模式,切换到命令模式\nesc\n\n/****底线命令模式****/\n:\n//用户刚刚启动vi/vim便进入了命令模式\n//删除光标所在处字符\nx\n//退出底线命令模式\nesc\n\n```\n","slug":"Linux/Vim常用命令","published":1,"updated":"2020-09-27T10:31:34.998Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgq6gnw50004t29k1libe2xu","content":"<pre><code class=\"hljs awk\"><span class=\"hljs-regexp\">//</span>进入文件\nvi xxx.txt\n\n<span class=\"hljs-regexp\">//</span>退出文件\n:q\n<span class=\"hljs-regexp\">//</span>强制脱出文件\n:q!\n<span class=\"hljs-regexp\">//</span>保存文件\n:w\n<span class=\"hljs-regexp\">//</span>保存并退出文件\n:wq\n\n<span class=\"hljs-regexp\">/*****命令模式*******/</span>\n<span class=\"hljs-regexp\">//</span>向下翻页\ncontrol + f\n<span class=\"hljs-regexp\">//</span>向上翻页\ncontrol + b\n<span class=\"hljs-regexp\">//</span>撤销\nu\n<span class=\"hljs-regexp\">//</span>向下查找\n/word\n<span class=\"hljs-regexp\">//</span>查找下一个\nn\n<span class=\"hljs-regexp\">//</span>重复上个动作\n.\n<span class=\"hljs-regexp\">//</span>复制一行\nyy\n<span class=\"hljs-regexp\">//</span>粘贴一行\np\n<span class=\"hljs-regexp\">//</span>删除一行\ndd\n<span class=\"hljs-regexp\">//</span>删除光标下的n行\nndd\n\n<span class=\"hljs-regexp\">/****输入模式*****/</span>\ni\n<span class=\"hljs-regexp\">//</span>退出输入模式,切换到命令模式\nesc\n\n<span class=\"hljs-regexp\">/****底线命令模式****/</span>\n:\n<span class=\"hljs-regexp\">//</span>用户刚刚启动vi/vim便进入了命令模式\n<span class=\"hljs-regexp\">//</span>删除光标所在处字符\nx\n<span class=\"hljs-regexp\">//</span>退出底线命令模式\nesc\n</code></pre>\n","site":{"data":{"fluid_static_prefix":{"internal_js":"/js","internal_css":"/css","internal_img":"/img","iconfont":"//at.alicdn.com/t/font_1736178_kmeydafke9r.css","anchor":"https://cdn.staticfile.org/anchor-js/4.2.2/","github_markdown":"https://cdn.staticfile.org/github-markdown-css/4.0.0/","jquery":"https://cdn.staticfile.org/jquery/3.4.1/","bootstrap":"https://cdn.staticfile.org/twitter-bootstrap/4.4.1/","highlightjs":"https://cdn.staticfile.org/highlight.js/10.0.0/","prismjs":"https://cdn.staticfile.org/prism/1.21.0/","tocbot":"https://cdn.staticfile.org/tocbot/4.11.1/","typed":"https://cdn.staticfile.org/typed.js/2.0.11/","fancybox":"https://cdn.staticfile.org/fancybox/3.5.7/","mathjax":"https://cdn.staticfile.org/mathjax/3.0.5/es5/","katex":"https://cdn.staticfile.org/KaTeX/0.11.1/","aplayer":"https://cdn.staticfile.org/aplayer/1.10.1/","busuanzi":"https://busuanzi.ibruce.info/busuanzi/2.3/","clipboard":"https://cdn.staticfile.org/clipboard.js/2.0.6/","mermaid":"https://cdn.staticfile.org/mermaid/8.5.0/","valine":"https://cdn.staticfile.org/valine/1.4.14/","gitalk":"https://cdn.staticfile.org/gitalk/1.6.2/","blueimp_md5":"https://cdn.staticfile.org/blueimp-md5/2.13.0/","disqusjs":"https://cdn.jsdelivr.net/npm/disqusjs@1.0/dist/","hint":"/lib/hint/"},"fluid_config":{"favicon":"/img/favicon.png","apple_touch_icon":"/img/favicon.png","title_join_string":" - ","force_https":false,"code":{"copy_btn":true,"highlight":{"enable":true,"lib":"highlightjs","highlightjs":{"style":"Github Gist","bg_color":false},"prismjs":{"style":"default","preprocess":true}}},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"_","loop":false},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"right","visible":"hover","icon":""},"mouse_click":{"enable":false,"style":"values"}},"dark_mode":{"enable":true,"default":"auto"},"color":{"body_bg_color":"#eee","body_bg_color_dark":"#181c27","navbar_bg_color":"#2f4154","navbar_bg_color_dark":"#1f3144","navbar_text_color":"#fff","navbar_text_color_dark":"#d0d0d0","text_color":"#3c4858","text_color_dark":"#c4c6c9","sec_text_color":"#718096","sec_text_color_dark":"#a7a9ad","post_text_color":"#2c3e50","post_text_color_dark":"#c4c6c9","post_heading_color":"#1a202c","post_heading_color_dark":"#c4c6c9","post_link_color":"#0366d6","post_link_color_dark":"#1589e9","link_hover_color":"#30a9de","link_hover_color_dark":"#30a9de","link_hover_bg_color":"#f8f9fa","link_hover_bg_color_dark":"#364151","board_color":"#fff","board_color_dark":"#252d38"},"font":{"font_size":"16px","font_family":null,"code_font_size":"85%"},"custom_js":null,"custom_css":null,"custom_html":"","web_analytics":{"enable":false,"baidu":null,"google":null,"gtag":null,"tencent":{"sid":null,"cid":null},"woyaola":null,"cnzz":null,"leancloud":{"app_id":null,"app_key":null,"server_url":null}},"lazyload":{"enable":true,"onlypost":false},"daovoice":{"enable":false,"appid":""},"aplayer":{"enable":false,"autoplay":false,"loop":"all","order":"random","theme":"#b7daff","songs":[{"name":"name","artist":"artist","url":"/songs/test.mp3","cover":"/img/cover.jpg"},{"name":"name","artist":"artist","url":"https://...url.mp3","cover":"https://...cover.jpg"}]},"version":{"check":false},"navbar":{"blog_title":"吃面多放葱","ground_glass":{"enable":false,"px":3,"alpha":0.7},"menu":[{"key":"home","link":"/","icon":"iconfont icon-home-fill"},{"key":"category","link":"/categories/","icon":"iconfont icon-category-fill"},{"key":"tag","link":"/tags/","icon":"iconfont icon-tags-fill"},{"key":"about","link":"/about/","icon":"iconfont icon-user-fill"}]},"search":{"enable":true,"path":"/local-search.xml","generate_path":"/local-search.xml","field":"post","content":true},"scroll_down_arrow":{"enable":true,"banner_height_limit":90,"scroll_after_turning_page":true},"banner_parallax":true,"footer":{"statistics":{"enable":false,"source":"busuanzi","pv_format":"总访问量 {} 次","uv_format":"总访客数 {} 人"},"beian":{"enable":false,"icp_text":"京ICP证123456号","police_text":"京公网安备12345678号","police_code":12345678,"police_icon":"/img/police_beian.png"}},"scroll_top_arrow":{"enable":true},"index":{"banner_img":"/img/default.png","banner_img_height":100,"banner_mask_alpha":0.3,"post_default_img":"","slogan":{"enable":true,"text":"像蚂蚁一样工作，像蝴蝶一样生活"},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"category":true,"tag":true}},"page":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3},"post":{"banner_img":"/img/default.png","banner_img_height":70,"banner_mask_alpha":0.3,"meta":{"author":{"enable":false},"date":{"enable":true,"format":"LL a"},"wordcount":{"enable":true,"format":"{} 字"},"min2read":{"enable":true,"format":"{} 分钟","words":100},"views":{"enable":false,"source":"busuanzi","format":"{} 次"}},"updated":{"enable":false,"content":"本文最后更新于：","relative":false},"toc":{"enable":true,"headingSelector":"h1,h2,h3,h4,h5,h6","collapseDepth":0},"copyright":{"enable":true,"content":"本博客所有文章除特别声明外，均采用 <a href=\"https://creativecommons.org/licenses/by-sa/4.0/deed.zh\" rel=\"nofollow noopener\">CC BY-SA 4.0 协议</a> ，转载请注明出处！"},"prev_next":{"enable":true},"custom":{"enable":false,"content":"<img src=\"https://octodex.github.com/images/jetpacktocat.png\" class=\"rounded mx-auto d-block mt-5\" style=\"width:150px; height:150px;\">"},"image_zoom":{"enable":true},"footnote":{"enable":true,"header":""},"math":{"enable":false,"specific":false,"engine":"mathjax"},"mermaid":{"enable":false,"specific":false,"options":{"theme":"default"}},"comments":{"enable":false,"type":"disqus"}},"utterances":{"repo":null,"issue_term":"pathname","label":"utterances","theme":"github-light","theme_dark":"github-dark","crossorigin":"anonymous"},"disqus":{"shortname":null,"disqusjs":false,"apikey":null},"gitalk":{"clientID":null,"clientSecret":null,"repo":null,"owner":null,"admin":["name"],"id":"location.pathname","language":"zh-CN","labels":["Gitalk"],"perPage":10,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true},"valine":{"appid":null,"appkey":null,"placeholder":"说点什么","path":"window.location.pathname","avatar":"retro","meta":["nick","mail","link"],"pageSize":10,"lang":"zh-CN","highlight":false,"recordIP":false,"serverURLs":null},"changyan":{"appid":"","appkey":""},"livere":{"uid":""},"remark42":{"host":"https://remark.haoyizebo.com","site_id":"haoyizebo","max_shown_comments":10,"locale":"zh"},"archive":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null},"category":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"post_limit":10,"order_by":"-length","collapse_depth":0},"tag":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null,"tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"avatar":"/img/avatar.png","name":"蔺国防","introduce":"移动应用开发者，历史文学爱好者","icons":[{"class":"iconfont icon-github-fill","link":"https://github.com","tip":"GitHub"},{"class":"iconfont icon-douban-fill","link":"https://douban.com","tip":"豆瓣"},{"class":"iconfont icon-wechat-fill","qrcode":"/img/favicon.png"}]},"page404":{"banner_img":"/img/default.png","banner_img_height":85,"banner_mask_alpha":0.3,"subtitle":"Page not found"},"links":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"items":[{"title":"Fluid Docs","intro":"主题使用指南","link":"https://hexo.fluid-dev.com/docs/","image":"/img/favicon.png"},{"title":"Fluid Repo","intro":"主题 GitHub 仓库","link":"https://github.com/fluid-dev/hexo-theme-fluid","image":"/img/favicon.png"},{"title":"Fluid Example","intro":"主题操作示例","link":"https://hexo.fluid-dev.com/docs/example/","image":"/img/favicon.png"}]}}}},"excerpt":"","more":"<pre><code class=\"hljs awk\"><span class=\"hljs-regexp\">//</span>进入文件\nvi xxx.txt\n\n<span class=\"hljs-regexp\">//</span>退出文件\n:q\n<span class=\"hljs-regexp\">//</span>强制脱出文件\n:q!\n<span class=\"hljs-regexp\">//</span>保存文件\n:w\n<span class=\"hljs-regexp\">//</span>保存并退出文件\n:wq\n\n<span class=\"hljs-regexp\">/*****命令模式*******/</span>\n<span class=\"hljs-regexp\">//</span>向下翻页\ncontrol + f\n<span class=\"hljs-regexp\">//</span>向上翻页\ncontrol + b\n<span class=\"hljs-regexp\">//</span>撤销\nu\n<span class=\"hljs-regexp\">//</span>向下查找\n/word\n<span class=\"hljs-regexp\">//</span>查找下一个\nn\n<span class=\"hljs-regexp\">//</span>重复上个动作\n.\n<span class=\"hljs-regexp\">//</span>复制一行\nyy\n<span class=\"hljs-regexp\">//</span>粘贴一行\np\n<span class=\"hljs-regexp\">//</span>删除一行\ndd\n<span class=\"hljs-regexp\">//</span>删除光标下的n行\nndd\n\n<span class=\"hljs-regexp\">/****输入模式*****/</span>\ni\n<span class=\"hljs-regexp\">//</span>退出输入模式,切换到命令模式\nesc\n\n<span class=\"hljs-regexp\">/****底线命令模式****/</span>\n:\n<span class=\"hljs-regexp\">//</span>用户刚刚启动vi/vim便进入了命令模式\n<span class=\"hljs-regexp\">//</span>删除光标所在处字符\nx\n<span class=\"hljs-regexp\">//</span>退出底线命令模式\nesc\n</code></pre>\n"},{"title":"XAMPP 权限问题","date":"2017-03-16T02:55:00.000Z","_content":"\n**我的解决方法**:\n\n1. 打开\"应用程序\"文件夹;\n\n2. 定位到 XAMPP 文件夹;\n\n3. 右击, 选择->显示简介;\n\n4. 在弹出框中选择->\"共享与权限\";\n\n5. 点击右下角 🔐 标志;\n\n6. 输入管理员密码\n\n7. 将everyone 权限改为\"读与写\";\n\n8. 点击 +- 右边的 \"设置\" 按钮,选择->\"应用到包含的项目\"; 重新点击🔐 加锁;\n\n9. 关闭简介窗口\n\n### 摘要\nPHP 创建文件目录权限设置\n","source":"_posts/PHP/mac-XAMPP环境下,-使用php函数mkdir()添加新目录(文件)报错,报错信息-permission-denied;.md","raw":"---\ntitle:  XAMPP 权限问题\ndate: 2017-03-16 10:55\ncategories:\n- [PHP, XAMPP]\ntags: \n- PHP\n---\n\n**我的解决方法**:\n\n1. 打开\"应用程序\"文件夹;\n\n2. 定位到 XAMPP 文件夹;\n\n3. 右击, 选择->显示简介;\n\n4. 在弹出框中选择->\"共享与权限\";\n\n5. 点击右下角 🔐 标志;\n\n6. 输入管理员密码\n\n7. 将everyone 权限改为\"读与写\";\n\n8. 点击 +- 右边的 \"设置\" 按钮,选择->\"应用到包含的项目\"; 重新点击🔐 加锁;\n\n9. 关闭简介窗口\n\n### 摘要\nPHP 创建文件目录权限设置\n","slug":"PHP/mac-XAMPP环境下,-使用php函数mkdir()添加新目录(文件)报错,报错信息-permission-denied;","published":1,"updated":"2020-09-27T11:00:41.017Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgq6gnw60006t29kb6uobp34","content":"<p><strong>我的解决方法</strong>:</p>\n<ol>\n<li><p>打开”应用程序”文件夹;</p>\n</li>\n<li><p>定位到 XAMPP 文件夹;</p>\n</li>\n<li><p>右击, 选择-&gt;显示简介;</p>\n</li>\n<li><p>在弹出框中选择-&gt;”共享与权限”;</p>\n</li>\n<li><p>点击右下角 🔐 标志;</p>\n</li>\n<li><p>输入管理员密码</p>\n</li>\n<li><p>将everyone 权限改为”读与写”;</p>\n</li>\n<li><p>点击 +- 右边的 “设置” 按钮,选择-&gt;”应用到包含的项目”; 重新点击🔐 加锁;</p>\n</li>\n<li><p>关闭简介窗口</p>\n</li>\n</ol>\n<h3 id=\"摘要\"><a href=\"#摘要\" class=\"headerlink\" title=\"摘要\"></a>摘要</h3><p>PHP 创建文件目录权限设置</p>\n","site":{"data":{"fluid_static_prefix":{"internal_js":"/js","internal_css":"/css","internal_img":"/img","iconfont":"//at.alicdn.com/t/font_1736178_kmeydafke9r.css","anchor":"https://cdn.staticfile.org/anchor-js/4.2.2/","github_markdown":"https://cdn.staticfile.org/github-markdown-css/4.0.0/","jquery":"https://cdn.staticfile.org/jquery/3.4.1/","bootstrap":"https://cdn.staticfile.org/twitter-bootstrap/4.4.1/","highlightjs":"https://cdn.staticfile.org/highlight.js/10.0.0/","prismjs":"https://cdn.staticfile.org/prism/1.21.0/","tocbot":"https://cdn.staticfile.org/tocbot/4.11.1/","typed":"https://cdn.staticfile.org/typed.js/2.0.11/","fancybox":"https://cdn.staticfile.org/fancybox/3.5.7/","mathjax":"https://cdn.staticfile.org/mathjax/3.0.5/es5/","katex":"https://cdn.staticfile.org/KaTeX/0.11.1/","aplayer":"https://cdn.staticfile.org/aplayer/1.10.1/","busuanzi":"https://busuanzi.ibruce.info/busuanzi/2.3/","clipboard":"https://cdn.staticfile.org/clipboard.js/2.0.6/","mermaid":"https://cdn.staticfile.org/mermaid/8.5.0/","valine":"https://cdn.staticfile.org/valine/1.4.14/","gitalk":"https://cdn.staticfile.org/gitalk/1.6.2/","blueimp_md5":"https://cdn.staticfile.org/blueimp-md5/2.13.0/","disqusjs":"https://cdn.jsdelivr.net/npm/disqusjs@1.0/dist/","hint":"/lib/hint/"},"fluid_config":{"favicon":"/img/favicon.png","apple_touch_icon":"/img/favicon.png","title_join_string":" - ","force_https":false,"code":{"copy_btn":true,"highlight":{"enable":true,"lib":"highlightjs","highlightjs":{"style":"Github Gist","bg_color":false},"prismjs":{"style":"default","preprocess":true}}},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"_","loop":false},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"right","visible":"hover","icon":""},"mouse_click":{"enable":false,"style":"values"}},"dark_mode":{"enable":true,"default":"auto"},"color":{"body_bg_color":"#eee","body_bg_color_dark":"#181c27","navbar_bg_color":"#2f4154","navbar_bg_color_dark":"#1f3144","navbar_text_color":"#fff","navbar_text_color_dark":"#d0d0d0","text_color":"#3c4858","text_color_dark":"#c4c6c9","sec_text_color":"#718096","sec_text_color_dark":"#a7a9ad","post_text_color":"#2c3e50","post_text_color_dark":"#c4c6c9","post_heading_color":"#1a202c","post_heading_color_dark":"#c4c6c9","post_link_color":"#0366d6","post_link_color_dark":"#1589e9","link_hover_color":"#30a9de","link_hover_color_dark":"#30a9de","link_hover_bg_color":"#f8f9fa","link_hover_bg_color_dark":"#364151","board_color":"#fff","board_color_dark":"#252d38"},"font":{"font_size":"16px","font_family":null,"code_font_size":"85%"},"custom_js":null,"custom_css":null,"custom_html":"","web_analytics":{"enable":false,"baidu":null,"google":null,"gtag":null,"tencent":{"sid":null,"cid":null},"woyaola":null,"cnzz":null,"leancloud":{"app_id":null,"app_key":null,"server_url":null}},"lazyload":{"enable":true,"onlypost":false},"daovoice":{"enable":false,"appid":""},"aplayer":{"enable":false,"autoplay":false,"loop":"all","order":"random","theme":"#b7daff","songs":[{"name":"name","artist":"artist","url":"/songs/test.mp3","cover":"/img/cover.jpg"},{"name":"name","artist":"artist","url":"https://...url.mp3","cover":"https://...cover.jpg"}]},"version":{"check":false},"navbar":{"blog_title":"吃面多放葱","ground_glass":{"enable":false,"px":3,"alpha":0.7},"menu":[{"key":"home","link":"/","icon":"iconfont icon-home-fill"},{"key":"category","link":"/categories/","icon":"iconfont icon-category-fill"},{"key":"tag","link":"/tags/","icon":"iconfont icon-tags-fill"},{"key":"about","link":"/about/","icon":"iconfont icon-user-fill"}]},"search":{"enable":true,"path":"/local-search.xml","generate_path":"/local-search.xml","field":"post","content":true},"scroll_down_arrow":{"enable":true,"banner_height_limit":90,"scroll_after_turning_page":true},"banner_parallax":true,"footer":{"statistics":{"enable":false,"source":"busuanzi","pv_format":"总访问量 {} 次","uv_format":"总访客数 {} 人"},"beian":{"enable":false,"icp_text":"京ICP证123456号","police_text":"京公网安备12345678号","police_code":12345678,"police_icon":"/img/police_beian.png"}},"scroll_top_arrow":{"enable":true},"index":{"banner_img":"/img/default.png","banner_img_height":100,"banner_mask_alpha":0.3,"post_default_img":"","slogan":{"enable":true,"text":"像蚂蚁一样工作，像蝴蝶一样生活"},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"category":true,"tag":true}},"page":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3},"post":{"banner_img":"/img/default.png","banner_img_height":70,"banner_mask_alpha":0.3,"meta":{"author":{"enable":false},"date":{"enable":true,"format":"LL a"},"wordcount":{"enable":true,"format":"{} 字"},"min2read":{"enable":true,"format":"{} 分钟","words":100},"views":{"enable":false,"source":"busuanzi","format":"{} 次"}},"updated":{"enable":false,"content":"本文最后更新于：","relative":false},"toc":{"enable":true,"headingSelector":"h1,h2,h3,h4,h5,h6","collapseDepth":0},"copyright":{"enable":true,"content":"本博客所有文章除特别声明外，均采用 <a href=\"https://creativecommons.org/licenses/by-sa/4.0/deed.zh\" rel=\"nofollow noopener\">CC BY-SA 4.0 协议</a> ，转载请注明出处！"},"prev_next":{"enable":true},"custom":{"enable":false,"content":"<img src=\"https://octodex.github.com/images/jetpacktocat.png\" class=\"rounded mx-auto d-block mt-5\" style=\"width:150px; height:150px;\">"},"image_zoom":{"enable":true},"footnote":{"enable":true,"header":""},"math":{"enable":false,"specific":false,"engine":"mathjax"},"mermaid":{"enable":false,"specific":false,"options":{"theme":"default"}},"comments":{"enable":false,"type":"disqus"}},"utterances":{"repo":null,"issue_term":"pathname","label":"utterances","theme":"github-light","theme_dark":"github-dark","crossorigin":"anonymous"},"disqus":{"shortname":null,"disqusjs":false,"apikey":null},"gitalk":{"clientID":null,"clientSecret":null,"repo":null,"owner":null,"admin":["name"],"id":"location.pathname","language":"zh-CN","labels":["Gitalk"],"perPage":10,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true},"valine":{"appid":null,"appkey":null,"placeholder":"说点什么","path":"window.location.pathname","avatar":"retro","meta":["nick","mail","link"],"pageSize":10,"lang":"zh-CN","highlight":false,"recordIP":false,"serverURLs":null},"changyan":{"appid":"","appkey":""},"livere":{"uid":""},"remark42":{"host":"https://remark.haoyizebo.com","site_id":"haoyizebo","max_shown_comments":10,"locale":"zh"},"archive":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null},"category":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"post_limit":10,"order_by":"-length","collapse_depth":0},"tag":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null,"tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"avatar":"/img/avatar.png","name":"蔺国防","introduce":"移动应用开发者，历史文学爱好者","icons":[{"class":"iconfont icon-github-fill","link":"https://github.com","tip":"GitHub"},{"class":"iconfont icon-douban-fill","link":"https://douban.com","tip":"豆瓣"},{"class":"iconfont icon-wechat-fill","qrcode":"/img/favicon.png"}]},"page404":{"banner_img":"/img/default.png","banner_img_height":85,"banner_mask_alpha":0.3,"subtitle":"Page not found"},"links":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"items":[{"title":"Fluid Docs","intro":"主题使用指南","link":"https://hexo.fluid-dev.com/docs/","image":"/img/favicon.png"},{"title":"Fluid Repo","intro":"主题 GitHub 仓库","link":"https://github.com/fluid-dev/hexo-theme-fluid","image":"/img/favicon.png"},{"title":"Fluid Example","intro":"主题操作示例","link":"https://hexo.fluid-dev.com/docs/example/","image":"/img/favicon.png"}]}}}},"excerpt":"","more":"<p><strong>我的解决方法</strong>:</p>\n<ol>\n<li><p>打开”应用程序”文件夹;</p>\n</li>\n<li><p>定位到 XAMPP 文件夹;</p>\n</li>\n<li><p>右击, 选择-&gt;显示简介;</p>\n</li>\n<li><p>在弹出框中选择-&gt;”共享与权限”;</p>\n</li>\n<li><p>点击右下角 🔐 标志;</p>\n</li>\n<li><p>输入管理员密码</p>\n</li>\n<li><p>将everyone 权限改为”读与写”;</p>\n</li>\n<li><p>点击 +- 右边的 “设置” 按钮,选择-&gt;”应用到包含的项目”; 重新点击🔐 加锁;</p>\n</li>\n<li><p>关闭简介窗口</p>\n</li>\n</ol>\n<h3 id=\"摘要\"><a href=\"#摘要\" class=\"headerlink\" title=\"摘要\"></a>摘要</h3><p>PHP 创建文件目录权限设置</p>\n"},{"title":"闭包","hide":true,"_content":"\n#### 闭包的三种形式\n\n- 全局函数是一种没有函数名但是不捕获任何值的闭包 \n- 嵌套函数是一种有函数名且从上级包裹的函数中捕获值得闭包\n- 闭包表达式是一种没有名字,但可以从周边上下文中捕获值,使用轻量级语法书写的闭包\n\n闭包表达式的一般形式\n\n```\n{ (parameters) -> returnType in\n     statements\n}\n\n```\n\n#### 逃逸闭包\n特点: 包含闭包的函数返回之后才执行.\n功能: 常见于异步数据回调处理,例如网络请求回调.\n\n当一个闭包作为参数传到一个函数中，但是这个闭包在函数返回之后才被执行，我们称该闭包从函数中逃逸。当 你定义接受闭包作为参数的函数时，你可以在参数名之前标注 @escaping ，用来指明这个闭包是允许“逃逸”出 这个函数的\n\n举个例子，很多启动异 步操作的函数接受一个闭包参数作为 completion handler。这类函数会在异步操作开始之后立刻返回，但是闭包 直到异步操作结束后才会被调用。在这种情况下，闭包需要“逃逸”出函数，因为闭包需要在函数返回之后被调用。\n\n#### 自动闭包\n\n特点:   不接收参数,被调用的时候才返回表达式的值.\n功能:   延迟求值,减少计算成本.\n\n自动闭包是一种自动创建的闭包，用于包装传递给函数作为参数的表达式。这种闭包不接受任何参数，当它被调用的时候，会返回被包装在其中的表达式的值。这种便利语法让你能够省略闭包的花括号，用一个普通的表达式\n来代替显式的闭包。\n\n自动闭包让你能够延迟求值，因为直到你调用这个闭包，代码段才会被执行。延迟求值对于那些有副作用(Side Effect)和高计算成本的代码来说是很有益处的，因为它使得你能控制代码的执行时机。\n\n```\nvar customersInLine = [\"Chris\", \"Alex\", \"Ewa\", \"Barry\", \"Daniella\"] \nprint(customersInLine.count)\n// 打印出 \"5\"\nlet customerProvider = { customersInLine.remove(at: 0) } \nprint(customersInLine.count)\n// 打印出 \"5\"\nprint(\"Now serving \\(customerProvider())!\") // Prints \"Now serving Chris!\"\nprint(customersInLine.count)\n// 打印出 \"4\"\n```\n","source":"_posts/Swift/-Swift---4-闭包.md","raw":"\n---\ntitle:  闭包\ncategories:\n- Swift\ntags: \n- Swift\nhide: true\n---\n\n#### 闭包的三种形式\n\n- 全局函数是一种没有函数名但是不捕获任何值的闭包 \n- 嵌套函数是一种有函数名且从上级包裹的函数中捕获值得闭包\n- 闭包表达式是一种没有名字,但可以从周边上下文中捕获值,使用轻量级语法书写的闭包\n\n闭包表达式的一般形式\n\n```\n{ (parameters) -> returnType in\n     statements\n}\n\n```\n\n#### 逃逸闭包\n特点: 包含闭包的函数返回之后才执行.\n功能: 常见于异步数据回调处理,例如网络请求回调.\n\n当一个闭包作为参数传到一个函数中，但是这个闭包在函数返回之后才被执行，我们称该闭包从函数中逃逸。当 你定义接受闭包作为参数的函数时，你可以在参数名之前标注 @escaping ，用来指明这个闭包是允许“逃逸”出 这个函数的\n\n举个例子，很多启动异 步操作的函数接受一个闭包参数作为 completion handler。这类函数会在异步操作开始之后立刻返回，但是闭包 直到异步操作结束后才会被调用。在这种情况下，闭包需要“逃逸”出函数，因为闭包需要在函数返回之后被调用。\n\n#### 自动闭包\n\n特点:   不接收参数,被调用的时候才返回表达式的值.\n功能:   延迟求值,减少计算成本.\n\n自动闭包是一种自动创建的闭包，用于包装传递给函数作为参数的表达式。这种闭包不接受任何参数，当它被调用的时候，会返回被包装在其中的表达式的值。这种便利语法让你能够省略闭包的花括号，用一个普通的表达式\n来代替显式的闭包。\n\n自动闭包让你能够延迟求值，因为直到你调用这个闭包，代码段才会被执行。延迟求值对于那些有副作用(Side Effect)和高计算成本的代码来说是很有益处的，因为它使得你能控制代码的执行时机。\n\n```\nvar customersInLine = [\"Chris\", \"Alex\", \"Ewa\", \"Barry\", \"Daniella\"] \nprint(customersInLine.count)\n// 打印出 \"5\"\nlet customerProvider = { customersInLine.remove(at: 0) } \nprint(customersInLine.count)\n// 打印出 \"5\"\nprint(\"Now serving \\(customerProvider())!\") // Prints \"Now serving Chris!\"\nprint(customersInLine.count)\n// 打印出 \"4\"\n```\n","slug":"Swift/-Swift---4-闭包","published":1,"date":"2020-09-23T10:25:59.000Z","updated":"2020-09-27T11:59:20.589Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgq6gnw70007t29k7qrb1uus","content":"<h4 id=\"闭包的三种形式\"><a href=\"#闭包的三种形式\" class=\"headerlink\" title=\"闭包的三种形式\"></a>闭包的三种形式</h4><ul>\n<li>全局函数是一种没有函数名但是不捕获任何值的闭包 </li>\n<li>嵌套函数是一种有函数名且从上级包裹的函数中捕获值得闭包</li>\n<li>闭包表达式是一种没有名字,但可以从周边上下文中捕获值,使用轻量级语法书写的闭包</li>\n</ul>\n<p>闭包表达式的一般形式</p>\n<pre><code class=\"hljs clojure\">&#123; (<span class=\"hljs-name\">parameters</span>) -&gt; returnType in\n     statements\n&#125;\n</code></pre>\n\n<h4 id=\"逃逸闭包\"><a href=\"#逃逸闭包\" class=\"headerlink\" title=\"逃逸闭包\"></a>逃逸闭包</h4><p>特点: 包含闭包的函数返回之后才执行.<br>功能: 常见于异步数据回调处理,例如网络请求回调.</p>\n<p>当一个闭包作为参数传到一个函数中，但是这个闭包在函数返回之后才被执行，我们称该闭包从函数中逃逸。当 你定义接受闭包作为参数的函数时，你可以在参数名之前标注 @escaping ，用来指明这个闭包是允许“逃逸”出 这个函数的</p>\n<p>举个例子，很多启动异 步操作的函数接受一个闭包参数作为 completion handler。这类函数会在异步操作开始之后立刻返回，但是闭包 直到异步操作结束后才会被调用。在这种情况下，闭包需要“逃逸”出函数，因为闭包需要在函数返回之后被调用。</p>\n<h4 id=\"自动闭包\"><a href=\"#自动闭包\" class=\"headerlink\" title=\"自动闭包\"></a>自动闭包</h4><p>特点:   不接收参数,被调用的时候才返回表达式的值.<br>功能:   延迟求值,减少计算成本.</p>\n<p>自动闭包是一种自动创建的闭包，用于包装传递给函数作为参数的表达式。这种闭包不接受任何参数，当它被调用的时候，会返回被包装在其中的表达式的值。这种便利语法让你能够省略闭包的花括号，用一个普通的表达式<br>来代替显式的闭包。</p>\n<p>自动闭包让你能够延迟求值，因为直到你调用这个闭包，代码段才会被执行。延迟求值对于那些有副作用(Side Effect)和高计算成本的代码来说是很有益处的，因为它使得你能控制代码的执行时机。</p>\n<pre><code class=\"hljs stylus\"><span class=\"hljs-selector-tag\">var</span> customersInLine = [<span class=\"hljs-string\">&quot;Chris&quot;</span>, <span class=\"hljs-string\">&quot;Alex&quot;</span>, <span class=\"hljs-string\">&quot;Ewa&quot;</span>, <span class=\"hljs-string\">&quot;Barry&quot;</span>, <span class=\"hljs-string\">&quot;Daniella&quot;</span>] \n<span class=\"hljs-function\"><span class=\"hljs-title\">print</span><span class=\"hljs-params\">(customersInLine.count)</span></span>\n<span class=\"hljs-comment\">// 打印出 &quot;5&quot;</span>\nlet customerProvider = &#123; customersInLine.remove(at: <span class=\"hljs-number\">0</span>) &#125; \n<span class=\"hljs-function\"><span class=\"hljs-title\">print</span><span class=\"hljs-params\">(customersInLine.count)</span></span>\n<span class=\"hljs-comment\">// 打印出 &quot;5&quot;</span>\n<span class=\"hljs-function\"><span class=\"hljs-title\">print</span><span class=\"hljs-params\">(<span class=\"hljs-string\">&quot;Now serving \\(customerProvider())!&quot;</span>)</span></span> <span class=\"hljs-comment\">// Prints &quot;Now serving Chris!&quot;</span>\n<span class=\"hljs-function\"><span class=\"hljs-title\">print</span><span class=\"hljs-params\">(customersInLine.count)</span></span>\n<span class=\"hljs-comment\">// 打印出 &quot;4&quot;</span></code></pre>\n","site":{"data":{"fluid_static_prefix":{"internal_js":"/js","internal_css":"/css","internal_img":"/img","iconfont":"//at.alicdn.com/t/font_1736178_kmeydafke9r.css","anchor":"https://cdn.staticfile.org/anchor-js/4.2.2/","github_markdown":"https://cdn.staticfile.org/github-markdown-css/4.0.0/","jquery":"https://cdn.staticfile.org/jquery/3.4.1/","bootstrap":"https://cdn.staticfile.org/twitter-bootstrap/4.4.1/","highlightjs":"https://cdn.staticfile.org/highlight.js/10.0.0/","prismjs":"https://cdn.staticfile.org/prism/1.21.0/","tocbot":"https://cdn.staticfile.org/tocbot/4.11.1/","typed":"https://cdn.staticfile.org/typed.js/2.0.11/","fancybox":"https://cdn.staticfile.org/fancybox/3.5.7/","mathjax":"https://cdn.staticfile.org/mathjax/3.0.5/es5/","katex":"https://cdn.staticfile.org/KaTeX/0.11.1/","aplayer":"https://cdn.staticfile.org/aplayer/1.10.1/","busuanzi":"https://busuanzi.ibruce.info/busuanzi/2.3/","clipboard":"https://cdn.staticfile.org/clipboard.js/2.0.6/","mermaid":"https://cdn.staticfile.org/mermaid/8.5.0/","valine":"https://cdn.staticfile.org/valine/1.4.14/","gitalk":"https://cdn.staticfile.org/gitalk/1.6.2/","blueimp_md5":"https://cdn.staticfile.org/blueimp-md5/2.13.0/","disqusjs":"https://cdn.jsdelivr.net/npm/disqusjs@1.0/dist/","hint":"/lib/hint/"},"fluid_config":{"favicon":"/img/favicon.png","apple_touch_icon":"/img/favicon.png","title_join_string":" - ","force_https":false,"code":{"copy_btn":true,"highlight":{"enable":true,"lib":"highlightjs","highlightjs":{"style":"Github Gist","bg_color":false},"prismjs":{"style":"default","preprocess":true}}},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"_","loop":false},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"right","visible":"hover","icon":""},"mouse_click":{"enable":false,"style":"values"}},"dark_mode":{"enable":true,"default":"auto"},"color":{"body_bg_color":"#eee","body_bg_color_dark":"#181c27","navbar_bg_color":"#2f4154","navbar_bg_color_dark":"#1f3144","navbar_text_color":"#fff","navbar_text_color_dark":"#d0d0d0","text_color":"#3c4858","text_color_dark":"#c4c6c9","sec_text_color":"#718096","sec_text_color_dark":"#a7a9ad","post_text_color":"#2c3e50","post_text_color_dark":"#c4c6c9","post_heading_color":"#1a202c","post_heading_color_dark":"#c4c6c9","post_link_color":"#0366d6","post_link_color_dark":"#1589e9","link_hover_color":"#30a9de","link_hover_color_dark":"#30a9de","link_hover_bg_color":"#f8f9fa","link_hover_bg_color_dark":"#364151","board_color":"#fff","board_color_dark":"#252d38"},"font":{"font_size":"16px","font_family":null,"code_font_size":"85%"},"custom_js":null,"custom_css":null,"custom_html":"","web_analytics":{"enable":false,"baidu":null,"google":null,"gtag":null,"tencent":{"sid":null,"cid":null},"woyaola":null,"cnzz":null,"leancloud":{"app_id":null,"app_key":null,"server_url":null}},"lazyload":{"enable":true,"onlypost":false},"daovoice":{"enable":false,"appid":""},"aplayer":{"enable":false,"autoplay":false,"loop":"all","order":"random","theme":"#b7daff","songs":[{"name":"name","artist":"artist","url":"/songs/test.mp3","cover":"/img/cover.jpg"},{"name":"name","artist":"artist","url":"https://...url.mp3","cover":"https://...cover.jpg"}]},"version":{"check":false},"navbar":{"blog_title":"吃面多放葱","ground_glass":{"enable":false,"px":3,"alpha":0.7},"menu":[{"key":"home","link":"/","icon":"iconfont icon-home-fill"},{"key":"category","link":"/categories/","icon":"iconfont icon-category-fill"},{"key":"tag","link":"/tags/","icon":"iconfont icon-tags-fill"},{"key":"about","link":"/about/","icon":"iconfont icon-user-fill"}]},"search":{"enable":true,"path":"/local-search.xml","generate_path":"/local-search.xml","field":"post","content":true},"scroll_down_arrow":{"enable":true,"banner_height_limit":90,"scroll_after_turning_page":true},"banner_parallax":true,"footer":{"statistics":{"enable":false,"source":"busuanzi","pv_format":"总访问量 {} 次","uv_format":"总访客数 {} 人"},"beian":{"enable":false,"icp_text":"京ICP证123456号","police_text":"京公网安备12345678号","police_code":12345678,"police_icon":"/img/police_beian.png"}},"scroll_top_arrow":{"enable":true},"index":{"banner_img":"/img/default.png","banner_img_height":100,"banner_mask_alpha":0.3,"post_default_img":"","slogan":{"enable":true,"text":"像蚂蚁一样工作，像蝴蝶一样生活"},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"category":true,"tag":true}},"page":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3},"post":{"banner_img":"/img/default.png","banner_img_height":70,"banner_mask_alpha":0.3,"meta":{"author":{"enable":false},"date":{"enable":true,"format":"LL a"},"wordcount":{"enable":true,"format":"{} 字"},"min2read":{"enable":true,"format":"{} 分钟","words":100},"views":{"enable":false,"source":"busuanzi","format":"{} 次"}},"updated":{"enable":false,"content":"本文最后更新于：","relative":false},"toc":{"enable":true,"headingSelector":"h1,h2,h3,h4,h5,h6","collapseDepth":0},"copyright":{"enable":true,"content":"本博客所有文章除特别声明外，均采用 <a href=\"https://creativecommons.org/licenses/by-sa/4.0/deed.zh\" rel=\"nofollow noopener\">CC BY-SA 4.0 协议</a> ，转载请注明出处！"},"prev_next":{"enable":true},"custom":{"enable":false,"content":"<img src=\"https://octodex.github.com/images/jetpacktocat.png\" class=\"rounded mx-auto d-block mt-5\" style=\"width:150px; height:150px;\">"},"image_zoom":{"enable":true},"footnote":{"enable":true,"header":""},"math":{"enable":false,"specific":false,"engine":"mathjax"},"mermaid":{"enable":false,"specific":false,"options":{"theme":"default"}},"comments":{"enable":false,"type":"disqus"}},"utterances":{"repo":null,"issue_term":"pathname","label":"utterances","theme":"github-light","theme_dark":"github-dark","crossorigin":"anonymous"},"disqus":{"shortname":null,"disqusjs":false,"apikey":null},"gitalk":{"clientID":null,"clientSecret":null,"repo":null,"owner":null,"admin":["name"],"id":"location.pathname","language":"zh-CN","labels":["Gitalk"],"perPage":10,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true},"valine":{"appid":null,"appkey":null,"placeholder":"说点什么","path":"window.location.pathname","avatar":"retro","meta":["nick","mail","link"],"pageSize":10,"lang":"zh-CN","highlight":false,"recordIP":false,"serverURLs":null},"changyan":{"appid":"","appkey":""},"livere":{"uid":""},"remark42":{"host":"https://remark.haoyizebo.com","site_id":"haoyizebo","max_shown_comments":10,"locale":"zh"},"archive":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null},"category":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"post_limit":10,"order_by":"-length","collapse_depth":0},"tag":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null,"tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"avatar":"/img/avatar.png","name":"蔺国防","introduce":"移动应用开发者，历史文学爱好者","icons":[{"class":"iconfont icon-github-fill","link":"https://github.com","tip":"GitHub"},{"class":"iconfont icon-douban-fill","link":"https://douban.com","tip":"豆瓣"},{"class":"iconfont icon-wechat-fill","qrcode":"/img/favicon.png"}]},"page404":{"banner_img":"/img/default.png","banner_img_height":85,"banner_mask_alpha":0.3,"subtitle":"Page not found"},"links":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"items":[{"title":"Fluid Docs","intro":"主题使用指南","link":"https://hexo.fluid-dev.com/docs/","image":"/img/favicon.png"},{"title":"Fluid Repo","intro":"主题 GitHub 仓库","link":"https://github.com/fluid-dev/hexo-theme-fluid","image":"/img/favicon.png"},{"title":"Fluid Example","intro":"主题操作示例","link":"https://hexo.fluid-dev.com/docs/example/","image":"/img/favicon.png"}]}}}},"excerpt":"","more":"<h4 id=\"闭包的三种形式\"><a href=\"#闭包的三种形式\" class=\"headerlink\" title=\"闭包的三种形式\"></a>闭包的三种形式</h4><ul>\n<li>全局函数是一种没有函数名但是不捕获任何值的闭包 </li>\n<li>嵌套函数是一种有函数名且从上级包裹的函数中捕获值得闭包</li>\n<li>闭包表达式是一种没有名字,但可以从周边上下文中捕获值,使用轻量级语法书写的闭包</li>\n</ul>\n<p>闭包表达式的一般形式</p>\n<pre><code class=\"hljs clojure\">&#123; (<span class=\"hljs-name\">parameters</span>) -&gt; returnType in\n     statements\n&#125;\n</code></pre>\n\n<h4 id=\"逃逸闭包\"><a href=\"#逃逸闭包\" class=\"headerlink\" title=\"逃逸闭包\"></a>逃逸闭包</h4><p>特点: 包含闭包的函数返回之后才执行.<br>功能: 常见于异步数据回调处理,例如网络请求回调.</p>\n<p>当一个闭包作为参数传到一个函数中，但是这个闭包在函数返回之后才被执行，我们称该闭包从函数中逃逸。当 你定义接受闭包作为参数的函数时，你可以在参数名之前标注 @escaping ，用来指明这个闭包是允许“逃逸”出 这个函数的</p>\n<p>举个例子，很多启动异 步操作的函数接受一个闭包参数作为 completion handler。这类函数会在异步操作开始之后立刻返回，但是闭包 直到异步操作结束后才会被调用。在这种情况下，闭包需要“逃逸”出函数，因为闭包需要在函数返回之后被调用。</p>\n<h4 id=\"自动闭包\"><a href=\"#自动闭包\" class=\"headerlink\" title=\"自动闭包\"></a>自动闭包</h4><p>特点:   不接收参数,被调用的时候才返回表达式的值.<br>功能:   延迟求值,减少计算成本.</p>\n<p>自动闭包是一种自动创建的闭包，用于包装传递给函数作为参数的表达式。这种闭包不接受任何参数，当它被调用的时候，会返回被包装在其中的表达式的值。这种便利语法让你能够省略闭包的花括号，用一个普通的表达式<br>来代替显式的闭包。</p>\n<p>自动闭包让你能够延迟求值，因为直到你调用这个闭包，代码段才会被执行。延迟求值对于那些有副作用(Side Effect)和高计算成本的代码来说是很有益处的，因为它使得你能控制代码的执行时机。</p>\n<pre><code class=\"hljs stylus\"><span class=\"hljs-selector-tag\">var</span> customersInLine = [<span class=\"hljs-string\">&quot;Chris&quot;</span>, <span class=\"hljs-string\">&quot;Alex&quot;</span>, <span class=\"hljs-string\">&quot;Ewa&quot;</span>, <span class=\"hljs-string\">&quot;Barry&quot;</span>, <span class=\"hljs-string\">&quot;Daniella&quot;</span>] \n<span class=\"hljs-function\"><span class=\"hljs-title\">print</span><span class=\"hljs-params\">(customersInLine.count)</span></span>\n<span class=\"hljs-comment\">// 打印出 &quot;5&quot;</span>\nlet customerProvider = &#123; customersInLine.remove(at: <span class=\"hljs-number\">0</span>) &#125; \n<span class=\"hljs-function\"><span class=\"hljs-title\">print</span><span class=\"hljs-params\">(customersInLine.count)</span></span>\n<span class=\"hljs-comment\">// 打印出 &quot;5&quot;</span>\n<span class=\"hljs-function\"><span class=\"hljs-title\">print</span><span class=\"hljs-params\">(<span class=\"hljs-string\">&quot;Now serving \\(customerProvider())!&quot;</span>)</span></span> <span class=\"hljs-comment\">// Prints &quot;Now serving Chris!&quot;</span>\n<span class=\"hljs-function\"><span class=\"hljs-title\">print</span><span class=\"hljs-params\">(customersInLine.count)</span></span>\n<span class=\"hljs-comment\">// 打印出 &quot;4&quot;</span></code></pre>\n"},{"title":"OS check API","hide":true,"_content":"#### 示例\n\n```\nif #available(iOS 10, macOS 10.12, *) {\n    // Use iOS 10 APIs on iOS, and use macOS 10.12 APIs on macOS\n} else {\n    // Fall back to earlier iOS and macOS APIs\n}\n\n摘录来自: Apple Inc. “The Swift Programming Language (Swift 4)”。 iBooks. \n\n```\n","source":"_posts/Swift/Swift---4-Checking-API-Availability.md","raw":"\n---\ntitle:  OS check API\ncategories:\n- Swift\ntags: \n- Swift\nhide: true\n---\n#### 示例\n\n```\nif #available(iOS 10, macOS 10.12, *) {\n    // Use iOS 10 APIs on iOS, and use macOS 10.12 APIs on macOS\n} else {\n    // Fall back to earlier iOS and macOS APIs\n}\n\n摘录来自: Apple Inc. “The Swift Programming Language (Swift 4)”。 iBooks. \n\n```\n","slug":"Swift/Swift---4-Checking-API-Availability","published":1,"date":"2020-09-23T10:25:59.000Z","updated":"2020-09-27T12:00:02.019Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgq6gnwa000bt29k1k5edma7","content":"<h4 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h4><pre><code class=\"hljs sql\">if <span class=\"hljs-comment\">#available(iOS 10, macOS 10.12, *) &#123;</span>\n    // <span class=\"hljs-keyword\">Use</span> iOS <span class=\"hljs-number\">10</span> APIs <span class=\"hljs-keyword\">on</span> iOS, <span class=\"hljs-keyword\">and</span> <span class=\"hljs-keyword\">use</span> macOS <span class=\"hljs-number\">10.12</span> APIs <span class=\"hljs-keyword\">on</span> macOS\n&#125; <span class=\"hljs-keyword\">else</span> &#123;\n    // Fall back <span class=\"hljs-keyword\">to</span> earlier iOS <span class=\"hljs-keyword\">and</span> macOS APIs\n&#125;\n\n摘录来自: Apple Inc. “The Swift Programming <span class=\"hljs-keyword\">Language</span> (Swift <span class=\"hljs-number\">4</span>)”。 iBooks. \n</code></pre>\n","site":{"data":{"fluid_static_prefix":{"internal_js":"/js","internal_css":"/css","internal_img":"/img","iconfont":"//at.alicdn.com/t/font_1736178_kmeydafke9r.css","anchor":"https://cdn.staticfile.org/anchor-js/4.2.2/","github_markdown":"https://cdn.staticfile.org/github-markdown-css/4.0.0/","jquery":"https://cdn.staticfile.org/jquery/3.4.1/","bootstrap":"https://cdn.staticfile.org/twitter-bootstrap/4.4.1/","highlightjs":"https://cdn.staticfile.org/highlight.js/10.0.0/","prismjs":"https://cdn.staticfile.org/prism/1.21.0/","tocbot":"https://cdn.staticfile.org/tocbot/4.11.1/","typed":"https://cdn.staticfile.org/typed.js/2.0.11/","fancybox":"https://cdn.staticfile.org/fancybox/3.5.7/","mathjax":"https://cdn.staticfile.org/mathjax/3.0.5/es5/","katex":"https://cdn.staticfile.org/KaTeX/0.11.1/","aplayer":"https://cdn.staticfile.org/aplayer/1.10.1/","busuanzi":"https://busuanzi.ibruce.info/busuanzi/2.3/","clipboard":"https://cdn.staticfile.org/clipboard.js/2.0.6/","mermaid":"https://cdn.staticfile.org/mermaid/8.5.0/","valine":"https://cdn.staticfile.org/valine/1.4.14/","gitalk":"https://cdn.staticfile.org/gitalk/1.6.2/","blueimp_md5":"https://cdn.staticfile.org/blueimp-md5/2.13.0/","disqusjs":"https://cdn.jsdelivr.net/npm/disqusjs@1.0/dist/","hint":"/lib/hint/"},"fluid_config":{"favicon":"/img/favicon.png","apple_touch_icon":"/img/favicon.png","title_join_string":" - ","force_https":false,"code":{"copy_btn":true,"highlight":{"enable":true,"lib":"highlightjs","highlightjs":{"style":"Github Gist","bg_color":false},"prismjs":{"style":"default","preprocess":true}}},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"_","loop":false},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"right","visible":"hover","icon":""},"mouse_click":{"enable":false,"style":"values"}},"dark_mode":{"enable":true,"default":"auto"},"color":{"body_bg_color":"#eee","body_bg_color_dark":"#181c27","navbar_bg_color":"#2f4154","navbar_bg_color_dark":"#1f3144","navbar_text_color":"#fff","navbar_text_color_dark":"#d0d0d0","text_color":"#3c4858","text_color_dark":"#c4c6c9","sec_text_color":"#718096","sec_text_color_dark":"#a7a9ad","post_text_color":"#2c3e50","post_text_color_dark":"#c4c6c9","post_heading_color":"#1a202c","post_heading_color_dark":"#c4c6c9","post_link_color":"#0366d6","post_link_color_dark":"#1589e9","link_hover_color":"#30a9de","link_hover_color_dark":"#30a9de","link_hover_bg_color":"#f8f9fa","link_hover_bg_color_dark":"#364151","board_color":"#fff","board_color_dark":"#252d38"},"font":{"font_size":"16px","font_family":null,"code_font_size":"85%"},"custom_js":null,"custom_css":null,"custom_html":"","web_analytics":{"enable":false,"baidu":null,"google":null,"gtag":null,"tencent":{"sid":null,"cid":null},"woyaola":null,"cnzz":null,"leancloud":{"app_id":null,"app_key":null,"server_url":null}},"lazyload":{"enable":true,"onlypost":false},"daovoice":{"enable":false,"appid":""},"aplayer":{"enable":false,"autoplay":false,"loop":"all","order":"random","theme":"#b7daff","songs":[{"name":"name","artist":"artist","url":"/songs/test.mp3","cover":"/img/cover.jpg"},{"name":"name","artist":"artist","url":"https://...url.mp3","cover":"https://...cover.jpg"}]},"version":{"check":false},"navbar":{"blog_title":"吃面多放葱","ground_glass":{"enable":false,"px":3,"alpha":0.7},"menu":[{"key":"home","link":"/","icon":"iconfont icon-home-fill"},{"key":"category","link":"/categories/","icon":"iconfont icon-category-fill"},{"key":"tag","link":"/tags/","icon":"iconfont icon-tags-fill"},{"key":"about","link":"/about/","icon":"iconfont icon-user-fill"}]},"search":{"enable":true,"path":"/local-search.xml","generate_path":"/local-search.xml","field":"post","content":true},"scroll_down_arrow":{"enable":true,"banner_height_limit":90,"scroll_after_turning_page":true},"banner_parallax":true,"footer":{"statistics":{"enable":false,"source":"busuanzi","pv_format":"总访问量 {} 次","uv_format":"总访客数 {} 人"},"beian":{"enable":false,"icp_text":"京ICP证123456号","police_text":"京公网安备12345678号","police_code":12345678,"police_icon":"/img/police_beian.png"}},"scroll_top_arrow":{"enable":true},"index":{"banner_img":"/img/default.png","banner_img_height":100,"banner_mask_alpha":0.3,"post_default_img":"","slogan":{"enable":true,"text":"像蚂蚁一样工作，像蝴蝶一样生活"},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"category":true,"tag":true}},"page":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3},"post":{"banner_img":"/img/default.png","banner_img_height":70,"banner_mask_alpha":0.3,"meta":{"author":{"enable":false},"date":{"enable":true,"format":"LL a"},"wordcount":{"enable":true,"format":"{} 字"},"min2read":{"enable":true,"format":"{} 分钟","words":100},"views":{"enable":false,"source":"busuanzi","format":"{} 次"}},"updated":{"enable":false,"content":"本文最后更新于：","relative":false},"toc":{"enable":true,"headingSelector":"h1,h2,h3,h4,h5,h6","collapseDepth":0},"copyright":{"enable":true,"content":"本博客所有文章除特别声明外，均采用 <a href=\"https://creativecommons.org/licenses/by-sa/4.0/deed.zh\" rel=\"nofollow noopener\">CC BY-SA 4.0 协议</a> ，转载请注明出处！"},"prev_next":{"enable":true},"custom":{"enable":false,"content":"<img src=\"https://octodex.github.com/images/jetpacktocat.png\" class=\"rounded mx-auto d-block mt-5\" style=\"width:150px; height:150px;\">"},"image_zoom":{"enable":true},"footnote":{"enable":true,"header":""},"math":{"enable":false,"specific":false,"engine":"mathjax"},"mermaid":{"enable":false,"specific":false,"options":{"theme":"default"}},"comments":{"enable":false,"type":"disqus"}},"utterances":{"repo":null,"issue_term":"pathname","label":"utterances","theme":"github-light","theme_dark":"github-dark","crossorigin":"anonymous"},"disqus":{"shortname":null,"disqusjs":false,"apikey":null},"gitalk":{"clientID":null,"clientSecret":null,"repo":null,"owner":null,"admin":["name"],"id":"location.pathname","language":"zh-CN","labels":["Gitalk"],"perPage":10,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true},"valine":{"appid":null,"appkey":null,"placeholder":"说点什么","path":"window.location.pathname","avatar":"retro","meta":["nick","mail","link"],"pageSize":10,"lang":"zh-CN","highlight":false,"recordIP":false,"serverURLs":null},"changyan":{"appid":"","appkey":""},"livere":{"uid":""},"remark42":{"host":"https://remark.haoyizebo.com","site_id":"haoyizebo","max_shown_comments":10,"locale":"zh"},"archive":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null},"category":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"post_limit":10,"order_by":"-length","collapse_depth":0},"tag":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null,"tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"avatar":"/img/avatar.png","name":"蔺国防","introduce":"移动应用开发者，历史文学爱好者","icons":[{"class":"iconfont icon-github-fill","link":"https://github.com","tip":"GitHub"},{"class":"iconfont icon-douban-fill","link":"https://douban.com","tip":"豆瓣"},{"class":"iconfont icon-wechat-fill","qrcode":"/img/favicon.png"}]},"page404":{"banner_img":"/img/default.png","banner_img_height":85,"banner_mask_alpha":0.3,"subtitle":"Page not found"},"links":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"items":[{"title":"Fluid Docs","intro":"主题使用指南","link":"https://hexo.fluid-dev.com/docs/","image":"/img/favicon.png"},{"title":"Fluid Repo","intro":"主题 GitHub 仓库","link":"https://github.com/fluid-dev/hexo-theme-fluid","image":"/img/favicon.png"},{"title":"Fluid Example","intro":"主题操作示例","link":"https://hexo.fluid-dev.com/docs/example/","image":"/img/favicon.png"}]}}}},"excerpt":"","more":"<h4 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h4><pre><code class=\"hljs sql\">if <span class=\"hljs-comment\">#available(iOS 10, macOS 10.12, *) &#123;</span>\n    // <span class=\"hljs-keyword\">Use</span> iOS <span class=\"hljs-number\">10</span> APIs <span class=\"hljs-keyword\">on</span> iOS, <span class=\"hljs-keyword\">and</span> <span class=\"hljs-keyword\">use</span> macOS <span class=\"hljs-number\">10.12</span> APIs <span class=\"hljs-keyword\">on</span> macOS\n&#125; <span class=\"hljs-keyword\">else</span> &#123;\n    // Fall back <span class=\"hljs-keyword\">to</span> earlier iOS <span class=\"hljs-keyword\">and</span> macOS APIs\n&#125;\n\n摘录来自: Apple Inc. “The Swift Programming <span class=\"hljs-keyword\">Language</span> (Swift <span class=\"hljs-number\">4</span>)”。 iBooks. \n</code></pre>\n"},{"title":"函数","hide":true,"_content":"#### 函数参数标签和参数名\n\n每个函数参数都有参数标签和参数名称。 调用函数时使用参数标签; 每个参数都写在函数调用中，其参数标签之前。 参数名称用于实现该函数。 默认情况下，**参数使用其参数名称作为参数标号.**\n\n如果你不想给一个参数添加参数标签,你可以在该参数名前画一个(_)来替代参数标签;\n```\nfunc someFunction(_ firstParameterName: Int, secondParameterName: Int) {\n    // In the function body, firstParameterName and secondParameterName\n    // refer to the argument values for the first and second parameters.\n}\nsomeFunction(1, secondParameterName: 2)\n\n摘录来自: Apple Inc. “The Swift Programming Language (Swift 4)”。 iBooks. \n```\n\n#### 默认参数值\n\n在参数类型后面添加等号然后分配一个默认值,当调用该函数时,若不给其中有默认值得参数赋值,则参数值为默认值;\n\n```\nfunc someFunction(parameterWithoutDefault: Int, parameterWithDefault: Int = 12) {\n    // If you omit the second argument when calling this function, then\n    // the value of parameterWithDefault is 12 inside the function body.\n}\nsomeFunction(parameterWithoutDefault: 3, parameterWithDefault: 6) // parameterWithDefault is 6\nsomeFunction(parameterWithoutDefault: 4) // parameterWithDefault is 12\n\n摘录来自: Apple Inc. “The Swift Programming Language (Swift 4)”。 iBooks. \n```\n####  变量参数(Variadic Parameters)\n\n```\nfunc arithmeticMean(_ numbers: Double...) -> Double {\n    var total: Double = 0\n    for number in numbers {\n        total += number\n    }\n    return total / Double(numbers.count)\n}\narithmeticMean(1, 2, 3, 4, 5)\n// returns 3.0, which is the arithmetic mean of these five numbers\n\n摘录来自: Apple Inc. “The Swift Programming Language (Swift 4)”。 iBooks. \n\n```\n> NOTE\n> A function may have at most one variadic parameter.”\n> 摘录来自: Apple Inc. “The Swift Programming Language (Swift 4)。 iBooks.\n\n#### In-Out Parameters \n\n函数参数默认是常量。 尝试从该函数体内更改函数参数的值会导致编译错误。 这意味着您不能错误地更改参数的值。 如果您想要一个函数修改参数的值，并且在函数调用结束后希望这些更改保持不变，请将该参数定义为in-out参数。\n\n给in-out参数赋值时,必须为变量,并且在变量类型之前加(&),来证明这个参数是可以被函数改变的;\n\n> NOTE\n> In-out parameters cannot have default values, and variadic parameters cannot be marked as inout.”\n> 摘录来自: Apple Inc. “The Swift Programming Language (Swift 4)”。 iBooks. \n\n举例来讲,两个变量交换值\n\n```\nfunc swapTwoInts(_ a: inout Int, _ b: inout Int) {\n    let temporaryA = a\n    a = b\n    b = temporaryA\n}\n\nvar someInt = 3\nvar anotherInt = 107\n\nswapTwoInts(&someInt, &anotherInt)\n\nprint(\"someInt is now \\(someInt), and anotherInt is now \\(anotherInt)\")\n// Prints \"someInt is now 107, and anotherInt is now 3\n\n摘录来自: Apple Inc. “The Swift Programming Language (Swift 4)。 iBooks. \n\n```\n","source":"_posts/Swift/Swift---4-函数.md","raw":"\n---\ntitle:  函数\ncategories:\n- Swift\ntags: \n- Swift\nhide: true\n---\n#### 函数参数标签和参数名\n\n每个函数参数都有参数标签和参数名称。 调用函数时使用参数标签; 每个参数都写在函数调用中，其参数标签之前。 参数名称用于实现该函数。 默认情况下，**参数使用其参数名称作为参数标号.**\n\n如果你不想给一个参数添加参数标签,你可以在该参数名前画一个(_)来替代参数标签;\n```\nfunc someFunction(_ firstParameterName: Int, secondParameterName: Int) {\n    // In the function body, firstParameterName and secondParameterName\n    // refer to the argument values for the first and second parameters.\n}\nsomeFunction(1, secondParameterName: 2)\n\n摘录来自: Apple Inc. “The Swift Programming Language (Swift 4)”。 iBooks. \n```\n\n#### 默认参数值\n\n在参数类型后面添加等号然后分配一个默认值,当调用该函数时,若不给其中有默认值得参数赋值,则参数值为默认值;\n\n```\nfunc someFunction(parameterWithoutDefault: Int, parameterWithDefault: Int = 12) {\n    // If you omit the second argument when calling this function, then\n    // the value of parameterWithDefault is 12 inside the function body.\n}\nsomeFunction(parameterWithoutDefault: 3, parameterWithDefault: 6) // parameterWithDefault is 6\nsomeFunction(parameterWithoutDefault: 4) // parameterWithDefault is 12\n\n摘录来自: Apple Inc. “The Swift Programming Language (Swift 4)”。 iBooks. \n```\n####  变量参数(Variadic Parameters)\n\n```\nfunc arithmeticMean(_ numbers: Double...) -> Double {\n    var total: Double = 0\n    for number in numbers {\n        total += number\n    }\n    return total / Double(numbers.count)\n}\narithmeticMean(1, 2, 3, 4, 5)\n// returns 3.0, which is the arithmetic mean of these five numbers\n\n摘录来自: Apple Inc. “The Swift Programming Language (Swift 4)”。 iBooks. \n\n```\n> NOTE\n> A function may have at most one variadic parameter.”\n> 摘录来自: Apple Inc. “The Swift Programming Language (Swift 4)。 iBooks.\n\n#### In-Out Parameters \n\n函数参数默认是常量。 尝试从该函数体内更改函数参数的值会导致编译错误。 这意味着您不能错误地更改参数的值。 如果您想要一个函数修改参数的值，并且在函数调用结束后希望这些更改保持不变，请将该参数定义为in-out参数。\n\n给in-out参数赋值时,必须为变量,并且在变量类型之前加(&),来证明这个参数是可以被函数改变的;\n\n> NOTE\n> In-out parameters cannot have default values, and variadic parameters cannot be marked as inout.”\n> 摘录来自: Apple Inc. “The Swift Programming Language (Swift 4)”。 iBooks. \n\n举例来讲,两个变量交换值\n\n```\nfunc swapTwoInts(_ a: inout Int, _ b: inout Int) {\n    let temporaryA = a\n    a = b\n    b = temporaryA\n}\n\nvar someInt = 3\nvar anotherInt = 107\n\nswapTwoInts(&someInt, &anotherInt)\n\nprint(\"someInt is now \\(someInt), and anotherInt is now \\(anotherInt)\")\n// Prints \"someInt is now 107, and anotherInt is now 3\n\n摘录来自: Apple Inc. “The Swift Programming Language (Swift 4)。 iBooks. \n\n```\n","slug":"Swift/Swift---4-函数","published":1,"date":"2020-09-23T10:25:59.000Z","updated":"2020-09-27T11:59:48.706Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgq6gnwb000ct29k2vgocejh","content":"<h4 id=\"函数参数标签和参数名\"><a href=\"#函数参数标签和参数名\" class=\"headerlink\" title=\"函数参数标签和参数名\"></a>函数参数标签和参数名</h4><p>每个函数参数都有参数标签和参数名称。 调用函数时使用参数标签; 每个参数都写在函数调用中，其参数标签之前。 参数名称用于实现该函数。 默认情况下，<strong>参数使用其参数名称作为参数标号.</strong></p>\n<p>如果你不想给一个参数添加参数标签,你可以在该参数名前画一个(_)来替代参数标签;</p>\n<pre><code class=\"hljs less\"><span class=\"hljs-selector-tag\">func</span> <span class=\"hljs-selector-tag\">someFunction</span>(_ <span class=\"hljs-attribute\">firstParameterName</span>: Int, <span class=\"hljs-attribute\">secondParameterName</span>: Int) &#123;\n    <span class=\"hljs-comment\">// In the function body, firstParameterName and secondParameterName</span>\n    <span class=\"hljs-comment\">// refer to the argument values for the first and second parameters.</span>\n&#125;\n<span class=\"hljs-selector-tag\">someFunction</span>(<span class=\"hljs-number\">1</span>, <span class=\"hljs-attribute\">secondParameterName</span>: <span class=\"hljs-number\">2</span>)\n\n摘录来自: <span class=\"hljs-selector-tag\">Apple</span> <span class=\"hljs-selector-tag\">Inc</span>. “<span class=\"hljs-selector-tag\">The</span> <span class=\"hljs-selector-tag\">Swift</span> <span class=\"hljs-selector-tag\">Programming</span> <span class=\"hljs-selector-tag\">Language</span> (Swift <span class=\"hljs-number\">4</span>)”。 <span class=\"hljs-selector-tag\">iBooks</span>.</code></pre>\n\n<h4 id=\"默认参数值\"><a href=\"#默认参数值\" class=\"headerlink\" title=\"默认参数值\"></a>默认参数值</h4><p>在参数类型后面添加等号然后分配一个默认值,当调用该函数时,若不给其中有默认值得参数赋值,则参数值为默认值;</p>\n<pre><code class=\"hljs less\"><span class=\"hljs-selector-tag\">func</span> <span class=\"hljs-selector-tag\">someFunction</span>(<span class=\"hljs-attribute\">parameterWithoutDefault</span>: Int, <span class=\"hljs-attribute\">parameterWithDefault</span>: Int = <span class=\"hljs-number\">12</span>) &#123;\n    <span class=\"hljs-comment\">// If you omit the second argument when calling this function, then</span>\n    <span class=\"hljs-comment\">// the value of parameterWithDefault is 12 inside the function body.</span>\n&#125;\n<span class=\"hljs-selector-tag\">someFunction</span>(<span class=\"hljs-attribute\">parameterWithoutDefault</span>: <span class=\"hljs-number\">3</span>, <span class=\"hljs-attribute\">parameterWithDefault</span>: <span class=\"hljs-number\">6</span>) <span class=\"hljs-comment\">// parameterWithDefault is 6</span>\n<span class=\"hljs-selector-tag\">someFunction</span>(<span class=\"hljs-attribute\">parameterWithoutDefault</span>: <span class=\"hljs-number\">4</span>) <span class=\"hljs-comment\">// parameterWithDefault is 12</span>\n\n摘录来自: <span class=\"hljs-selector-tag\">Apple</span> <span class=\"hljs-selector-tag\">Inc</span>. “<span class=\"hljs-selector-tag\">The</span> <span class=\"hljs-selector-tag\">Swift</span> <span class=\"hljs-selector-tag\">Programming</span> <span class=\"hljs-selector-tag\">Language</span> (Swift <span class=\"hljs-number\">4</span>)”。 <span class=\"hljs-selector-tag\">iBooks</span>.</code></pre>\n<h4 id=\"变量参数-Variadic-Parameters\"><a href=\"#变量参数-Variadic-Parameters\" class=\"headerlink\" title=\"变量参数(Variadic Parameters)\"></a>变量参数(Variadic Parameters)</h4><pre><code class=\"hljs angelscript\">func arithmeticMean(_ numbers: Double...) -&gt; Double &#123;\n    var total: Double = <span class=\"hljs-number\">0</span>\n    <span class=\"hljs-keyword\">for</span> number <span class=\"hljs-keyword\">in</span> numbers &#123;\n        total += number\n    &#125;\n    <span class=\"hljs-keyword\">return</span> total / Double(numbers.count)\n&#125;\narithmeticMean(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>)\n<span class=\"hljs-comment\">// returns 3.0, which is the arithmetic mean of these five numbers</span>\n\n摘录来自: Apple Inc. “The Swift Programming Language (Swift <span class=\"hljs-number\">4</span>)”。 iBooks. \n</code></pre>\n<blockquote>\n<p>NOTE<br>A function may have at most one variadic parameter.”<br>摘录来自: Apple Inc. “The Swift Programming Language (Swift 4)。 iBooks.</p>\n</blockquote>\n<h4 id=\"In-Out-Parameters\"><a href=\"#In-Out-Parameters\" class=\"headerlink\" title=\"In-Out Parameters\"></a>In-Out Parameters</h4><p>函数参数默认是常量。 尝试从该函数体内更改函数参数的值会导致编译错误。 这意味着您不能错误地更改参数的值。 如果您想要一个函数修改参数的值，并且在函数调用结束后希望这些更改保持不变，请将该参数定义为in-out参数。</p>\n<p>给in-out参数赋值时,必须为变量,并且在变量类型之前加(&amp;),来证明这个参数是可以被函数改变的;</p>\n<blockquote>\n<p>NOTE<br>In-out parameters cannot have default values, and variadic parameters cannot be marked as inout.”<br>摘录来自: Apple Inc. “The Swift Programming Language (Swift 4)”。 iBooks. </p>\n</blockquote>\n<p>举例来讲,两个变量交换值</p>\n<pre><code class=\"hljs angelscript\">func swapTwoInts(_ a: <span class=\"hljs-keyword\">inout</span> Int, _ b: <span class=\"hljs-keyword\">inout</span> Int) &#123;\n    let temporaryA = a\n    a = b\n    b = temporaryA\n&#125;\n\nvar someInt = <span class=\"hljs-number\">3</span>\nvar anotherInt = <span class=\"hljs-number\">107</span>\n\nswapTwoInts(&amp;someInt, &amp;anotherInt)\n\nprint(<span class=\"hljs-string\">&quot;someInt is now \\(someInt), and anotherInt is now \\(anotherInt)&quot;</span>)\n<span class=\"hljs-comment\">// Prints &quot;someInt is now 107, and anotherInt is now 3</span>\n\n摘录来自: Apple Inc. “The Swift Programming Language (Swift <span class=\"hljs-number\">4</span>)。 iBooks. \n</code></pre>\n","site":{"data":{"fluid_static_prefix":{"internal_js":"/js","internal_css":"/css","internal_img":"/img","iconfont":"//at.alicdn.com/t/font_1736178_kmeydafke9r.css","anchor":"https://cdn.staticfile.org/anchor-js/4.2.2/","github_markdown":"https://cdn.staticfile.org/github-markdown-css/4.0.0/","jquery":"https://cdn.staticfile.org/jquery/3.4.1/","bootstrap":"https://cdn.staticfile.org/twitter-bootstrap/4.4.1/","highlightjs":"https://cdn.staticfile.org/highlight.js/10.0.0/","prismjs":"https://cdn.staticfile.org/prism/1.21.0/","tocbot":"https://cdn.staticfile.org/tocbot/4.11.1/","typed":"https://cdn.staticfile.org/typed.js/2.0.11/","fancybox":"https://cdn.staticfile.org/fancybox/3.5.7/","mathjax":"https://cdn.staticfile.org/mathjax/3.0.5/es5/","katex":"https://cdn.staticfile.org/KaTeX/0.11.1/","aplayer":"https://cdn.staticfile.org/aplayer/1.10.1/","busuanzi":"https://busuanzi.ibruce.info/busuanzi/2.3/","clipboard":"https://cdn.staticfile.org/clipboard.js/2.0.6/","mermaid":"https://cdn.staticfile.org/mermaid/8.5.0/","valine":"https://cdn.staticfile.org/valine/1.4.14/","gitalk":"https://cdn.staticfile.org/gitalk/1.6.2/","blueimp_md5":"https://cdn.staticfile.org/blueimp-md5/2.13.0/","disqusjs":"https://cdn.jsdelivr.net/npm/disqusjs@1.0/dist/","hint":"/lib/hint/"},"fluid_config":{"favicon":"/img/favicon.png","apple_touch_icon":"/img/favicon.png","title_join_string":" - ","force_https":false,"code":{"copy_btn":true,"highlight":{"enable":true,"lib":"highlightjs","highlightjs":{"style":"Github Gist","bg_color":false},"prismjs":{"style":"default","preprocess":true}}},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"_","loop":false},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"right","visible":"hover","icon":""},"mouse_click":{"enable":false,"style":"values"}},"dark_mode":{"enable":true,"default":"auto"},"color":{"body_bg_color":"#eee","body_bg_color_dark":"#181c27","navbar_bg_color":"#2f4154","navbar_bg_color_dark":"#1f3144","navbar_text_color":"#fff","navbar_text_color_dark":"#d0d0d0","text_color":"#3c4858","text_color_dark":"#c4c6c9","sec_text_color":"#718096","sec_text_color_dark":"#a7a9ad","post_text_color":"#2c3e50","post_text_color_dark":"#c4c6c9","post_heading_color":"#1a202c","post_heading_color_dark":"#c4c6c9","post_link_color":"#0366d6","post_link_color_dark":"#1589e9","link_hover_color":"#30a9de","link_hover_color_dark":"#30a9de","link_hover_bg_color":"#f8f9fa","link_hover_bg_color_dark":"#364151","board_color":"#fff","board_color_dark":"#252d38"},"font":{"font_size":"16px","font_family":null,"code_font_size":"85%"},"custom_js":null,"custom_css":null,"custom_html":"","web_analytics":{"enable":false,"baidu":null,"google":null,"gtag":null,"tencent":{"sid":null,"cid":null},"woyaola":null,"cnzz":null,"leancloud":{"app_id":null,"app_key":null,"server_url":null}},"lazyload":{"enable":true,"onlypost":false},"daovoice":{"enable":false,"appid":""},"aplayer":{"enable":false,"autoplay":false,"loop":"all","order":"random","theme":"#b7daff","songs":[{"name":"name","artist":"artist","url":"/songs/test.mp3","cover":"/img/cover.jpg"},{"name":"name","artist":"artist","url":"https://...url.mp3","cover":"https://...cover.jpg"}]},"version":{"check":false},"navbar":{"blog_title":"吃面多放葱","ground_glass":{"enable":false,"px":3,"alpha":0.7},"menu":[{"key":"home","link":"/","icon":"iconfont icon-home-fill"},{"key":"category","link":"/categories/","icon":"iconfont icon-category-fill"},{"key":"tag","link":"/tags/","icon":"iconfont icon-tags-fill"},{"key":"about","link":"/about/","icon":"iconfont icon-user-fill"}]},"search":{"enable":true,"path":"/local-search.xml","generate_path":"/local-search.xml","field":"post","content":true},"scroll_down_arrow":{"enable":true,"banner_height_limit":90,"scroll_after_turning_page":true},"banner_parallax":true,"footer":{"statistics":{"enable":false,"source":"busuanzi","pv_format":"总访问量 {} 次","uv_format":"总访客数 {} 人"},"beian":{"enable":false,"icp_text":"京ICP证123456号","police_text":"京公网安备12345678号","police_code":12345678,"police_icon":"/img/police_beian.png"}},"scroll_top_arrow":{"enable":true},"index":{"banner_img":"/img/default.png","banner_img_height":100,"banner_mask_alpha":0.3,"post_default_img":"","slogan":{"enable":true,"text":"像蚂蚁一样工作，像蝴蝶一样生活"},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"category":true,"tag":true}},"page":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3},"post":{"banner_img":"/img/default.png","banner_img_height":70,"banner_mask_alpha":0.3,"meta":{"author":{"enable":false},"date":{"enable":true,"format":"LL a"},"wordcount":{"enable":true,"format":"{} 字"},"min2read":{"enable":true,"format":"{} 分钟","words":100},"views":{"enable":false,"source":"busuanzi","format":"{} 次"}},"updated":{"enable":false,"content":"本文最后更新于：","relative":false},"toc":{"enable":true,"headingSelector":"h1,h2,h3,h4,h5,h6","collapseDepth":0},"copyright":{"enable":true,"content":"本博客所有文章除特别声明外，均采用 <a href=\"https://creativecommons.org/licenses/by-sa/4.0/deed.zh\" rel=\"nofollow noopener\">CC BY-SA 4.0 协议</a> ，转载请注明出处！"},"prev_next":{"enable":true},"custom":{"enable":false,"content":"<img src=\"https://octodex.github.com/images/jetpacktocat.png\" class=\"rounded mx-auto d-block mt-5\" style=\"width:150px; height:150px;\">"},"image_zoom":{"enable":true},"footnote":{"enable":true,"header":""},"math":{"enable":false,"specific":false,"engine":"mathjax"},"mermaid":{"enable":false,"specific":false,"options":{"theme":"default"}},"comments":{"enable":false,"type":"disqus"}},"utterances":{"repo":null,"issue_term":"pathname","label":"utterances","theme":"github-light","theme_dark":"github-dark","crossorigin":"anonymous"},"disqus":{"shortname":null,"disqusjs":false,"apikey":null},"gitalk":{"clientID":null,"clientSecret":null,"repo":null,"owner":null,"admin":["name"],"id":"location.pathname","language":"zh-CN","labels":["Gitalk"],"perPage":10,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true},"valine":{"appid":null,"appkey":null,"placeholder":"说点什么","path":"window.location.pathname","avatar":"retro","meta":["nick","mail","link"],"pageSize":10,"lang":"zh-CN","highlight":false,"recordIP":false,"serverURLs":null},"changyan":{"appid":"","appkey":""},"livere":{"uid":""},"remark42":{"host":"https://remark.haoyizebo.com","site_id":"haoyizebo","max_shown_comments":10,"locale":"zh"},"archive":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null},"category":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"post_limit":10,"order_by":"-length","collapse_depth":0},"tag":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null,"tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"avatar":"/img/avatar.png","name":"蔺国防","introduce":"移动应用开发者，历史文学爱好者","icons":[{"class":"iconfont icon-github-fill","link":"https://github.com","tip":"GitHub"},{"class":"iconfont icon-douban-fill","link":"https://douban.com","tip":"豆瓣"},{"class":"iconfont icon-wechat-fill","qrcode":"/img/favicon.png"}]},"page404":{"banner_img":"/img/default.png","banner_img_height":85,"banner_mask_alpha":0.3,"subtitle":"Page not found"},"links":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"items":[{"title":"Fluid Docs","intro":"主题使用指南","link":"https://hexo.fluid-dev.com/docs/","image":"/img/favicon.png"},{"title":"Fluid Repo","intro":"主题 GitHub 仓库","link":"https://github.com/fluid-dev/hexo-theme-fluid","image":"/img/favicon.png"},{"title":"Fluid Example","intro":"主题操作示例","link":"https://hexo.fluid-dev.com/docs/example/","image":"/img/favicon.png"}]}}}},"excerpt":"","more":"<h4 id=\"函数参数标签和参数名\"><a href=\"#函数参数标签和参数名\" class=\"headerlink\" title=\"函数参数标签和参数名\"></a>函数参数标签和参数名</h4><p>每个函数参数都有参数标签和参数名称。 调用函数时使用参数标签; 每个参数都写在函数调用中，其参数标签之前。 参数名称用于实现该函数。 默认情况下，<strong>参数使用其参数名称作为参数标号.</strong></p>\n<p>如果你不想给一个参数添加参数标签,你可以在该参数名前画一个(_)来替代参数标签;</p>\n<pre><code class=\"hljs less\"><span class=\"hljs-selector-tag\">func</span> <span class=\"hljs-selector-tag\">someFunction</span>(_ <span class=\"hljs-attribute\">firstParameterName</span>: Int, <span class=\"hljs-attribute\">secondParameterName</span>: Int) &#123;\n    <span class=\"hljs-comment\">// In the function body, firstParameterName and secondParameterName</span>\n    <span class=\"hljs-comment\">// refer to the argument values for the first and second parameters.</span>\n&#125;\n<span class=\"hljs-selector-tag\">someFunction</span>(<span class=\"hljs-number\">1</span>, <span class=\"hljs-attribute\">secondParameterName</span>: <span class=\"hljs-number\">2</span>)\n\n摘录来自: <span class=\"hljs-selector-tag\">Apple</span> <span class=\"hljs-selector-tag\">Inc</span>. “<span class=\"hljs-selector-tag\">The</span> <span class=\"hljs-selector-tag\">Swift</span> <span class=\"hljs-selector-tag\">Programming</span> <span class=\"hljs-selector-tag\">Language</span> (Swift <span class=\"hljs-number\">4</span>)”。 <span class=\"hljs-selector-tag\">iBooks</span>.</code></pre>\n\n<h4 id=\"默认参数值\"><a href=\"#默认参数值\" class=\"headerlink\" title=\"默认参数值\"></a>默认参数值</h4><p>在参数类型后面添加等号然后分配一个默认值,当调用该函数时,若不给其中有默认值得参数赋值,则参数值为默认值;</p>\n<pre><code class=\"hljs less\"><span class=\"hljs-selector-tag\">func</span> <span class=\"hljs-selector-tag\">someFunction</span>(<span class=\"hljs-attribute\">parameterWithoutDefault</span>: Int, <span class=\"hljs-attribute\">parameterWithDefault</span>: Int = <span class=\"hljs-number\">12</span>) &#123;\n    <span class=\"hljs-comment\">// If you omit the second argument when calling this function, then</span>\n    <span class=\"hljs-comment\">// the value of parameterWithDefault is 12 inside the function body.</span>\n&#125;\n<span class=\"hljs-selector-tag\">someFunction</span>(<span class=\"hljs-attribute\">parameterWithoutDefault</span>: <span class=\"hljs-number\">3</span>, <span class=\"hljs-attribute\">parameterWithDefault</span>: <span class=\"hljs-number\">6</span>) <span class=\"hljs-comment\">// parameterWithDefault is 6</span>\n<span class=\"hljs-selector-tag\">someFunction</span>(<span class=\"hljs-attribute\">parameterWithoutDefault</span>: <span class=\"hljs-number\">4</span>) <span class=\"hljs-comment\">// parameterWithDefault is 12</span>\n\n摘录来自: <span class=\"hljs-selector-tag\">Apple</span> <span class=\"hljs-selector-tag\">Inc</span>. “<span class=\"hljs-selector-tag\">The</span> <span class=\"hljs-selector-tag\">Swift</span> <span class=\"hljs-selector-tag\">Programming</span> <span class=\"hljs-selector-tag\">Language</span> (Swift <span class=\"hljs-number\">4</span>)”。 <span class=\"hljs-selector-tag\">iBooks</span>.</code></pre>\n<h4 id=\"变量参数-Variadic-Parameters\"><a href=\"#变量参数-Variadic-Parameters\" class=\"headerlink\" title=\"变量参数(Variadic Parameters)\"></a>变量参数(Variadic Parameters)</h4><pre><code class=\"hljs angelscript\">func arithmeticMean(_ numbers: Double...) -&gt; Double &#123;\n    var total: Double = <span class=\"hljs-number\">0</span>\n    <span class=\"hljs-keyword\">for</span> number <span class=\"hljs-keyword\">in</span> numbers &#123;\n        total += number\n    &#125;\n    <span class=\"hljs-keyword\">return</span> total / Double(numbers.count)\n&#125;\narithmeticMean(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>)\n<span class=\"hljs-comment\">// returns 3.0, which is the arithmetic mean of these five numbers</span>\n\n摘录来自: Apple Inc. “The Swift Programming Language (Swift <span class=\"hljs-number\">4</span>)”。 iBooks. \n</code></pre>\n<blockquote>\n<p>NOTE<br>A function may have at most one variadic parameter.”<br>摘录来自: Apple Inc. “The Swift Programming Language (Swift 4)。 iBooks.</p>\n</blockquote>\n<h4 id=\"In-Out-Parameters\"><a href=\"#In-Out-Parameters\" class=\"headerlink\" title=\"In-Out Parameters\"></a>In-Out Parameters</h4><p>函数参数默认是常量。 尝试从该函数体内更改函数参数的值会导致编译错误。 这意味着您不能错误地更改参数的值。 如果您想要一个函数修改参数的值，并且在函数调用结束后希望这些更改保持不变，请将该参数定义为in-out参数。</p>\n<p>给in-out参数赋值时,必须为变量,并且在变量类型之前加(&amp;),来证明这个参数是可以被函数改变的;</p>\n<blockquote>\n<p>NOTE<br>In-out parameters cannot have default values, and variadic parameters cannot be marked as inout.”<br>摘录来自: Apple Inc. “The Swift Programming Language (Swift 4)”。 iBooks. </p>\n</blockquote>\n<p>举例来讲,两个变量交换值</p>\n<pre><code class=\"hljs angelscript\">func swapTwoInts(_ a: <span class=\"hljs-keyword\">inout</span> Int, _ b: <span class=\"hljs-keyword\">inout</span> Int) &#123;\n    let temporaryA = a\n    a = b\n    b = temporaryA\n&#125;\n\nvar someInt = <span class=\"hljs-number\">3</span>\nvar anotherInt = <span class=\"hljs-number\">107</span>\n\nswapTwoInts(&amp;someInt, &amp;anotherInt)\n\nprint(<span class=\"hljs-string\">&quot;someInt is now \\(someInt), and anotherInt is now \\(anotherInt)&quot;</span>)\n<span class=\"hljs-comment\">// Prints &quot;someInt is now 107, and anotherInt is now 3</span>\n\n摘录来自: Apple Inc. “The Swift Programming Language (Swift <span class=\"hljs-number\">4</span>)。 iBooks. \n</code></pre>\n"},{"title":"Codable","date":"2018-08-17T09:06:00.000Z","_content":"\n![](https://upload-images.jianshu.io/upload_images/3340896-f2a235b5b168f084.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n## 前言\n*Objective-C*  中我们有好多 *JSON* 转 *Model* 第三方,比如 *JSONModel*, *MJExtension*,*YYModel*等好用的第三方库,在 **Swift 4** 推出了 *Codable* 协议,只要遵循 **Codable** 协议的模型就可以用*JSONEncoder* 和 *JSONDecoder* 两个类来实现 *JSON* 和 *Model* 的相互转换.\n\n\n**Codable** 协议分为两部分,**Encodable**和**Decodable**;如果只需要解析JSON数据,那么只遵循 **Decodable** 协议就行了,如果 *JSON* 和 *Model* 都需要相互转换,那么遵循 **Codable** 协议\n\n## **JSON** & **Model** \n\n##### 支持类型\n下面代码实现了 *JSON* 字符串转为 *Student* , **Swift**  标准库里的基本类型已经都遵循 **Codable** 协议,所以,只要用遵循 **Codable** 协议的类型来创建模型,就可以正常读取json中的内容.\n\n示例代码中的 **Student** 模型里面包含 *Int*, *Float*, *Bool*, *String* 和自定义的枚举类型.可选类型也是支持的,如果json中读取的key对应value可能为空,那么我们可以声明该类型为可选类型.\n\n##### 嵌套Model\n如果模型有嵌套自定义的类型, 自定义的枚举类型如果也遵循 **Codable** 协议,那么添加到模型中也可以正常读取,枚举的 *rawValue* 需要指定为遵循 **Codable** 协议的基本类型.\n\n##### 自定义Model的key\n如果需要自定义字段来解析 *JSON* 数据,实现 **CodingKey** 那个协议就OK,有一点不太友好的是,不管你是否自定义某个key,都要把模型中所有的key填写进去,否则会报编译错误.\n\n## 示例代码\n\n```\nenum Gender: String, Codable {\n    case male = \"male\"\n    case female = \"female\"\n}\n\nstruct Student: Codable {\n    var name       : String\n    var gender     : Gender\n    var age        : Int\n    var weight     : Float\n    var isRegisted : Bool\n    var score      : Double?\n    \n    enum CodingKeys: String, CodingKey {\n        case gender\n        case name\n        case age\n        case score\n        case weight\n        case isRegisted = \"is_registed\"\n    }\n}\n\nlet json = \"\"\"\n                {\n                    \"name\"  : \"Durian\",\n                    \"gender\": \"male\",\n                    \"age\"   : 12,\n                    \"weight\": 56.4,\n                    \"is_registed\": true\n                    \"score\" : null\n                }\n                \"\"\".data(using: .utf8)!\n        \n        let decoder = JSONDecoder()\n        let encoder = JSONEncoder()\n        encoder.outputFormatting = .prettyPrinted\n        \n        do {\n            //json转Model\n            let student =  try decoder.decode(Student.self, from: json)\n            print(student)\n            do {\n                //model转JSON\n                let json =  try encoder.encode(student)\n                print(String(data: json, encoding: .utf8)!)\n            } catch {\n                print(error)\n            }\n        } catch {\n            print(error)\n        }\n\n```\n\n## One More Thing\n*Codable*  不仅仅对 *JSON* 模型转换有很好的支持,对于 *PropertyList* 与模型的转换也很友好,我们只需要使用 *PropertyListEncoder*  和  *PropertyListDecoder*  替换 *JSONEncoder* 和 *JSONDecoder* 就行了,用法是一样的.\n\n当然, *Codable* 的强大之处不止这些,阅读 *Apple* 官方文档,[了解更多...](https://developer.apple.com/documentation/swift/codable)\n\n## 参考资料\n\n[Encoding and Decoding Custom Types](https://developer.apple.com/documentation/foundation/archives_and_serialization/encoding_and_decoding_custom_types#overview)\n[JSONEcoder](https://developer.apple.com/documentation/foundation/jsonencoder)\n[JSONDecoder](https://developer.apple.com/documentation/foundation/jsondecoder)\n[Swift 4 踩坑之 Codable 协议](https://www.jianshu.com/p/bdd9c012df15)\n","source":"_posts/Swift/Swift---4-Codable.md","raw":"---\ntitle:  Codable\ndate:  2018-08-17 17:06\ncategories:\n- Swift\ntags: \n- Swift\n---\n\n![](https://upload-images.jianshu.io/upload_images/3340896-f2a235b5b168f084.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n## 前言\n*Objective-C*  中我们有好多 *JSON* 转 *Model* 第三方,比如 *JSONModel*, *MJExtension*,*YYModel*等好用的第三方库,在 **Swift 4** 推出了 *Codable* 协议,只要遵循 **Codable** 协议的模型就可以用*JSONEncoder* 和 *JSONDecoder* 两个类来实现 *JSON* 和 *Model* 的相互转换.\n\n\n**Codable** 协议分为两部分,**Encodable**和**Decodable**;如果只需要解析JSON数据,那么只遵循 **Decodable** 协议就行了,如果 *JSON* 和 *Model* 都需要相互转换,那么遵循 **Codable** 协议\n\n## **JSON** & **Model** \n\n##### 支持类型\n下面代码实现了 *JSON* 字符串转为 *Student* , **Swift**  标准库里的基本类型已经都遵循 **Codable** 协议,所以,只要用遵循 **Codable** 协议的类型来创建模型,就可以正常读取json中的内容.\n\n示例代码中的 **Student** 模型里面包含 *Int*, *Float*, *Bool*, *String* 和自定义的枚举类型.可选类型也是支持的,如果json中读取的key对应value可能为空,那么我们可以声明该类型为可选类型.\n\n##### 嵌套Model\n如果模型有嵌套自定义的类型, 自定义的枚举类型如果也遵循 **Codable** 协议,那么添加到模型中也可以正常读取,枚举的 *rawValue* 需要指定为遵循 **Codable** 协议的基本类型.\n\n##### 自定义Model的key\n如果需要自定义字段来解析 *JSON* 数据,实现 **CodingKey** 那个协议就OK,有一点不太友好的是,不管你是否自定义某个key,都要把模型中所有的key填写进去,否则会报编译错误.\n\n## 示例代码\n\n```\nenum Gender: String, Codable {\n    case male = \"male\"\n    case female = \"female\"\n}\n\nstruct Student: Codable {\n    var name       : String\n    var gender     : Gender\n    var age        : Int\n    var weight     : Float\n    var isRegisted : Bool\n    var score      : Double?\n    \n    enum CodingKeys: String, CodingKey {\n        case gender\n        case name\n        case age\n        case score\n        case weight\n        case isRegisted = \"is_registed\"\n    }\n}\n\nlet json = \"\"\"\n                {\n                    \"name\"  : \"Durian\",\n                    \"gender\": \"male\",\n                    \"age\"   : 12,\n                    \"weight\": 56.4,\n                    \"is_registed\": true\n                    \"score\" : null\n                }\n                \"\"\".data(using: .utf8)!\n        \n        let decoder = JSONDecoder()\n        let encoder = JSONEncoder()\n        encoder.outputFormatting = .prettyPrinted\n        \n        do {\n            //json转Model\n            let student =  try decoder.decode(Student.self, from: json)\n            print(student)\n            do {\n                //model转JSON\n                let json =  try encoder.encode(student)\n                print(String(data: json, encoding: .utf8)!)\n            } catch {\n                print(error)\n            }\n        } catch {\n            print(error)\n        }\n\n```\n\n## One More Thing\n*Codable*  不仅仅对 *JSON* 模型转换有很好的支持,对于 *PropertyList* 与模型的转换也很友好,我们只需要使用 *PropertyListEncoder*  和  *PropertyListDecoder*  替换 *JSONEncoder* 和 *JSONDecoder* 就行了,用法是一样的.\n\n当然, *Codable* 的强大之处不止这些,阅读 *Apple* 官方文档,[了解更多...](https://developer.apple.com/documentation/swift/codable)\n\n## 参考资料\n\n[Encoding and Decoding Custom Types](https://developer.apple.com/documentation/foundation/archives_and_serialization/encoding_and_decoding_custom_types#overview)\n[JSONEcoder](https://developer.apple.com/documentation/foundation/jsonencoder)\n[JSONDecoder](https://developer.apple.com/documentation/foundation/jsondecoder)\n[Swift 4 踩坑之 Codable 协议](https://www.jianshu.com/p/bdd9c012df15)\n","slug":"Swift/Swift---4-Codable","published":1,"updated":"2020-09-27T10:37:21.670Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgq6gnwd000ft29k7bbgbq92","content":"<p><img src=\"https://upload-images.jianshu.io/upload_images/3340896-f2a235b5b168f084.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p><em>Objective-C</em>  中我们有好多 <em>JSON</em> 转 <em>Model</em> 第三方,比如 <em>JSONModel</em>, <em>MJExtension</em>,<em>YYModel</em>等好用的第三方库,在 <strong>Swift 4</strong> 推出了 <em>Codable</em> 协议,只要遵循 <strong>Codable</strong> 协议的模型就可以用<em>JSONEncoder</em> 和 <em>JSONDecoder</em> 两个类来实现 <em>JSON</em> 和 <em>Model</em> 的相互转换.</p>\n<p><strong>Codable</strong> 协议分为两部分,<strong>Encodable</strong>和<strong>Decodable</strong>;如果只需要解析JSON数据,那么只遵循 <strong>Decodable</strong> 协议就行了,如果 <em>JSON</em> 和 <em>Model</em> 都需要相互转换,那么遵循 <strong>Codable</strong> 协议</p>\n<h2 id=\"JSON-amp-Model\"><a href=\"#JSON-amp-Model\" class=\"headerlink\" title=\"JSON &amp; Model\"></a><strong>JSON</strong> &amp; <strong>Model</strong></h2><h5 id=\"支持类型\"><a href=\"#支持类型\" class=\"headerlink\" title=\"支持类型\"></a>支持类型</h5><p>下面代码实现了 <em>JSON</em> 字符串转为 <em>Student</em> , <strong>Swift</strong>  标准库里的基本类型已经都遵循 <strong>Codable</strong> 协议,所以,只要用遵循 <strong>Codable</strong> 协议的类型来创建模型,就可以正常读取json中的内容.</p>\n<p>示例代码中的 <strong>Student</strong> 模型里面包含 <em>Int</em>, <em>Float</em>, <em>Bool</em>, <em>String</em> 和自定义的枚举类型.可选类型也是支持的,如果json中读取的key对应value可能为空,那么我们可以声明该类型为可选类型.</p>\n<h5 id=\"嵌套Model\"><a href=\"#嵌套Model\" class=\"headerlink\" title=\"嵌套Model\"></a>嵌套Model</h5><p>如果模型有嵌套自定义的类型, 自定义的枚举类型如果也遵循 <strong>Codable</strong> 协议,那么添加到模型中也可以正常读取,枚举的 <em>rawValue</em> 需要指定为遵循 <strong>Codable</strong> 协议的基本类型.</p>\n<h5 id=\"自定义Model的key\"><a href=\"#自定义Model的key\" class=\"headerlink\" title=\"自定义Model的key\"></a>自定义Model的key</h5><p>如果需要自定义字段来解析 <em>JSON</em> 数据,实现 <strong>CodingKey</strong> 那个协议就OK,有一点不太友好的是,不管你是否自定义某个key,都要把模型中所有的key填写进去,否则会报编译错误.</p>\n<h2 id=\"示例代码\"><a href=\"#示例代码\" class=\"headerlink\" title=\"示例代码\"></a>示例代码</h2><pre><code class=\"hljs php\">enum Gender: <span class=\"hljs-keyword\">String</span>, Codable &#123;\n    <span class=\"hljs-keyword\">case</span> male = <span class=\"hljs-string\">&quot;male&quot;</span>\n    <span class=\"hljs-keyword\">case</span> female = <span class=\"hljs-string\">&quot;female&quot;</span>\n&#125;\n\nstruct Student: Codable &#123;\n    <span class=\"hljs-keyword\">var</span> name       : <span class=\"hljs-keyword\">String</span>\n    <span class=\"hljs-keyword\">var</span> gender     : Gender\n    <span class=\"hljs-keyword\">var</span> age        : <span class=\"hljs-keyword\">Int</span>\n    <span class=\"hljs-keyword\">var</span> weight     : <span class=\"hljs-keyword\">Float</span>\n    <span class=\"hljs-keyword\">var</span> isRegisted : <span class=\"hljs-keyword\">Bool</span>\n    <span class=\"hljs-keyword\">var</span> score      : <span class=\"hljs-keyword\">Double</span>?\n    \n    enum CodingKeys: <span class=\"hljs-keyword\">String</span>, CodingKey &#123;\n        <span class=\"hljs-keyword\">case</span> gender\n        <span class=\"hljs-keyword\">case</span> name\n        <span class=\"hljs-keyword\">case</span> age\n        <span class=\"hljs-keyword\">case</span> score\n        <span class=\"hljs-keyword\">case</span> weight\n        <span class=\"hljs-keyword\">case</span> isRegisted = <span class=\"hljs-string\">&quot;is_registed&quot;</span>\n    &#125;\n&#125;\n\nlet json = <span class=\"hljs-string\">&quot;&quot;</span><span class=\"hljs-string\">&quot;</span>\n<span class=\"hljs-string\">                &#123;</span>\n<span class=\"hljs-string\">                    &quot;</span>name<span class=\"hljs-string\">&quot;  : &quot;</span>Durian<span class=\"hljs-string\">&quot;,</span>\n<span class=\"hljs-string\">                    &quot;</span>gender<span class=\"hljs-string\">&quot;: &quot;</span>male<span class=\"hljs-string\">&quot;,</span>\n<span class=\"hljs-string\">                    &quot;</span>age<span class=\"hljs-string\">&quot;   : 12,</span>\n<span class=\"hljs-string\">                    &quot;</span>weight<span class=\"hljs-string\">&quot;: 56.4,</span>\n<span class=\"hljs-string\">                    &quot;</span>is_registed<span class=\"hljs-string\">&quot;: true</span>\n<span class=\"hljs-string\">                    &quot;</span>score<span class=\"hljs-string\">&quot; : null</span>\n<span class=\"hljs-string\">                &#125;</span>\n<span class=\"hljs-string\">                &quot;</span><span class=\"hljs-string\">&quot;&quot;</span>.data(using: .utf8)!\n        \n        let decoder = JSONDecoder()\n        let encoder = JSONEncoder()\n        encoder.outputFormatting = .prettyPrinted\n        \n        <span class=\"hljs-keyword\">do</span> &#123;\n            <span class=\"hljs-comment\">//json转Model</span>\n            let student =  <span class=\"hljs-keyword\">try</span> decoder.decode(Student.<span class=\"hljs-built_in\">self</span>, <span class=\"hljs-keyword\">from</span>: json)\n            <span class=\"hljs-keyword\">print</span>(student)\n            <span class=\"hljs-keyword\">do</span> &#123;\n                <span class=\"hljs-comment\">//model转JSON</span>\n                let json =  <span class=\"hljs-keyword\">try</span> encoder.encode(student)\n                <span class=\"hljs-keyword\">print</span>(<span class=\"hljs-keyword\">String</span>(data: json, encoding: .utf8)!)\n            &#125; <span class=\"hljs-keyword\">catch</span> &#123;\n                <span class=\"hljs-keyword\">print</span>(<span class=\"hljs-built_in\">error</span>)\n            &#125;\n        &#125; <span class=\"hljs-keyword\">catch</span> &#123;\n            <span class=\"hljs-keyword\">print</span>(<span class=\"hljs-built_in\">error</span>)\n        &#125;\n</code></pre>\n\n<h2 id=\"One-More-Thing\"><a href=\"#One-More-Thing\" class=\"headerlink\" title=\"One More Thing\"></a>One More Thing</h2><p><em>Codable</em>  不仅仅对 <em>JSON</em> 模型转换有很好的支持,对于 <em>PropertyList</em> 与模型的转换也很友好,我们只需要使用 <em>PropertyListEncoder</em>  和  <em>PropertyListDecoder</em>  替换 <em>JSONEncoder</em> 和 <em>JSONDecoder</em> 就行了,用法是一样的.</p>\n<p>当然, <em>Codable</em> 的强大之处不止这些,阅读 <em>Apple</em> 官方文档,<a href=\"https://developer.apple.com/documentation/swift/codable\">了解更多…</a></p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p><a href=\"https://developer.apple.com/documentation/foundation/archives_and_serialization/encoding_and_decoding_custom_types#overview\">Encoding and Decoding Custom Types</a><br><a href=\"https://developer.apple.com/documentation/foundation/jsonencoder\">JSONEcoder</a><br><a href=\"https://developer.apple.com/documentation/foundation/jsondecoder\">JSONDecoder</a><br><a href=\"https://www.jianshu.com/p/bdd9c012df15\">Swift 4 踩坑之 Codable 协议</a></p>\n","site":{"data":{"fluid_static_prefix":{"internal_js":"/js","internal_css":"/css","internal_img":"/img","iconfont":"//at.alicdn.com/t/font_1736178_kmeydafke9r.css","anchor":"https://cdn.staticfile.org/anchor-js/4.2.2/","github_markdown":"https://cdn.staticfile.org/github-markdown-css/4.0.0/","jquery":"https://cdn.staticfile.org/jquery/3.4.1/","bootstrap":"https://cdn.staticfile.org/twitter-bootstrap/4.4.1/","highlightjs":"https://cdn.staticfile.org/highlight.js/10.0.0/","prismjs":"https://cdn.staticfile.org/prism/1.21.0/","tocbot":"https://cdn.staticfile.org/tocbot/4.11.1/","typed":"https://cdn.staticfile.org/typed.js/2.0.11/","fancybox":"https://cdn.staticfile.org/fancybox/3.5.7/","mathjax":"https://cdn.staticfile.org/mathjax/3.0.5/es5/","katex":"https://cdn.staticfile.org/KaTeX/0.11.1/","aplayer":"https://cdn.staticfile.org/aplayer/1.10.1/","busuanzi":"https://busuanzi.ibruce.info/busuanzi/2.3/","clipboard":"https://cdn.staticfile.org/clipboard.js/2.0.6/","mermaid":"https://cdn.staticfile.org/mermaid/8.5.0/","valine":"https://cdn.staticfile.org/valine/1.4.14/","gitalk":"https://cdn.staticfile.org/gitalk/1.6.2/","blueimp_md5":"https://cdn.staticfile.org/blueimp-md5/2.13.0/","disqusjs":"https://cdn.jsdelivr.net/npm/disqusjs@1.0/dist/","hint":"/lib/hint/"},"fluid_config":{"favicon":"/img/favicon.png","apple_touch_icon":"/img/favicon.png","title_join_string":" - ","force_https":false,"code":{"copy_btn":true,"highlight":{"enable":true,"lib":"highlightjs","highlightjs":{"style":"Github Gist","bg_color":false},"prismjs":{"style":"default","preprocess":true}}},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"_","loop":false},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"right","visible":"hover","icon":""},"mouse_click":{"enable":false,"style":"values"}},"dark_mode":{"enable":true,"default":"auto"},"color":{"body_bg_color":"#eee","body_bg_color_dark":"#181c27","navbar_bg_color":"#2f4154","navbar_bg_color_dark":"#1f3144","navbar_text_color":"#fff","navbar_text_color_dark":"#d0d0d0","text_color":"#3c4858","text_color_dark":"#c4c6c9","sec_text_color":"#718096","sec_text_color_dark":"#a7a9ad","post_text_color":"#2c3e50","post_text_color_dark":"#c4c6c9","post_heading_color":"#1a202c","post_heading_color_dark":"#c4c6c9","post_link_color":"#0366d6","post_link_color_dark":"#1589e9","link_hover_color":"#30a9de","link_hover_color_dark":"#30a9de","link_hover_bg_color":"#f8f9fa","link_hover_bg_color_dark":"#364151","board_color":"#fff","board_color_dark":"#252d38"},"font":{"font_size":"16px","font_family":null,"code_font_size":"85%"},"custom_js":null,"custom_css":null,"custom_html":"","web_analytics":{"enable":false,"baidu":null,"google":null,"gtag":null,"tencent":{"sid":null,"cid":null},"woyaola":null,"cnzz":null,"leancloud":{"app_id":null,"app_key":null,"server_url":null}},"lazyload":{"enable":true,"onlypost":false},"daovoice":{"enable":false,"appid":""},"aplayer":{"enable":false,"autoplay":false,"loop":"all","order":"random","theme":"#b7daff","songs":[{"name":"name","artist":"artist","url":"/songs/test.mp3","cover":"/img/cover.jpg"},{"name":"name","artist":"artist","url":"https://...url.mp3","cover":"https://...cover.jpg"}]},"version":{"check":false},"navbar":{"blog_title":"吃面多放葱","ground_glass":{"enable":false,"px":3,"alpha":0.7},"menu":[{"key":"home","link":"/","icon":"iconfont icon-home-fill"},{"key":"category","link":"/categories/","icon":"iconfont icon-category-fill"},{"key":"tag","link":"/tags/","icon":"iconfont icon-tags-fill"},{"key":"about","link":"/about/","icon":"iconfont icon-user-fill"}]},"search":{"enable":true,"path":"/local-search.xml","generate_path":"/local-search.xml","field":"post","content":true},"scroll_down_arrow":{"enable":true,"banner_height_limit":90,"scroll_after_turning_page":true},"banner_parallax":true,"footer":{"statistics":{"enable":false,"source":"busuanzi","pv_format":"总访问量 {} 次","uv_format":"总访客数 {} 人"},"beian":{"enable":false,"icp_text":"京ICP证123456号","police_text":"京公网安备12345678号","police_code":12345678,"police_icon":"/img/police_beian.png"}},"scroll_top_arrow":{"enable":true},"index":{"banner_img":"/img/default.png","banner_img_height":100,"banner_mask_alpha":0.3,"post_default_img":"","slogan":{"enable":true,"text":"像蚂蚁一样工作，像蝴蝶一样生活"},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"category":true,"tag":true}},"page":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3},"post":{"banner_img":"/img/default.png","banner_img_height":70,"banner_mask_alpha":0.3,"meta":{"author":{"enable":false},"date":{"enable":true,"format":"LL a"},"wordcount":{"enable":true,"format":"{} 字"},"min2read":{"enable":true,"format":"{} 分钟","words":100},"views":{"enable":false,"source":"busuanzi","format":"{} 次"}},"updated":{"enable":false,"content":"本文最后更新于：","relative":false},"toc":{"enable":true,"headingSelector":"h1,h2,h3,h4,h5,h6","collapseDepth":0},"copyright":{"enable":true,"content":"本博客所有文章除特别声明外，均采用 <a href=\"https://creativecommons.org/licenses/by-sa/4.0/deed.zh\" rel=\"nofollow noopener\">CC BY-SA 4.0 协议</a> ，转载请注明出处！"},"prev_next":{"enable":true},"custom":{"enable":false,"content":"<img src=\"https://octodex.github.com/images/jetpacktocat.png\" class=\"rounded mx-auto d-block mt-5\" style=\"width:150px; height:150px;\">"},"image_zoom":{"enable":true},"footnote":{"enable":true,"header":""},"math":{"enable":false,"specific":false,"engine":"mathjax"},"mermaid":{"enable":false,"specific":false,"options":{"theme":"default"}},"comments":{"enable":false,"type":"disqus"}},"utterances":{"repo":null,"issue_term":"pathname","label":"utterances","theme":"github-light","theme_dark":"github-dark","crossorigin":"anonymous"},"disqus":{"shortname":null,"disqusjs":false,"apikey":null},"gitalk":{"clientID":null,"clientSecret":null,"repo":null,"owner":null,"admin":["name"],"id":"location.pathname","language":"zh-CN","labels":["Gitalk"],"perPage":10,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true},"valine":{"appid":null,"appkey":null,"placeholder":"说点什么","path":"window.location.pathname","avatar":"retro","meta":["nick","mail","link"],"pageSize":10,"lang":"zh-CN","highlight":false,"recordIP":false,"serverURLs":null},"changyan":{"appid":"","appkey":""},"livere":{"uid":""},"remark42":{"host":"https://remark.haoyizebo.com","site_id":"haoyizebo","max_shown_comments":10,"locale":"zh"},"archive":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null},"category":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"post_limit":10,"order_by":"-length","collapse_depth":0},"tag":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null,"tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"avatar":"/img/avatar.png","name":"蔺国防","introduce":"移动应用开发者，历史文学爱好者","icons":[{"class":"iconfont icon-github-fill","link":"https://github.com","tip":"GitHub"},{"class":"iconfont icon-douban-fill","link":"https://douban.com","tip":"豆瓣"},{"class":"iconfont icon-wechat-fill","qrcode":"/img/favicon.png"}]},"page404":{"banner_img":"/img/default.png","banner_img_height":85,"banner_mask_alpha":0.3,"subtitle":"Page not found"},"links":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"items":[{"title":"Fluid Docs","intro":"主题使用指南","link":"https://hexo.fluid-dev.com/docs/","image":"/img/favicon.png"},{"title":"Fluid Repo","intro":"主题 GitHub 仓库","link":"https://github.com/fluid-dev/hexo-theme-fluid","image":"/img/favicon.png"},{"title":"Fluid Example","intro":"主题操作示例","link":"https://hexo.fluid-dev.com/docs/example/","image":"/img/favicon.png"}]}}}},"excerpt":"","more":"<p><img src=\"https://upload-images.jianshu.io/upload_images/3340896-f2a235b5b168f084.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p><em>Objective-C</em>  中我们有好多 <em>JSON</em> 转 <em>Model</em> 第三方,比如 <em>JSONModel</em>, <em>MJExtension</em>,<em>YYModel</em>等好用的第三方库,在 <strong>Swift 4</strong> 推出了 <em>Codable</em> 协议,只要遵循 <strong>Codable</strong> 协议的模型就可以用<em>JSONEncoder</em> 和 <em>JSONDecoder</em> 两个类来实现 <em>JSON</em> 和 <em>Model</em> 的相互转换.</p>\n<p><strong>Codable</strong> 协议分为两部分,<strong>Encodable</strong>和<strong>Decodable</strong>;如果只需要解析JSON数据,那么只遵循 <strong>Decodable</strong> 协议就行了,如果 <em>JSON</em> 和 <em>Model</em> 都需要相互转换,那么遵循 <strong>Codable</strong> 协议</p>\n<h2 id=\"JSON-amp-Model\"><a href=\"#JSON-amp-Model\" class=\"headerlink\" title=\"JSON &amp; Model\"></a><strong>JSON</strong> &amp; <strong>Model</strong></h2><h5 id=\"支持类型\"><a href=\"#支持类型\" class=\"headerlink\" title=\"支持类型\"></a>支持类型</h5><p>下面代码实现了 <em>JSON</em> 字符串转为 <em>Student</em> , <strong>Swift</strong>  标准库里的基本类型已经都遵循 <strong>Codable</strong> 协议,所以,只要用遵循 <strong>Codable</strong> 协议的类型来创建模型,就可以正常读取json中的内容.</p>\n<p>示例代码中的 <strong>Student</strong> 模型里面包含 <em>Int</em>, <em>Float</em>, <em>Bool</em>, <em>String</em> 和自定义的枚举类型.可选类型也是支持的,如果json中读取的key对应value可能为空,那么我们可以声明该类型为可选类型.</p>\n<h5 id=\"嵌套Model\"><a href=\"#嵌套Model\" class=\"headerlink\" title=\"嵌套Model\"></a>嵌套Model</h5><p>如果模型有嵌套自定义的类型, 自定义的枚举类型如果也遵循 <strong>Codable</strong> 协议,那么添加到模型中也可以正常读取,枚举的 <em>rawValue</em> 需要指定为遵循 <strong>Codable</strong> 协议的基本类型.</p>\n<h5 id=\"自定义Model的key\"><a href=\"#自定义Model的key\" class=\"headerlink\" title=\"自定义Model的key\"></a>自定义Model的key</h5><p>如果需要自定义字段来解析 <em>JSON</em> 数据,实现 <strong>CodingKey</strong> 那个协议就OK,有一点不太友好的是,不管你是否自定义某个key,都要把模型中所有的key填写进去,否则会报编译错误.</p>\n<h2 id=\"示例代码\"><a href=\"#示例代码\" class=\"headerlink\" title=\"示例代码\"></a>示例代码</h2><pre><code class=\"hljs php\">enum Gender: <span class=\"hljs-keyword\">String</span>, Codable &#123;\n    <span class=\"hljs-keyword\">case</span> male = <span class=\"hljs-string\">&quot;male&quot;</span>\n    <span class=\"hljs-keyword\">case</span> female = <span class=\"hljs-string\">&quot;female&quot;</span>\n&#125;\n\nstruct Student: Codable &#123;\n    <span class=\"hljs-keyword\">var</span> name       : <span class=\"hljs-keyword\">String</span>\n    <span class=\"hljs-keyword\">var</span> gender     : Gender\n    <span class=\"hljs-keyword\">var</span> age        : <span class=\"hljs-keyword\">Int</span>\n    <span class=\"hljs-keyword\">var</span> weight     : <span class=\"hljs-keyword\">Float</span>\n    <span class=\"hljs-keyword\">var</span> isRegisted : <span class=\"hljs-keyword\">Bool</span>\n    <span class=\"hljs-keyword\">var</span> score      : <span class=\"hljs-keyword\">Double</span>?\n    \n    enum CodingKeys: <span class=\"hljs-keyword\">String</span>, CodingKey &#123;\n        <span class=\"hljs-keyword\">case</span> gender\n        <span class=\"hljs-keyword\">case</span> name\n        <span class=\"hljs-keyword\">case</span> age\n        <span class=\"hljs-keyword\">case</span> score\n        <span class=\"hljs-keyword\">case</span> weight\n        <span class=\"hljs-keyword\">case</span> isRegisted = <span class=\"hljs-string\">&quot;is_registed&quot;</span>\n    &#125;\n&#125;\n\nlet json = <span class=\"hljs-string\">&quot;&quot;</span><span class=\"hljs-string\">&quot;</span>\n<span class=\"hljs-string\">                &#123;</span>\n<span class=\"hljs-string\">                    &quot;</span>name<span class=\"hljs-string\">&quot;  : &quot;</span>Durian<span class=\"hljs-string\">&quot;,</span>\n<span class=\"hljs-string\">                    &quot;</span>gender<span class=\"hljs-string\">&quot;: &quot;</span>male<span class=\"hljs-string\">&quot;,</span>\n<span class=\"hljs-string\">                    &quot;</span>age<span class=\"hljs-string\">&quot;   : 12,</span>\n<span class=\"hljs-string\">                    &quot;</span>weight<span class=\"hljs-string\">&quot;: 56.4,</span>\n<span class=\"hljs-string\">                    &quot;</span>is_registed<span class=\"hljs-string\">&quot;: true</span>\n<span class=\"hljs-string\">                    &quot;</span>score<span class=\"hljs-string\">&quot; : null</span>\n<span class=\"hljs-string\">                &#125;</span>\n<span class=\"hljs-string\">                &quot;</span><span class=\"hljs-string\">&quot;&quot;</span>.data(using: .utf8)!\n        \n        let decoder = JSONDecoder()\n        let encoder = JSONEncoder()\n        encoder.outputFormatting = .prettyPrinted\n        \n        <span class=\"hljs-keyword\">do</span> &#123;\n            <span class=\"hljs-comment\">//json转Model</span>\n            let student =  <span class=\"hljs-keyword\">try</span> decoder.decode(Student.<span class=\"hljs-built_in\">self</span>, <span class=\"hljs-keyword\">from</span>: json)\n            <span class=\"hljs-keyword\">print</span>(student)\n            <span class=\"hljs-keyword\">do</span> &#123;\n                <span class=\"hljs-comment\">//model转JSON</span>\n                let json =  <span class=\"hljs-keyword\">try</span> encoder.encode(student)\n                <span class=\"hljs-keyword\">print</span>(<span class=\"hljs-keyword\">String</span>(data: json, encoding: .utf8)!)\n            &#125; <span class=\"hljs-keyword\">catch</span> &#123;\n                <span class=\"hljs-keyword\">print</span>(<span class=\"hljs-built_in\">error</span>)\n            &#125;\n        &#125; <span class=\"hljs-keyword\">catch</span> &#123;\n            <span class=\"hljs-keyword\">print</span>(<span class=\"hljs-built_in\">error</span>)\n        &#125;\n</code></pre>\n\n<h2 id=\"One-More-Thing\"><a href=\"#One-More-Thing\" class=\"headerlink\" title=\"One More Thing\"></a>One More Thing</h2><p><em>Codable</em>  不仅仅对 <em>JSON</em> 模型转换有很好的支持,对于 <em>PropertyList</em> 与模型的转换也很友好,我们只需要使用 <em>PropertyListEncoder</em>  和  <em>PropertyListDecoder</em>  替换 <em>JSONEncoder</em> 和 <em>JSONDecoder</em> 就行了,用法是一样的.</p>\n<p>当然, <em>Codable</em> 的强大之处不止这些,阅读 <em>Apple</em> 官方文档,<a href=\"https://developer.apple.com/documentation/swift/codable\">了解更多…</a></p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p><a href=\"https://developer.apple.com/documentation/foundation/archives_and_serialization/encoding_and_decoding_custom_types#overview\">Encoding and Decoding Custom Types</a><br><a href=\"https://developer.apple.com/documentation/foundation/jsonencoder\">JSONEcoder</a><br><a href=\"https://developer.apple.com/documentation/foundation/jsondecoder\">JSONDecoder</a><br><a href=\"https://www.jianshu.com/p/bdd9c012df15\">Swift 4 踩坑之 Codable 协议</a></p>\n"},{"title":"协议","hide":true,"_content":"\n#### 定义\n```\nprotocol SomeProtocol {\n    // protocol definition goes here\n}\n```\n\n#### 遵循协议\n\n```\nclass SomeClass: SomeSuperclass, FirstProtocol, AnotherProtocol {\n    // class definition goes here\n}\n```\n#### 属性要求\n\n```\nprotocol SomeProtocol {\n    var mustBeSettable: Int { get set }\n    var doesNotNeedToBeSettable: Int { get }\n}\n```\n#### 类属性\n\n属性前缀添加关键字\"static\",协议方法与此同理,func前面添加\"static\"\n\n```\nprotocol AnotherProtocol {\n    static var someTypeProperty: Int { get set }\n}\n```\n#### Mutating Method Requirement\n\n在方法前添加 mutating 关键字,可在该方法中修改实例的属性.只能在枚举和结构体中使用.\n\n```\nenum OnOffSwitch: Togglable {\n    case off, on\n    mutating func toggle() {\n        switch self {\n        case .off:\n            self = .on\n        case .on:\n            self = .off\n        }\n    }\n}\nvar lightSwitch = OnOffSwitch.off\nlightSwitch.toggle()\n// lightSwitch is now equal to .on\n```\n","source":"_posts/Swift/Swift---4-协议.md","raw":"\n---\ntitle:  协议\ncategories:\n- Swift\ntags: \n- Swift\nhide: true\n---\n\n#### 定义\n```\nprotocol SomeProtocol {\n    // protocol definition goes here\n}\n```\n\n#### 遵循协议\n\n```\nclass SomeClass: SomeSuperclass, FirstProtocol, AnotherProtocol {\n    // class definition goes here\n}\n```\n#### 属性要求\n\n```\nprotocol SomeProtocol {\n    var mustBeSettable: Int { get set }\n    var doesNotNeedToBeSettable: Int { get }\n}\n```\n#### 类属性\n\n属性前缀添加关键字\"static\",协议方法与此同理,func前面添加\"static\"\n\n```\nprotocol AnotherProtocol {\n    static var someTypeProperty: Int { get set }\n}\n```\n#### Mutating Method Requirement\n\n在方法前添加 mutating 关键字,可在该方法中修改实例的属性.只能在枚举和结构体中使用.\n\n```\nenum OnOffSwitch: Togglable {\n    case off, on\n    mutating func toggle() {\n        switch self {\n        case .off:\n            self = .on\n        case .on:\n            self = .off\n        }\n    }\n}\nvar lightSwitch = OnOffSwitch.off\nlightSwitch.toggle()\n// lightSwitch is now equal to .on\n```\n","slug":"Swift/Swift---4-协议","published":1,"date":"2020-09-23T10:25:59.000Z","updated":"2020-09-27T11:59:55.572Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgq6gnwd000gt29k5stee0qv","content":"<h4 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h4><pre><code class=\"hljs swift\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">protocol</span> <span class=\"hljs-title\">SomeProtocol</span> </span>&#123;\n    <span class=\"hljs-comment\">// protocol definition goes here</span>\n&#125;</code></pre>\n\n<h4 id=\"遵循协议\"><a href=\"#遵循协议\" class=\"headerlink\" title=\"遵循协议\"></a>遵循协议</h4><pre><code class=\"hljs angelscript\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-symbol\">SomeClass: <span class=\"hljs-symbol\">SomeSuperclass</span>, <span class=\"hljs-symbol\">FirstProtocol</span>, <span class=\"hljs-symbol\">AnotherProtocol</span></span> &#123;\n    <span class=\"hljs-comment\">// class definition goes here</span>\n&#125;</code></pre>\n<h4 id=\"属性要求\"><a href=\"#属性要求\" class=\"headerlink\" title=\"属性要求\"></a>属性要求</h4><pre><code class=\"hljs kotlin\">protocol SomeProtocol &#123;\n    <span class=\"hljs-keyword\">var</span> mustBeSettable: <span class=\"hljs-built_in\">Int</span> &#123; <span class=\"hljs-keyword\">get</span> <span class=\"hljs-keyword\">set</span> &#125;\n    <span class=\"hljs-keyword\">var</span> doesNotNeedToBeSettable: <span class=\"hljs-built_in\">Int</span> &#123; <span class=\"hljs-keyword\">get</span> &#125;\n&#125;</code></pre>\n<h4 id=\"类属性\"><a href=\"#类属性\" class=\"headerlink\" title=\"类属性\"></a>类属性</h4><p>属性前缀添加关键字”static”,协议方法与此同理,func前面添加”static”</p>\n<pre><code class=\"hljs swift\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">protocol</span> <span class=\"hljs-title\">AnotherProtocol</span> </span>&#123;\n    <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">var</span> someTypeProperty: <span class=\"hljs-type\">Int</span> &#123; <span class=\"hljs-keyword\">get</span> <span class=\"hljs-keyword\">set</span> &#125;\n&#125;</code></pre>\n<h4 id=\"Mutating-Method-Requirement\"><a href=\"#Mutating-Method-Requirement\" class=\"headerlink\" title=\"Mutating Method Requirement\"></a>Mutating Method Requirement</h4><p>在方法前添加 mutating 关键字,可在该方法中修改实例的属性.只能在枚举和结构体中使用.</p>\n<pre><code class=\"hljs crystal\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title\">OnOffSwitch</span>: <span class=\"hljs-title\">Togglable</span> &#123;</span>\n    <span class=\"hljs-keyword\">case</span> off, on\n    mutating func toggle() &#123;\n        switch <span class=\"hljs-keyword\">self</span> &#123;\n        <span class=\"hljs-keyword\">case</span> .<span class=\"hljs-symbol\">off:</span>\n            <span class=\"hljs-keyword\">self</span> = .on\n        <span class=\"hljs-keyword\">case</span> .<span class=\"hljs-symbol\">on:</span>\n            <span class=\"hljs-keyword\">self</span> = .off\n        &#125;\n    &#125;\n&#125;\nvar lightSwitch = OnOffSwitch.off\nlightSwitch.toggle()\n/<span class=\"hljs-regexp\">/ lightSwitch is now equal to .on</span></code></pre>\n","site":{"data":{"fluid_static_prefix":{"internal_js":"/js","internal_css":"/css","internal_img":"/img","iconfont":"//at.alicdn.com/t/font_1736178_kmeydafke9r.css","anchor":"https://cdn.staticfile.org/anchor-js/4.2.2/","github_markdown":"https://cdn.staticfile.org/github-markdown-css/4.0.0/","jquery":"https://cdn.staticfile.org/jquery/3.4.1/","bootstrap":"https://cdn.staticfile.org/twitter-bootstrap/4.4.1/","highlightjs":"https://cdn.staticfile.org/highlight.js/10.0.0/","prismjs":"https://cdn.staticfile.org/prism/1.21.0/","tocbot":"https://cdn.staticfile.org/tocbot/4.11.1/","typed":"https://cdn.staticfile.org/typed.js/2.0.11/","fancybox":"https://cdn.staticfile.org/fancybox/3.5.7/","mathjax":"https://cdn.staticfile.org/mathjax/3.0.5/es5/","katex":"https://cdn.staticfile.org/KaTeX/0.11.1/","aplayer":"https://cdn.staticfile.org/aplayer/1.10.1/","busuanzi":"https://busuanzi.ibruce.info/busuanzi/2.3/","clipboard":"https://cdn.staticfile.org/clipboard.js/2.0.6/","mermaid":"https://cdn.staticfile.org/mermaid/8.5.0/","valine":"https://cdn.staticfile.org/valine/1.4.14/","gitalk":"https://cdn.staticfile.org/gitalk/1.6.2/","blueimp_md5":"https://cdn.staticfile.org/blueimp-md5/2.13.0/","disqusjs":"https://cdn.jsdelivr.net/npm/disqusjs@1.0/dist/","hint":"/lib/hint/"},"fluid_config":{"favicon":"/img/favicon.png","apple_touch_icon":"/img/favicon.png","title_join_string":" - ","force_https":false,"code":{"copy_btn":true,"highlight":{"enable":true,"lib":"highlightjs","highlightjs":{"style":"Github Gist","bg_color":false},"prismjs":{"style":"default","preprocess":true}}},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"_","loop":false},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"right","visible":"hover","icon":""},"mouse_click":{"enable":false,"style":"values"}},"dark_mode":{"enable":true,"default":"auto"},"color":{"body_bg_color":"#eee","body_bg_color_dark":"#181c27","navbar_bg_color":"#2f4154","navbar_bg_color_dark":"#1f3144","navbar_text_color":"#fff","navbar_text_color_dark":"#d0d0d0","text_color":"#3c4858","text_color_dark":"#c4c6c9","sec_text_color":"#718096","sec_text_color_dark":"#a7a9ad","post_text_color":"#2c3e50","post_text_color_dark":"#c4c6c9","post_heading_color":"#1a202c","post_heading_color_dark":"#c4c6c9","post_link_color":"#0366d6","post_link_color_dark":"#1589e9","link_hover_color":"#30a9de","link_hover_color_dark":"#30a9de","link_hover_bg_color":"#f8f9fa","link_hover_bg_color_dark":"#364151","board_color":"#fff","board_color_dark":"#252d38"},"font":{"font_size":"16px","font_family":null,"code_font_size":"85%"},"custom_js":null,"custom_css":null,"custom_html":"","web_analytics":{"enable":false,"baidu":null,"google":null,"gtag":null,"tencent":{"sid":null,"cid":null},"woyaola":null,"cnzz":null,"leancloud":{"app_id":null,"app_key":null,"server_url":null}},"lazyload":{"enable":true,"onlypost":false},"daovoice":{"enable":false,"appid":""},"aplayer":{"enable":false,"autoplay":false,"loop":"all","order":"random","theme":"#b7daff","songs":[{"name":"name","artist":"artist","url":"/songs/test.mp3","cover":"/img/cover.jpg"},{"name":"name","artist":"artist","url":"https://...url.mp3","cover":"https://...cover.jpg"}]},"version":{"check":false},"navbar":{"blog_title":"吃面多放葱","ground_glass":{"enable":false,"px":3,"alpha":0.7},"menu":[{"key":"home","link":"/","icon":"iconfont icon-home-fill"},{"key":"category","link":"/categories/","icon":"iconfont icon-category-fill"},{"key":"tag","link":"/tags/","icon":"iconfont icon-tags-fill"},{"key":"about","link":"/about/","icon":"iconfont icon-user-fill"}]},"search":{"enable":true,"path":"/local-search.xml","generate_path":"/local-search.xml","field":"post","content":true},"scroll_down_arrow":{"enable":true,"banner_height_limit":90,"scroll_after_turning_page":true},"banner_parallax":true,"footer":{"statistics":{"enable":false,"source":"busuanzi","pv_format":"总访问量 {} 次","uv_format":"总访客数 {} 人"},"beian":{"enable":false,"icp_text":"京ICP证123456号","police_text":"京公网安备12345678号","police_code":12345678,"police_icon":"/img/police_beian.png"}},"scroll_top_arrow":{"enable":true},"index":{"banner_img":"/img/default.png","banner_img_height":100,"banner_mask_alpha":0.3,"post_default_img":"","slogan":{"enable":true,"text":"像蚂蚁一样工作，像蝴蝶一样生活"},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"category":true,"tag":true}},"page":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3},"post":{"banner_img":"/img/default.png","banner_img_height":70,"banner_mask_alpha":0.3,"meta":{"author":{"enable":false},"date":{"enable":true,"format":"LL a"},"wordcount":{"enable":true,"format":"{} 字"},"min2read":{"enable":true,"format":"{} 分钟","words":100},"views":{"enable":false,"source":"busuanzi","format":"{} 次"}},"updated":{"enable":false,"content":"本文最后更新于：","relative":false},"toc":{"enable":true,"headingSelector":"h1,h2,h3,h4,h5,h6","collapseDepth":0},"copyright":{"enable":true,"content":"本博客所有文章除特别声明外，均采用 <a href=\"https://creativecommons.org/licenses/by-sa/4.0/deed.zh\" rel=\"nofollow noopener\">CC BY-SA 4.0 协议</a> ，转载请注明出处！"},"prev_next":{"enable":true},"custom":{"enable":false,"content":"<img src=\"https://octodex.github.com/images/jetpacktocat.png\" class=\"rounded mx-auto d-block mt-5\" style=\"width:150px; height:150px;\">"},"image_zoom":{"enable":true},"footnote":{"enable":true,"header":""},"math":{"enable":false,"specific":false,"engine":"mathjax"},"mermaid":{"enable":false,"specific":false,"options":{"theme":"default"}},"comments":{"enable":false,"type":"disqus"}},"utterances":{"repo":null,"issue_term":"pathname","label":"utterances","theme":"github-light","theme_dark":"github-dark","crossorigin":"anonymous"},"disqus":{"shortname":null,"disqusjs":false,"apikey":null},"gitalk":{"clientID":null,"clientSecret":null,"repo":null,"owner":null,"admin":["name"],"id":"location.pathname","language":"zh-CN","labels":["Gitalk"],"perPage":10,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true},"valine":{"appid":null,"appkey":null,"placeholder":"说点什么","path":"window.location.pathname","avatar":"retro","meta":["nick","mail","link"],"pageSize":10,"lang":"zh-CN","highlight":false,"recordIP":false,"serverURLs":null},"changyan":{"appid":"","appkey":""},"livere":{"uid":""},"remark42":{"host":"https://remark.haoyizebo.com","site_id":"haoyizebo","max_shown_comments":10,"locale":"zh"},"archive":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null},"category":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"post_limit":10,"order_by":"-length","collapse_depth":0},"tag":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null,"tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"avatar":"/img/avatar.png","name":"蔺国防","introduce":"移动应用开发者，历史文学爱好者","icons":[{"class":"iconfont icon-github-fill","link":"https://github.com","tip":"GitHub"},{"class":"iconfont icon-douban-fill","link":"https://douban.com","tip":"豆瓣"},{"class":"iconfont icon-wechat-fill","qrcode":"/img/favicon.png"}]},"page404":{"banner_img":"/img/default.png","banner_img_height":85,"banner_mask_alpha":0.3,"subtitle":"Page not found"},"links":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"items":[{"title":"Fluid Docs","intro":"主题使用指南","link":"https://hexo.fluid-dev.com/docs/","image":"/img/favicon.png"},{"title":"Fluid Repo","intro":"主题 GitHub 仓库","link":"https://github.com/fluid-dev/hexo-theme-fluid","image":"/img/favicon.png"},{"title":"Fluid Example","intro":"主题操作示例","link":"https://hexo.fluid-dev.com/docs/example/","image":"/img/favicon.png"}]}}}},"excerpt":"","more":"<h4 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h4><pre><code class=\"hljs swift\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">protocol</span> <span class=\"hljs-title\">SomeProtocol</span> </span>&#123;\n    <span class=\"hljs-comment\">// protocol definition goes here</span>\n&#125;</code></pre>\n\n<h4 id=\"遵循协议\"><a href=\"#遵循协议\" class=\"headerlink\" title=\"遵循协议\"></a>遵循协议</h4><pre><code class=\"hljs angelscript\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-symbol\">SomeClass: <span class=\"hljs-symbol\">SomeSuperclass</span>, <span class=\"hljs-symbol\">FirstProtocol</span>, <span class=\"hljs-symbol\">AnotherProtocol</span></span> &#123;\n    <span class=\"hljs-comment\">// class definition goes here</span>\n&#125;</code></pre>\n<h4 id=\"属性要求\"><a href=\"#属性要求\" class=\"headerlink\" title=\"属性要求\"></a>属性要求</h4><pre><code class=\"hljs kotlin\">protocol SomeProtocol &#123;\n    <span class=\"hljs-keyword\">var</span> mustBeSettable: <span class=\"hljs-built_in\">Int</span> &#123; <span class=\"hljs-keyword\">get</span> <span class=\"hljs-keyword\">set</span> &#125;\n    <span class=\"hljs-keyword\">var</span> doesNotNeedToBeSettable: <span class=\"hljs-built_in\">Int</span> &#123; <span class=\"hljs-keyword\">get</span> &#125;\n&#125;</code></pre>\n<h4 id=\"类属性\"><a href=\"#类属性\" class=\"headerlink\" title=\"类属性\"></a>类属性</h4><p>属性前缀添加关键字”static”,协议方法与此同理,func前面添加”static”</p>\n<pre><code class=\"hljs swift\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">protocol</span> <span class=\"hljs-title\">AnotherProtocol</span> </span>&#123;\n    <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">var</span> someTypeProperty: <span class=\"hljs-type\">Int</span> &#123; <span class=\"hljs-keyword\">get</span> <span class=\"hljs-keyword\">set</span> &#125;\n&#125;</code></pre>\n<h4 id=\"Mutating-Method-Requirement\"><a href=\"#Mutating-Method-Requirement\" class=\"headerlink\" title=\"Mutating Method Requirement\"></a>Mutating Method Requirement</h4><p>在方法前添加 mutating 关键字,可在该方法中修改实例的属性.只能在枚举和结构体中使用.</p>\n<pre><code class=\"hljs crystal\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title\">OnOffSwitch</span>: <span class=\"hljs-title\">Togglable</span> &#123;</span>\n    <span class=\"hljs-keyword\">case</span> off, on\n    mutating func toggle() &#123;\n        switch <span class=\"hljs-keyword\">self</span> &#123;\n        <span class=\"hljs-keyword\">case</span> .<span class=\"hljs-symbol\">off:</span>\n            <span class=\"hljs-keyword\">self</span> = .on\n        <span class=\"hljs-keyword\">case</span> .<span class=\"hljs-symbol\">on:</span>\n            <span class=\"hljs-keyword\">self</span> = .off\n        &#125;\n    &#125;\n&#125;\nvar lightSwitch = OnOffSwitch.off\nlightSwitch.toggle()\n/<span class=\"hljs-regexp\">/ lightSwitch is now equal to .on</span></code></pre>\n"},{"title":"构造器","hide":true,"_content":"## 给存储属性设置初始值\n类 和 结构体 必须在类实例和结构体实例创建前给他们的存储属性设置初始值.\n\n> 注意 \n当你给一个存储属性设置一个默认值,或者在一个构造器中设置它的初始值时,该属性的值会直接设置,不会调用任何属性观察器.\n\n## 默认属性值\n你可以在一个构造器中设置存储属性的值,或者在属性声明的时候给它指定一个默认值.\n\n> 注意\n如果一个属性总是一样的初始值,提供一个默认值比在初始化中设值要更好.虽然最后结果相同,但默认值将属性的初始化与声明更加紧密地联系在一起.它使构造器更简短,干净.而且使你能够从它的默认值中推断属性的类型.默认值也使你更容易利用默认构造器和构造继承\n\n> 注意 值类型的初始化\n如果您想使用默认构造器或者成员智能构造器去自定义值类型的构造器,在一个分类中定义您的自定义构造器.而不是作为值类型原始实现的一部分.\n\n# 使用闭包或函数设置属性的默认值\n\n```\nclass SomeClass{\n        let someProperty: SomeType = {\n              //在这个闭包中给someProperty创建一个默认值\n              //someValue必须和SomeType类型相同\n              return someValue\n        }()\n}\n```\n注意闭包结尾的大括号后面接了一对空的小括号。这用来告诉 Swift 立即执行此闭包。如果你忽略了这对括 号，相当于将闭包本身作为值赋值给了属性，而不是将闭包的返回值赋值给属性。\n\n> 如果你使用闭包来初始化属性，请记住在闭包执行时，实例的其它部分都还没有初始化。这意味着你不能在闭包 里访问其它属性，即使这些属性有默认值。同样，你也不能使用隐式的 self 属性，或者调用任何实例方法。\n\n\n\n\n\n\n\n\n","source":"_posts/Swift/Swift---4-构造器.md","raw":"\n---\ntitle:  构造器\ncategories:\n- Swift\ntags: \n- Swift\nhide: true\n---\n## 给存储属性设置初始值\n类 和 结构体 必须在类实例和结构体实例创建前给他们的存储属性设置初始值.\n\n> 注意 \n当你给一个存储属性设置一个默认值,或者在一个构造器中设置它的初始值时,该属性的值会直接设置,不会调用任何属性观察器.\n\n## 默认属性值\n你可以在一个构造器中设置存储属性的值,或者在属性声明的时候给它指定一个默认值.\n\n> 注意\n如果一个属性总是一样的初始值,提供一个默认值比在初始化中设值要更好.虽然最后结果相同,但默认值将属性的初始化与声明更加紧密地联系在一起.它使构造器更简短,干净.而且使你能够从它的默认值中推断属性的类型.默认值也使你更容易利用默认构造器和构造继承\n\n> 注意 值类型的初始化\n如果您想使用默认构造器或者成员智能构造器去自定义值类型的构造器,在一个分类中定义您的自定义构造器.而不是作为值类型原始实现的一部分.\n\n# 使用闭包或函数设置属性的默认值\n\n```\nclass SomeClass{\n        let someProperty: SomeType = {\n              //在这个闭包中给someProperty创建一个默认值\n              //someValue必须和SomeType类型相同\n              return someValue\n        }()\n}\n```\n注意闭包结尾的大括号后面接了一对空的小括号。这用来告诉 Swift 立即执行此闭包。如果你忽略了这对括 号，相当于将闭包本身作为值赋值给了属性，而不是将闭包的返回值赋值给属性。\n\n> 如果你使用闭包来初始化属性，请记住在闭包执行时，实例的其它部分都还没有初始化。这意味着你不能在闭包 里访问其它属性，即使这些属性有默认值。同样，你也不能使用隐式的 self 属性，或者调用任何实例方法。\n\n\n\n\n\n\n\n\n","slug":"Swift/Swift---4-构造器","published":1,"date":"2020-09-23T10:25:59.000Z","updated":"2020-09-27T11:59:37.900Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgq6gnwf000jt29kg08qh0s2","content":"<h2 id=\"给存储属性设置初始值\"><a href=\"#给存储属性设置初始值\" class=\"headerlink\" title=\"给存储属性设置初始值\"></a>给存储属性设置初始值</h2><p>类 和 结构体 必须在类实例和结构体实例创建前给他们的存储属性设置初始值.</p>\n<blockquote>\n<p>注意<br>当你给一个存储属性设置一个默认值,或者在一个构造器中设置它的初始值时,该属性的值会直接设置,不会调用任何属性观察器.</p>\n</blockquote>\n<h2 id=\"默认属性值\"><a href=\"#默认属性值\" class=\"headerlink\" title=\"默认属性值\"></a>默认属性值</h2><p>你可以在一个构造器中设置存储属性的值,或者在属性声明的时候给它指定一个默认值.</p>\n<blockquote>\n<p>注意<br>如果一个属性总是一样的初始值,提供一个默认值比在初始化中设值要更好.虽然最后结果相同,但默认值将属性的初始化与声明更加紧密地联系在一起.它使构造器更简短,干净.而且使你能够从它的默认值中推断属性的类型.默认值也使你更容易利用默认构造器和构造继承</p>\n</blockquote>\n<blockquote>\n<p>注意 值类型的初始化<br>如果您想使用默认构造器或者成员智能构造器去自定义值类型的构造器,在一个分类中定义您的自定义构造器.而不是作为值类型原始实现的一部分.</p>\n</blockquote>\n<h1 id=\"使用闭包或函数设置属性的默认值\"><a href=\"#使用闭包或函数设置属性的默认值\" class=\"headerlink\" title=\"使用闭包或函数设置属性的默认值\"></a>使用闭包或函数设置属性的默认值</h1><pre><code class=\"hljs angelscript\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-symbol\">SomeClass</span>&#123;\n        let someProperty: SomeType = &#123;\n              <span class=\"hljs-comment\">//在这个闭包中给someProperty创建一个默认值</span>\n              <span class=\"hljs-comment\">//someValue必须和SomeType类型相同</span>\n              <span class=\"hljs-keyword\">return</span> someValue\n        &#125;()\n&#125;</code></pre>\n<p>注意闭包结尾的大括号后面接了一对空的小括号。这用来告诉 Swift 立即执行此闭包。如果你忽略了这对括 号，相当于将闭包本身作为值赋值给了属性，而不是将闭包的返回值赋值给属性。</p>\n<blockquote>\n<p>如果你使用闭包来初始化属性，请记住在闭包执行时，实例的其它部分都还没有初始化。这意味着你不能在闭包 里访问其它属性，即使这些属性有默认值。同样，你也不能使用隐式的 self 属性，或者调用任何实例方法。</p>\n</blockquote>\n","site":{"data":{"fluid_static_prefix":{"internal_js":"/js","internal_css":"/css","internal_img":"/img","iconfont":"//at.alicdn.com/t/font_1736178_kmeydafke9r.css","anchor":"https://cdn.staticfile.org/anchor-js/4.2.2/","github_markdown":"https://cdn.staticfile.org/github-markdown-css/4.0.0/","jquery":"https://cdn.staticfile.org/jquery/3.4.1/","bootstrap":"https://cdn.staticfile.org/twitter-bootstrap/4.4.1/","highlightjs":"https://cdn.staticfile.org/highlight.js/10.0.0/","prismjs":"https://cdn.staticfile.org/prism/1.21.0/","tocbot":"https://cdn.staticfile.org/tocbot/4.11.1/","typed":"https://cdn.staticfile.org/typed.js/2.0.11/","fancybox":"https://cdn.staticfile.org/fancybox/3.5.7/","mathjax":"https://cdn.staticfile.org/mathjax/3.0.5/es5/","katex":"https://cdn.staticfile.org/KaTeX/0.11.1/","aplayer":"https://cdn.staticfile.org/aplayer/1.10.1/","busuanzi":"https://busuanzi.ibruce.info/busuanzi/2.3/","clipboard":"https://cdn.staticfile.org/clipboard.js/2.0.6/","mermaid":"https://cdn.staticfile.org/mermaid/8.5.0/","valine":"https://cdn.staticfile.org/valine/1.4.14/","gitalk":"https://cdn.staticfile.org/gitalk/1.6.2/","blueimp_md5":"https://cdn.staticfile.org/blueimp-md5/2.13.0/","disqusjs":"https://cdn.jsdelivr.net/npm/disqusjs@1.0/dist/","hint":"/lib/hint/"},"fluid_config":{"favicon":"/img/favicon.png","apple_touch_icon":"/img/favicon.png","title_join_string":" - ","force_https":false,"code":{"copy_btn":true,"highlight":{"enable":true,"lib":"highlightjs","highlightjs":{"style":"Github Gist","bg_color":false},"prismjs":{"style":"default","preprocess":true}}},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"_","loop":false},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"right","visible":"hover","icon":""},"mouse_click":{"enable":false,"style":"values"}},"dark_mode":{"enable":true,"default":"auto"},"color":{"body_bg_color":"#eee","body_bg_color_dark":"#181c27","navbar_bg_color":"#2f4154","navbar_bg_color_dark":"#1f3144","navbar_text_color":"#fff","navbar_text_color_dark":"#d0d0d0","text_color":"#3c4858","text_color_dark":"#c4c6c9","sec_text_color":"#718096","sec_text_color_dark":"#a7a9ad","post_text_color":"#2c3e50","post_text_color_dark":"#c4c6c9","post_heading_color":"#1a202c","post_heading_color_dark":"#c4c6c9","post_link_color":"#0366d6","post_link_color_dark":"#1589e9","link_hover_color":"#30a9de","link_hover_color_dark":"#30a9de","link_hover_bg_color":"#f8f9fa","link_hover_bg_color_dark":"#364151","board_color":"#fff","board_color_dark":"#252d38"},"font":{"font_size":"16px","font_family":null,"code_font_size":"85%"},"custom_js":null,"custom_css":null,"custom_html":"","web_analytics":{"enable":false,"baidu":null,"google":null,"gtag":null,"tencent":{"sid":null,"cid":null},"woyaola":null,"cnzz":null,"leancloud":{"app_id":null,"app_key":null,"server_url":null}},"lazyload":{"enable":true,"onlypost":false},"daovoice":{"enable":false,"appid":""},"aplayer":{"enable":false,"autoplay":false,"loop":"all","order":"random","theme":"#b7daff","songs":[{"name":"name","artist":"artist","url":"/songs/test.mp3","cover":"/img/cover.jpg"},{"name":"name","artist":"artist","url":"https://...url.mp3","cover":"https://...cover.jpg"}]},"version":{"check":false},"navbar":{"blog_title":"吃面多放葱","ground_glass":{"enable":false,"px":3,"alpha":0.7},"menu":[{"key":"home","link":"/","icon":"iconfont icon-home-fill"},{"key":"category","link":"/categories/","icon":"iconfont icon-category-fill"},{"key":"tag","link":"/tags/","icon":"iconfont icon-tags-fill"},{"key":"about","link":"/about/","icon":"iconfont icon-user-fill"}]},"search":{"enable":true,"path":"/local-search.xml","generate_path":"/local-search.xml","field":"post","content":true},"scroll_down_arrow":{"enable":true,"banner_height_limit":90,"scroll_after_turning_page":true},"banner_parallax":true,"footer":{"statistics":{"enable":false,"source":"busuanzi","pv_format":"总访问量 {} 次","uv_format":"总访客数 {} 人"},"beian":{"enable":false,"icp_text":"京ICP证123456号","police_text":"京公网安备12345678号","police_code":12345678,"police_icon":"/img/police_beian.png"}},"scroll_top_arrow":{"enable":true},"index":{"banner_img":"/img/default.png","banner_img_height":100,"banner_mask_alpha":0.3,"post_default_img":"","slogan":{"enable":true,"text":"像蚂蚁一样工作，像蝴蝶一样生活"},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"category":true,"tag":true}},"page":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3},"post":{"banner_img":"/img/default.png","banner_img_height":70,"banner_mask_alpha":0.3,"meta":{"author":{"enable":false},"date":{"enable":true,"format":"LL a"},"wordcount":{"enable":true,"format":"{} 字"},"min2read":{"enable":true,"format":"{} 分钟","words":100},"views":{"enable":false,"source":"busuanzi","format":"{} 次"}},"updated":{"enable":false,"content":"本文最后更新于：","relative":false},"toc":{"enable":true,"headingSelector":"h1,h2,h3,h4,h5,h6","collapseDepth":0},"copyright":{"enable":true,"content":"本博客所有文章除特别声明外，均采用 <a href=\"https://creativecommons.org/licenses/by-sa/4.0/deed.zh\" rel=\"nofollow noopener\">CC BY-SA 4.0 协议</a> ，转载请注明出处！"},"prev_next":{"enable":true},"custom":{"enable":false,"content":"<img src=\"https://octodex.github.com/images/jetpacktocat.png\" class=\"rounded mx-auto d-block mt-5\" style=\"width:150px; height:150px;\">"},"image_zoom":{"enable":true},"footnote":{"enable":true,"header":""},"math":{"enable":false,"specific":false,"engine":"mathjax"},"mermaid":{"enable":false,"specific":false,"options":{"theme":"default"}},"comments":{"enable":false,"type":"disqus"}},"utterances":{"repo":null,"issue_term":"pathname","label":"utterances","theme":"github-light","theme_dark":"github-dark","crossorigin":"anonymous"},"disqus":{"shortname":null,"disqusjs":false,"apikey":null},"gitalk":{"clientID":null,"clientSecret":null,"repo":null,"owner":null,"admin":["name"],"id":"location.pathname","language":"zh-CN","labels":["Gitalk"],"perPage":10,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true},"valine":{"appid":null,"appkey":null,"placeholder":"说点什么","path":"window.location.pathname","avatar":"retro","meta":["nick","mail","link"],"pageSize":10,"lang":"zh-CN","highlight":false,"recordIP":false,"serverURLs":null},"changyan":{"appid":"","appkey":""},"livere":{"uid":""},"remark42":{"host":"https://remark.haoyizebo.com","site_id":"haoyizebo","max_shown_comments":10,"locale":"zh"},"archive":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null},"category":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"post_limit":10,"order_by":"-length","collapse_depth":0},"tag":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null,"tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"avatar":"/img/avatar.png","name":"蔺国防","introduce":"移动应用开发者，历史文学爱好者","icons":[{"class":"iconfont icon-github-fill","link":"https://github.com","tip":"GitHub"},{"class":"iconfont icon-douban-fill","link":"https://douban.com","tip":"豆瓣"},{"class":"iconfont icon-wechat-fill","qrcode":"/img/favicon.png"}]},"page404":{"banner_img":"/img/default.png","banner_img_height":85,"banner_mask_alpha":0.3,"subtitle":"Page not found"},"links":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"items":[{"title":"Fluid Docs","intro":"主题使用指南","link":"https://hexo.fluid-dev.com/docs/","image":"/img/favicon.png"},{"title":"Fluid Repo","intro":"主题 GitHub 仓库","link":"https://github.com/fluid-dev/hexo-theme-fluid","image":"/img/favicon.png"},{"title":"Fluid Example","intro":"主题操作示例","link":"https://hexo.fluid-dev.com/docs/example/","image":"/img/favicon.png"}]}}}},"excerpt":"","more":"<h2 id=\"给存储属性设置初始值\"><a href=\"#给存储属性设置初始值\" class=\"headerlink\" title=\"给存储属性设置初始值\"></a>给存储属性设置初始值</h2><p>类 和 结构体 必须在类实例和结构体实例创建前给他们的存储属性设置初始值.</p>\n<blockquote>\n<p>注意<br>当你给一个存储属性设置一个默认值,或者在一个构造器中设置它的初始值时,该属性的值会直接设置,不会调用任何属性观察器.</p>\n</blockquote>\n<h2 id=\"默认属性值\"><a href=\"#默认属性值\" class=\"headerlink\" title=\"默认属性值\"></a>默认属性值</h2><p>你可以在一个构造器中设置存储属性的值,或者在属性声明的时候给它指定一个默认值.</p>\n<blockquote>\n<p>注意<br>如果一个属性总是一样的初始值,提供一个默认值比在初始化中设值要更好.虽然最后结果相同,但默认值将属性的初始化与声明更加紧密地联系在一起.它使构造器更简短,干净.而且使你能够从它的默认值中推断属性的类型.默认值也使你更容易利用默认构造器和构造继承</p>\n</blockquote>\n<blockquote>\n<p>注意 值类型的初始化<br>如果您想使用默认构造器或者成员智能构造器去自定义值类型的构造器,在一个分类中定义您的自定义构造器.而不是作为值类型原始实现的一部分.</p>\n</blockquote>\n<h1 id=\"使用闭包或函数设置属性的默认值\"><a href=\"#使用闭包或函数设置属性的默认值\" class=\"headerlink\" title=\"使用闭包或函数设置属性的默认值\"></a>使用闭包或函数设置属性的默认值</h1><pre><code class=\"hljs angelscript\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-symbol\">SomeClass</span>&#123;\n        let someProperty: SomeType = &#123;\n              <span class=\"hljs-comment\">//在这个闭包中给someProperty创建一个默认值</span>\n              <span class=\"hljs-comment\">//someValue必须和SomeType类型相同</span>\n              <span class=\"hljs-keyword\">return</span> someValue\n        &#125;()\n&#125;</code></pre>\n<p>注意闭包结尾的大括号后面接了一对空的小括号。这用来告诉 Swift 立即执行此闭包。如果你忽略了这对括 号，相当于将闭包本身作为值赋值给了属性，而不是将闭包的返回值赋值给属性。</p>\n<blockquote>\n<p>如果你使用闭包来初始化属性，请记住在闭包执行时，实例的其它部分都还没有初始化。这意味着你不能在闭包 里访问其它属性，即使这些属性有默认值。同样，你也不能使用隐式的 self 属性，或者调用任何实例方法。</p>\n</blockquote>\n"},{"title":"String","hide":true,"_content":"\n\n多行字符串以 (\"\"\")开头,以(\"\"\")结尾.字符串中间的空格不会被忽略\n\n例子:\n\n~~~\nfunc generateQuotation() -> String {\n    let quotation = \"\"\"\n        The White Rabbit put on his spectacles.  \"Where shall I begin,\n        please your Majesty?\" he asked.\n \n        \"Begin at the beginning,\" the King said gravely, \"and go on\n        till you come to the end; then stop.\"\n        \"\"\"\n    return quotation\n}\n\n摘录来自: Apple Inc. “The Swift Programming Language (Swift 4)”。 iBooks. \n~~~\n\n字符串的增删改查无法像OC一样使用整数下标去获取字符,由于swift String类型采用的是Unicode编码,因此每个字符占用的内存空间可能不一样,所以采用索引(indices)来进行字符串操作\n\n#### 注意\n如果索引越界会出发运行时错误,APP会闪退\n\n## 查\nindex(before:) \nindex(after:)\nindex(_:offsetBy:)\n\n## 增\ninsert(_:at:)\ninsert(contentsOf:at:)\n\n## 删\nremove(at:)\nremoveSubrange(_:)\n\n## Substrings\n~~~\nlet greeting = \"Hello, world!\"\nlet index = greeting.index(of: \",\") ?? greeting.endIndex\nlet beginning = greeting[..<index]\n// beginning is \"Hello\"\n \n// Convert the result to a String for long-term storage.\nlet newString = String(beginning)\n\n摘录来自: Apple Inc. “The Swift Programming Language (Swift 4)”。 iBooks. \n\n~~~\nSubstring不适合长周期存储,因为只要子串被使用,原始字符串就要一直在内存中保持,因此我们需要创建一个新的字符串来保存子串;\n","source":"_posts/Swift/Swift-4---String.md","raw":"---\ntitle:  String\ncategories:\n- Swift\ntags: \n- Swift\nhide: true\n\n---\n\n\n多行字符串以 (\"\"\")开头,以(\"\"\")结尾.字符串中间的空格不会被忽略\n\n例子:\n\n~~~\nfunc generateQuotation() -> String {\n    let quotation = \"\"\"\n        The White Rabbit put on his spectacles.  \"Where shall I begin,\n        please your Majesty?\" he asked.\n \n        \"Begin at the beginning,\" the King said gravely, \"and go on\n        till you come to the end; then stop.\"\n        \"\"\"\n    return quotation\n}\n\n摘录来自: Apple Inc. “The Swift Programming Language (Swift 4)”。 iBooks. \n~~~\n\n字符串的增删改查无法像OC一样使用整数下标去获取字符,由于swift String类型采用的是Unicode编码,因此每个字符占用的内存空间可能不一样,所以采用索引(indices)来进行字符串操作\n\n#### 注意\n如果索引越界会出发运行时错误,APP会闪退\n\n## 查\nindex(before:) \nindex(after:)\nindex(_:offsetBy:)\n\n## 增\ninsert(_:at:)\ninsert(contentsOf:at:)\n\n## 删\nremove(at:)\nremoveSubrange(_:)\n\n## Substrings\n~~~\nlet greeting = \"Hello, world!\"\nlet index = greeting.index(of: \",\") ?? greeting.endIndex\nlet beginning = greeting[..<index]\n// beginning is \"Hello\"\n \n// Convert the result to a String for long-term storage.\nlet newString = String(beginning)\n\n摘录来自: Apple Inc. “The Swift Programming Language (Swift 4)”。 iBooks. \n\n~~~\nSubstring不适合长周期存储,因为只要子串被使用,原始字符串就要一直在内存中保持,因此我们需要创建一个新的字符串来保存子串;\n","slug":"Swift/Swift-4---String","published":1,"date":"2020-09-23T10:25:59.000Z","updated":"2020-09-27T12:01:09.871Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgq6gnwf000lt29k0p6m8mju","content":"<p>多行字符串以 (“””)开头,以(“””)结尾.字符串中间的空格不会被忽略</p>\n<p>例子:</p>\n<pre><code class=\"hljs pgsql\">func generateQuotation() -&gt; String &#123;\n    let quotation = &quot;&quot;&quot;\n        The White Rabbit put on his spectacles.  &quot;<span class=\"hljs-keyword\">Where</span> shall I <span class=\"hljs-keyword\">begin</span>,\n        please your Majesty?&quot; he asked.\n \n        &quot;<span class=\"hljs-keyword\">Begin</span> at the beginning,&quot; the King said gravely, &quot;<span class=\"hljs-keyword\">and</span> go <span class=\"hljs-keyword\">on</span>\n        till you come <span class=\"hljs-keyword\">to</span> the <span class=\"hljs-keyword\">end</span>; <span class=\"hljs-keyword\">then</span> stop.&quot;\n        &quot;&quot;&quot;\n    <span class=\"hljs-keyword\">return</span> quotation\n&#125;\n\n摘录来自: Apple Inc. “The Swift Programming <span class=\"hljs-keyword\">Language</span> (Swift <span class=\"hljs-number\">4</span>)”。 iBooks.</code></pre>\n\n<p>字符串的增删改查无法像OC一样使用整数下标去获取字符,由于swift String类型采用的是Unicode编码,因此每个字符占用的内存空间可能不一样,所以采用索引(indices)来进行字符串操作</p>\n<h4 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h4><p>如果索引越界会出发运行时错误,APP会闪退</p>\n<h2 id=\"查\"><a href=\"#查\" class=\"headerlink\" title=\"查\"></a>查</h2><p>index(before:)<br>index(after:)<br>index(_:offsetBy:)</p>\n<h2 id=\"增\"><a href=\"#增\" class=\"headerlink\" title=\"增\"></a>增</h2><p>insert(_:at:)<br>insert(contentsOf:at:)</p>\n<h2 id=\"删\"><a href=\"#删\" class=\"headerlink\" title=\"删\"></a>删</h2><p>remove(at:)<br>removeSubrange(_:)</p>\n<h2 id=\"Substrings\"><a href=\"#Substrings\" class=\"headerlink\" title=\"Substrings\"></a>Substrings</h2><pre><code class=\"hljs flix\"><span class=\"hljs-keyword\">let</span> greeting = <span class=\"hljs-string\">&quot;Hello, world!&quot;</span>\n<span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">index</span> = greeting.<span class=\"hljs-keyword\">index</span>(of: <span class=\"hljs-string\">&quot;,&quot;</span>) ?? greeting.endIndex\n<span class=\"hljs-keyword\">let</span> beginning = greeting[..&lt;<span class=\"hljs-keyword\">index</span>]\n<span class=\"hljs-comment\">// beginning is &quot;Hello&quot;</span>\n \n<span class=\"hljs-comment\">// Convert the result to a String for long-term storage.</span>\n<span class=\"hljs-keyword\">let</span> newString = String(beginning)\n\n摘录来自: Apple Inc. “The Swift Programming Language (Swift <span class=\"hljs-number\">4</span>)”。 iBooks. \n</code></pre>\n<p>Substring不适合长周期存储,因为只要子串被使用,原始字符串就要一直在内存中保持,因此我们需要创建一个新的字符串来保存子串;</p>\n","site":{"data":{"fluid_static_prefix":{"internal_js":"/js","internal_css":"/css","internal_img":"/img","iconfont":"//at.alicdn.com/t/font_1736178_kmeydafke9r.css","anchor":"https://cdn.staticfile.org/anchor-js/4.2.2/","github_markdown":"https://cdn.staticfile.org/github-markdown-css/4.0.0/","jquery":"https://cdn.staticfile.org/jquery/3.4.1/","bootstrap":"https://cdn.staticfile.org/twitter-bootstrap/4.4.1/","highlightjs":"https://cdn.staticfile.org/highlight.js/10.0.0/","prismjs":"https://cdn.staticfile.org/prism/1.21.0/","tocbot":"https://cdn.staticfile.org/tocbot/4.11.1/","typed":"https://cdn.staticfile.org/typed.js/2.0.11/","fancybox":"https://cdn.staticfile.org/fancybox/3.5.7/","mathjax":"https://cdn.staticfile.org/mathjax/3.0.5/es5/","katex":"https://cdn.staticfile.org/KaTeX/0.11.1/","aplayer":"https://cdn.staticfile.org/aplayer/1.10.1/","busuanzi":"https://busuanzi.ibruce.info/busuanzi/2.3/","clipboard":"https://cdn.staticfile.org/clipboard.js/2.0.6/","mermaid":"https://cdn.staticfile.org/mermaid/8.5.0/","valine":"https://cdn.staticfile.org/valine/1.4.14/","gitalk":"https://cdn.staticfile.org/gitalk/1.6.2/","blueimp_md5":"https://cdn.staticfile.org/blueimp-md5/2.13.0/","disqusjs":"https://cdn.jsdelivr.net/npm/disqusjs@1.0/dist/","hint":"/lib/hint/"},"fluid_config":{"favicon":"/img/favicon.png","apple_touch_icon":"/img/favicon.png","title_join_string":" - ","force_https":false,"code":{"copy_btn":true,"highlight":{"enable":true,"lib":"highlightjs","highlightjs":{"style":"Github Gist","bg_color":false},"prismjs":{"style":"default","preprocess":true}}},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"_","loop":false},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"right","visible":"hover","icon":""},"mouse_click":{"enable":false,"style":"values"}},"dark_mode":{"enable":true,"default":"auto"},"color":{"body_bg_color":"#eee","body_bg_color_dark":"#181c27","navbar_bg_color":"#2f4154","navbar_bg_color_dark":"#1f3144","navbar_text_color":"#fff","navbar_text_color_dark":"#d0d0d0","text_color":"#3c4858","text_color_dark":"#c4c6c9","sec_text_color":"#718096","sec_text_color_dark":"#a7a9ad","post_text_color":"#2c3e50","post_text_color_dark":"#c4c6c9","post_heading_color":"#1a202c","post_heading_color_dark":"#c4c6c9","post_link_color":"#0366d6","post_link_color_dark":"#1589e9","link_hover_color":"#30a9de","link_hover_color_dark":"#30a9de","link_hover_bg_color":"#f8f9fa","link_hover_bg_color_dark":"#364151","board_color":"#fff","board_color_dark":"#252d38"},"font":{"font_size":"16px","font_family":null,"code_font_size":"85%"},"custom_js":null,"custom_css":null,"custom_html":"","web_analytics":{"enable":false,"baidu":null,"google":null,"gtag":null,"tencent":{"sid":null,"cid":null},"woyaola":null,"cnzz":null,"leancloud":{"app_id":null,"app_key":null,"server_url":null}},"lazyload":{"enable":true,"onlypost":false},"daovoice":{"enable":false,"appid":""},"aplayer":{"enable":false,"autoplay":false,"loop":"all","order":"random","theme":"#b7daff","songs":[{"name":"name","artist":"artist","url":"/songs/test.mp3","cover":"/img/cover.jpg"},{"name":"name","artist":"artist","url":"https://...url.mp3","cover":"https://...cover.jpg"}]},"version":{"check":false},"navbar":{"blog_title":"吃面多放葱","ground_glass":{"enable":false,"px":3,"alpha":0.7},"menu":[{"key":"home","link":"/","icon":"iconfont icon-home-fill"},{"key":"category","link":"/categories/","icon":"iconfont icon-category-fill"},{"key":"tag","link":"/tags/","icon":"iconfont icon-tags-fill"},{"key":"about","link":"/about/","icon":"iconfont icon-user-fill"}]},"search":{"enable":true,"path":"/local-search.xml","generate_path":"/local-search.xml","field":"post","content":true},"scroll_down_arrow":{"enable":true,"banner_height_limit":90,"scroll_after_turning_page":true},"banner_parallax":true,"footer":{"statistics":{"enable":false,"source":"busuanzi","pv_format":"总访问量 {} 次","uv_format":"总访客数 {} 人"},"beian":{"enable":false,"icp_text":"京ICP证123456号","police_text":"京公网安备12345678号","police_code":12345678,"police_icon":"/img/police_beian.png"}},"scroll_top_arrow":{"enable":true},"index":{"banner_img":"/img/default.png","banner_img_height":100,"banner_mask_alpha":0.3,"post_default_img":"","slogan":{"enable":true,"text":"像蚂蚁一样工作，像蝴蝶一样生活"},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"category":true,"tag":true}},"page":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3},"post":{"banner_img":"/img/default.png","banner_img_height":70,"banner_mask_alpha":0.3,"meta":{"author":{"enable":false},"date":{"enable":true,"format":"LL a"},"wordcount":{"enable":true,"format":"{} 字"},"min2read":{"enable":true,"format":"{} 分钟","words":100},"views":{"enable":false,"source":"busuanzi","format":"{} 次"}},"updated":{"enable":false,"content":"本文最后更新于：","relative":false},"toc":{"enable":true,"headingSelector":"h1,h2,h3,h4,h5,h6","collapseDepth":0},"copyright":{"enable":true,"content":"本博客所有文章除特别声明外，均采用 <a href=\"https://creativecommons.org/licenses/by-sa/4.0/deed.zh\" rel=\"nofollow noopener\">CC BY-SA 4.0 协议</a> ，转载请注明出处！"},"prev_next":{"enable":true},"custom":{"enable":false,"content":"<img src=\"https://octodex.github.com/images/jetpacktocat.png\" class=\"rounded mx-auto d-block mt-5\" style=\"width:150px; height:150px;\">"},"image_zoom":{"enable":true},"footnote":{"enable":true,"header":""},"math":{"enable":false,"specific":false,"engine":"mathjax"},"mermaid":{"enable":false,"specific":false,"options":{"theme":"default"}},"comments":{"enable":false,"type":"disqus"}},"utterances":{"repo":null,"issue_term":"pathname","label":"utterances","theme":"github-light","theme_dark":"github-dark","crossorigin":"anonymous"},"disqus":{"shortname":null,"disqusjs":false,"apikey":null},"gitalk":{"clientID":null,"clientSecret":null,"repo":null,"owner":null,"admin":["name"],"id":"location.pathname","language":"zh-CN","labels":["Gitalk"],"perPage":10,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true},"valine":{"appid":null,"appkey":null,"placeholder":"说点什么","path":"window.location.pathname","avatar":"retro","meta":["nick","mail","link"],"pageSize":10,"lang":"zh-CN","highlight":false,"recordIP":false,"serverURLs":null},"changyan":{"appid":"","appkey":""},"livere":{"uid":""},"remark42":{"host":"https://remark.haoyizebo.com","site_id":"haoyizebo","max_shown_comments":10,"locale":"zh"},"archive":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null},"category":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"post_limit":10,"order_by":"-length","collapse_depth":0},"tag":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null,"tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"avatar":"/img/avatar.png","name":"蔺国防","introduce":"移动应用开发者，历史文学爱好者","icons":[{"class":"iconfont icon-github-fill","link":"https://github.com","tip":"GitHub"},{"class":"iconfont icon-douban-fill","link":"https://douban.com","tip":"豆瓣"},{"class":"iconfont icon-wechat-fill","qrcode":"/img/favicon.png"}]},"page404":{"banner_img":"/img/default.png","banner_img_height":85,"banner_mask_alpha":0.3,"subtitle":"Page not found"},"links":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"items":[{"title":"Fluid Docs","intro":"主题使用指南","link":"https://hexo.fluid-dev.com/docs/","image":"/img/favicon.png"},{"title":"Fluid Repo","intro":"主题 GitHub 仓库","link":"https://github.com/fluid-dev/hexo-theme-fluid","image":"/img/favicon.png"},{"title":"Fluid Example","intro":"主题操作示例","link":"https://hexo.fluid-dev.com/docs/example/","image":"/img/favicon.png"}]}}}},"excerpt":"","more":"<p>多行字符串以 (“””)开头,以(“””)结尾.字符串中间的空格不会被忽略</p>\n<p>例子:</p>\n<pre><code class=\"hljs pgsql\">func generateQuotation() -&gt; String &#123;\n    let quotation = &quot;&quot;&quot;\n        The White Rabbit put on his spectacles.  &quot;<span class=\"hljs-keyword\">Where</span> shall I <span class=\"hljs-keyword\">begin</span>,\n        please your Majesty?&quot; he asked.\n \n        &quot;<span class=\"hljs-keyword\">Begin</span> at the beginning,&quot; the King said gravely, &quot;<span class=\"hljs-keyword\">and</span> go <span class=\"hljs-keyword\">on</span>\n        till you come <span class=\"hljs-keyword\">to</span> the <span class=\"hljs-keyword\">end</span>; <span class=\"hljs-keyword\">then</span> stop.&quot;\n        &quot;&quot;&quot;\n    <span class=\"hljs-keyword\">return</span> quotation\n&#125;\n\n摘录来自: Apple Inc. “The Swift Programming <span class=\"hljs-keyword\">Language</span> (Swift <span class=\"hljs-number\">4</span>)”。 iBooks.</code></pre>\n\n<p>字符串的增删改查无法像OC一样使用整数下标去获取字符,由于swift String类型采用的是Unicode编码,因此每个字符占用的内存空间可能不一样,所以采用索引(indices)来进行字符串操作</p>\n<h4 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h4><p>如果索引越界会出发运行时错误,APP会闪退</p>\n<h2 id=\"查\"><a href=\"#查\" class=\"headerlink\" title=\"查\"></a>查</h2><p>index(before:)<br>index(after:)<br>index(_:offsetBy:)</p>\n<h2 id=\"增\"><a href=\"#增\" class=\"headerlink\" title=\"增\"></a>增</h2><p>insert(_:at:)<br>insert(contentsOf:at:)</p>\n<h2 id=\"删\"><a href=\"#删\" class=\"headerlink\" title=\"删\"></a>删</h2><p>remove(at:)<br>removeSubrange(_:)</p>\n<h2 id=\"Substrings\"><a href=\"#Substrings\" class=\"headerlink\" title=\"Substrings\"></a>Substrings</h2><pre><code class=\"hljs flix\"><span class=\"hljs-keyword\">let</span> greeting = <span class=\"hljs-string\">&quot;Hello, world!&quot;</span>\n<span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">index</span> = greeting.<span class=\"hljs-keyword\">index</span>(of: <span class=\"hljs-string\">&quot;,&quot;</span>) ?? greeting.endIndex\n<span class=\"hljs-keyword\">let</span> beginning = greeting[..&lt;<span class=\"hljs-keyword\">index</span>]\n<span class=\"hljs-comment\">// beginning is &quot;Hello&quot;</span>\n \n<span class=\"hljs-comment\">// Convert the result to a String for long-term storage.</span>\n<span class=\"hljs-keyword\">let</span> newString = String(beginning)\n\n摘录来自: Apple Inc. “The Swift Programming Language (Swift <span class=\"hljs-number\">4</span>)”。 iBooks. \n</code></pre>\n<p>Substring不适合长周期存储,因为只要子串被使用,原始字符串就要一直在内存中保持,因此我们需要创建一个新的字符串来保存子串;</p>\n"},{"title":"guard语句","hide":true,"_content":">“NOTE\n\n>Constants and variables created with optional binding in an if statement are available only within the body of the if statement. In contrast, the constants and variables created with a guard statement are available in the lines of code that follow the guard statement, as described in Early Exit.”\n\n>摘录来自: Apple Inc. “The Swift Programming Language (Swift 4)”。 iBooks. \n\n\nif 语句中, 条件声明的变量和常量仅内部可用,而guard语句条件声明的变量和常量,在条件语句后面的代码中仍可用.\n","source":"_posts/Swift/Swift-4---guard语句.md","raw":"\n---\ntitle:  guard语句\ncategories:\n- Swift\ntags: \n- Swift\nhide: true\n\n---\n>“NOTE\n\n>Constants and variables created with optional binding in an if statement are available only within the body of the if statement. In contrast, the constants and variables created with a guard statement are available in the lines of code that follow the guard statement, as described in Early Exit.”\n\n>摘录来自: Apple Inc. “The Swift Programming Language (Swift 4)”。 iBooks. \n\n\nif 语句中, 条件声明的变量和常量仅内部可用,而guard语句条件声明的变量和常量,在条件语句后面的代码中仍可用.\n","slug":"Swift/Swift-4---guard语句","published":1,"date":"2020-09-23T10:25:59.000Z","updated":"2020-09-27T12:00:55.667Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgq6gnwh000pt29k6ncf1xmd","content":"<blockquote>\n<p>“NOTE</p>\n</blockquote>\n<blockquote>\n<p>Constants and variables created with optional binding in an if statement are available only within the body of the if statement. In contrast, the constants and variables created with a guard statement are available in the lines of code that follow the guard statement, as described in Early Exit.”</p>\n</blockquote>\n<blockquote>\n<p>摘录来自: Apple Inc. “The Swift Programming Language (Swift 4)”。 iBooks. </p>\n</blockquote>\n<p>if 语句中, 条件声明的变量和常量仅内部可用,而guard语句条件声明的变量和常量,在条件语句后面的代码中仍可用.</p>\n","site":{"data":{"fluid_static_prefix":{"internal_js":"/js","internal_css":"/css","internal_img":"/img","iconfont":"//at.alicdn.com/t/font_1736178_kmeydafke9r.css","anchor":"https://cdn.staticfile.org/anchor-js/4.2.2/","github_markdown":"https://cdn.staticfile.org/github-markdown-css/4.0.0/","jquery":"https://cdn.staticfile.org/jquery/3.4.1/","bootstrap":"https://cdn.staticfile.org/twitter-bootstrap/4.4.1/","highlightjs":"https://cdn.staticfile.org/highlight.js/10.0.0/","prismjs":"https://cdn.staticfile.org/prism/1.21.0/","tocbot":"https://cdn.staticfile.org/tocbot/4.11.1/","typed":"https://cdn.staticfile.org/typed.js/2.0.11/","fancybox":"https://cdn.staticfile.org/fancybox/3.5.7/","mathjax":"https://cdn.staticfile.org/mathjax/3.0.5/es5/","katex":"https://cdn.staticfile.org/KaTeX/0.11.1/","aplayer":"https://cdn.staticfile.org/aplayer/1.10.1/","busuanzi":"https://busuanzi.ibruce.info/busuanzi/2.3/","clipboard":"https://cdn.staticfile.org/clipboard.js/2.0.6/","mermaid":"https://cdn.staticfile.org/mermaid/8.5.0/","valine":"https://cdn.staticfile.org/valine/1.4.14/","gitalk":"https://cdn.staticfile.org/gitalk/1.6.2/","blueimp_md5":"https://cdn.staticfile.org/blueimp-md5/2.13.0/","disqusjs":"https://cdn.jsdelivr.net/npm/disqusjs@1.0/dist/","hint":"/lib/hint/"},"fluid_config":{"favicon":"/img/favicon.png","apple_touch_icon":"/img/favicon.png","title_join_string":" - ","force_https":false,"code":{"copy_btn":true,"highlight":{"enable":true,"lib":"highlightjs","highlightjs":{"style":"Github Gist","bg_color":false},"prismjs":{"style":"default","preprocess":true}}},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"_","loop":false},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"right","visible":"hover","icon":""},"mouse_click":{"enable":false,"style":"values"}},"dark_mode":{"enable":true,"default":"auto"},"color":{"body_bg_color":"#eee","body_bg_color_dark":"#181c27","navbar_bg_color":"#2f4154","navbar_bg_color_dark":"#1f3144","navbar_text_color":"#fff","navbar_text_color_dark":"#d0d0d0","text_color":"#3c4858","text_color_dark":"#c4c6c9","sec_text_color":"#718096","sec_text_color_dark":"#a7a9ad","post_text_color":"#2c3e50","post_text_color_dark":"#c4c6c9","post_heading_color":"#1a202c","post_heading_color_dark":"#c4c6c9","post_link_color":"#0366d6","post_link_color_dark":"#1589e9","link_hover_color":"#30a9de","link_hover_color_dark":"#30a9de","link_hover_bg_color":"#f8f9fa","link_hover_bg_color_dark":"#364151","board_color":"#fff","board_color_dark":"#252d38"},"font":{"font_size":"16px","font_family":null,"code_font_size":"85%"},"custom_js":null,"custom_css":null,"custom_html":"","web_analytics":{"enable":false,"baidu":null,"google":null,"gtag":null,"tencent":{"sid":null,"cid":null},"woyaola":null,"cnzz":null,"leancloud":{"app_id":null,"app_key":null,"server_url":null}},"lazyload":{"enable":true,"onlypost":false},"daovoice":{"enable":false,"appid":""},"aplayer":{"enable":false,"autoplay":false,"loop":"all","order":"random","theme":"#b7daff","songs":[{"name":"name","artist":"artist","url":"/songs/test.mp3","cover":"/img/cover.jpg"},{"name":"name","artist":"artist","url":"https://...url.mp3","cover":"https://...cover.jpg"}]},"version":{"check":false},"navbar":{"blog_title":"吃面多放葱","ground_glass":{"enable":false,"px":3,"alpha":0.7},"menu":[{"key":"home","link":"/","icon":"iconfont icon-home-fill"},{"key":"category","link":"/categories/","icon":"iconfont icon-category-fill"},{"key":"tag","link":"/tags/","icon":"iconfont icon-tags-fill"},{"key":"about","link":"/about/","icon":"iconfont icon-user-fill"}]},"search":{"enable":true,"path":"/local-search.xml","generate_path":"/local-search.xml","field":"post","content":true},"scroll_down_arrow":{"enable":true,"banner_height_limit":90,"scroll_after_turning_page":true},"banner_parallax":true,"footer":{"statistics":{"enable":false,"source":"busuanzi","pv_format":"总访问量 {} 次","uv_format":"总访客数 {} 人"},"beian":{"enable":false,"icp_text":"京ICP证123456号","police_text":"京公网安备12345678号","police_code":12345678,"police_icon":"/img/police_beian.png"}},"scroll_top_arrow":{"enable":true},"index":{"banner_img":"/img/default.png","banner_img_height":100,"banner_mask_alpha":0.3,"post_default_img":"","slogan":{"enable":true,"text":"像蚂蚁一样工作，像蝴蝶一样生活"},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"category":true,"tag":true}},"page":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3},"post":{"banner_img":"/img/default.png","banner_img_height":70,"banner_mask_alpha":0.3,"meta":{"author":{"enable":false},"date":{"enable":true,"format":"LL a"},"wordcount":{"enable":true,"format":"{} 字"},"min2read":{"enable":true,"format":"{} 分钟","words":100},"views":{"enable":false,"source":"busuanzi","format":"{} 次"}},"updated":{"enable":false,"content":"本文最后更新于：","relative":false},"toc":{"enable":true,"headingSelector":"h1,h2,h3,h4,h5,h6","collapseDepth":0},"copyright":{"enable":true,"content":"本博客所有文章除特别声明外，均采用 <a href=\"https://creativecommons.org/licenses/by-sa/4.0/deed.zh\" rel=\"nofollow noopener\">CC BY-SA 4.0 协议</a> ，转载请注明出处！"},"prev_next":{"enable":true},"custom":{"enable":false,"content":"<img src=\"https://octodex.github.com/images/jetpacktocat.png\" class=\"rounded mx-auto d-block mt-5\" style=\"width:150px; height:150px;\">"},"image_zoom":{"enable":true},"footnote":{"enable":true,"header":""},"math":{"enable":false,"specific":false,"engine":"mathjax"},"mermaid":{"enable":false,"specific":false,"options":{"theme":"default"}},"comments":{"enable":false,"type":"disqus"}},"utterances":{"repo":null,"issue_term":"pathname","label":"utterances","theme":"github-light","theme_dark":"github-dark","crossorigin":"anonymous"},"disqus":{"shortname":null,"disqusjs":false,"apikey":null},"gitalk":{"clientID":null,"clientSecret":null,"repo":null,"owner":null,"admin":["name"],"id":"location.pathname","language":"zh-CN","labels":["Gitalk"],"perPage":10,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true},"valine":{"appid":null,"appkey":null,"placeholder":"说点什么","path":"window.location.pathname","avatar":"retro","meta":["nick","mail","link"],"pageSize":10,"lang":"zh-CN","highlight":false,"recordIP":false,"serverURLs":null},"changyan":{"appid":"","appkey":""},"livere":{"uid":""},"remark42":{"host":"https://remark.haoyizebo.com","site_id":"haoyizebo","max_shown_comments":10,"locale":"zh"},"archive":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null},"category":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"post_limit":10,"order_by":"-length","collapse_depth":0},"tag":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null,"tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"avatar":"/img/avatar.png","name":"蔺国防","introduce":"移动应用开发者，历史文学爱好者","icons":[{"class":"iconfont icon-github-fill","link":"https://github.com","tip":"GitHub"},{"class":"iconfont icon-douban-fill","link":"https://douban.com","tip":"豆瓣"},{"class":"iconfont icon-wechat-fill","qrcode":"/img/favicon.png"}]},"page404":{"banner_img":"/img/default.png","banner_img_height":85,"banner_mask_alpha":0.3,"subtitle":"Page not found"},"links":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"items":[{"title":"Fluid Docs","intro":"主题使用指南","link":"https://hexo.fluid-dev.com/docs/","image":"/img/favicon.png"},{"title":"Fluid Repo","intro":"主题 GitHub 仓库","link":"https://github.com/fluid-dev/hexo-theme-fluid","image":"/img/favicon.png"},{"title":"Fluid Example","intro":"主题操作示例","link":"https://hexo.fluid-dev.com/docs/example/","image":"/img/favicon.png"}]}}}},"excerpt":"","more":"<blockquote>\n<p>“NOTE</p>\n</blockquote>\n<blockquote>\n<p>Constants and variables created with optional binding in an if statement are available only within the body of the if statement. In contrast, the constants and variables created with a guard statement are available in the lines of code that follow the guard statement, as described in Early Exit.”</p>\n</blockquote>\n<blockquote>\n<p>摘录来自: Apple Inc. “The Swift Programming Language (Swift 4)”。 iBooks. </p>\n</blockquote>\n<p>if 语句中, 条件声明的变量和常量仅内部可用,而guard语句条件声明的变量和常量,在条件语句后面的代码中仍可用.</p>\n"},{"title":"nil","hide":true,"_content":"\n> “NOTE\n\n> Swift’s nil is not the same as nil in Objective-C. In Objective-C, nil is a pointer to a nonexistent object. In Swift, nil is not a pointer—it is the absence of a value of a certain type. Optionals of any type can be set to nil, not just object types.”\n\n> 摘录来自: Apple Inc. “The Swift Programming Language (Swift 4)”。 iBooks. \n\nOC里面nil是指向不存在对象的一个指针,而在swift中nil是值空缺的一个特定类型;任意类型的可选类型均可设置为nil,但OC仅限于对象类型.\n","source":"_posts/Swift/Swift-4---nil.md","raw":"---\ntitle:  nil\ncategories:\n- Swift\ntags: \n- Swift\nhide: true\n\n---\n\n> “NOTE\n\n> Swift’s nil is not the same as nil in Objective-C. In Objective-C, nil is a pointer to a nonexistent object. In Swift, nil is not a pointer—it is the absence of a value of a certain type. Optionals of any type can be set to nil, not just object types.”\n\n> 摘录来自: Apple Inc. “The Swift Programming Language (Swift 4)”。 iBooks. \n\nOC里面nil是指向不存在对象的一个指针,而在swift中nil是值空缺的一个特定类型;任意类型的可选类型均可设置为nil,但OC仅限于对象类型.\n","slug":"Swift/Swift-4---nil","published":1,"date":"2020-09-23T10:25:59.000Z","updated":"2020-09-27T12:01:02.722Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgq6gnwi000rt29kchzkfulx","content":"<blockquote>\n<p>“NOTE</p>\n</blockquote>\n<blockquote>\n<p>Swift’s nil is not the same as nil in Objective-C. In Objective-C, nil is a pointer to a nonexistent object. In Swift, nil is not a pointer—it is the absence of a value of a certain type. Optionals of any type can be set to nil, not just object types.”</p>\n</blockquote>\n<blockquote>\n<p>摘录来自: Apple Inc. “The Swift Programming Language (Swift 4)”。 iBooks. </p>\n</blockquote>\n<p>OC里面nil是指向不存在对象的一个指针,而在swift中nil是值空缺的一个特定类型;任意类型的可选类型均可设置为nil,但OC仅限于对象类型.</p>\n","site":{"data":{"fluid_static_prefix":{"internal_js":"/js","internal_css":"/css","internal_img":"/img","iconfont":"//at.alicdn.com/t/font_1736178_kmeydafke9r.css","anchor":"https://cdn.staticfile.org/anchor-js/4.2.2/","github_markdown":"https://cdn.staticfile.org/github-markdown-css/4.0.0/","jquery":"https://cdn.staticfile.org/jquery/3.4.1/","bootstrap":"https://cdn.staticfile.org/twitter-bootstrap/4.4.1/","highlightjs":"https://cdn.staticfile.org/highlight.js/10.0.0/","prismjs":"https://cdn.staticfile.org/prism/1.21.0/","tocbot":"https://cdn.staticfile.org/tocbot/4.11.1/","typed":"https://cdn.staticfile.org/typed.js/2.0.11/","fancybox":"https://cdn.staticfile.org/fancybox/3.5.7/","mathjax":"https://cdn.staticfile.org/mathjax/3.0.5/es5/","katex":"https://cdn.staticfile.org/KaTeX/0.11.1/","aplayer":"https://cdn.staticfile.org/aplayer/1.10.1/","busuanzi":"https://busuanzi.ibruce.info/busuanzi/2.3/","clipboard":"https://cdn.staticfile.org/clipboard.js/2.0.6/","mermaid":"https://cdn.staticfile.org/mermaid/8.5.0/","valine":"https://cdn.staticfile.org/valine/1.4.14/","gitalk":"https://cdn.staticfile.org/gitalk/1.6.2/","blueimp_md5":"https://cdn.staticfile.org/blueimp-md5/2.13.0/","disqusjs":"https://cdn.jsdelivr.net/npm/disqusjs@1.0/dist/","hint":"/lib/hint/"},"fluid_config":{"favicon":"/img/favicon.png","apple_touch_icon":"/img/favicon.png","title_join_string":" - ","force_https":false,"code":{"copy_btn":true,"highlight":{"enable":true,"lib":"highlightjs","highlightjs":{"style":"Github Gist","bg_color":false},"prismjs":{"style":"default","preprocess":true}}},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"_","loop":false},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"right","visible":"hover","icon":""},"mouse_click":{"enable":false,"style":"values"}},"dark_mode":{"enable":true,"default":"auto"},"color":{"body_bg_color":"#eee","body_bg_color_dark":"#181c27","navbar_bg_color":"#2f4154","navbar_bg_color_dark":"#1f3144","navbar_text_color":"#fff","navbar_text_color_dark":"#d0d0d0","text_color":"#3c4858","text_color_dark":"#c4c6c9","sec_text_color":"#718096","sec_text_color_dark":"#a7a9ad","post_text_color":"#2c3e50","post_text_color_dark":"#c4c6c9","post_heading_color":"#1a202c","post_heading_color_dark":"#c4c6c9","post_link_color":"#0366d6","post_link_color_dark":"#1589e9","link_hover_color":"#30a9de","link_hover_color_dark":"#30a9de","link_hover_bg_color":"#f8f9fa","link_hover_bg_color_dark":"#364151","board_color":"#fff","board_color_dark":"#252d38"},"font":{"font_size":"16px","font_family":null,"code_font_size":"85%"},"custom_js":null,"custom_css":null,"custom_html":"","web_analytics":{"enable":false,"baidu":null,"google":null,"gtag":null,"tencent":{"sid":null,"cid":null},"woyaola":null,"cnzz":null,"leancloud":{"app_id":null,"app_key":null,"server_url":null}},"lazyload":{"enable":true,"onlypost":false},"daovoice":{"enable":false,"appid":""},"aplayer":{"enable":false,"autoplay":false,"loop":"all","order":"random","theme":"#b7daff","songs":[{"name":"name","artist":"artist","url":"/songs/test.mp3","cover":"/img/cover.jpg"},{"name":"name","artist":"artist","url":"https://...url.mp3","cover":"https://...cover.jpg"}]},"version":{"check":false},"navbar":{"blog_title":"吃面多放葱","ground_glass":{"enable":false,"px":3,"alpha":0.7},"menu":[{"key":"home","link":"/","icon":"iconfont icon-home-fill"},{"key":"category","link":"/categories/","icon":"iconfont icon-category-fill"},{"key":"tag","link":"/tags/","icon":"iconfont icon-tags-fill"},{"key":"about","link":"/about/","icon":"iconfont icon-user-fill"}]},"search":{"enable":true,"path":"/local-search.xml","generate_path":"/local-search.xml","field":"post","content":true},"scroll_down_arrow":{"enable":true,"banner_height_limit":90,"scroll_after_turning_page":true},"banner_parallax":true,"footer":{"statistics":{"enable":false,"source":"busuanzi","pv_format":"总访问量 {} 次","uv_format":"总访客数 {} 人"},"beian":{"enable":false,"icp_text":"京ICP证123456号","police_text":"京公网安备12345678号","police_code":12345678,"police_icon":"/img/police_beian.png"}},"scroll_top_arrow":{"enable":true},"index":{"banner_img":"/img/default.png","banner_img_height":100,"banner_mask_alpha":0.3,"post_default_img":"","slogan":{"enable":true,"text":"像蚂蚁一样工作，像蝴蝶一样生活"},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"category":true,"tag":true}},"page":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3},"post":{"banner_img":"/img/default.png","banner_img_height":70,"banner_mask_alpha":0.3,"meta":{"author":{"enable":false},"date":{"enable":true,"format":"LL a"},"wordcount":{"enable":true,"format":"{} 字"},"min2read":{"enable":true,"format":"{} 分钟","words":100},"views":{"enable":false,"source":"busuanzi","format":"{} 次"}},"updated":{"enable":false,"content":"本文最后更新于：","relative":false},"toc":{"enable":true,"headingSelector":"h1,h2,h3,h4,h5,h6","collapseDepth":0},"copyright":{"enable":true,"content":"本博客所有文章除特别声明外，均采用 <a href=\"https://creativecommons.org/licenses/by-sa/4.0/deed.zh\" rel=\"nofollow noopener\">CC BY-SA 4.0 协议</a> ，转载请注明出处！"},"prev_next":{"enable":true},"custom":{"enable":false,"content":"<img src=\"https://octodex.github.com/images/jetpacktocat.png\" class=\"rounded mx-auto d-block mt-5\" style=\"width:150px; height:150px;\">"},"image_zoom":{"enable":true},"footnote":{"enable":true,"header":""},"math":{"enable":false,"specific":false,"engine":"mathjax"},"mermaid":{"enable":false,"specific":false,"options":{"theme":"default"}},"comments":{"enable":false,"type":"disqus"}},"utterances":{"repo":null,"issue_term":"pathname","label":"utterances","theme":"github-light","theme_dark":"github-dark","crossorigin":"anonymous"},"disqus":{"shortname":null,"disqusjs":false,"apikey":null},"gitalk":{"clientID":null,"clientSecret":null,"repo":null,"owner":null,"admin":["name"],"id":"location.pathname","language":"zh-CN","labels":["Gitalk"],"perPage":10,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true},"valine":{"appid":null,"appkey":null,"placeholder":"说点什么","path":"window.location.pathname","avatar":"retro","meta":["nick","mail","link"],"pageSize":10,"lang":"zh-CN","highlight":false,"recordIP":false,"serverURLs":null},"changyan":{"appid":"","appkey":""},"livere":{"uid":""},"remark42":{"host":"https://remark.haoyizebo.com","site_id":"haoyizebo","max_shown_comments":10,"locale":"zh"},"archive":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null},"category":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"post_limit":10,"order_by":"-length","collapse_depth":0},"tag":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null,"tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"avatar":"/img/avatar.png","name":"蔺国防","introduce":"移动应用开发者，历史文学爱好者","icons":[{"class":"iconfont icon-github-fill","link":"https://github.com","tip":"GitHub"},{"class":"iconfont icon-douban-fill","link":"https://douban.com","tip":"豆瓣"},{"class":"iconfont icon-wechat-fill","qrcode":"/img/favicon.png"}]},"page404":{"banner_img":"/img/default.png","banner_img_height":85,"banner_mask_alpha":0.3,"subtitle":"Page not found"},"links":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"items":[{"title":"Fluid Docs","intro":"主题使用指南","link":"https://hexo.fluid-dev.com/docs/","image":"/img/favicon.png"},{"title":"Fluid Repo","intro":"主题 GitHub 仓库","link":"https://github.com/fluid-dev/hexo-theme-fluid","image":"/img/favicon.png"},{"title":"Fluid Example","intro":"主题操作示例","link":"https://hexo.fluid-dev.com/docs/example/","image":"/img/favicon.png"}]}}}},"excerpt":"","more":"<blockquote>\n<p>“NOTE</p>\n</blockquote>\n<blockquote>\n<p>Swift’s nil is not the same as nil in Objective-C. In Objective-C, nil is a pointer to a nonexistent object. In Swift, nil is not a pointer—it is the absence of a value of a certain type. Optionals of any type can be set to nil, not just object types.”</p>\n</blockquote>\n<blockquote>\n<p>摘录来自: Apple Inc. “The Swift Programming Language (Swift 4)”。 iBooks. </p>\n</blockquote>\n<p>OC里面nil是指向不存在对象的一个指针,而在swift中nil是值空缺的一个特定类型;任意类型的可选类型均可设置为nil,但OC仅限于对象类型.</p>\n"},{"title":"元组","hide":true,"_content":"#### 元组的比较是自左向右的,直至比较出结果大小,若全部相等,则元组相等\n```\n“Tuples are compared from left to right, one value at a time, until the comparison finds two values that aren’t equal. Those two values are compared, and the result of that comparison determines the overall result of the tuple comparison. If all the elements are equal, then the tuples themselves are equal. For example:”\n\n摘录来自: Apple Inc. “The Swift Programming Language (Swift 4)”。 iBooks. \n```\n```\n(1, \"zebra\") < (2, \"apple\")   // true because 1 is less than 2; \"zebra\" and \"apple\" are not compared\n(3, \"apple\") < (3, \"bird\")    // true because 3 is equal to 3, and \"apple\" is less than \"bird\"\n(4, \"dog\") == (4, \"dog\")      // true because 4 is equal to 4, and \"dog\" is equal to \"dog\"\n\n摘录来自: Apple Inc. “The Swift Programming Language (Swift 4)”。 iBooks. \n```\n\n> “NOTE\n\n> The Swift standard library includes tuple comparison operators for tuples with fewer than seven elements. To compare tuples with seven or more elements, you must implement the comparison operators yourself.”\n\n> 摘录来自: Apple Inc. “The Swift Programming Language (Swift 4)”。 iBooks. \n>\n\nSwift 标准库对元组的比较仅支持小于7个元素的元组,如果一个元组内包含7个或更多元素的话,你必须自己实现比较操作.\n","source":"_posts/Swift/Swift-4---元组.md","raw":"\n---\ntitle:  元组\ncategories:\n- Swift\ntags: \n- Swift\nhide: true\n---\n#### 元组的比较是自左向右的,直至比较出结果大小,若全部相等,则元组相等\n```\n“Tuples are compared from left to right, one value at a time, until the comparison finds two values that aren’t equal. Those two values are compared, and the result of that comparison determines the overall result of the tuple comparison. If all the elements are equal, then the tuples themselves are equal. For example:”\n\n摘录来自: Apple Inc. “The Swift Programming Language (Swift 4)”。 iBooks. \n```\n```\n(1, \"zebra\") < (2, \"apple\")   // true because 1 is less than 2; \"zebra\" and \"apple\" are not compared\n(3, \"apple\") < (3, \"bird\")    // true because 3 is equal to 3, and \"apple\" is less than \"bird\"\n(4, \"dog\") == (4, \"dog\")      // true because 4 is equal to 4, and \"dog\" is equal to \"dog\"\n\n摘录来自: Apple Inc. “The Swift Programming Language (Swift 4)”。 iBooks. \n```\n\n> “NOTE\n\n> The Swift standard library includes tuple comparison operators for tuples with fewer than seven elements. To compare tuples with seven or more elements, you must implement the comparison operators yourself.”\n\n> 摘录来自: Apple Inc. “The Swift Programming Language (Swift 4)”。 iBooks. \n>\n\nSwift 标准库对元组的比较仅支持小于7个元素的元组,如果一个元组内包含7个或更多元素的话,你必须自己实现比较操作.\n","slug":"Swift/Swift-4---元组","published":1,"date":"2020-09-23T10:25:59.000Z","updated":"2020-09-27T12:00:48.011Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgq6gnwj000ut29k17sb3njh","content":"<h4 id=\"元组的比较是自左向右的-直至比较出结果大小-若全部相等-则元组相等\"><a href=\"#元组的比较是自左向右的-直至比较出结果大小-若全部相等-则元组相等\" class=\"headerlink\" title=\"元组的比较是自左向右的,直至比较出结果大小,若全部相等,则元组相等\"></a>元组的比较是自左向右的,直至比较出结果大小,若全部相等,则元组相等</h4><pre><code class=\"hljs livecodeserver\">“Tuples are compared <span class=\"hljs-built_in\">from</span> left <span class=\"hljs-built_in\">to</span> <span class=\"hljs-literal\">right</span>, <span class=\"hljs-literal\">one</span> <span class=\"hljs-built_in\">value</span> <span class=\"hljs-keyword\">at</span> <span class=\"hljs-keyword\">a</span> <span class=\"hljs-built_in\">time</span>, <span class=\"hljs-keyword\">until</span> <span class=\"hljs-keyword\">the</span> comparison finds <span class=\"hljs-literal\">two</span> values that aren’t equal. Those <span class=\"hljs-literal\">two</span> values are compared, <span class=\"hljs-keyword\">and</span> <span class=\"hljs-keyword\">the</span> <span class=\"hljs-built_in\">result</span> <span class=\"hljs-keyword\">of</span> that comparison determines <span class=\"hljs-keyword\">the</span> overall <span class=\"hljs-built_in\">result</span> <span class=\"hljs-keyword\">of</span> <span class=\"hljs-keyword\">the</span> tuple comparison. If all <span class=\"hljs-keyword\">the</span> elements are equal, <span class=\"hljs-keyword\">then</span> <span class=\"hljs-keyword\">the</span> tuples themselves are equal. For example:”\n\n摘录来自: Apple Inc. “The Swift Programming Language (Swift <span class=\"hljs-number\">4</span>)”。 iBooks.</code></pre>\n<pre><code class=\"hljs pgsql\">(<span class=\"hljs-number\">1</span>, &quot;zebra&quot;) &lt; (<span class=\"hljs-number\">2</span>, &quot;apple&quot;)   // <span class=\"hljs-keyword\">true</span> because <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">is</span> less than <span class=\"hljs-number\">2</span>; &quot;zebra&quot; <span class=\"hljs-keyword\">and</span> &quot;apple&quot; are <span class=\"hljs-keyword\">not</span> compared\n(<span class=\"hljs-number\">3</span>, &quot;apple&quot;) &lt; (<span class=\"hljs-number\">3</span>, &quot;bird&quot;)    // <span class=\"hljs-keyword\">true</span> because <span class=\"hljs-number\">3</span> <span class=\"hljs-keyword\">is</span> equal <span class=\"hljs-keyword\">to</span> <span class=\"hljs-number\">3</span>, <span class=\"hljs-keyword\">and</span> &quot;apple&quot; <span class=\"hljs-keyword\">is</span> less than &quot;bird&quot;\n(<span class=\"hljs-number\">4</span>, &quot;dog&quot;) == (<span class=\"hljs-number\">4</span>, &quot;dog&quot;)      // <span class=\"hljs-keyword\">true</span> because <span class=\"hljs-number\">4</span> <span class=\"hljs-keyword\">is</span> equal <span class=\"hljs-keyword\">to</span> <span class=\"hljs-number\">4</span>, <span class=\"hljs-keyword\">and</span> &quot;dog&quot; <span class=\"hljs-keyword\">is</span> equal <span class=\"hljs-keyword\">to</span> &quot;dog&quot;\n\n摘录来自: Apple Inc. “The Swift Programming <span class=\"hljs-keyword\">Language</span> (Swift <span class=\"hljs-number\">4</span>)”。 iBooks.</code></pre>\n\n<blockquote>\n<p>“NOTE</p>\n</blockquote>\n<blockquote>\n<p>The Swift standard library includes tuple comparison operators for tuples with fewer than seven elements. To compare tuples with seven or more elements, you must implement the comparison operators yourself.”</p>\n</blockquote>\n<blockquote>\n<p>摘录来自: Apple Inc. “The Swift Programming Language (Swift 4)”。 iBooks. </p>\n</blockquote>\n<p>Swift 标准库对元组的比较仅支持小于7个元素的元组,如果一个元组内包含7个或更多元素的话,你必须自己实现比较操作.</p>\n","site":{"data":{"fluid_static_prefix":{"internal_js":"/js","internal_css":"/css","internal_img":"/img","iconfont":"//at.alicdn.com/t/font_1736178_kmeydafke9r.css","anchor":"https://cdn.staticfile.org/anchor-js/4.2.2/","github_markdown":"https://cdn.staticfile.org/github-markdown-css/4.0.0/","jquery":"https://cdn.staticfile.org/jquery/3.4.1/","bootstrap":"https://cdn.staticfile.org/twitter-bootstrap/4.4.1/","highlightjs":"https://cdn.staticfile.org/highlight.js/10.0.0/","prismjs":"https://cdn.staticfile.org/prism/1.21.0/","tocbot":"https://cdn.staticfile.org/tocbot/4.11.1/","typed":"https://cdn.staticfile.org/typed.js/2.0.11/","fancybox":"https://cdn.staticfile.org/fancybox/3.5.7/","mathjax":"https://cdn.staticfile.org/mathjax/3.0.5/es5/","katex":"https://cdn.staticfile.org/KaTeX/0.11.1/","aplayer":"https://cdn.staticfile.org/aplayer/1.10.1/","busuanzi":"https://busuanzi.ibruce.info/busuanzi/2.3/","clipboard":"https://cdn.staticfile.org/clipboard.js/2.0.6/","mermaid":"https://cdn.staticfile.org/mermaid/8.5.0/","valine":"https://cdn.staticfile.org/valine/1.4.14/","gitalk":"https://cdn.staticfile.org/gitalk/1.6.2/","blueimp_md5":"https://cdn.staticfile.org/blueimp-md5/2.13.0/","disqusjs":"https://cdn.jsdelivr.net/npm/disqusjs@1.0/dist/","hint":"/lib/hint/"},"fluid_config":{"favicon":"/img/favicon.png","apple_touch_icon":"/img/favicon.png","title_join_string":" - ","force_https":false,"code":{"copy_btn":true,"highlight":{"enable":true,"lib":"highlightjs","highlightjs":{"style":"Github Gist","bg_color":false},"prismjs":{"style":"default","preprocess":true}}},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"_","loop":false},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"right","visible":"hover","icon":""},"mouse_click":{"enable":false,"style":"values"}},"dark_mode":{"enable":true,"default":"auto"},"color":{"body_bg_color":"#eee","body_bg_color_dark":"#181c27","navbar_bg_color":"#2f4154","navbar_bg_color_dark":"#1f3144","navbar_text_color":"#fff","navbar_text_color_dark":"#d0d0d0","text_color":"#3c4858","text_color_dark":"#c4c6c9","sec_text_color":"#718096","sec_text_color_dark":"#a7a9ad","post_text_color":"#2c3e50","post_text_color_dark":"#c4c6c9","post_heading_color":"#1a202c","post_heading_color_dark":"#c4c6c9","post_link_color":"#0366d6","post_link_color_dark":"#1589e9","link_hover_color":"#30a9de","link_hover_color_dark":"#30a9de","link_hover_bg_color":"#f8f9fa","link_hover_bg_color_dark":"#364151","board_color":"#fff","board_color_dark":"#252d38"},"font":{"font_size":"16px","font_family":null,"code_font_size":"85%"},"custom_js":null,"custom_css":null,"custom_html":"","web_analytics":{"enable":false,"baidu":null,"google":null,"gtag":null,"tencent":{"sid":null,"cid":null},"woyaola":null,"cnzz":null,"leancloud":{"app_id":null,"app_key":null,"server_url":null}},"lazyload":{"enable":true,"onlypost":false},"daovoice":{"enable":false,"appid":""},"aplayer":{"enable":false,"autoplay":false,"loop":"all","order":"random","theme":"#b7daff","songs":[{"name":"name","artist":"artist","url":"/songs/test.mp3","cover":"/img/cover.jpg"},{"name":"name","artist":"artist","url":"https://...url.mp3","cover":"https://...cover.jpg"}]},"version":{"check":false},"navbar":{"blog_title":"吃面多放葱","ground_glass":{"enable":false,"px":3,"alpha":0.7},"menu":[{"key":"home","link":"/","icon":"iconfont icon-home-fill"},{"key":"category","link":"/categories/","icon":"iconfont icon-category-fill"},{"key":"tag","link":"/tags/","icon":"iconfont icon-tags-fill"},{"key":"about","link":"/about/","icon":"iconfont icon-user-fill"}]},"search":{"enable":true,"path":"/local-search.xml","generate_path":"/local-search.xml","field":"post","content":true},"scroll_down_arrow":{"enable":true,"banner_height_limit":90,"scroll_after_turning_page":true},"banner_parallax":true,"footer":{"statistics":{"enable":false,"source":"busuanzi","pv_format":"总访问量 {} 次","uv_format":"总访客数 {} 人"},"beian":{"enable":false,"icp_text":"京ICP证123456号","police_text":"京公网安备12345678号","police_code":12345678,"police_icon":"/img/police_beian.png"}},"scroll_top_arrow":{"enable":true},"index":{"banner_img":"/img/default.png","banner_img_height":100,"banner_mask_alpha":0.3,"post_default_img":"","slogan":{"enable":true,"text":"像蚂蚁一样工作，像蝴蝶一样生活"},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"category":true,"tag":true}},"page":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3},"post":{"banner_img":"/img/default.png","banner_img_height":70,"banner_mask_alpha":0.3,"meta":{"author":{"enable":false},"date":{"enable":true,"format":"LL a"},"wordcount":{"enable":true,"format":"{} 字"},"min2read":{"enable":true,"format":"{} 分钟","words":100},"views":{"enable":false,"source":"busuanzi","format":"{} 次"}},"updated":{"enable":false,"content":"本文最后更新于：","relative":false},"toc":{"enable":true,"headingSelector":"h1,h2,h3,h4,h5,h6","collapseDepth":0},"copyright":{"enable":true,"content":"本博客所有文章除特别声明外，均采用 <a href=\"https://creativecommons.org/licenses/by-sa/4.0/deed.zh\" rel=\"nofollow noopener\">CC BY-SA 4.0 协议</a> ，转载请注明出处！"},"prev_next":{"enable":true},"custom":{"enable":false,"content":"<img src=\"https://octodex.github.com/images/jetpacktocat.png\" class=\"rounded mx-auto d-block mt-5\" style=\"width:150px; height:150px;\">"},"image_zoom":{"enable":true},"footnote":{"enable":true,"header":""},"math":{"enable":false,"specific":false,"engine":"mathjax"},"mermaid":{"enable":false,"specific":false,"options":{"theme":"default"}},"comments":{"enable":false,"type":"disqus"}},"utterances":{"repo":null,"issue_term":"pathname","label":"utterances","theme":"github-light","theme_dark":"github-dark","crossorigin":"anonymous"},"disqus":{"shortname":null,"disqusjs":false,"apikey":null},"gitalk":{"clientID":null,"clientSecret":null,"repo":null,"owner":null,"admin":["name"],"id":"location.pathname","language":"zh-CN","labels":["Gitalk"],"perPage":10,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true},"valine":{"appid":null,"appkey":null,"placeholder":"说点什么","path":"window.location.pathname","avatar":"retro","meta":["nick","mail","link"],"pageSize":10,"lang":"zh-CN","highlight":false,"recordIP":false,"serverURLs":null},"changyan":{"appid":"","appkey":""},"livere":{"uid":""},"remark42":{"host":"https://remark.haoyizebo.com","site_id":"haoyizebo","max_shown_comments":10,"locale":"zh"},"archive":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null},"category":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"post_limit":10,"order_by":"-length","collapse_depth":0},"tag":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null,"tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"avatar":"/img/avatar.png","name":"蔺国防","introduce":"移动应用开发者，历史文学爱好者","icons":[{"class":"iconfont icon-github-fill","link":"https://github.com","tip":"GitHub"},{"class":"iconfont icon-douban-fill","link":"https://douban.com","tip":"豆瓣"},{"class":"iconfont icon-wechat-fill","qrcode":"/img/favicon.png"}]},"page404":{"banner_img":"/img/default.png","banner_img_height":85,"banner_mask_alpha":0.3,"subtitle":"Page not found"},"links":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"items":[{"title":"Fluid Docs","intro":"主题使用指南","link":"https://hexo.fluid-dev.com/docs/","image":"/img/favicon.png"},{"title":"Fluid Repo","intro":"主题 GitHub 仓库","link":"https://github.com/fluid-dev/hexo-theme-fluid","image":"/img/favicon.png"},{"title":"Fluid Example","intro":"主题操作示例","link":"https://hexo.fluid-dev.com/docs/example/","image":"/img/favicon.png"}]}}}},"excerpt":"","more":"<h4 id=\"元组的比较是自左向右的-直至比较出结果大小-若全部相等-则元组相等\"><a href=\"#元组的比较是自左向右的-直至比较出结果大小-若全部相等-则元组相等\" class=\"headerlink\" title=\"元组的比较是自左向右的,直至比较出结果大小,若全部相等,则元组相等\"></a>元组的比较是自左向右的,直至比较出结果大小,若全部相等,则元组相等</h4><pre><code class=\"hljs livecodeserver\">“Tuples are compared <span class=\"hljs-built_in\">from</span> left <span class=\"hljs-built_in\">to</span> <span class=\"hljs-literal\">right</span>, <span class=\"hljs-literal\">one</span> <span class=\"hljs-built_in\">value</span> <span class=\"hljs-keyword\">at</span> <span class=\"hljs-keyword\">a</span> <span class=\"hljs-built_in\">time</span>, <span class=\"hljs-keyword\">until</span> <span class=\"hljs-keyword\">the</span> comparison finds <span class=\"hljs-literal\">two</span> values that aren’t equal. Those <span class=\"hljs-literal\">two</span> values are compared, <span class=\"hljs-keyword\">and</span> <span class=\"hljs-keyword\">the</span> <span class=\"hljs-built_in\">result</span> <span class=\"hljs-keyword\">of</span> that comparison determines <span class=\"hljs-keyword\">the</span> overall <span class=\"hljs-built_in\">result</span> <span class=\"hljs-keyword\">of</span> <span class=\"hljs-keyword\">the</span> tuple comparison. If all <span class=\"hljs-keyword\">the</span> elements are equal, <span class=\"hljs-keyword\">then</span> <span class=\"hljs-keyword\">the</span> tuples themselves are equal. For example:”\n\n摘录来自: Apple Inc. “The Swift Programming Language (Swift <span class=\"hljs-number\">4</span>)”。 iBooks.</code></pre>\n<pre><code class=\"hljs pgsql\">(<span class=\"hljs-number\">1</span>, &quot;zebra&quot;) &lt; (<span class=\"hljs-number\">2</span>, &quot;apple&quot;)   // <span class=\"hljs-keyword\">true</span> because <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">is</span> less than <span class=\"hljs-number\">2</span>; &quot;zebra&quot; <span class=\"hljs-keyword\">and</span> &quot;apple&quot; are <span class=\"hljs-keyword\">not</span> compared\n(<span class=\"hljs-number\">3</span>, &quot;apple&quot;) &lt; (<span class=\"hljs-number\">3</span>, &quot;bird&quot;)    // <span class=\"hljs-keyword\">true</span> because <span class=\"hljs-number\">3</span> <span class=\"hljs-keyword\">is</span> equal <span class=\"hljs-keyword\">to</span> <span class=\"hljs-number\">3</span>, <span class=\"hljs-keyword\">and</span> &quot;apple&quot; <span class=\"hljs-keyword\">is</span> less than &quot;bird&quot;\n(<span class=\"hljs-number\">4</span>, &quot;dog&quot;) == (<span class=\"hljs-number\">4</span>, &quot;dog&quot;)      // <span class=\"hljs-keyword\">true</span> because <span class=\"hljs-number\">4</span> <span class=\"hljs-keyword\">is</span> equal <span class=\"hljs-keyword\">to</span> <span class=\"hljs-number\">4</span>, <span class=\"hljs-keyword\">and</span> &quot;dog&quot; <span class=\"hljs-keyword\">is</span> equal <span class=\"hljs-keyword\">to</span> &quot;dog&quot;\n\n摘录来自: Apple Inc. “The Swift Programming <span class=\"hljs-keyword\">Language</span> (Swift <span class=\"hljs-number\">4</span>)”。 iBooks.</code></pre>\n\n<blockquote>\n<p>“NOTE</p>\n</blockquote>\n<blockquote>\n<p>The Swift standard library includes tuple comparison operators for tuples with fewer than seven elements. To compare tuples with seven or more elements, you must implement the comparison operators yourself.”</p>\n</blockquote>\n<blockquote>\n<p>摘录来自: Apple Inc. “The Swift Programming Language (Swift 4)”。 iBooks. </p>\n</blockquote>\n<p>Swift 标准库对元组的比较仅支持小于7个元素的元组,如果一个元组内包含7个或更多元素的话,你必须自己实现比较操作.</p>\n"},{"title":"断言(Assert)","hide":true,"_content":"#### 断言的使用可以在某些条件不满足的情况下,终止应用的执行\n\nAssert 函数\n```\nassert(_:_:file:line:)  \n//判断条件的真和假\n```\n例子\n\n```\nlet age = -3\nassert(age >= 0, \"A person's age can't be less than zero.\")\n// This assertion fails because -3 is not >= 0.”\n\n```\n\nAssertionFailure 函数\n```\nassertionFailure(_:file:line:)\n//已知条件为假\n```\n例子\n```\nif age > 10 {\n    print(\"You can ride the roller-coaster or the ferris wheel.\")\n} else if age > 0 {\n    print(\"You can ride the ferris wheel.\")\n} else {\n    assertionFailure(\"A person's age can't be less than zero.\")\n}\n\n```\nPrecondition 函数\n\n```\nprecondition(_:_:file:line:)\n\npreconditionFailure(_:file:line:)\n```\n\n> Note \n\n> Assert 仅在开发版本有效,Preconditon在开发和生产版本中都有效.\n\n\n错误处理还可以使用fatalError函数\n```\nfatalError(_:file:line:)\n```\n> NOTE\n\n> “如果以未选中的模式（-Ounchecked）进行编译，则不会检查Precondition。 编译器假定Precondition始终为真，并且相应地优化您的代码。 但是，无论优化设置如何，fatalError（_：file：line :)函数都会暂停执行。\n","source":"_posts/Swift/Swift-4---断言.md","raw":"\n---\ntitle:  断言(Assert)\ncategories:\n- Swift\ntags: \n- Swift\nhide: true\n---\n#### 断言的使用可以在某些条件不满足的情况下,终止应用的执行\n\nAssert 函数\n```\nassert(_:_:file:line:)  \n//判断条件的真和假\n```\n例子\n\n```\nlet age = -3\nassert(age >= 0, \"A person's age can't be less than zero.\")\n// This assertion fails because -3 is not >= 0.”\n\n```\n\nAssertionFailure 函数\n```\nassertionFailure(_:file:line:)\n//已知条件为假\n```\n例子\n```\nif age > 10 {\n    print(\"You can ride the roller-coaster or the ferris wheel.\")\n} else if age > 0 {\n    print(\"You can ride the ferris wheel.\")\n} else {\n    assertionFailure(\"A person's age can't be less than zero.\")\n}\n\n```\nPrecondition 函数\n\n```\nprecondition(_:_:file:line:)\n\npreconditionFailure(_:file:line:)\n```\n\n> Note \n\n> Assert 仅在开发版本有效,Preconditon在开发和生产版本中都有效.\n\n\n错误处理还可以使用fatalError函数\n```\nfatalError(_:file:line:)\n```\n> NOTE\n\n> “如果以未选中的模式（-Ounchecked）进行编译，则不会检查Precondition。 编译器假定Precondition始终为真，并且相应地优化您的代码。 但是，无论优化设置如何，fatalError（_：file：line :)函数都会暂停执行。\n","slug":"Swift/Swift-4---断言","published":1,"date":"2020-09-23T10:25:59.000Z","updated":"2020-09-27T12:00:39.972Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgq6gnwl000wt29k2yckfmmr","content":"<h4 id=\"断言的使用可以在某些条件不满足的情况下-终止应用的执行\"><a href=\"#断言的使用可以在某些条件不满足的情况下-终止应用的执行\" class=\"headerlink\" title=\"断言的使用可以在某些条件不满足的情况下,终止应用的执行\"></a>断言的使用可以在某些条件不满足的情况下,终止应用的执行</h4><p>Assert 函数</p>\n<pre><code class=\"hljs groovy\"><span class=\"hljs-keyword\">assert</span>(<span class=\"hljs-attr\">_:</span><span class=\"hljs-attr\">_:</span><span class=\"hljs-attr\">file:</span><span class=\"hljs-attr\">line:</span>)  \n<span class=\"hljs-comment\">//判断条件的真和假</span></code></pre>\n<p>例子</p>\n<pre><code class=\"hljs stylus\">let age = -<span class=\"hljs-number\">3</span>\n<span class=\"hljs-function\"><span class=\"hljs-title\">assert</span><span class=\"hljs-params\">(age &gt;= <span class=\"hljs-number\">0</span>, <span class=\"hljs-string\">&quot;A person&#x27;s age can&#x27;t be less than zero.&quot;</span>)</span></span>\n<span class=\"hljs-comment\">// This assertion fails because -3 is not &gt;= 0.”</span>\n</code></pre>\n\n<p>AssertionFailure 函数</p>\n<pre><code class=\"hljs less\"><span class=\"hljs-selector-tag\">assertionFailure</span>(<span class=\"hljs-attribute\">_</span>:<span class=\"hljs-attribute\">file</span>:<span class=\"hljs-attribute\">line</span>:)\n<span class=\"hljs-comment\">//已知条件为假</span></code></pre>\n<p>例子</p>\n<pre><code class=\"hljs isbl\"><span class=\"hljs-variable\"><span class=\"hljs-keyword\">if</span></span> <span class=\"hljs-variable\">age</span> &gt; <span class=\"hljs-number\">10</span> &#123;\n    <span class=\"hljs-function\"><span class=\"hljs-title\">print</span>(<span class=\"hljs-string\">&quot;You can ride the roller-coaster or the ferris wheel.&quot;</span>)</span>\n&#125; <span class=\"hljs-variable\"><span class=\"hljs-keyword\">else</span></span> <span class=\"hljs-variable\"><span class=\"hljs-keyword\">if</span></span> <span class=\"hljs-variable\">age</span> &gt; <span class=\"hljs-number\">0</span> &#123;\n    <span class=\"hljs-function\"><span class=\"hljs-title\">print</span>(<span class=\"hljs-string\">&quot;You can ride the ferris wheel.&quot;</span>)</span>\n&#125; <span class=\"hljs-variable\"><span class=\"hljs-keyword\">else</span></span> &#123;\n    <span class=\"hljs-function\"><span class=\"hljs-title\">assertionFailure</span>(<span class=\"hljs-string\">&quot;A person&#x27;s age can&#x27;t be less than zero.&quot;</span>)</span>\n&#125;\n</code></pre>\n<p>Precondition 函数</p>\n<pre><code class=\"hljs less\"><span class=\"hljs-selector-tag\">precondition</span>(<span class=\"hljs-attribute\">_</span>:<span class=\"hljs-attribute\">_</span>:<span class=\"hljs-attribute\">file</span>:<span class=\"hljs-attribute\">line</span>:)\n\n<span class=\"hljs-selector-tag\">preconditionFailure</span>(<span class=\"hljs-attribute\">_</span>:<span class=\"hljs-attribute\">file</span>:<span class=\"hljs-attribute\">line</span>:)</code></pre>\n\n<blockquote>\n<p>Note </p>\n</blockquote>\n<blockquote>\n<p>Assert 仅在开发版本有效,Preconditon在开发和生产版本中都有效.</p>\n</blockquote>\n<p>错误处理还可以使用fatalError函数</p>\n<pre><code class=\"hljs less\"><span class=\"hljs-selector-tag\">fatalError</span>(<span class=\"hljs-attribute\">_</span>:<span class=\"hljs-attribute\">file</span>:<span class=\"hljs-attribute\">line</span>:)</code></pre>\n<blockquote>\n<p>NOTE</p>\n</blockquote>\n<blockquote>\n<p>“如果以未选中的模式（-Ounchecked）进行编译，则不会检查Precondition。 编译器假定Precondition始终为真，并且相应地优化您的代码。 但是，无论优化设置如何，fatalError（_：file：line :)函数都会暂停执行。</p>\n</blockquote>\n","site":{"data":{"fluid_static_prefix":{"internal_js":"/js","internal_css":"/css","internal_img":"/img","iconfont":"//at.alicdn.com/t/font_1736178_kmeydafke9r.css","anchor":"https://cdn.staticfile.org/anchor-js/4.2.2/","github_markdown":"https://cdn.staticfile.org/github-markdown-css/4.0.0/","jquery":"https://cdn.staticfile.org/jquery/3.4.1/","bootstrap":"https://cdn.staticfile.org/twitter-bootstrap/4.4.1/","highlightjs":"https://cdn.staticfile.org/highlight.js/10.0.0/","prismjs":"https://cdn.staticfile.org/prism/1.21.0/","tocbot":"https://cdn.staticfile.org/tocbot/4.11.1/","typed":"https://cdn.staticfile.org/typed.js/2.0.11/","fancybox":"https://cdn.staticfile.org/fancybox/3.5.7/","mathjax":"https://cdn.staticfile.org/mathjax/3.0.5/es5/","katex":"https://cdn.staticfile.org/KaTeX/0.11.1/","aplayer":"https://cdn.staticfile.org/aplayer/1.10.1/","busuanzi":"https://busuanzi.ibruce.info/busuanzi/2.3/","clipboard":"https://cdn.staticfile.org/clipboard.js/2.0.6/","mermaid":"https://cdn.staticfile.org/mermaid/8.5.0/","valine":"https://cdn.staticfile.org/valine/1.4.14/","gitalk":"https://cdn.staticfile.org/gitalk/1.6.2/","blueimp_md5":"https://cdn.staticfile.org/blueimp-md5/2.13.0/","disqusjs":"https://cdn.jsdelivr.net/npm/disqusjs@1.0/dist/","hint":"/lib/hint/"},"fluid_config":{"favicon":"/img/favicon.png","apple_touch_icon":"/img/favicon.png","title_join_string":" - ","force_https":false,"code":{"copy_btn":true,"highlight":{"enable":true,"lib":"highlightjs","highlightjs":{"style":"Github Gist","bg_color":false},"prismjs":{"style":"default","preprocess":true}}},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"_","loop":false},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"right","visible":"hover","icon":""},"mouse_click":{"enable":false,"style":"values"}},"dark_mode":{"enable":true,"default":"auto"},"color":{"body_bg_color":"#eee","body_bg_color_dark":"#181c27","navbar_bg_color":"#2f4154","navbar_bg_color_dark":"#1f3144","navbar_text_color":"#fff","navbar_text_color_dark":"#d0d0d0","text_color":"#3c4858","text_color_dark":"#c4c6c9","sec_text_color":"#718096","sec_text_color_dark":"#a7a9ad","post_text_color":"#2c3e50","post_text_color_dark":"#c4c6c9","post_heading_color":"#1a202c","post_heading_color_dark":"#c4c6c9","post_link_color":"#0366d6","post_link_color_dark":"#1589e9","link_hover_color":"#30a9de","link_hover_color_dark":"#30a9de","link_hover_bg_color":"#f8f9fa","link_hover_bg_color_dark":"#364151","board_color":"#fff","board_color_dark":"#252d38"},"font":{"font_size":"16px","font_family":null,"code_font_size":"85%"},"custom_js":null,"custom_css":null,"custom_html":"","web_analytics":{"enable":false,"baidu":null,"google":null,"gtag":null,"tencent":{"sid":null,"cid":null},"woyaola":null,"cnzz":null,"leancloud":{"app_id":null,"app_key":null,"server_url":null}},"lazyload":{"enable":true,"onlypost":false},"daovoice":{"enable":false,"appid":""},"aplayer":{"enable":false,"autoplay":false,"loop":"all","order":"random","theme":"#b7daff","songs":[{"name":"name","artist":"artist","url":"/songs/test.mp3","cover":"/img/cover.jpg"},{"name":"name","artist":"artist","url":"https://...url.mp3","cover":"https://...cover.jpg"}]},"version":{"check":false},"navbar":{"blog_title":"吃面多放葱","ground_glass":{"enable":false,"px":3,"alpha":0.7},"menu":[{"key":"home","link":"/","icon":"iconfont icon-home-fill"},{"key":"category","link":"/categories/","icon":"iconfont icon-category-fill"},{"key":"tag","link":"/tags/","icon":"iconfont icon-tags-fill"},{"key":"about","link":"/about/","icon":"iconfont icon-user-fill"}]},"search":{"enable":true,"path":"/local-search.xml","generate_path":"/local-search.xml","field":"post","content":true},"scroll_down_arrow":{"enable":true,"banner_height_limit":90,"scroll_after_turning_page":true},"banner_parallax":true,"footer":{"statistics":{"enable":false,"source":"busuanzi","pv_format":"总访问量 {} 次","uv_format":"总访客数 {} 人"},"beian":{"enable":false,"icp_text":"京ICP证123456号","police_text":"京公网安备12345678号","police_code":12345678,"police_icon":"/img/police_beian.png"}},"scroll_top_arrow":{"enable":true},"index":{"banner_img":"/img/default.png","banner_img_height":100,"banner_mask_alpha":0.3,"post_default_img":"","slogan":{"enable":true,"text":"像蚂蚁一样工作，像蝴蝶一样生活"},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"category":true,"tag":true}},"page":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3},"post":{"banner_img":"/img/default.png","banner_img_height":70,"banner_mask_alpha":0.3,"meta":{"author":{"enable":false},"date":{"enable":true,"format":"LL a"},"wordcount":{"enable":true,"format":"{} 字"},"min2read":{"enable":true,"format":"{} 分钟","words":100},"views":{"enable":false,"source":"busuanzi","format":"{} 次"}},"updated":{"enable":false,"content":"本文最后更新于：","relative":false},"toc":{"enable":true,"headingSelector":"h1,h2,h3,h4,h5,h6","collapseDepth":0},"copyright":{"enable":true,"content":"本博客所有文章除特别声明外，均采用 <a href=\"https://creativecommons.org/licenses/by-sa/4.0/deed.zh\" rel=\"nofollow noopener\">CC BY-SA 4.0 协议</a> ，转载请注明出处！"},"prev_next":{"enable":true},"custom":{"enable":false,"content":"<img src=\"https://octodex.github.com/images/jetpacktocat.png\" class=\"rounded mx-auto d-block mt-5\" style=\"width:150px; height:150px;\">"},"image_zoom":{"enable":true},"footnote":{"enable":true,"header":""},"math":{"enable":false,"specific":false,"engine":"mathjax"},"mermaid":{"enable":false,"specific":false,"options":{"theme":"default"}},"comments":{"enable":false,"type":"disqus"}},"utterances":{"repo":null,"issue_term":"pathname","label":"utterances","theme":"github-light","theme_dark":"github-dark","crossorigin":"anonymous"},"disqus":{"shortname":null,"disqusjs":false,"apikey":null},"gitalk":{"clientID":null,"clientSecret":null,"repo":null,"owner":null,"admin":["name"],"id":"location.pathname","language":"zh-CN","labels":["Gitalk"],"perPage":10,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true},"valine":{"appid":null,"appkey":null,"placeholder":"说点什么","path":"window.location.pathname","avatar":"retro","meta":["nick","mail","link"],"pageSize":10,"lang":"zh-CN","highlight":false,"recordIP":false,"serverURLs":null},"changyan":{"appid":"","appkey":""},"livere":{"uid":""},"remark42":{"host":"https://remark.haoyizebo.com","site_id":"haoyizebo","max_shown_comments":10,"locale":"zh"},"archive":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null},"category":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"post_limit":10,"order_by":"-length","collapse_depth":0},"tag":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null,"tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"avatar":"/img/avatar.png","name":"蔺国防","introduce":"移动应用开发者，历史文学爱好者","icons":[{"class":"iconfont icon-github-fill","link":"https://github.com","tip":"GitHub"},{"class":"iconfont icon-douban-fill","link":"https://douban.com","tip":"豆瓣"},{"class":"iconfont icon-wechat-fill","qrcode":"/img/favicon.png"}]},"page404":{"banner_img":"/img/default.png","banner_img_height":85,"banner_mask_alpha":0.3,"subtitle":"Page not found"},"links":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"items":[{"title":"Fluid Docs","intro":"主题使用指南","link":"https://hexo.fluid-dev.com/docs/","image":"/img/favicon.png"},{"title":"Fluid Repo","intro":"主题 GitHub 仓库","link":"https://github.com/fluid-dev/hexo-theme-fluid","image":"/img/favicon.png"},{"title":"Fluid Example","intro":"主题操作示例","link":"https://hexo.fluid-dev.com/docs/example/","image":"/img/favicon.png"}]}}}},"excerpt":"","more":"<h4 id=\"断言的使用可以在某些条件不满足的情况下-终止应用的执行\"><a href=\"#断言的使用可以在某些条件不满足的情况下-终止应用的执行\" class=\"headerlink\" title=\"断言的使用可以在某些条件不满足的情况下,终止应用的执行\"></a>断言的使用可以在某些条件不满足的情况下,终止应用的执行</h4><p>Assert 函数</p>\n<pre><code class=\"hljs groovy\"><span class=\"hljs-keyword\">assert</span>(<span class=\"hljs-attr\">_:</span><span class=\"hljs-attr\">_:</span><span class=\"hljs-attr\">file:</span><span class=\"hljs-attr\">line:</span>)  \n<span class=\"hljs-comment\">//判断条件的真和假</span></code></pre>\n<p>例子</p>\n<pre><code class=\"hljs stylus\">let age = -<span class=\"hljs-number\">3</span>\n<span class=\"hljs-function\"><span class=\"hljs-title\">assert</span><span class=\"hljs-params\">(age &gt;= <span class=\"hljs-number\">0</span>, <span class=\"hljs-string\">&quot;A person&#x27;s age can&#x27;t be less than zero.&quot;</span>)</span></span>\n<span class=\"hljs-comment\">// This assertion fails because -3 is not &gt;= 0.”</span>\n</code></pre>\n\n<p>AssertionFailure 函数</p>\n<pre><code class=\"hljs less\"><span class=\"hljs-selector-tag\">assertionFailure</span>(<span class=\"hljs-attribute\">_</span>:<span class=\"hljs-attribute\">file</span>:<span class=\"hljs-attribute\">line</span>:)\n<span class=\"hljs-comment\">//已知条件为假</span></code></pre>\n<p>例子</p>\n<pre><code class=\"hljs isbl\"><span class=\"hljs-variable\"><span class=\"hljs-keyword\">if</span></span> <span class=\"hljs-variable\">age</span> &gt; <span class=\"hljs-number\">10</span> &#123;\n    <span class=\"hljs-function\"><span class=\"hljs-title\">print</span>(<span class=\"hljs-string\">&quot;You can ride the roller-coaster or the ferris wheel.&quot;</span>)</span>\n&#125; <span class=\"hljs-variable\"><span class=\"hljs-keyword\">else</span></span> <span class=\"hljs-variable\"><span class=\"hljs-keyword\">if</span></span> <span class=\"hljs-variable\">age</span> &gt; <span class=\"hljs-number\">0</span> &#123;\n    <span class=\"hljs-function\"><span class=\"hljs-title\">print</span>(<span class=\"hljs-string\">&quot;You can ride the ferris wheel.&quot;</span>)</span>\n&#125; <span class=\"hljs-variable\"><span class=\"hljs-keyword\">else</span></span> &#123;\n    <span class=\"hljs-function\"><span class=\"hljs-title\">assertionFailure</span>(<span class=\"hljs-string\">&quot;A person&#x27;s age can&#x27;t be less than zero.&quot;</span>)</span>\n&#125;\n</code></pre>\n<p>Precondition 函数</p>\n<pre><code class=\"hljs less\"><span class=\"hljs-selector-tag\">precondition</span>(<span class=\"hljs-attribute\">_</span>:<span class=\"hljs-attribute\">_</span>:<span class=\"hljs-attribute\">file</span>:<span class=\"hljs-attribute\">line</span>:)\n\n<span class=\"hljs-selector-tag\">preconditionFailure</span>(<span class=\"hljs-attribute\">_</span>:<span class=\"hljs-attribute\">file</span>:<span class=\"hljs-attribute\">line</span>:)</code></pre>\n\n<blockquote>\n<p>Note </p>\n</blockquote>\n<blockquote>\n<p>Assert 仅在开发版本有效,Preconditon在开发和生产版本中都有效.</p>\n</blockquote>\n<p>错误处理还可以使用fatalError函数</p>\n<pre><code class=\"hljs less\"><span class=\"hljs-selector-tag\">fatalError</span>(<span class=\"hljs-attribute\">_</span>:<span class=\"hljs-attribute\">file</span>:<span class=\"hljs-attribute\">line</span>:)</code></pre>\n<blockquote>\n<p>NOTE</p>\n</blockquote>\n<blockquote>\n<p>“如果以未选中的模式（-Ounchecked）进行编译，则不会检查Precondition。 编译器假定Precondition始终为真，并且相应地优化您的代码。 但是，无论优化设置如何，fatalError（_：file：line :)函数都会暂停执行。</p>\n</blockquote>\n"},{"title":"Error Handle","hide":true,"_content":"\n1.抛出错误的函数\n```\n   func canThrowAnError() throws {\n    // this function may or may not throw an error\n}\n```\n\n\n2.处理错误 do  catch 函数\n```\ndo {\n    try makeASandwich()\n    eatASandwich()\n} catch SandwichError.outOfCleanDishes {\n    washDishes()\n} catch SandwichError.missingIngredients(let ingredients) {\n    buyGroceries(ingredients)\n}\n```\n","source":"_posts/Swift/Swift-4---错误处理.md","raw":"---\ntitle:  Error Handle\ncategories:\n- Swift\ntags: \n- Swift\nhide: true\n---\n\n1.抛出错误的函数\n```\n   func canThrowAnError() throws {\n    // this function may or may not throw an error\n}\n```\n\n\n2.处理错误 do  catch 函数\n```\ndo {\n    try makeASandwich()\n    eatASandwich()\n} catch SandwichError.outOfCleanDishes {\n    washDishes()\n} catch SandwichError.missingIngredients(let ingredients) {\n    buyGroceries(ingredients)\n}\n```\n","slug":"Swift/Swift-4---错误处理","published":1,"date":"2020-09-23T10:25:59.000Z","updated":"2020-09-27T12:00:29.184Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgq6gnwm000zt29kb37n1d29","content":"<p>1.抛出错误的函数</p>\n<pre><code class=\"hljs swift\">   <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">canThrowAnError</span><span class=\"hljs-params\">()</span></span> <span class=\"hljs-keyword\">throws</span> &#123;\n    <span class=\"hljs-comment\">// this function may or may not throw an error</span>\n&#125;</code></pre>\n\n\n<p>2.处理错误 do  catch 函数</p>\n<pre><code class=\"hljs reasonml\"><span class=\"hljs-keyword\">do</span> &#123;\n    <span class=\"hljs-keyword\">try</span> make<span class=\"hljs-constructor\">ASandwich()</span>\n    eat<span class=\"hljs-constructor\">ASandwich()</span>\n&#125; catch <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">SandwichError</span>.</span></span>outOfCleanDishes &#123;\n    wash<span class=\"hljs-constructor\">Dishes()</span>\n&#125; catch <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">SandwichError</span>.</span></span>missing<span class=\"hljs-constructor\">Ingredients(<span class=\"hljs-params\">let</span> <span class=\"hljs-params\">ingredients</span>)</span> &#123;\n    buy<span class=\"hljs-constructor\">Groceries(<span class=\"hljs-params\">ingredients</span>)</span>\n&#125;</code></pre>\n","site":{"data":{"fluid_static_prefix":{"internal_js":"/js","internal_css":"/css","internal_img":"/img","iconfont":"//at.alicdn.com/t/font_1736178_kmeydafke9r.css","anchor":"https://cdn.staticfile.org/anchor-js/4.2.2/","github_markdown":"https://cdn.staticfile.org/github-markdown-css/4.0.0/","jquery":"https://cdn.staticfile.org/jquery/3.4.1/","bootstrap":"https://cdn.staticfile.org/twitter-bootstrap/4.4.1/","highlightjs":"https://cdn.staticfile.org/highlight.js/10.0.0/","prismjs":"https://cdn.staticfile.org/prism/1.21.0/","tocbot":"https://cdn.staticfile.org/tocbot/4.11.1/","typed":"https://cdn.staticfile.org/typed.js/2.0.11/","fancybox":"https://cdn.staticfile.org/fancybox/3.5.7/","mathjax":"https://cdn.staticfile.org/mathjax/3.0.5/es5/","katex":"https://cdn.staticfile.org/KaTeX/0.11.1/","aplayer":"https://cdn.staticfile.org/aplayer/1.10.1/","busuanzi":"https://busuanzi.ibruce.info/busuanzi/2.3/","clipboard":"https://cdn.staticfile.org/clipboard.js/2.0.6/","mermaid":"https://cdn.staticfile.org/mermaid/8.5.0/","valine":"https://cdn.staticfile.org/valine/1.4.14/","gitalk":"https://cdn.staticfile.org/gitalk/1.6.2/","blueimp_md5":"https://cdn.staticfile.org/blueimp-md5/2.13.0/","disqusjs":"https://cdn.jsdelivr.net/npm/disqusjs@1.0/dist/","hint":"/lib/hint/"},"fluid_config":{"favicon":"/img/favicon.png","apple_touch_icon":"/img/favicon.png","title_join_string":" - ","force_https":false,"code":{"copy_btn":true,"highlight":{"enable":true,"lib":"highlightjs","highlightjs":{"style":"Github Gist","bg_color":false},"prismjs":{"style":"default","preprocess":true}}},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"_","loop":false},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"right","visible":"hover","icon":""},"mouse_click":{"enable":false,"style":"values"}},"dark_mode":{"enable":true,"default":"auto"},"color":{"body_bg_color":"#eee","body_bg_color_dark":"#181c27","navbar_bg_color":"#2f4154","navbar_bg_color_dark":"#1f3144","navbar_text_color":"#fff","navbar_text_color_dark":"#d0d0d0","text_color":"#3c4858","text_color_dark":"#c4c6c9","sec_text_color":"#718096","sec_text_color_dark":"#a7a9ad","post_text_color":"#2c3e50","post_text_color_dark":"#c4c6c9","post_heading_color":"#1a202c","post_heading_color_dark":"#c4c6c9","post_link_color":"#0366d6","post_link_color_dark":"#1589e9","link_hover_color":"#30a9de","link_hover_color_dark":"#30a9de","link_hover_bg_color":"#f8f9fa","link_hover_bg_color_dark":"#364151","board_color":"#fff","board_color_dark":"#252d38"},"font":{"font_size":"16px","font_family":null,"code_font_size":"85%"},"custom_js":null,"custom_css":null,"custom_html":"","web_analytics":{"enable":false,"baidu":null,"google":null,"gtag":null,"tencent":{"sid":null,"cid":null},"woyaola":null,"cnzz":null,"leancloud":{"app_id":null,"app_key":null,"server_url":null}},"lazyload":{"enable":true,"onlypost":false},"daovoice":{"enable":false,"appid":""},"aplayer":{"enable":false,"autoplay":false,"loop":"all","order":"random","theme":"#b7daff","songs":[{"name":"name","artist":"artist","url":"/songs/test.mp3","cover":"/img/cover.jpg"},{"name":"name","artist":"artist","url":"https://...url.mp3","cover":"https://...cover.jpg"}]},"version":{"check":false},"navbar":{"blog_title":"吃面多放葱","ground_glass":{"enable":false,"px":3,"alpha":0.7},"menu":[{"key":"home","link":"/","icon":"iconfont icon-home-fill"},{"key":"category","link":"/categories/","icon":"iconfont icon-category-fill"},{"key":"tag","link":"/tags/","icon":"iconfont icon-tags-fill"},{"key":"about","link":"/about/","icon":"iconfont icon-user-fill"}]},"search":{"enable":true,"path":"/local-search.xml","generate_path":"/local-search.xml","field":"post","content":true},"scroll_down_arrow":{"enable":true,"banner_height_limit":90,"scroll_after_turning_page":true},"banner_parallax":true,"footer":{"statistics":{"enable":false,"source":"busuanzi","pv_format":"总访问量 {} 次","uv_format":"总访客数 {} 人"},"beian":{"enable":false,"icp_text":"京ICP证123456号","police_text":"京公网安备12345678号","police_code":12345678,"police_icon":"/img/police_beian.png"}},"scroll_top_arrow":{"enable":true},"index":{"banner_img":"/img/default.png","banner_img_height":100,"banner_mask_alpha":0.3,"post_default_img":"","slogan":{"enable":true,"text":"像蚂蚁一样工作，像蝴蝶一样生活"},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"category":true,"tag":true}},"page":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3},"post":{"banner_img":"/img/default.png","banner_img_height":70,"banner_mask_alpha":0.3,"meta":{"author":{"enable":false},"date":{"enable":true,"format":"LL a"},"wordcount":{"enable":true,"format":"{} 字"},"min2read":{"enable":true,"format":"{} 分钟","words":100},"views":{"enable":false,"source":"busuanzi","format":"{} 次"}},"updated":{"enable":false,"content":"本文最后更新于：","relative":false},"toc":{"enable":true,"headingSelector":"h1,h2,h3,h4,h5,h6","collapseDepth":0},"copyright":{"enable":true,"content":"本博客所有文章除特别声明外，均采用 <a href=\"https://creativecommons.org/licenses/by-sa/4.0/deed.zh\" rel=\"nofollow noopener\">CC BY-SA 4.0 协议</a> ，转载请注明出处！"},"prev_next":{"enable":true},"custom":{"enable":false,"content":"<img src=\"https://octodex.github.com/images/jetpacktocat.png\" class=\"rounded mx-auto d-block mt-5\" style=\"width:150px; height:150px;\">"},"image_zoom":{"enable":true},"footnote":{"enable":true,"header":""},"math":{"enable":false,"specific":false,"engine":"mathjax"},"mermaid":{"enable":false,"specific":false,"options":{"theme":"default"}},"comments":{"enable":false,"type":"disqus"}},"utterances":{"repo":null,"issue_term":"pathname","label":"utterances","theme":"github-light","theme_dark":"github-dark","crossorigin":"anonymous"},"disqus":{"shortname":null,"disqusjs":false,"apikey":null},"gitalk":{"clientID":null,"clientSecret":null,"repo":null,"owner":null,"admin":["name"],"id":"location.pathname","language":"zh-CN","labels":["Gitalk"],"perPage":10,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true},"valine":{"appid":null,"appkey":null,"placeholder":"说点什么","path":"window.location.pathname","avatar":"retro","meta":["nick","mail","link"],"pageSize":10,"lang":"zh-CN","highlight":false,"recordIP":false,"serverURLs":null},"changyan":{"appid":"","appkey":""},"livere":{"uid":""},"remark42":{"host":"https://remark.haoyizebo.com","site_id":"haoyizebo","max_shown_comments":10,"locale":"zh"},"archive":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null},"category":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"post_limit":10,"order_by":"-length","collapse_depth":0},"tag":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null,"tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"avatar":"/img/avatar.png","name":"蔺国防","introduce":"移动应用开发者，历史文学爱好者","icons":[{"class":"iconfont icon-github-fill","link":"https://github.com","tip":"GitHub"},{"class":"iconfont icon-douban-fill","link":"https://douban.com","tip":"豆瓣"},{"class":"iconfont icon-wechat-fill","qrcode":"/img/favicon.png"}]},"page404":{"banner_img":"/img/default.png","banner_img_height":85,"banner_mask_alpha":0.3,"subtitle":"Page not found"},"links":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"items":[{"title":"Fluid Docs","intro":"主题使用指南","link":"https://hexo.fluid-dev.com/docs/","image":"/img/favicon.png"},{"title":"Fluid Repo","intro":"主题 GitHub 仓库","link":"https://github.com/fluid-dev/hexo-theme-fluid","image":"/img/favicon.png"},{"title":"Fluid Example","intro":"主题操作示例","link":"https://hexo.fluid-dev.com/docs/example/","image":"/img/favicon.png"}]}}}},"excerpt":"","more":"<p>1.抛出错误的函数</p>\n<pre><code class=\"hljs swift\">   <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">canThrowAnError</span><span class=\"hljs-params\">()</span></span> <span class=\"hljs-keyword\">throws</span> &#123;\n    <span class=\"hljs-comment\">// this function may or may not throw an error</span>\n&#125;</code></pre>\n\n\n<p>2.处理错误 do  catch 函数</p>\n<pre><code class=\"hljs reasonml\"><span class=\"hljs-keyword\">do</span> &#123;\n    <span class=\"hljs-keyword\">try</span> make<span class=\"hljs-constructor\">ASandwich()</span>\n    eat<span class=\"hljs-constructor\">ASandwich()</span>\n&#125; catch <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">SandwichError</span>.</span></span>outOfCleanDishes &#123;\n    wash<span class=\"hljs-constructor\">Dishes()</span>\n&#125; catch <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">SandwichError</span>.</span></span>missing<span class=\"hljs-constructor\">Ingredients(<span class=\"hljs-params\">let</span> <span class=\"hljs-params\">ingredients</span>)</span> &#123;\n    buy<span class=\"hljs-constructor\">Groceries(<span class=\"hljs-params\">ingredients</span>)</span>\n&#125;</code></pre>\n"},{"title":"Swift Briging Objective-C","hide":true,"_content":"\n1. 创建Header文件\n ![创建桥接文件](https://upload-images.jianshu.io/upload_images/3340896-4d064cca705440a5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n2. ```Targets->Build Setting```选中搜索栏,搜索```Swift compiler```\n![配置桥接文件路径](https://upload-images.jianshu.io/upload_images/3340896-f4e4a89033693caf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n3. ```Objective-C Bridging Header```选项后输入桥接文件路径,如果在根目录,直接输入桥接文件名\n\n4. 添加需要的```Objective-C```框架\n![添加框架](https://upload-images.jianshu.io/upload_images/3340896-5d6adf47bd8106ac.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n\n\n","source":"_posts/Swift/Swift-项目桥接OC第三方库.md","raw":"---\ntitle:  Swift Briging Objective-C\ncategories:\n- Swift\ntags: \n- Swift\nhide: true\n\n---\n\n1. 创建Header文件\n ![创建桥接文件](https://upload-images.jianshu.io/upload_images/3340896-4d064cca705440a5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n2. ```Targets->Build Setting```选中搜索栏,搜索```Swift compiler```\n![配置桥接文件路径](https://upload-images.jianshu.io/upload_images/3340896-f4e4a89033693caf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n3. ```Objective-C Bridging Header```选项后输入桥接文件路径,如果在根目录,直接输入桥接文件名\n\n4. 添加需要的```Objective-C```框架\n![添加框架](https://upload-images.jianshu.io/upload_images/3340896-5d6adf47bd8106ac.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n\n\n","slug":"Swift/Swift-项目桥接OC第三方库","published":1,"date":"2020-09-23T10:25:59.000Z","updated":"2020-09-27T12:01:18.602Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgq6gnwn0013t29k9ub91bo2","content":"<ol>\n<li><p>创建Header文件<br><img src=\"https://upload-images.jianshu.io/upload_images/3340896-4d064cca705440a5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"创建桥接文件\"></p>\n</li>\n<li><p><code>Targets-&gt;Build Setting</code>选中搜索栏,搜索<code>Swift compiler</code><br><img src=\"https://upload-images.jianshu.io/upload_images/3340896-f4e4a89033693caf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"配置桥接文件路径\"></p>\n</li>\n<li><p><code>Objective-C Bridging Header</code>选项后输入桥接文件路径,如果在根目录,直接输入桥接文件名</p>\n</li>\n<li><p>添加需要的<code>Objective-C</code>框架<br><img src=\"https://upload-images.jianshu.io/upload_images/3340896-5d6adf47bd8106ac.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"添加框架\"></p>\n</li>\n</ol>\n","site":{"data":{"fluid_static_prefix":{"internal_js":"/js","internal_css":"/css","internal_img":"/img","iconfont":"//at.alicdn.com/t/font_1736178_kmeydafke9r.css","anchor":"https://cdn.staticfile.org/anchor-js/4.2.2/","github_markdown":"https://cdn.staticfile.org/github-markdown-css/4.0.0/","jquery":"https://cdn.staticfile.org/jquery/3.4.1/","bootstrap":"https://cdn.staticfile.org/twitter-bootstrap/4.4.1/","highlightjs":"https://cdn.staticfile.org/highlight.js/10.0.0/","prismjs":"https://cdn.staticfile.org/prism/1.21.0/","tocbot":"https://cdn.staticfile.org/tocbot/4.11.1/","typed":"https://cdn.staticfile.org/typed.js/2.0.11/","fancybox":"https://cdn.staticfile.org/fancybox/3.5.7/","mathjax":"https://cdn.staticfile.org/mathjax/3.0.5/es5/","katex":"https://cdn.staticfile.org/KaTeX/0.11.1/","aplayer":"https://cdn.staticfile.org/aplayer/1.10.1/","busuanzi":"https://busuanzi.ibruce.info/busuanzi/2.3/","clipboard":"https://cdn.staticfile.org/clipboard.js/2.0.6/","mermaid":"https://cdn.staticfile.org/mermaid/8.5.0/","valine":"https://cdn.staticfile.org/valine/1.4.14/","gitalk":"https://cdn.staticfile.org/gitalk/1.6.2/","blueimp_md5":"https://cdn.staticfile.org/blueimp-md5/2.13.0/","disqusjs":"https://cdn.jsdelivr.net/npm/disqusjs@1.0/dist/","hint":"/lib/hint/"},"fluid_config":{"favicon":"/img/favicon.png","apple_touch_icon":"/img/favicon.png","title_join_string":" - ","force_https":false,"code":{"copy_btn":true,"highlight":{"enable":true,"lib":"highlightjs","highlightjs":{"style":"Github Gist","bg_color":false},"prismjs":{"style":"default","preprocess":true}}},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"_","loop":false},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"right","visible":"hover","icon":""},"mouse_click":{"enable":false,"style":"values"}},"dark_mode":{"enable":true,"default":"auto"},"color":{"body_bg_color":"#eee","body_bg_color_dark":"#181c27","navbar_bg_color":"#2f4154","navbar_bg_color_dark":"#1f3144","navbar_text_color":"#fff","navbar_text_color_dark":"#d0d0d0","text_color":"#3c4858","text_color_dark":"#c4c6c9","sec_text_color":"#718096","sec_text_color_dark":"#a7a9ad","post_text_color":"#2c3e50","post_text_color_dark":"#c4c6c9","post_heading_color":"#1a202c","post_heading_color_dark":"#c4c6c9","post_link_color":"#0366d6","post_link_color_dark":"#1589e9","link_hover_color":"#30a9de","link_hover_color_dark":"#30a9de","link_hover_bg_color":"#f8f9fa","link_hover_bg_color_dark":"#364151","board_color":"#fff","board_color_dark":"#252d38"},"font":{"font_size":"16px","font_family":null,"code_font_size":"85%"},"custom_js":null,"custom_css":null,"custom_html":"","web_analytics":{"enable":false,"baidu":null,"google":null,"gtag":null,"tencent":{"sid":null,"cid":null},"woyaola":null,"cnzz":null,"leancloud":{"app_id":null,"app_key":null,"server_url":null}},"lazyload":{"enable":true,"onlypost":false},"daovoice":{"enable":false,"appid":""},"aplayer":{"enable":false,"autoplay":false,"loop":"all","order":"random","theme":"#b7daff","songs":[{"name":"name","artist":"artist","url":"/songs/test.mp3","cover":"/img/cover.jpg"},{"name":"name","artist":"artist","url":"https://...url.mp3","cover":"https://...cover.jpg"}]},"version":{"check":false},"navbar":{"blog_title":"吃面多放葱","ground_glass":{"enable":false,"px":3,"alpha":0.7},"menu":[{"key":"home","link":"/","icon":"iconfont icon-home-fill"},{"key":"category","link":"/categories/","icon":"iconfont icon-category-fill"},{"key":"tag","link":"/tags/","icon":"iconfont icon-tags-fill"},{"key":"about","link":"/about/","icon":"iconfont icon-user-fill"}]},"search":{"enable":true,"path":"/local-search.xml","generate_path":"/local-search.xml","field":"post","content":true},"scroll_down_arrow":{"enable":true,"banner_height_limit":90,"scroll_after_turning_page":true},"banner_parallax":true,"footer":{"statistics":{"enable":false,"source":"busuanzi","pv_format":"总访问量 {} 次","uv_format":"总访客数 {} 人"},"beian":{"enable":false,"icp_text":"京ICP证123456号","police_text":"京公网安备12345678号","police_code":12345678,"police_icon":"/img/police_beian.png"}},"scroll_top_arrow":{"enable":true},"index":{"banner_img":"/img/default.png","banner_img_height":100,"banner_mask_alpha":0.3,"post_default_img":"","slogan":{"enable":true,"text":"像蚂蚁一样工作，像蝴蝶一样生活"},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"category":true,"tag":true}},"page":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3},"post":{"banner_img":"/img/default.png","banner_img_height":70,"banner_mask_alpha":0.3,"meta":{"author":{"enable":false},"date":{"enable":true,"format":"LL a"},"wordcount":{"enable":true,"format":"{} 字"},"min2read":{"enable":true,"format":"{} 分钟","words":100},"views":{"enable":false,"source":"busuanzi","format":"{} 次"}},"updated":{"enable":false,"content":"本文最后更新于：","relative":false},"toc":{"enable":true,"headingSelector":"h1,h2,h3,h4,h5,h6","collapseDepth":0},"copyright":{"enable":true,"content":"本博客所有文章除特别声明外，均采用 <a href=\"https://creativecommons.org/licenses/by-sa/4.0/deed.zh\" rel=\"nofollow noopener\">CC BY-SA 4.0 协议</a> ，转载请注明出处！"},"prev_next":{"enable":true},"custom":{"enable":false,"content":"<img src=\"https://octodex.github.com/images/jetpacktocat.png\" class=\"rounded mx-auto d-block mt-5\" style=\"width:150px; height:150px;\">"},"image_zoom":{"enable":true},"footnote":{"enable":true,"header":""},"math":{"enable":false,"specific":false,"engine":"mathjax"},"mermaid":{"enable":false,"specific":false,"options":{"theme":"default"}},"comments":{"enable":false,"type":"disqus"}},"utterances":{"repo":null,"issue_term":"pathname","label":"utterances","theme":"github-light","theme_dark":"github-dark","crossorigin":"anonymous"},"disqus":{"shortname":null,"disqusjs":false,"apikey":null},"gitalk":{"clientID":null,"clientSecret":null,"repo":null,"owner":null,"admin":["name"],"id":"location.pathname","language":"zh-CN","labels":["Gitalk"],"perPage":10,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true},"valine":{"appid":null,"appkey":null,"placeholder":"说点什么","path":"window.location.pathname","avatar":"retro","meta":["nick","mail","link"],"pageSize":10,"lang":"zh-CN","highlight":false,"recordIP":false,"serverURLs":null},"changyan":{"appid":"","appkey":""},"livere":{"uid":""},"remark42":{"host":"https://remark.haoyizebo.com","site_id":"haoyizebo","max_shown_comments":10,"locale":"zh"},"archive":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null},"category":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"post_limit":10,"order_by":"-length","collapse_depth":0},"tag":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null,"tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"avatar":"/img/avatar.png","name":"蔺国防","introduce":"移动应用开发者，历史文学爱好者","icons":[{"class":"iconfont icon-github-fill","link":"https://github.com","tip":"GitHub"},{"class":"iconfont icon-douban-fill","link":"https://douban.com","tip":"豆瓣"},{"class":"iconfont icon-wechat-fill","qrcode":"/img/favicon.png"}]},"page404":{"banner_img":"/img/default.png","banner_img_height":85,"banner_mask_alpha":0.3,"subtitle":"Page not found"},"links":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"items":[{"title":"Fluid Docs","intro":"主题使用指南","link":"https://hexo.fluid-dev.com/docs/","image":"/img/favicon.png"},{"title":"Fluid Repo","intro":"主题 GitHub 仓库","link":"https://github.com/fluid-dev/hexo-theme-fluid","image":"/img/favicon.png"},{"title":"Fluid Example","intro":"主题操作示例","link":"https://hexo.fluid-dev.com/docs/example/","image":"/img/favicon.png"}]}}}},"excerpt":"","more":"<ol>\n<li><p>创建Header文件<br><img src=\"https://upload-images.jianshu.io/upload_images/3340896-4d064cca705440a5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"创建桥接文件\"></p>\n</li>\n<li><p><code>Targets-&gt;Build Setting</code>选中搜索栏,搜索<code>Swift compiler</code><br><img src=\"https://upload-images.jianshu.io/upload_images/3340896-f4e4a89033693caf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"配置桥接文件路径\"></p>\n</li>\n<li><p><code>Objective-C Bridging Header</code>选项后输入桥接文件路径,如果在根目录,直接输入桥接文件名</p>\n</li>\n<li><p>添加需要的<code>Objective-C</code>框架<br><img src=\"https://upload-images.jianshu.io/upload_images/3340896-5d6adf47bd8106ac.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"添加框架\"></p>\n</li>\n</ol>\n"},{"title":"Apple登录集成","date":"2020-03-30T06:00:00.000Z","_content":"## 配置\n\n1.target -> Signing & Capabilities, 点击加号, 搜索 Sign In with Apple\n\n2.General -> Frameworks, Libraries, and Embedded Content,点击加号， 搜索 AuthenticationServices 并导入进去， Embed 选择  Embed & Sign\n\n\n## 登录\n\n- 应用启动登录校验\n```\n func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -> Bool {\n        let appleIDProvider = ASAuthorizationAppleIDProvider()\n        //此处Userid可以为本地存储的token或其他登陆确认身份内容\n        appleIDProvider.getCredentialState(forUserID: KeychainItem.currentUserIdentifier) { (credentialState, error) in\n            switch credentialState {\n            case .authorized:\n                //授权有效，走登陆成功页面\n                break\n            case .revoked, .notFound:\n                // 走登陆页面\n                DispatchQueue.main.async {\n                    \n                }\n            default:\n                break\n            }\n        }\n        return true\n    }\n```\n\n- 创建appid登录按钮并添加到登陆页面指定位置\n\n```\n    let authorizationButton = ASAuthorizationAppleIDButton()\n \n    @objc\n    func handleAuthorizationAppleIDButtonPress() {\n        let appleIDProvider = ASAuthorizationAppleIDProvider()\n        let request = appleIDProvider.createRequest()\n        request.requestedScopes = [.fullName, .email]\n        \n        let authorizationController = ASAuthorizationController(authorizationRequests: [request])\n        authorizationController.delegate = self\n        authorizationController.presentationContextProvider = self\n        authorizationController.performRequests()\n    }\n\n```\n\n- 处理登陆事件代理\n```\nextension LoginViewController: ASAuthorizationControllerDelegate {\n    /// - Tag: 认证状态回调信息\n    func authorizationController(controller: ASAuthorizationController, didCompleteWithAuthorization authorization: ASAuthorization) {\n        switch authorization.credential {\n        case let appleIDCredential as ASAuthorizationAppleIDCredential: //此处为appleID 认证\n            \n            // 根据以下信息在后端创建账户\n            let userIdentifier = appleIDCredential.user  //用户唯一标志符\n            let fullName = appleIDCredential.fullName\n            let email = appleIDCredential.email\n            \n            // 后端请求注册账户及密码及登录成功后存储登录信息处理（这里根据业务情况来决定是否重新注册用户信息）\n            \n            // 成功后进入登陆后页面\n    \n        case let passwordCredential as ASPasswordCredential: //此处为账号密码认证\n        \n            // Sign in using an existing iCloud Keychain credential.\n            let username = passwordCredential.user\n            let password = passwordCredential.password\n            \n            // 做一些账号密码的登录处理\n            \n            // 成功后进入登陆后页面\n        default:\n            break\n        }\n    }\n    \n    /// - Tag: 获取认证状态失败后的错误信息\n    func authorizationController(controller: ASAuthorizationController, didCompleteWithError error: Error) {\n        // Handle error.\n    }\n}\n```\n\n- 处理视图代理\n```\nextension LoginViewController: ASAuthorizationControllerPresentationContextProviding {\n    /// - Tag: 提供presention视图\n    func presentationAnchor(for controller: ASAuthorizationController) -> ASPresentationAnchor {\n        return self.view.window!\n    }\n}\n\n```\n\n- 进入登录视图进行登陆验证 （此处可根据业务情况来决定是否添加）\n```\n    override func viewDidAppear(_ animated: Bool) {\n        super.viewDidAppear(animated)\n        performExistingAccountSetupFlows()\n    }\n    \n    func performExistingAccountSetupFlows() {\n        // Prepare requests for both Apple ID and password providers.\n        let requests = [ASAuthorizationAppleIDProvider().createRequest(),\n                        ASAuthorizationPasswordProvider().createRequest()]\n        \n        // Create an authorization controller with the given requests.\n        let authorizationController = ASAuthorizationController(authorizationRequests: requests)\n        authorizationController.delegate = self\n        authorizationController.presentationContextProvider = self\n        authorizationController.performRequests()\n    }\n```\n\n## 退出登录\n\n- 根据`userIdentifier`退出登陆流程\n\n##参考资料\n[Implementing User Authentication with Sign in with Apple](https://developer.apple.com/documentation/authenticationservices/implementing_user_authentication_with_sign_in_with_apple)\n","source":"_posts/iOS/Apple登录集成.md","raw":"\n---\ntitle:  Apple登录集成\ndate:  2020-03-30 14:00\ncategories:\n- iOS\ntags: \n- iOS \n---\n## 配置\n\n1.target -> Signing & Capabilities, 点击加号, 搜索 Sign In with Apple\n\n2.General -> Frameworks, Libraries, and Embedded Content,点击加号， 搜索 AuthenticationServices 并导入进去， Embed 选择  Embed & Sign\n\n\n## 登录\n\n- 应用启动登录校验\n```\n func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -> Bool {\n        let appleIDProvider = ASAuthorizationAppleIDProvider()\n        //此处Userid可以为本地存储的token或其他登陆确认身份内容\n        appleIDProvider.getCredentialState(forUserID: KeychainItem.currentUserIdentifier) { (credentialState, error) in\n            switch credentialState {\n            case .authorized:\n                //授权有效，走登陆成功页面\n                break\n            case .revoked, .notFound:\n                // 走登陆页面\n                DispatchQueue.main.async {\n                    \n                }\n            default:\n                break\n            }\n        }\n        return true\n    }\n```\n\n- 创建appid登录按钮并添加到登陆页面指定位置\n\n```\n    let authorizationButton = ASAuthorizationAppleIDButton()\n \n    @objc\n    func handleAuthorizationAppleIDButtonPress() {\n        let appleIDProvider = ASAuthorizationAppleIDProvider()\n        let request = appleIDProvider.createRequest()\n        request.requestedScopes = [.fullName, .email]\n        \n        let authorizationController = ASAuthorizationController(authorizationRequests: [request])\n        authorizationController.delegate = self\n        authorizationController.presentationContextProvider = self\n        authorizationController.performRequests()\n    }\n\n```\n\n- 处理登陆事件代理\n```\nextension LoginViewController: ASAuthorizationControllerDelegate {\n    /// - Tag: 认证状态回调信息\n    func authorizationController(controller: ASAuthorizationController, didCompleteWithAuthorization authorization: ASAuthorization) {\n        switch authorization.credential {\n        case let appleIDCredential as ASAuthorizationAppleIDCredential: //此处为appleID 认证\n            \n            // 根据以下信息在后端创建账户\n            let userIdentifier = appleIDCredential.user  //用户唯一标志符\n            let fullName = appleIDCredential.fullName\n            let email = appleIDCredential.email\n            \n            // 后端请求注册账户及密码及登录成功后存储登录信息处理（这里根据业务情况来决定是否重新注册用户信息）\n            \n            // 成功后进入登陆后页面\n    \n        case let passwordCredential as ASPasswordCredential: //此处为账号密码认证\n        \n            // Sign in using an existing iCloud Keychain credential.\n            let username = passwordCredential.user\n            let password = passwordCredential.password\n            \n            // 做一些账号密码的登录处理\n            \n            // 成功后进入登陆后页面\n        default:\n            break\n        }\n    }\n    \n    /// - Tag: 获取认证状态失败后的错误信息\n    func authorizationController(controller: ASAuthorizationController, didCompleteWithError error: Error) {\n        // Handle error.\n    }\n}\n```\n\n- 处理视图代理\n```\nextension LoginViewController: ASAuthorizationControllerPresentationContextProviding {\n    /// - Tag: 提供presention视图\n    func presentationAnchor(for controller: ASAuthorizationController) -> ASPresentationAnchor {\n        return self.view.window!\n    }\n}\n\n```\n\n- 进入登录视图进行登陆验证 （此处可根据业务情况来决定是否添加）\n```\n    override func viewDidAppear(_ animated: Bool) {\n        super.viewDidAppear(animated)\n        performExistingAccountSetupFlows()\n    }\n    \n    func performExistingAccountSetupFlows() {\n        // Prepare requests for both Apple ID and password providers.\n        let requests = [ASAuthorizationAppleIDProvider().createRequest(),\n                        ASAuthorizationPasswordProvider().createRequest()]\n        \n        // Create an authorization controller with the given requests.\n        let authorizationController = ASAuthorizationController(authorizationRequests: requests)\n        authorizationController.delegate = self\n        authorizationController.presentationContextProvider = self\n        authorizationController.performRequests()\n    }\n```\n\n## 退出登录\n\n- 根据`userIdentifier`退出登陆流程\n\n##参考资料\n[Implementing User Authentication with Sign in with Apple](https://developer.apple.com/documentation/authenticationservices/implementing_user_authentication_with_sign_in_with_apple)\n","slug":"iOS/Apple登录集成","published":1,"updated":"2020-09-27T10:21:23.037Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgq6gnwo0017t29kala339h0","content":"<h2 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h2><p>1.target -&gt; Signing &amp; Capabilities, 点击加号, 搜索 Sign In with Apple</p>\n<p>2.General -&gt; Frameworks, Libraries, and Embedded Content,点击加号， 搜索 AuthenticationServices 并导入进去， Embed 选择  Embed &amp; Sign</p>\n<h2 id=\"登录\"><a href=\"#登录\" class=\"headerlink\" title=\"登录\"></a>登录</h2><ul>\n<li><p>应用启动登录校验</p>\n<pre><code class=\"hljs swift\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">application</span><span class=\"hljs-params\">(<span class=\"hljs-number\">_</span> application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: <span class=\"hljs-keyword\">Any</span>]?)</span></span> -&gt; <span class=\"hljs-type\">Bool</span> &#123;\n       <span class=\"hljs-keyword\">let</span> appleIDProvider = <span class=\"hljs-type\">ASAuthorizationAppleIDProvider</span>()\n       <span class=\"hljs-comment\">//此处Userid可以为本地存储的token或其他登陆确认身份内容</span>\n       appleIDProvider.getCredentialState(forUserID: <span class=\"hljs-type\">KeychainItem</span>.currentUserIdentifier) &#123; (credentialState, error) <span class=\"hljs-keyword\">in</span>\n           <span class=\"hljs-keyword\">switch</span> credentialState &#123;\n           <span class=\"hljs-keyword\">case</span> .authorized:\n               <span class=\"hljs-comment\">//授权有效，走登陆成功页面</span>\n               <span class=\"hljs-keyword\">break</span>\n           <span class=\"hljs-keyword\">case</span> .revoked, .notFound:\n               <span class=\"hljs-comment\">// 走登陆页面</span>\n               <span class=\"hljs-type\">DispatchQueue</span>.main.async &#123;\n                   \n               &#125;\n           <span class=\"hljs-keyword\">default</span>:\n               <span class=\"hljs-keyword\">break</span>\n           &#125;\n       &#125;\n       <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>\n   &#125;</code></pre>\n</li>\n<li><p>创建appid登录按钮并添加到登陆页面指定位置</p>\n</li>\n</ul>\n<pre><code class=\"hljs reasonml\"><span class=\"hljs-keyword\">let</span> authorizationButton = <span class=\"hljs-constructor\">ASAuthorizationAppleIDButton()</span>\n \n@objc\nfunc handle<span class=\"hljs-constructor\">AuthorizationAppleIDButtonPress()</span> &#123;\n    <span class=\"hljs-keyword\">let</span> appleIDProvider = <span class=\"hljs-constructor\">ASAuthorizationAppleIDProvider()</span>\n    <span class=\"hljs-keyword\">let</span> request = appleIDProvider.create<span class=\"hljs-constructor\">Request()</span>\n    request.requestedScopes = <span class=\"hljs-literal\">[.<span class=\"hljs-identifier\">fullName</span>, .<span class=\"hljs-identifier\">email</span>]</span>\n    \n    <span class=\"hljs-keyword\">let</span> authorizationController = <span class=\"hljs-constructor\">ASAuthorizationController(<span class=\"hljs-params\">authorizationRequests</span>: [<span class=\"hljs-params\">request</span>])</span>\n    authorizationController.delegate = self\n    authorizationController.presentationContextProvider = self\n    authorizationController.perform<span class=\"hljs-constructor\">Requests()</span>\n&#125;\n</code></pre>\n\n<ul>\n<li><p>处理登陆事件代理</p>\n<pre><code class=\"hljs swift\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">extension</span> <span class=\"hljs-title\">LoginViewController</span>: <span class=\"hljs-title\">ASAuthorizationControllerDelegate</span> </span>&#123;\n    <span class=\"hljs-comment\">/// - Tag: 认证状态回调信息</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">authorizationController</span><span class=\"hljs-params\">(controller: ASAuthorizationController, didCompleteWithAuthorization authorization: ASAuthorization)</span></span> &#123;\n        <span class=\"hljs-keyword\">switch</span> authorization.credential &#123;\n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-keyword\">let</span> appleIDCredential <span class=\"hljs-keyword\">as</span> <span class=\"hljs-type\">ASAuthorizationAppleIDCredential</span>: <span class=\"hljs-comment\">//此处为appleID 认证</span>\n            \n            <span class=\"hljs-comment\">// 根据以下信息在后端创建账户</span>\n            <span class=\"hljs-keyword\">let</span> userIdentifier = appleIDCredential.user  <span class=\"hljs-comment\">//用户唯一标志符</span>\n            <span class=\"hljs-keyword\">let</span> fullName = appleIDCredential.fullName\n            <span class=\"hljs-keyword\">let</span> email = appleIDCredential.email\n            \n            <span class=\"hljs-comment\">// 后端请求注册账户及密码及登录成功后存储登录信息处理（这里根据业务情况来决定是否重新注册用户信息）</span>\n            \n            <span class=\"hljs-comment\">// 成功后进入登陆后页面</span>\n    \n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-keyword\">let</span> passwordCredential <span class=\"hljs-keyword\">as</span> <span class=\"hljs-type\">ASPasswordCredential</span>: <span class=\"hljs-comment\">//此处为账号密码认证</span>\n        \n            <span class=\"hljs-comment\">// Sign in using an existing iCloud Keychain credential.</span>\n            <span class=\"hljs-keyword\">let</span> username = passwordCredential.user\n            <span class=\"hljs-keyword\">let</span> password = passwordCredential.password\n            \n            <span class=\"hljs-comment\">// 做一些账号密码的登录处理</span>\n            \n            <span class=\"hljs-comment\">// 成功后进入登陆后页面</span>\n        <span class=\"hljs-keyword\">default</span>:\n            <span class=\"hljs-keyword\">break</span>\n        &#125;\n    &#125;\n    \n    <span class=\"hljs-comment\">/// - Tag: 获取认证状态失败后的错误信息</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">authorizationController</span><span class=\"hljs-params\">(controller: ASAuthorizationController, didCompleteWithError error: Error)</span></span> &#123;\n        <span class=\"hljs-comment\">// Handle error.</span>\n    &#125;\n&#125;</code></pre>\n</li>\n<li><p>处理视图代理</p>\n<pre><code class=\"hljs swift\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">extension</span> <span class=\"hljs-title\">LoginViewController</span>: <span class=\"hljs-title\">ASAuthorizationControllerPresentationContextProviding</span> </span>&#123;\n    <span class=\"hljs-comment\">/// - Tag: 提供presention视图</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">presentationAnchor</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">for</span> controller: ASAuthorizationController)</span></span> -&gt; <span class=\"hljs-type\">ASPresentationAnchor</span> &#123;\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">self</span>.view.window!\n    &#125;\n&#125;\n</code></pre>\n</li>\n<li><p>进入登录视图进行登陆验证 （此处可根据业务情况来决定是否添加）</p>\n<pre><code class=\"hljs reasonml\">override func view<span class=\"hljs-constructor\">DidAppear(<span class=\"hljs-params\">_</span> <span class=\"hljs-params\">animated</span>: Bool)</span> &#123;\n    super.view<span class=\"hljs-constructor\">DidAppear(<span class=\"hljs-params\">animated</span>)</span>\n    perform<span class=\"hljs-constructor\">ExistingAccountSetupFlows()</span>\n&#125;\n\nfunc perform<span class=\"hljs-constructor\">ExistingAccountSetupFlows()</span> &#123;\n    <span class=\"hljs-comment\">// Prepare requests for both Apple ID and password providers.</span>\n    <span class=\"hljs-keyword\">let</span> requests = <span class=\"hljs-literal\">[ASA<span class=\"hljs-identifier\">uthorizationAppleIDProvider</span>().<span class=\"hljs-identifier\">createRequest</span>(),</span>\n<span class=\"hljs-literal\">                    ASA<span class=\"hljs-identifier\">uthorizationPasswordProvider</span>().<span class=\"hljs-identifier\">createRequest</span>()]</span>\n    \n    <span class=\"hljs-comment\">// Create an authorization controller with the given requests.</span>\n    <span class=\"hljs-keyword\">let</span> authorizationController = <span class=\"hljs-constructor\">ASAuthorizationController(<span class=\"hljs-params\">authorizationRequests</span>: <span class=\"hljs-params\">requests</span>)</span>\n    authorizationController.delegate = self\n    authorizationController.presentationContextProvider = self\n    authorizationController.perform<span class=\"hljs-constructor\">Requests()</span>\n&#125;</code></pre>\n\n</li>\n</ul>\n<h2 id=\"退出登录\"><a href=\"#退出登录\" class=\"headerlink\" title=\"退出登录\"></a>退出登录</h2><ul>\n<li>根据<code>userIdentifier</code>退出登陆流程</li>\n</ul>\n<p>##参考资料<br><a href=\"https://developer.apple.com/documentation/authenticationservices/implementing_user_authentication_with_sign_in_with_apple\">Implementing User Authentication with Sign in with Apple</a></p>\n","site":{"data":{"fluid_static_prefix":{"internal_js":"/js","internal_css":"/css","internal_img":"/img","iconfont":"//at.alicdn.com/t/font_1736178_kmeydafke9r.css","anchor":"https://cdn.staticfile.org/anchor-js/4.2.2/","github_markdown":"https://cdn.staticfile.org/github-markdown-css/4.0.0/","jquery":"https://cdn.staticfile.org/jquery/3.4.1/","bootstrap":"https://cdn.staticfile.org/twitter-bootstrap/4.4.1/","highlightjs":"https://cdn.staticfile.org/highlight.js/10.0.0/","prismjs":"https://cdn.staticfile.org/prism/1.21.0/","tocbot":"https://cdn.staticfile.org/tocbot/4.11.1/","typed":"https://cdn.staticfile.org/typed.js/2.0.11/","fancybox":"https://cdn.staticfile.org/fancybox/3.5.7/","mathjax":"https://cdn.staticfile.org/mathjax/3.0.5/es5/","katex":"https://cdn.staticfile.org/KaTeX/0.11.1/","aplayer":"https://cdn.staticfile.org/aplayer/1.10.1/","busuanzi":"https://busuanzi.ibruce.info/busuanzi/2.3/","clipboard":"https://cdn.staticfile.org/clipboard.js/2.0.6/","mermaid":"https://cdn.staticfile.org/mermaid/8.5.0/","valine":"https://cdn.staticfile.org/valine/1.4.14/","gitalk":"https://cdn.staticfile.org/gitalk/1.6.2/","blueimp_md5":"https://cdn.staticfile.org/blueimp-md5/2.13.0/","disqusjs":"https://cdn.jsdelivr.net/npm/disqusjs@1.0/dist/","hint":"/lib/hint/"},"fluid_config":{"favicon":"/img/favicon.png","apple_touch_icon":"/img/favicon.png","title_join_string":" - ","force_https":false,"code":{"copy_btn":true,"highlight":{"enable":true,"lib":"highlightjs","highlightjs":{"style":"Github Gist","bg_color":false},"prismjs":{"style":"default","preprocess":true}}},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"_","loop":false},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"right","visible":"hover","icon":""},"mouse_click":{"enable":false,"style":"values"}},"dark_mode":{"enable":true,"default":"auto"},"color":{"body_bg_color":"#eee","body_bg_color_dark":"#181c27","navbar_bg_color":"#2f4154","navbar_bg_color_dark":"#1f3144","navbar_text_color":"#fff","navbar_text_color_dark":"#d0d0d0","text_color":"#3c4858","text_color_dark":"#c4c6c9","sec_text_color":"#718096","sec_text_color_dark":"#a7a9ad","post_text_color":"#2c3e50","post_text_color_dark":"#c4c6c9","post_heading_color":"#1a202c","post_heading_color_dark":"#c4c6c9","post_link_color":"#0366d6","post_link_color_dark":"#1589e9","link_hover_color":"#30a9de","link_hover_color_dark":"#30a9de","link_hover_bg_color":"#f8f9fa","link_hover_bg_color_dark":"#364151","board_color":"#fff","board_color_dark":"#252d38"},"font":{"font_size":"16px","font_family":null,"code_font_size":"85%"},"custom_js":null,"custom_css":null,"custom_html":"","web_analytics":{"enable":false,"baidu":null,"google":null,"gtag":null,"tencent":{"sid":null,"cid":null},"woyaola":null,"cnzz":null,"leancloud":{"app_id":null,"app_key":null,"server_url":null}},"lazyload":{"enable":true,"onlypost":false},"daovoice":{"enable":false,"appid":""},"aplayer":{"enable":false,"autoplay":false,"loop":"all","order":"random","theme":"#b7daff","songs":[{"name":"name","artist":"artist","url":"/songs/test.mp3","cover":"/img/cover.jpg"},{"name":"name","artist":"artist","url":"https://...url.mp3","cover":"https://...cover.jpg"}]},"version":{"check":false},"navbar":{"blog_title":"吃面多放葱","ground_glass":{"enable":false,"px":3,"alpha":0.7},"menu":[{"key":"home","link":"/","icon":"iconfont icon-home-fill"},{"key":"category","link":"/categories/","icon":"iconfont icon-category-fill"},{"key":"tag","link":"/tags/","icon":"iconfont icon-tags-fill"},{"key":"about","link":"/about/","icon":"iconfont icon-user-fill"}]},"search":{"enable":true,"path":"/local-search.xml","generate_path":"/local-search.xml","field":"post","content":true},"scroll_down_arrow":{"enable":true,"banner_height_limit":90,"scroll_after_turning_page":true},"banner_parallax":true,"footer":{"statistics":{"enable":false,"source":"busuanzi","pv_format":"总访问量 {} 次","uv_format":"总访客数 {} 人"},"beian":{"enable":false,"icp_text":"京ICP证123456号","police_text":"京公网安备12345678号","police_code":12345678,"police_icon":"/img/police_beian.png"}},"scroll_top_arrow":{"enable":true},"index":{"banner_img":"/img/default.png","banner_img_height":100,"banner_mask_alpha":0.3,"post_default_img":"","slogan":{"enable":true,"text":"像蚂蚁一样工作，像蝴蝶一样生活"},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"category":true,"tag":true}},"page":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3},"post":{"banner_img":"/img/default.png","banner_img_height":70,"banner_mask_alpha":0.3,"meta":{"author":{"enable":false},"date":{"enable":true,"format":"LL a"},"wordcount":{"enable":true,"format":"{} 字"},"min2read":{"enable":true,"format":"{} 分钟","words":100},"views":{"enable":false,"source":"busuanzi","format":"{} 次"}},"updated":{"enable":false,"content":"本文最后更新于：","relative":false},"toc":{"enable":true,"headingSelector":"h1,h2,h3,h4,h5,h6","collapseDepth":0},"copyright":{"enable":true,"content":"本博客所有文章除特别声明外，均采用 <a href=\"https://creativecommons.org/licenses/by-sa/4.0/deed.zh\" rel=\"nofollow noopener\">CC BY-SA 4.0 协议</a> ，转载请注明出处！"},"prev_next":{"enable":true},"custom":{"enable":false,"content":"<img src=\"https://octodex.github.com/images/jetpacktocat.png\" class=\"rounded mx-auto d-block mt-5\" style=\"width:150px; height:150px;\">"},"image_zoom":{"enable":true},"footnote":{"enable":true,"header":""},"math":{"enable":false,"specific":false,"engine":"mathjax"},"mermaid":{"enable":false,"specific":false,"options":{"theme":"default"}},"comments":{"enable":false,"type":"disqus"}},"utterances":{"repo":null,"issue_term":"pathname","label":"utterances","theme":"github-light","theme_dark":"github-dark","crossorigin":"anonymous"},"disqus":{"shortname":null,"disqusjs":false,"apikey":null},"gitalk":{"clientID":null,"clientSecret":null,"repo":null,"owner":null,"admin":["name"],"id":"location.pathname","language":"zh-CN","labels":["Gitalk"],"perPage":10,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true},"valine":{"appid":null,"appkey":null,"placeholder":"说点什么","path":"window.location.pathname","avatar":"retro","meta":["nick","mail","link"],"pageSize":10,"lang":"zh-CN","highlight":false,"recordIP":false,"serverURLs":null},"changyan":{"appid":"","appkey":""},"livere":{"uid":""},"remark42":{"host":"https://remark.haoyizebo.com","site_id":"haoyizebo","max_shown_comments":10,"locale":"zh"},"archive":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null},"category":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"post_limit":10,"order_by":"-length","collapse_depth":0},"tag":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null,"tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"avatar":"/img/avatar.png","name":"蔺国防","introduce":"移动应用开发者，历史文学爱好者","icons":[{"class":"iconfont icon-github-fill","link":"https://github.com","tip":"GitHub"},{"class":"iconfont icon-douban-fill","link":"https://douban.com","tip":"豆瓣"},{"class":"iconfont icon-wechat-fill","qrcode":"/img/favicon.png"}]},"page404":{"banner_img":"/img/default.png","banner_img_height":85,"banner_mask_alpha":0.3,"subtitle":"Page not found"},"links":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"items":[{"title":"Fluid Docs","intro":"主题使用指南","link":"https://hexo.fluid-dev.com/docs/","image":"/img/favicon.png"},{"title":"Fluid Repo","intro":"主题 GitHub 仓库","link":"https://github.com/fluid-dev/hexo-theme-fluid","image":"/img/favicon.png"},{"title":"Fluid Example","intro":"主题操作示例","link":"https://hexo.fluid-dev.com/docs/example/","image":"/img/favicon.png"}]}}}},"excerpt":"","more":"<h2 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h2><p>1.target -&gt; Signing &amp; Capabilities, 点击加号, 搜索 Sign In with Apple</p>\n<p>2.General -&gt; Frameworks, Libraries, and Embedded Content,点击加号， 搜索 AuthenticationServices 并导入进去， Embed 选择  Embed &amp; Sign</p>\n<h2 id=\"登录\"><a href=\"#登录\" class=\"headerlink\" title=\"登录\"></a>登录</h2><ul>\n<li><p>应用启动登录校验</p>\n<pre><code class=\"hljs swift\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">application</span><span class=\"hljs-params\">(<span class=\"hljs-number\">_</span> application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: <span class=\"hljs-keyword\">Any</span>]?)</span></span> -&gt; <span class=\"hljs-type\">Bool</span> &#123;\n       <span class=\"hljs-keyword\">let</span> appleIDProvider = <span class=\"hljs-type\">ASAuthorizationAppleIDProvider</span>()\n       <span class=\"hljs-comment\">//此处Userid可以为本地存储的token或其他登陆确认身份内容</span>\n       appleIDProvider.getCredentialState(forUserID: <span class=\"hljs-type\">KeychainItem</span>.currentUserIdentifier) &#123; (credentialState, error) <span class=\"hljs-keyword\">in</span>\n           <span class=\"hljs-keyword\">switch</span> credentialState &#123;\n           <span class=\"hljs-keyword\">case</span> .authorized:\n               <span class=\"hljs-comment\">//授权有效，走登陆成功页面</span>\n               <span class=\"hljs-keyword\">break</span>\n           <span class=\"hljs-keyword\">case</span> .revoked, .notFound:\n               <span class=\"hljs-comment\">// 走登陆页面</span>\n               <span class=\"hljs-type\">DispatchQueue</span>.main.async &#123;\n                   \n               &#125;\n           <span class=\"hljs-keyword\">default</span>:\n               <span class=\"hljs-keyword\">break</span>\n           &#125;\n       &#125;\n       <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>\n   &#125;</code></pre>\n</li>\n<li><p>创建appid登录按钮并添加到登陆页面指定位置</p>\n</li>\n</ul>\n<pre><code class=\"hljs reasonml\"><span class=\"hljs-keyword\">let</span> authorizationButton = <span class=\"hljs-constructor\">ASAuthorizationAppleIDButton()</span>\n \n@objc\nfunc handle<span class=\"hljs-constructor\">AuthorizationAppleIDButtonPress()</span> &#123;\n    <span class=\"hljs-keyword\">let</span> appleIDProvider = <span class=\"hljs-constructor\">ASAuthorizationAppleIDProvider()</span>\n    <span class=\"hljs-keyword\">let</span> request = appleIDProvider.create<span class=\"hljs-constructor\">Request()</span>\n    request.requestedScopes = <span class=\"hljs-literal\">[.<span class=\"hljs-identifier\">fullName</span>, .<span class=\"hljs-identifier\">email</span>]</span>\n    \n    <span class=\"hljs-keyword\">let</span> authorizationController = <span class=\"hljs-constructor\">ASAuthorizationController(<span class=\"hljs-params\">authorizationRequests</span>: [<span class=\"hljs-params\">request</span>])</span>\n    authorizationController.delegate = self\n    authorizationController.presentationContextProvider = self\n    authorizationController.perform<span class=\"hljs-constructor\">Requests()</span>\n&#125;\n</code></pre>\n\n<ul>\n<li><p>处理登陆事件代理</p>\n<pre><code class=\"hljs swift\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">extension</span> <span class=\"hljs-title\">LoginViewController</span>: <span class=\"hljs-title\">ASAuthorizationControllerDelegate</span> </span>&#123;\n    <span class=\"hljs-comment\">/// - Tag: 认证状态回调信息</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">authorizationController</span><span class=\"hljs-params\">(controller: ASAuthorizationController, didCompleteWithAuthorization authorization: ASAuthorization)</span></span> &#123;\n        <span class=\"hljs-keyword\">switch</span> authorization.credential &#123;\n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-keyword\">let</span> appleIDCredential <span class=\"hljs-keyword\">as</span> <span class=\"hljs-type\">ASAuthorizationAppleIDCredential</span>: <span class=\"hljs-comment\">//此处为appleID 认证</span>\n            \n            <span class=\"hljs-comment\">// 根据以下信息在后端创建账户</span>\n            <span class=\"hljs-keyword\">let</span> userIdentifier = appleIDCredential.user  <span class=\"hljs-comment\">//用户唯一标志符</span>\n            <span class=\"hljs-keyword\">let</span> fullName = appleIDCredential.fullName\n            <span class=\"hljs-keyword\">let</span> email = appleIDCredential.email\n            \n            <span class=\"hljs-comment\">// 后端请求注册账户及密码及登录成功后存储登录信息处理（这里根据业务情况来决定是否重新注册用户信息）</span>\n            \n            <span class=\"hljs-comment\">// 成功后进入登陆后页面</span>\n    \n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-keyword\">let</span> passwordCredential <span class=\"hljs-keyword\">as</span> <span class=\"hljs-type\">ASPasswordCredential</span>: <span class=\"hljs-comment\">//此处为账号密码认证</span>\n        \n            <span class=\"hljs-comment\">// Sign in using an existing iCloud Keychain credential.</span>\n            <span class=\"hljs-keyword\">let</span> username = passwordCredential.user\n            <span class=\"hljs-keyword\">let</span> password = passwordCredential.password\n            \n            <span class=\"hljs-comment\">// 做一些账号密码的登录处理</span>\n            \n            <span class=\"hljs-comment\">// 成功后进入登陆后页面</span>\n        <span class=\"hljs-keyword\">default</span>:\n            <span class=\"hljs-keyword\">break</span>\n        &#125;\n    &#125;\n    \n    <span class=\"hljs-comment\">/// - Tag: 获取认证状态失败后的错误信息</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">authorizationController</span><span class=\"hljs-params\">(controller: ASAuthorizationController, didCompleteWithError error: Error)</span></span> &#123;\n        <span class=\"hljs-comment\">// Handle error.</span>\n    &#125;\n&#125;</code></pre>\n</li>\n<li><p>处理视图代理</p>\n<pre><code class=\"hljs swift\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">extension</span> <span class=\"hljs-title\">LoginViewController</span>: <span class=\"hljs-title\">ASAuthorizationControllerPresentationContextProviding</span> </span>&#123;\n    <span class=\"hljs-comment\">/// - Tag: 提供presention视图</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">presentationAnchor</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">for</span> controller: ASAuthorizationController)</span></span> -&gt; <span class=\"hljs-type\">ASPresentationAnchor</span> &#123;\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">self</span>.view.window!\n    &#125;\n&#125;\n</code></pre>\n</li>\n<li><p>进入登录视图进行登陆验证 （此处可根据业务情况来决定是否添加）</p>\n<pre><code class=\"hljs reasonml\">override func view<span class=\"hljs-constructor\">DidAppear(<span class=\"hljs-params\">_</span> <span class=\"hljs-params\">animated</span>: Bool)</span> &#123;\n    super.view<span class=\"hljs-constructor\">DidAppear(<span class=\"hljs-params\">animated</span>)</span>\n    perform<span class=\"hljs-constructor\">ExistingAccountSetupFlows()</span>\n&#125;\n\nfunc perform<span class=\"hljs-constructor\">ExistingAccountSetupFlows()</span> &#123;\n    <span class=\"hljs-comment\">// Prepare requests for both Apple ID and password providers.</span>\n    <span class=\"hljs-keyword\">let</span> requests = <span class=\"hljs-literal\">[ASA<span class=\"hljs-identifier\">uthorizationAppleIDProvider</span>().<span class=\"hljs-identifier\">createRequest</span>(),</span>\n<span class=\"hljs-literal\">                    ASA<span class=\"hljs-identifier\">uthorizationPasswordProvider</span>().<span class=\"hljs-identifier\">createRequest</span>()]</span>\n    \n    <span class=\"hljs-comment\">// Create an authorization controller with the given requests.</span>\n    <span class=\"hljs-keyword\">let</span> authorizationController = <span class=\"hljs-constructor\">ASAuthorizationController(<span class=\"hljs-params\">authorizationRequests</span>: <span class=\"hljs-params\">requests</span>)</span>\n    authorizationController.delegate = self\n    authorizationController.presentationContextProvider = self\n    authorizationController.perform<span class=\"hljs-constructor\">Requests()</span>\n&#125;</code></pre>\n\n</li>\n</ul>\n<h2 id=\"退出登录\"><a href=\"#退出登录\" class=\"headerlink\" title=\"退出登录\"></a>退出登录</h2><ul>\n<li>根据<code>userIdentifier</code>退出登陆流程</li>\n</ul>\n<p>##参考资料<br><a href=\"https://developer.apple.com/documentation/authenticationservices/implementing_user_authentication_with_sign_in_with_apple\">Implementing User Authentication with Sign in with Apple</a></p>\n"},{"title":"AOP简介及Aspects介绍","date":"2018-03-28T16:01:00.000Z","_content":"\n## AOP简介\n\n![aop](https://upload-images.jianshu.io/upload_images/3340896-1096322e544ec637.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n在软件业，AOP为Aspect Oriented Programming的缩写，意为：面向切面编程，通过预编译方式和运行期动态代理实现程序功能的统一维护的一种技术。AOP是OOP的延续，是软件开发中的一个热点，也是Spring框架中的一个重要内容，是函数式编程的一种衍生范型。利用AOP可以对业务逻辑的各个部分进行隔离，从而使得业务逻辑各部分之间的耦合度降低，提高程序的可重用性，同时提高了开发的效率。\n\n## Aspects 简介\n![aspects](https://upload-images.jianshu.io/upload_images/3340896-cf3f479419055275.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n一个轻量的单一的AOP库, 它让我们能够使用 method swizzling 技术 为每个类或者实例对象的方法添加执行代码.\n\n### Aspects 在 iOS 开发常用使用场景\n\n- 监测用户点击事件\n- 记录用户某一页面的留存\n- 用户使用频率\n...\n\n### 示例代码\nAspects 能够在调试的时候被用来动态添加日志\n```\n[UIViewController aspect_hookSelector:@selector(viewWillAppear:) withOptions:AspectPositionAfter usingBlock:^(id<AspectInfo> aspectInfo, BOOL animated) {\n    NSLog(@\"View Controller %@ will appear animated: %tu\", aspectInfo.instance, animated);\n} error:NULL];\n```\n\n## 原理简析\n\n讲解原理前我们先熟悉一下`Objective-C`的消息转发流程\n### 消息转发流程:\n- `resolveInstanceMethod:` \n当实例对象无法找到 sel 实现时，首先调用此方法，对sel做处理\n- `resolveClassMethod:` \n当类对象无法找到 sel 实现时，首先调用此方法，对sel做处理\n-  `forwardTargetForSelector:`\nsel 仍未处理，接着调用此方法，在这里可以对sel做处理\n-  `methodSignatureForSelector:`\nsel 仍未处理，runtime会通过`methodSigntureForSelector`方法尝试获取本次消息调用的具体环境信息，包括消息的参数与返回值类型。并封装成NSInvocation对象。我们可以在`forwardInvocation`方法内部对该对象作进一步的处理，并使之能够成功的完成消息处理。如果未能成功获取`NSInvocation`对象，那么程序就会发送`doesNotRecognizeSelector`消息抛出`unrecognized Selector send to xxx`的异常\n\n### 原理\n> **重要** \nAspects 利用 `Objective-C` 的消息转发机制,在对象或类调用`selector`的时候,直接将其`IMP`替换为`objc_msgForward`,从而走消息转发流程,通过hook `forwardInvocation:`方法,将其`IMP`替换为自定义的`IMP`从而实现执行代码的添加和方法的替换.\n\n### 核心代码\n\n- 替换selector的IMP,执行 objc_msgForward 函数,直接走消息转发\n```\n if (!aspect_isMsgForwardIMP(targetMethodIMP)) {\n        ...\n        ...\n        class_replaceMethod(klass, selector, aspect_getMsgForwardIMP(self, selector), typeEncoding);\n        AspectLog(@\"Aspects: Installed hook for -[%@ %@].\", klass, NSStringFromSelector(selector));\n    }\n```\n\n- hook `forwardInvocation:`方法,将其IMP替换为`__ASPECTS_ARE_BEING_CALLED__`\n\n```\nstatic NSString *const AspectsForwardInvocationSelectorName = @\"__aspects_forwardInvocation:\";\nstatic void aspect_swizzleForwardInvocation(Class klass) {\n    NSCParameterAssert(klass);\n    // If there is no method, replace will act like class_addMethod.\n    IMP originalImplementation = class_replaceMethod(klass, @selector(forwardInvocation:), (IMP)__ASPECTS_ARE_BEING_CALLED__, \"v@:@\");\n    if (originalImplementation) {\n        class_addMethod(klass, NSSelectorFromString(AspectsForwardInvocationSelectorName), originalImplementation, \"v@:@\");\n    }\n    AspectLog(@\"Aspects: %@ is now aspect aware.\", NSStringFromClass(klass));\n}\n\n```\n- `forwardInvocation:`方法执行IMP`__ASPECTS_ARE_BEING_CALLED__`\n\n```\n// This is the swizzled forwardInvocation: method.\nstatic void __ASPECTS_ARE_BEING_CALLED__(__unsafe_unretained NSObject *self, SEL selector, NSInvocation *invocation) {\n    \n    ...\n    ...\n\n    // Before hooks.\n    aspect_invoke(classContainer.beforeAspects, info);\n    aspect_invoke(objectContainer.beforeAspects, info);\n\n    // Instead hooks.\n    BOOL respondsToAlias = YES;\n    if (objectContainer.insteadAspects.count || classContainer.insteadAspects.count) {\n        aspect_invoke(classContainer.insteadAspects, info);\n        aspect_invoke(objectContainer.insteadAspects, info);\n    }else {\n        Class klass = object_getClass(invocation.target);\n        do {\n            if ((respondsToAlias = [klass instancesRespondToSelector:aliasSelector])) {\n                [invocation invoke];\n                break;\n            }\n        }while (!respondsToAlias && (klass = class_getSuperclass(klass)));\n    }\n\n    // After hooks.\n    aspect_invoke(classContainer.afterAspects, info);\n    aspect_invoke(objectContainer.afterAspects, info);\n\n    ...\n    ...\n}\n```\n\n- 在上一步中会根据`AspectOptions`按顺序执行block内代码，内部`forwardInvocation`方法调用时获取`NSInvocation`信息，然后用该信息生成一个参数相同的`blockInvocation`，再调用`invokeWithTarget`方法，来执行block内代码\n\n```\n- (BOOL)invokeWithInfo:(id<AspectInfo>)info {\n    NSInvocation *blockInvocation = [NSInvocation invocationWithMethodSignature:self.blockSignature];\n    NSInvocation *originalInvocation = info.originalInvocation;\n    NSUInteger numberOfArguments = self.blockSignature.numberOfArguments;\n\n    // Be extra paranoid. We already check that on hook registration.\n    if (numberOfArguments > originalInvocation.methodSignature.numberOfArguments) {\n        AspectLogError(@\"Block has too many arguments. Not calling %@\", info);\n        return NO;\n    }\n\n    // The `self` of the block will be the AspectInfo. Optional.\n    if (numberOfArguments > 1) {\n        [blockInvocation setArgument:&info atIndex:1];\n    }\n    \n\tvoid *argBuf = NULL;\n    for (NSUInteger idx = 2; idx < numberOfArguments; idx++) {\n        const char *type = [originalInvocation.methodSignature getArgumentTypeAtIndex:idx];\n\t\tNSUInteger argSize;\n\t\tNSGetSizeAndAlignment(type, &argSize, NULL);\n        \n\t\tif (!(argBuf = reallocf(argBuf, argSize))) {\n            AspectLogError(@\"Failed to allocate memory for block invocation.\");\n\t\t\treturn NO;\n\t\t}\n        \n\t\t[originalInvocation getArgument:argBuf atIndex:idx];\n\t\t[blockInvocation setArgument:argBuf atIndex:idx];\n    }\n    \n    [blockInvocation invokeWithTarget:self.block];\n    \n    if (argBuf != NULL) {\n        free(argBuf);\n    }\n    return YES;\n}\n\n```\n\n## 参考资料\n\n[Aspects](https://github.com/steipete/Aspects)\n[Runtime编程指南](https://www.jianshu.com/p/88ce7c4c2b2a)\n","source":"_posts/iOS/Aspects-简介与原理简析.md","raw":"\n---\ntitle:  AOP简介及Aspects介绍\ndate:  2018-03-29 00:01\ncategories:\n- iOS\ntags: \n- 切面编程 \n---\n\n## AOP简介\n\n![aop](https://upload-images.jianshu.io/upload_images/3340896-1096322e544ec637.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n在软件业，AOP为Aspect Oriented Programming的缩写，意为：面向切面编程，通过预编译方式和运行期动态代理实现程序功能的统一维护的一种技术。AOP是OOP的延续，是软件开发中的一个热点，也是Spring框架中的一个重要内容，是函数式编程的一种衍生范型。利用AOP可以对业务逻辑的各个部分进行隔离，从而使得业务逻辑各部分之间的耦合度降低，提高程序的可重用性，同时提高了开发的效率。\n\n## Aspects 简介\n![aspects](https://upload-images.jianshu.io/upload_images/3340896-cf3f479419055275.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n一个轻量的单一的AOP库, 它让我们能够使用 method swizzling 技术 为每个类或者实例对象的方法添加执行代码.\n\n### Aspects 在 iOS 开发常用使用场景\n\n- 监测用户点击事件\n- 记录用户某一页面的留存\n- 用户使用频率\n...\n\n### 示例代码\nAspects 能够在调试的时候被用来动态添加日志\n```\n[UIViewController aspect_hookSelector:@selector(viewWillAppear:) withOptions:AspectPositionAfter usingBlock:^(id<AspectInfo> aspectInfo, BOOL animated) {\n    NSLog(@\"View Controller %@ will appear animated: %tu\", aspectInfo.instance, animated);\n} error:NULL];\n```\n\n## 原理简析\n\n讲解原理前我们先熟悉一下`Objective-C`的消息转发流程\n### 消息转发流程:\n- `resolveInstanceMethod:` \n当实例对象无法找到 sel 实现时，首先调用此方法，对sel做处理\n- `resolveClassMethod:` \n当类对象无法找到 sel 实现时，首先调用此方法，对sel做处理\n-  `forwardTargetForSelector:`\nsel 仍未处理，接着调用此方法，在这里可以对sel做处理\n-  `methodSignatureForSelector:`\nsel 仍未处理，runtime会通过`methodSigntureForSelector`方法尝试获取本次消息调用的具体环境信息，包括消息的参数与返回值类型。并封装成NSInvocation对象。我们可以在`forwardInvocation`方法内部对该对象作进一步的处理，并使之能够成功的完成消息处理。如果未能成功获取`NSInvocation`对象，那么程序就会发送`doesNotRecognizeSelector`消息抛出`unrecognized Selector send to xxx`的异常\n\n### 原理\n> **重要** \nAspects 利用 `Objective-C` 的消息转发机制,在对象或类调用`selector`的时候,直接将其`IMP`替换为`objc_msgForward`,从而走消息转发流程,通过hook `forwardInvocation:`方法,将其`IMP`替换为自定义的`IMP`从而实现执行代码的添加和方法的替换.\n\n### 核心代码\n\n- 替换selector的IMP,执行 objc_msgForward 函数,直接走消息转发\n```\n if (!aspect_isMsgForwardIMP(targetMethodIMP)) {\n        ...\n        ...\n        class_replaceMethod(klass, selector, aspect_getMsgForwardIMP(self, selector), typeEncoding);\n        AspectLog(@\"Aspects: Installed hook for -[%@ %@].\", klass, NSStringFromSelector(selector));\n    }\n```\n\n- hook `forwardInvocation:`方法,将其IMP替换为`__ASPECTS_ARE_BEING_CALLED__`\n\n```\nstatic NSString *const AspectsForwardInvocationSelectorName = @\"__aspects_forwardInvocation:\";\nstatic void aspect_swizzleForwardInvocation(Class klass) {\n    NSCParameterAssert(klass);\n    // If there is no method, replace will act like class_addMethod.\n    IMP originalImplementation = class_replaceMethod(klass, @selector(forwardInvocation:), (IMP)__ASPECTS_ARE_BEING_CALLED__, \"v@:@\");\n    if (originalImplementation) {\n        class_addMethod(klass, NSSelectorFromString(AspectsForwardInvocationSelectorName), originalImplementation, \"v@:@\");\n    }\n    AspectLog(@\"Aspects: %@ is now aspect aware.\", NSStringFromClass(klass));\n}\n\n```\n- `forwardInvocation:`方法执行IMP`__ASPECTS_ARE_BEING_CALLED__`\n\n```\n// This is the swizzled forwardInvocation: method.\nstatic void __ASPECTS_ARE_BEING_CALLED__(__unsafe_unretained NSObject *self, SEL selector, NSInvocation *invocation) {\n    \n    ...\n    ...\n\n    // Before hooks.\n    aspect_invoke(classContainer.beforeAspects, info);\n    aspect_invoke(objectContainer.beforeAspects, info);\n\n    // Instead hooks.\n    BOOL respondsToAlias = YES;\n    if (objectContainer.insteadAspects.count || classContainer.insteadAspects.count) {\n        aspect_invoke(classContainer.insteadAspects, info);\n        aspect_invoke(objectContainer.insteadAspects, info);\n    }else {\n        Class klass = object_getClass(invocation.target);\n        do {\n            if ((respondsToAlias = [klass instancesRespondToSelector:aliasSelector])) {\n                [invocation invoke];\n                break;\n            }\n        }while (!respondsToAlias && (klass = class_getSuperclass(klass)));\n    }\n\n    // After hooks.\n    aspect_invoke(classContainer.afterAspects, info);\n    aspect_invoke(objectContainer.afterAspects, info);\n\n    ...\n    ...\n}\n```\n\n- 在上一步中会根据`AspectOptions`按顺序执行block内代码，内部`forwardInvocation`方法调用时获取`NSInvocation`信息，然后用该信息生成一个参数相同的`blockInvocation`，再调用`invokeWithTarget`方法，来执行block内代码\n\n```\n- (BOOL)invokeWithInfo:(id<AspectInfo>)info {\n    NSInvocation *blockInvocation = [NSInvocation invocationWithMethodSignature:self.blockSignature];\n    NSInvocation *originalInvocation = info.originalInvocation;\n    NSUInteger numberOfArguments = self.blockSignature.numberOfArguments;\n\n    // Be extra paranoid. We already check that on hook registration.\n    if (numberOfArguments > originalInvocation.methodSignature.numberOfArguments) {\n        AspectLogError(@\"Block has too many arguments. Not calling %@\", info);\n        return NO;\n    }\n\n    // The `self` of the block will be the AspectInfo. Optional.\n    if (numberOfArguments > 1) {\n        [blockInvocation setArgument:&info atIndex:1];\n    }\n    \n\tvoid *argBuf = NULL;\n    for (NSUInteger idx = 2; idx < numberOfArguments; idx++) {\n        const char *type = [originalInvocation.methodSignature getArgumentTypeAtIndex:idx];\n\t\tNSUInteger argSize;\n\t\tNSGetSizeAndAlignment(type, &argSize, NULL);\n        \n\t\tif (!(argBuf = reallocf(argBuf, argSize))) {\n            AspectLogError(@\"Failed to allocate memory for block invocation.\");\n\t\t\treturn NO;\n\t\t}\n        \n\t\t[originalInvocation getArgument:argBuf atIndex:idx];\n\t\t[blockInvocation setArgument:argBuf atIndex:idx];\n    }\n    \n    [blockInvocation invokeWithTarget:self.block];\n    \n    if (argBuf != NULL) {\n        free(argBuf);\n    }\n    return YES;\n}\n\n```\n\n## 参考资料\n\n[Aspects](https://github.com/steipete/Aspects)\n[Runtime编程指南](https://www.jianshu.com/p/88ce7c4c2b2a)\n","slug":"iOS/Aspects-简介与原理简析","published":1,"updated":"2020-09-27T10:38:57.200Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgq6gnwq001bt29khub16ovm","content":"<h2 id=\"AOP简介\"><a href=\"#AOP简介\" class=\"headerlink\" title=\"AOP简介\"></a>AOP简介</h2><p><img src=\"https://upload-images.jianshu.io/upload_images/3340896-1096322e544ec637.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"aop\"></p>\n<p>在软件业，AOP为Aspect Oriented Programming的缩写，意为：面向切面编程，通过预编译方式和运行期动态代理实现程序功能的统一维护的一种技术。AOP是OOP的延续，是软件开发中的一个热点，也是Spring框架中的一个重要内容，是函数式编程的一种衍生范型。利用AOP可以对业务逻辑的各个部分进行隔离，从而使得业务逻辑各部分之间的耦合度降低，提高程序的可重用性，同时提高了开发的效率。</p>\n<h2 id=\"Aspects-简介\"><a href=\"#Aspects-简介\" class=\"headerlink\" title=\"Aspects 简介\"></a>Aspects 简介</h2><p><img src=\"https://upload-images.jianshu.io/upload_images/3340896-cf3f479419055275.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"aspects\"><br>一个轻量的单一的AOP库, 它让我们能够使用 method swizzling 技术 为每个类或者实例对象的方法添加执行代码.</p>\n<h3 id=\"Aspects-在-iOS-开发常用使用场景\"><a href=\"#Aspects-在-iOS-开发常用使用场景\" class=\"headerlink\" title=\"Aspects 在 iOS 开发常用使用场景\"></a>Aspects 在 iOS 开发常用使用场景</h3><ul>\n<li>监测用户点击事件</li>\n<li>记录用户某一页面的留存</li>\n<li>用户使用频率<br>…</li>\n</ul>\n<h3 id=\"示例代码\"><a href=\"#示例代码\" class=\"headerlink\" title=\"示例代码\"></a>示例代码</h3><p>Aspects 能够在调试的时候被用来动态添加日志</p>\n<pre><code class=\"hljs scheme\">[<span class=\"hljs-name\">UIViewController</span> aspect_hookSelector:@selector(<span class=\"hljs-name\">viewWillAppear:</span>) withOptions:AspectPositionAfter usingBlock:^(<span class=\"hljs-name\">id&lt;AspectInfo&gt;</span> aspectInfo, BOOL animated) &#123;\n    NSLog(<span class=\"hljs-name\">@</span><span class=\"hljs-string\">&quot;View Controller %@ will appear animated: %tu&quot;</span>, aspectInfo.instance, animated)<span class=\"hljs-comment\">;</span>\n&#125; error:NULL]<span class=\"hljs-comment\">;</span></code></pre>\n\n<h2 id=\"原理简析\"><a href=\"#原理简析\" class=\"headerlink\" title=\"原理简析\"></a>原理简析</h2><p>讲解原理前我们先熟悉一下<code>Objective-C</code>的消息转发流程</p>\n<h3 id=\"消息转发流程\"><a href=\"#消息转发流程\" class=\"headerlink\" title=\"消息转发流程:\"></a>消息转发流程:</h3><ul>\n<li><code>resolveInstanceMethod:</code><br>当实例对象无法找到 sel 实现时，首先调用此方法，对sel做处理</li>\n<li><code>resolveClassMethod:</code><br>当类对象无法找到 sel 实现时，首先调用此方法，对sel做处理</li>\n<li><code>forwardTargetForSelector:</code><br>sel 仍未处理，接着调用此方法，在这里可以对sel做处理</li>\n<li><code>methodSignatureForSelector:</code><br>sel 仍未处理，runtime会通过<code>methodSigntureForSelector</code>方法尝试获取本次消息调用的具体环境信息，包括消息的参数与返回值类型。并封装成NSInvocation对象。我们可以在<code>forwardInvocation</code>方法内部对该对象作进一步的处理，并使之能够成功的完成消息处理。如果未能成功获取<code>NSInvocation</code>对象，那么程序就会发送<code>doesNotRecognizeSelector</code>消息抛出<code>unrecognized Selector send to xxx</code>的异常</li>\n</ul>\n<h3 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h3><blockquote>\n<p><strong>重要</strong><br>Aspects 利用 <code>Objective-C</code> 的消息转发机制,在对象或类调用<code>selector</code>的时候,直接将其<code>IMP</code>替换为<code>objc_msgForward</code>,从而走消息转发流程,通过hook <code>forwardInvocation:</code>方法,将其<code>IMP</code>替换为自定义的<code>IMP</code>从而实现执行代码的添加和方法的替换.</p>\n</blockquote>\n<h3 id=\"核心代码\"><a href=\"#核心代码\" class=\"headerlink\" title=\"核心代码\"></a>核心代码</h3><ul>\n<li><p>替换selector的IMP,执行 objc_msgForward 函数,直接走消息转发</p>\n<pre><code class=\"hljs reasonml\"><span class=\"hljs-keyword\">if</span> (!aspect<span class=\"hljs-constructor\">_isMsgForwardIMP(<span class=\"hljs-params\">targetMethodIMP</span>)</span>) &#123;\n       ...\n       ...\n       <span class=\"hljs-keyword\">class</span><span class=\"hljs-constructor\">_replaceMethod(<span class=\"hljs-params\">klass</span>, <span class=\"hljs-params\">selector</span>, <span class=\"hljs-params\">aspect_getMsgForwardIMP</span>(<span class=\"hljs-params\">self</span>, <span class=\"hljs-params\">selector</span>)</span>, typeEncoding);\n       <span class=\"hljs-constructor\">AspectLog(@<span class=\"hljs-string\">&quot;Aspects: Installed hook for -[%@ %@].&quot;</span>, <span class=\"hljs-params\">klass</span>, NSStringFromSelector(<span class=\"hljs-params\">selector</span>)</span>);\n   &#125;</code></pre>\n</li>\n<li><p>hook <code>forwardInvocation:</code>方法,将其IMP替换为<code>__ASPECTS_ARE_BEING_CALLED__</code></p>\n</li>\n</ul>\n<pre><code class=\"hljs reasonml\">static NSString *const AspectsForwardInvocationSelectorName = @<span class=\"hljs-string\">&quot;__aspects_forwardInvocation:&quot;</span>;\nstatic void aspect<span class=\"hljs-constructor\">_swizzleForwardInvocation(Class <span class=\"hljs-params\">klass</span>)</span> &#123;\n    <span class=\"hljs-constructor\">NSCParameterAssert(<span class=\"hljs-params\">klass</span>)</span>;\n    <span class=\"hljs-comment\">// If there is no method, replace will act like class_addMethod.</span>\n    IMP originalImplementation = <span class=\"hljs-keyword\">class</span><span class=\"hljs-constructor\">_replaceMethod(<span class=\"hljs-params\">klass</span>, @<span class=\"hljs-params\">selector</span>(<span class=\"hljs-params\">forwardInvocation</span>:)</span>, (IMP)__ASPECTS_ARE_BEING_CALLED__, <span class=\"hljs-string\">&quot;v@:@&quot;</span>);\n    <span class=\"hljs-keyword\">if</span> (originalImplementation) &#123;\n        <span class=\"hljs-keyword\">class</span><span class=\"hljs-constructor\">_addMethod(<span class=\"hljs-params\">klass</span>, NSSelectorFromString(AspectsForwardInvocationSelectorName)</span>, originalImplementation, <span class=\"hljs-string\">&quot;v@:@&quot;</span>);\n    &#125;\n    <span class=\"hljs-constructor\">AspectLog(@<span class=\"hljs-string\">&quot;Aspects: %@ is now aspect aware.&quot;</span>, NSStringFromClass(<span class=\"hljs-params\">klass</span>)</span>);\n&#125;\n</code></pre>\n<ul>\n<li><code>forwardInvocation:</code>方法执行IMP<code>__ASPECTS_ARE_BEING_CALLED__</code></li>\n</ul>\n<pre><code class=\"hljs reasonml\"><span class=\"hljs-comment\">// This is the swizzled forwardInvocation: method.</span>\nstatic void <span class=\"hljs-constructor\">__ASPECTS_ARE_BEING_CALLED__(<span class=\"hljs-params\">__unsafe_unretained</span> NSObject <span class=\"hljs-operator\">*</span><span class=\"hljs-params\">self</span>, SEL <span class=\"hljs-params\">selector</span>, NSInvocation <span class=\"hljs-operator\">*</span><span class=\"hljs-params\">invocation</span>)</span> &#123;\n    \n    ...\n    ...\n\n    <span class=\"hljs-comment\">// Before hooks.</span>\n    aspect<span class=\"hljs-constructor\">_invoke(<span class=\"hljs-params\">classContainer</span>.<span class=\"hljs-params\">beforeAspects</span>, <span class=\"hljs-params\">info</span>)</span>;\n    aspect<span class=\"hljs-constructor\">_invoke(<span class=\"hljs-params\">objectContainer</span>.<span class=\"hljs-params\">beforeAspects</span>, <span class=\"hljs-params\">info</span>)</span>;\n\n    <span class=\"hljs-comment\">// Instead hooks.</span>\n    BOOL respondsToAlias = YES;\n    <span class=\"hljs-keyword\">if</span> (objectContainer.insteadAspects.count<span class=\"hljs-operator\"> || </span>classContainer.insteadAspects.count) &#123;\n        aspect<span class=\"hljs-constructor\">_invoke(<span class=\"hljs-params\">classContainer</span>.<span class=\"hljs-params\">insteadAspects</span>, <span class=\"hljs-params\">info</span>)</span>;\n        aspect<span class=\"hljs-constructor\">_invoke(<span class=\"hljs-params\">objectContainer</span>.<span class=\"hljs-params\">insteadAspects</span>, <span class=\"hljs-params\">info</span>)</span>;\n    &#125;<span class=\"hljs-keyword\">else</span> &#123;\n        Class klass = <span class=\"hljs-keyword\">object</span><span class=\"hljs-constructor\">_getClass(<span class=\"hljs-params\">invocation</span>.<span class=\"hljs-params\">target</span>)</span>;\n        <span class=\"hljs-keyword\">do</span> &#123;\n            <span class=\"hljs-keyword\">if</span> ((respondsToAlias = <span class=\"hljs-literal\">[<span class=\"hljs-identifier\">klass</span> <span class=\"hljs-identifier\">instancesRespondToSelector</span>:<span class=\"hljs-identifier\">aliasSelector</span>]</span>)) &#123;\n                <span class=\"hljs-literal\">[<span class=\"hljs-identifier\">invocation</span> <span class=\"hljs-identifier\">invoke</span>]</span>;\n                break;\n            &#125;\n        &#125;<span class=\"hljs-keyword\">while</span> (!respondsToAlias<span class=\"hljs-operator\"> &amp;&amp; </span>(klass = <span class=\"hljs-keyword\">class</span><span class=\"hljs-constructor\">_getSuperclass(<span class=\"hljs-params\">klass</span>)</span>));\n    &#125;\n\n    <span class=\"hljs-comment\">// After hooks.</span>\n    aspect<span class=\"hljs-constructor\">_invoke(<span class=\"hljs-params\">classContainer</span>.<span class=\"hljs-params\">afterAspects</span>, <span class=\"hljs-params\">info</span>)</span>;\n    aspect<span class=\"hljs-constructor\">_invoke(<span class=\"hljs-params\">objectContainer</span>.<span class=\"hljs-params\">afterAspects</span>, <span class=\"hljs-params\">info</span>)</span>;\n\n    ...\n    ...\n&#125;</code></pre>\n\n<ul>\n<li>在上一步中会根据<code>AspectOptions</code>按顺序执行block内代码，内部<code>forwardInvocation</code>方法调用时获取<code>NSInvocation</code>信息，然后用该信息生成一个参数相同的<code>blockInvocation</code>，再调用<code>invokeWithTarget</code>方法，来执行block内代码</li>\n</ul>\n<pre><code class=\"hljs objectivec\">- (<span class=\"hljs-built_in\">BOOL</span>)invokeWithInfo:(<span class=\"hljs-keyword\">id</span>&lt;AspectInfo&gt;)info &#123;\n    <span class=\"hljs-built_in\">NSInvocation</span> *blockInvocation = [<span class=\"hljs-built_in\">NSInvocation</span> invocationWithMethodSignature:<span class=\"hljs-keyword\">self</span>.blockSignature];\n    <span class=\"hljs-built_in\">NSInvocation</span> *originalInvocation = info.originalInvocation;\n    <span class=\"hljs-built_in\">NSUInteger</span> numberOfArguments = <span class=\"hljs-keyword\">self</span>.blockSignature.numberOfArguments;\n\n    <span class=\"hljs-comment\">// Be extra paranoid. We already check that on hook registration.</span>\n    <span class=\"hljs-keyword\">if</span> (numberOfArguments &gt; originalInvocation.methodSignature.numberOfArguments) &#123;\n        AspectLogError(<span class=\"hljs-string\">@&quot;Block has too many arguments. Not calling %@&quot;</span>, info);\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">NO</span>;\n    &#125;\n\n    <span class=\"hljs-comment\">// The `self` of the block will be the AspectInfo. Optional.</span>\n    <span class=\"hljs-keyword\">if</span> (numberOfArguments &gt; <span class=\"hljs-number\">1</span>) &#123;\n        [blockInvocation setArgument:&amp;info atIndex:<span class=\"hljs-number\">1</span>];\n    &#125;\n    \n\t<span class=\"hljs-keyword\">void</span> *argBuf = <span class=\"hljs-literal\">NULL</span>;\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-built_in\">NSUInteger</span> idx = <span class=\"hljs-number\">2</span>; idx &lt; numberOfArguments; idx++) &#123;\n        <span class=\"hljs-keyword\">const</span> <span class=\"hljs-keyword\">char</span> *type = [originalInvocation.methodSignature getArgumentTypeAtIndex:idx];\n\t\t<span class=\"hljs-built_in\">NSUInteger</span> argSize;\n\t\t<span class=\"hljs-built_in\">NSGetSizeAndAlignment</span>(type, &amp;argSize, <span class=\"hljs-literal\">NULL</span>);\n        \n\t\t<span class=\"hljs-keyword\">if</span> (!(argBuf = reallocf(argBuf, argSize))) &#123;\n            AspectLogError(<span class=\"hljs-string\">@&quot;Failed to allocate memory for block invocation.&quot;</span>);\n\t\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">NO</span>;\n\t\t&#125;\n        \n\t\t[originalInvocation getArgument:argBuf atIndex:idx];\n\t\t[blockInvocation setArgument:argBuf atIndex:idx];\n    &#125;\n    \n    [blockInvocation invokeWithTarget:<span class=\"hljs-keyword\">self</span>.block];\n    \n    <span class=\"hljs-keyword\">if</span> (argBuf != <span class=\"hljs-literal\">NULL</span>) &#123;\n        free(argBuf);\n    &#125;\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">YES</span>;\n&#125;\n</code></pre>\n\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p><a href=\"https://github.com/steipete/Aspects\">Aspects</a><br><a href=\"https://www.jianshu.com/p/88ce7c4c2b2a\">Runtime编程指南</a></p>\n","site":{"data":{"fluid_static_prefix":{"internal_js":"/js","internal_css":"/css","internal_img":"/img","iconfont":"//at.alicdn.com/t/font_1736178_kmeydafke9r.css","anchor":"https://cdn.staticfile.org/anchor-js/4.2.2/","github_markdown":"https://cdn.staticfile.org/github-markdown-css/4.0.0/","jquery":"https://cdn.staticfile.org/jquery/3.4.1/","bootstrap":"https://cdn.staticfile.org/twitter-bootstrap/4.4.1/","highlightjs":"https://cdn.staticfile.org/highlight.js/10.0.0/","prismjs":"https://cdn.staticfile.org/prism/1.21.0/","tocbot":"https://cdn.staticfile.org/tocbot/4.11.1/","typed":"https://cdn.staticfile.org/typed.js/2.0.11/","fancybox":"https://cdn.staticfile.org/fancybox/3.5.7/","mathjax":"https://cdn.staticfile.org/mathjax/3.0.5/es5/","katex":"https://cdn.staticfile.org/KaTeX/0.11.1/","aplayer":"https://cdn.staticfile.org/aplayer/1.10.1/","busuanzi":"https://busuanzi.ibruce.info/busuanzi/2.3/","clipboard":"https://cdn.staticfile.org/clipboard.js/2.0.6/","mermaid":"https://cdn.staticfile.org/mermaid/8.5.0/","valine":"https://cdn.staticfile.org/valine/1.4.14/","gitalk":"https://cdn.staticfile.org/gitalk/1.6.2/","blueimp_md5":"https://cdn.staticfile.org/blueimp-md5/2.13.0/","disqusjs":"https://cdn.jsdelivr.net/npm/disqusjs@1.0/dist/","hint":"/lib/hint/"},"fluid_config":{"favicon":"/img/favicon.png","apple_touch_icon":"/img/favicon.png","title_join_string":" - ","force_https":false,"code":{"copy_btn":true,"highlight":{"enable":true,"lib":"highlightjs","highlightjs":{"style":"Github Gist","bg_color":false},"prismjs":{"style":"default","preprocess":true}}},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"_","loop":false},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"right","visible":"hover","icon":""},"mouse_click":{"enable":false,"style":"values"}},"dark_mode":{"enable":true,"default":"auto"},"color":{"body_bg_color":"#eee","body_bg_color_dark":"#181c27","navbar_bg_color":"#2f4154","navbar_bg_color_dark":"#1f3144","navbar_text_color":"#fff","navbar_text_color_dark":"#d0d0d0","text_color":"#3c4858","text_color_dark":"#c4c6c9","sec_text_color":"#718096","sec_text_color_dark":"#a7a9ad","post_text_color":"#2c3e50","post_text_color_dark":"#c4c6c9","post_heading_color":"#1a202c","post_heading_color_dark":"#c4c6c9","post_link_color":"#0366d6","post_link_color_dark":"#1589e9","link_hover_color":"#30a9de","link_hover_color_dark":"#30a9de","link_hover_bg_color":"#f8f9fa","link_hover_bg_color_dark":"#364151","board_color":"#fff","board_color_dark":"#252d38"},"font":{"font_size":"16px","font_family":null,"code_font_size":"85%"},"custom_js":null,"custom_css":null,"custom_html":"","web_analytics":{"enable":false,"baidu":null,"google":null,"gtag":null,"tencent":{"sid":null,"cid":null},"woyaola":null,"cnzz":null,"leancloud":{"app_id":null,"app_key":null,"server_url":null}},"lazyload":{"enable":true,"onlypost":false},"daovoice":{"enable":false,"appid":""},"aplayer":{"enable":false,"autoplay":false,"loop":"all","order":"random","theme":"#b7daff","songs":[{"name":"name","artist":"artist","url":"/songs/test.mp3","cover":"/img/cover.jpg"},{"name":"name","artist":"artist","url":"https://...url.mp3","cover":"https://...cover.jpg"}]},"version":{"check":false},"navbar":{"blog_title":"吃面多放葱","ground_glass":{"enable":false,"px":3,"alpha":0.7},"menu":[{"key":"home","link":"/","icon":"iconfont icon-home-fill"},{"key":"category","link":"/categories/","icon":"iconfont icon-category-fill"},{"key":"tag","link":"/tags/","icon":"iconfont icon-tags-fill"},{"key":"about","link":"/about/","icon":"iconfont icon-user-fill"}]},"search":{"enable":true,"path":"/local-search.xml","generate_path":"/local-search.xml","field":"post","content":true},"scroll_down_arrow":{"enable":true,"banner_height_limit":90,"scroll_after_turning_page":true},"banner_parallax":true,"footer":{"statistics":{"enable":false,"source":"busuanzi","pv_format":"总访问量 {} 次","uv_format":"总访客数 {} 人"},"beian":{"enable":false,"icp_text":"京ICP证123456号","police_text":"京公网安备12345678号","police_code":12345678,"police_icon":"/img/police_beian.png"}},"scroll_top_arrow":{"enable":true},"index":{"banner_img":"/img/default.png","banner_img_height":100,"banner_mask_alpha":0.3,"post_default_img":"","slogan":{"enable":true,"text":"像蚂蚁一样工作，像蝴蝶一样生活"},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"category":true,"tag":true}},"page":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3},"post":{"banner_img":"/img/default.png","banner_img_height":70,"banner_mask_alpha":0.3,"meta":{"author":{"enable":false},"date":{"enable":true,"format":"LL a"},"wordcount":{"enable":true,"format":"{} 字"},"min2read":{"enable":true,"format":"{} 分钟","words":100},"views":{"enable":false,"source":"busuanzi","format":"{} 次"}},"updated":{"enable":false,"content":"本文最后更新于：","relative":false},"toc":{"enable":true,"headingSelector":"h1,h2,h3,h4,h5,h6","collapseDepth":0},"copyright":{"enable":true,"content":"本博客所有文章除特别声明外，均采用 <a href=\"https://creativecommons.org/licenses/by-sa/4.0/deed.zh\" rel=\"nofollow noopener\">CC BY-SA 4.0 协议</a> ，转载请注明出处！"},"prev_next":{"enable":true},"custom":{"enable":false,"content":"<img src=\"https://octodex.github.com/images/jetpacktocat.png\" class=\"rounded mx-auto d-block mt-5\" style=\"width:150px; height:150px;\">"},"image_zoom":{"enable":true},"footnote":{"enable":true,"header":""},"math":{"enable":false,"specific":false,"engine":"mathjax"},"mermaid":{"enable":false,"specific":false,"options":{"theme":"default"}},"comments":{"enable":false,"type":"disqus"}},"utterances":{"repo":null,"issue_term":"pathname","label":"utterances","theme":"github-light","theme_dark":"github-dark","crossorigin":"anonymous"},"disqus":{"shortname":null,"disqusjs":false,"apikey":null},"gitalk":{"clientID":null,"clientSecret":null,"repo":null,"owner":null,"admin":["name"],"id":"location.pathname","language":"zh-CN","labels":["Gitalk"],"perPage":10,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true},"valine":{"appid":null,"appkey":null,"placeholder":"说点什么","path":"window.location.pathname","avatar":"retro","meta":["nick","mail","link"],"pageSize":10,"lang":"zh-CN","highlight":false,"recordIP":false,"serverURLs":null},"changyan":{"appid":"","appkey":""},"livere":{"uid":""},"remark42":{"host":"https://remark.haoyizebo.com","site_id":"haoyizebo","max_shown_comments":10,"locale":"zh"},"archive":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null},"category":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"post_limit":10,"order_by":"-length","collapse_depth":0},"tag":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null,"tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"avatar":"/img/avatar.png","name":"蔺国防","introduce":"移动应用开发者，历史文学爱好者","icons":[{"class":"iconfont icon-github-fill","link":"https://github.com","tip":"GitHub"},{"class":"iconfont icon-douban-fill","link":"https://douban.com","tip":"豆瓣"},{"class":"iconfont icon-wechat-fill","qrcode":"/img/favicon.png"}]},"page404":{"banner_img":"/img/default.png","banner_img_height":85,"banner_mask_alpha":0.3,"subtitle":"Page not found"},"links":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"items":[{"title":"Fluid Docs","intro":"主题使用指南","link":"https://hexo.fluid-dev.com/docs/","image":"/img/favicon.png"},{"title":"Fluid Repo","intro":"主题 GitHub 仓库","link":"https://github.com/fluid-dev/hexo-theme-fluid","image":"/img/favicon.png"},{"title":"Fluid Example","intro":"主题操作示例","link":"https://hexo.fluid-dev.com/docs/example/","image":"/img/favicon.png"}]}}}},"excerpt":"","more":"<h2 id=\"AOP简介\"><a href=\"#AOP简介\" class=\"headerlink\" title=\"AOP简介\"></a>AOP简介</h2><p><img src=\"https://upload-images.jianshu.io/upload_images/3340896-1096322e544ec637.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"aop\"></p>\n<p>在软件业，AOP为Aspect Oriented Programming的缩写，意为：面向切面编程，通过预编译方式和运行期动态代理实现程序功能的统一维护的一种技术。AOP是OOP的延续，是软件开发中的一个热点，也是Spring框架中的一个重要内容，是函数式编程的一种衍生范型。利用AOP可以对业务逻辑的各个部分进行隔离，从而使得业务逻辑各部分之间的耦合度降低，提高程序的可重用性，同时提高了开发的效率。</p>\n<h2 id=\"Aspects-简介\"><a href=\"#Aspects-简介\" class=\"headerlink\" title=\"Aspects 简介\"></a>Aspects 简介</h2><p><img src=\"https://upload-images.jianshu.io/upload_images/3340896-cf3f479419055275.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"aspects\"><br>一个轻量的单一的AOP库, 它让我们能够使用 method swizzling 技术 为每个类或者实例对象的方法添加执行代码.</p>\n<h3 id=\"Aspects-在-iOS-开发常用使用场景\"><a href=\"#Aspects-在-iOS-开发常用使用场景\" class=\"headerlink\" title=\"Aspects 在 iOS 开发常用使用场景\"></a>Aspects 在 iOS 开发常用使用场景</h3><ul>\n<li>监测用户点击事件</li>\n<li>记录用户某一页面的留存</li>\n<li>用户使用频率<br>…</li>\n</ul>\n<h3 id=\"示例代码\"><a href=\"#示例代码\" class=\"headerlink\" title=\"示例代码\"></a>示例代码</h3><p>Aspects 能够在调试的时候被用来动态添加日志</p>\n<pre><code class=\"hljs scheme\">[<span class=\"hljs-name\">UIViewController</span> aspect_hookSelector:@selector(<span class=\"hljs-name\">viewWillAppear:</span>) withOptions:AspectPositionAfter usingBlock:^(<span class=\"hljs-name\">id&lt;AspectInfo&gt;</span> aspectInfo, BOOL animated) &#123;\n    NSLog(<span class=\"hljs-name\">@</span><span class=\"hljs-string\">&quot;View Controller %@ will appear animated: %tu&quot;</span>, aspectInfo.instance, animated)<span class=\"hljs-comment\">;</span>\n&#125; error:NULL]<span class=\"hljs-comment\">;</span></code></pre>\n\n<h2 id=\"原理简析\"><a href=\"#原理简析\" class=\"headerlink\" title=\"原理简析\"></a>原理简析</h2><p>讲解原理前我们先熟悉一下<code>Objective-C</code>的消息转发流程</p>\n<h3 id=\"消息转发流程\"><a href=\"#消息转发流程\" class=\"headerlink\" title=\"消息转发流程:\"></a>消息转发流程:</h3><ul>\n<li><code>resolveInstanceMethod:</code><br>当实例对象无法找到 sel 实现时，首先调用此方法，对sel做处理</li>\n<li><code>resolveClassMethod:</code><br>当类对象无法找到 sel 实现时，首先调用此方法，对sel做处理</li>\n<li><code>forwardTargetForSelector:</code><br>sel 仍未处理，接着调用此方法，在这里可以对sel做处理</li>\n<li><code>methodSignatureForSelector:</code><br>sel 仍未处理，runtime会通过<code>methodSigntureForSelector</code>方法尝试获取本次消息调用的具体环境信息，包括消息的参数与返回值类型。并封装成NSInvocation对象。我们可以在<code>forwardInvocation</code>方法内部对该对象作进一步的处理，并使之能够成功的完成消息处理。如果未能成功获取<code>NSInvocation</code>对象，那么程序就会发送<code>doesNotRecognizeSelector</code>消息抛出<code>unrecognized Selector send to xxx</code>的异常</li>\n</ul>\n<h3 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h3><blockquote>\n<p><strong>重要</strong><br>Aspects 利用 <code>Objective-C</code> 的消息转发机制,在对象或类调用<code>selector</code>的时候,直接将其<code>IMP</code>替换为<code>objc_msgForward</code>,从而走消息转发流程,通过hook <code>forwardInvocation:</code>方法,将其<code>IMP</code>替换为自定义的<code>IMP</code>从而实现执行代码的添加和方法的替换.</p>\n</blockquote>\n<h3 id=\"核心代码\"><a href=\"#核心代码\" class=\"headerlink\" title=\"核心代码\"></a>核心代码</h3><ul>\n<li><p>替换selector的IMP,执行 objc_msgForward 函数,直接走消息转发</p>\n<pre><code class=\"hljs reasonml\"><span class=\"hljs-keyword\">if</span> (!aspect<span class=\"hljs-constructor\">_isMsgForwardIMP(<span class=\"hljs-params\">targetMethodIMP</span>)</span>) &#123;\n       ...\n       ...\n       <span class=\"hljs-keyword\">class</span><span class=\"hljs-constructor\">_replaceMethod(<span class=\"hljs-params\">klass</span>, <span class=\"hljs-params\">selector</span>, <span class=\"hljs-params\">aspect_getMsgForwardIMP</span>(<span class=\"hljs-params\">self</span>, <span class=\"hljs-params\">selector</span>)</span>, typeEncoding);\n       <span class=\"hljs-constructor\">AspectLog(@<span class=\"hljs-string\">&quot;Aspects: Installed hook for -[%@ %@].&quot;</span>, <span class=\"hljs-params\">klass</span>, NSStringFromSelector(<span class=\"hljs-params\">selector</span>)</span>);\n   &#125;</code></pre>\n</li>\n<li><p>hook <code>forwardInvocation:</code>方法,将其IMP替换为<code>__ASPECTS_ARE_BEING_CALLED__</code></p>\n</li>\n</ul>\n<pre><code class=\"hljs reasonml\">static NSString *const AspectsForwardInvocationSelectorName = @<span class=\"hljs-string\">&quot;__aspects_forwardInvocation:&quot;</span>;\nstatic void aspect<span class=\"hljs-constructor\">_swizzleForwardInvocation(Class <span class=\"hljs-params\">klass</span>)</span> &#123;\n    <span class=\"hljs-constructor\">NSCParameterAssert(<span class=\"hljs-params\">klass</span>)</span>;\n    <span class=\"hljs-comment\">// If there is no method, replace will act like class_addMethod.</span>\n    IMP originalImplementation = <span class=\"hljs-keyword\">class</span><span class=\"hljs-constructor\">_replaceMethod(<span class=\"hljs-params\">klass</span>, @<span class=\"hljs-params\">selector</span>(<span class=\"hljs-params\">forwardInvocation</span>:)</span>, (IMP)__ASPECTS_ARE_BEING_CALLED__, <span class=\"hljs-string\">&quot;v@:@&quot;</span>);\n    <span class=\"hljs-keyword\">if</span> (originalImplementation) &#123;\n        <span class=\"hljs-keyword\">class</span><span class=\"hljs-constructor\">_addMethod(<span class=\"hljs-params\">klass</span>, NSSelectorFromString(AspectsForwardInvocationSelectorName)</span>, originalImplementation, <span class=\"hljs-string\">&quot;v@:@&quot;</span>);\n    &#125;\n    <span class=\"hljs-constructor\">AspectLog(@<span class=\"hljs-string\">&quot;Aspects: %@ is now aspect aware.&quot;</span>, NSStringFromClass(<span class=\"hljs-params\">klass</span>)</span>);\n&#125;\n</code></pre>\n<ul>\n<li><code>forwardInvocation:</code>方法执行IMP<code>__ASPECTS_ARE_BEING_CALLED__</code></li>\n</ul>\n<pre><code class=\"hljs reasonml\"><span class=\"hljs-comment\">// This is the swizzled forwardInvocation: method.</span>\nstatic void <span class=\"hljs-constructor\">__ASPECTS_ARE_BEING_CALLED__(<span class=\"hljs-params\">__unsafe_unretained</span> NSObject <span class=\"hljs-operator\">*</span><span class=\"hljs-params\">self</span>, SEL <span class=\"hljs-params\">selector</span>, NSInvocation <span class=\"hljs-operator\">*</span><span class=\"hljs-params\">invocation</span>)</span> &#123;\n    \n    ...\n    ...\n\n    <span class=\"hljs-comment\">// Before hooks.</span>\n    aspect<span class=\"hljs-constructor\">_invoke(<span class=\"hljs-params\">classContainer</span>.<span class=\"hljs-params\">beforeAspects</span>, <span class=\"hljs-params\">info</span>)</span>;\n    aspect<span class=\"hljs-constructor\">_invoke(<span class=\"hljs-params\">objectContainer</span>.<span class=\"hljs-params\">beforeAspects</span>, <span class=\"hljs-params\">info</span>)</span>;\n\n    <span class=\"hljs-comment\">// Instead hooks.</span>\n    BOOL respondsToAlias = YES;\n    <span class=\"hljs-keyword\">if</span> (objectContainer.insteadAspects.count<span class=\"hljs-operator\"> || </span>classContainer.insteadAspects.count) &#123;\n        aspect<span class=\"hljs-constructor\">_invoke(<span class=\"hljs-params\">classContainer</span>.<span class=\"hljs-params\">insteadAspects</span>, <span class=\"hljs-params\">info</span>)</span>;\n        aspect<span class=\"hljs-constructor\">_invoke(<span class=\"hljs-params\">objectContainer</span>.<span class=\"hljs-params\">insteadAspects</span>, <span class=\"hljs-params\">info</span>)</span>;\n    &#125;<span class=\"hljs-keyword\">else</span> &#123;\n        Class klass = <span class=\"hljs-keyword\">object</span><span class=\"hljs-constructor\">_getClass(<span class=\"hljs-params\">invocation</span>.<span class=\"hljs-params\">target</span>)</span>;\n        <span class=\"hljs-keyword\">do</span> &#123;\n            <span class=\"hljs-keyword\">if</span> ((respondsToAlias = <span class=\"hljs-literal\">[<span class=\"hljs-identifier\">klass</span> <span class=\"hljs-identifier\">instancesRespondToSelector</span>:<span class=\"hljs-identifier\">aliasSelector</span>]</span>)) &#123;\n                <span class=\"hljs-literal\">[<span class=\"hljs-identifier\">invocation</span> <span class=\"hljs-identifier\">invoke</span>]</span>;\n                break;\n            &#125;\n        &#125;<span class=\"hljs-keyword\">while</span> (!respondsToAlias<span class=\"hljs-operator\"> &amp;&amp; </span>(klass = <span class=\"hljs-keyword\">class</span><span class=\"hljs-constructor\">_getSuperclass(<span class=\"hljs-params\">klass</span>)</span>));\n    &#125;\n\n    <span class=\"hljs-comment\">// After hooks.</span>\n    aspect<span class=\"hljs-constructor\">_invoke(<span class=\"hljs-params\">classContainer</span>.<span class=\"hljs-params\">afterAspects</span>, <span class=\"hljs-params\">info</span>)</span>;\n    aspect<span class=\"hljs-constructor\">_invoke(<span class=\"hljs-params\">objectContainer</span>.<span class=\"hljs-params\">afterAspects</span>, <span class=\"hljs-params\">info</span>)</span>;\n\n    ...\n    ...\n&#125;</code></pre>\n\n<ul>\n<li>在上一步中会根据<code>AspectOptions</code>按顺序执行block内代码，内部<code>forwardInvocation</code>方法调用时获取<code>NSInvocation</code>信息，然后用该信息生成一个参数相同的<code>blockInvocation</code>，再调用<code>invokeWithTarget</code>方法，来执行block内代码</li>\n</ul>\n<pre><code class=\"hljs objectivec\">- (<span class=\"hljs-built_in\">BOOL</span>)invokeWithInfo:(<span class=\"hljs-keyword\">id</span>&lt;AspectInfo&gt;)info &#123;\n    <span class=\"hljs-built_in\">NSInvocation</span> *blockInvocation = [<span class=\"hljs-built_in\">NSInvocation</span> invocationWithMethodSignature:<span class=\"hljs-keyword\">self</span>.blockSignature];\n    <span class=\"hljs-built_in\">NSInvocation</span> *originalInvocation = info.originalInvocation;\n    <span class=\"hljs-built_in\">NSUInteger</span> numberOfArguments = <span class=\"hljs-keyword\">self</span>.blockSignature.numberOfArguments;\n\n    <span class=\"hljs-comment\">// Be extra paranoid. We already check that on hook registration.</span>\n    <span class=\"hljs-keyword\">if</span> (numberOfArguments &gt; originalInvocation.methodSignature.numberOfArguments) &#123;\n        AspectLogError(<span class=\"hljs-string\">@&quot;Block has too many arguments. Not calling %@&quot;</span>, info);\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">NO</span>;\n    &#125;\n\n    <span class=\"hljs-comment\">// The `self` of the block will be the AspectInfo. Optional.</span>\n    <span class=\"hljs-keyword\">if</span> (numberOfArguments &gt; <span class=\"hljs-number\">1</span>) &#123;\n        [blockInvocation setArgument:&amp;info atIndex:<span class=\"hljs-number\">1</span>];\n    &#125;\n    \n\t<span class=\"hljs-keyword\">void</span> *argBuf = <span class=\"hljs-literal\">NULL</span>;\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-built_in\">NSUInteger</span> idx = <span class=\"hljs-number\">2</span>; idx &lt; numberOfArguments; idx++) &#123;\n        <span class=\"hljs-keyword\">const</span> <span class=\"hljs-keyword\">char</span> *type = [originalInvocation.methodSignature getArgumentTypeAtIndex:idx];\n\t\t<span class=\"hljs-built_in\">NSUInteger</span> argSize;\n\t\t<span class=\"hljs-built_in\">NSGetSizeAndAlignment</span>(type, &amp;argSize, <span class=\"hljs-literal\">NULL</span>);\n        \n\t\t<span class=\"hljs-keyword\">if</span> (!(argBuf = reallocf(argBuf, argSize))) &#123;\n            AspectLogError(<span class=\"hljs-string\">@&quot;Failed to allocate memory for block invocation.&quot;</span>);\n\t\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">NO</span>;\n\t\t&#125;\n        \n\t\t[originalInvocation getArgument:argBuf atIndex:idx];\n\t\t[blockInvocation setArgument:argBuf atIndex:idx];\n    &#125;\n    \n    [blockInvocation invokeWithTarget:<span class=\"hljs-keyword\">self</span>.block];\n    \n    <span class=\"hljs-keyword\">if</span> (argBuf != <span class=\"hljs-literal\">NULL</span>) &#123;\n        free(argBuf);\n    &#125;\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">YES</span>;\n&#125;\n</code></pre>\n\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p><a href=\"https://github.com/steipete/Aspects\">Aspects</a><br><a href=\"https://www.jianshu.com/p/88ce7c4c2b2a\">Runtime编程指南</a></p>\n"},{"title":"CALayer及CAAnimation","date":"2018-04-27T07:39:00.000Z","_content":"## Layer\n- Layer可以绘制的动画\n![动画类型](http://upload-images.jianshu.io/upload_images/3340896-901e4849bf35fa8c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n- CALayer position 和 anchorpoint\n\n![positon属性](http://upload-images.jianshu.io/upload_images/3340896-64a48bd8dd7ba3f6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![锚点属性](http://upload-images.jianshu.io/upload_images/3340896-38913e949dcbfeac.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n       - anchorpoint 基于单位坐标系,默认 (0.5,0.5)\n       - position    基于点坐标系,具体位置由锚点决定\n    frame 属性是在 positon和bounds属性下衍生出来的,frame相对于父类坐标系,bounds定义自身坐标系\n\n![锚点位置与postion的变化](http://upload-images.jianshu.io/upload_images/3340896-d58622e2018f19a8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![锚点如何影响图层变化](http://upload-images.jianshu.io/upload_images/3340896-1dde00133bac2ba9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n![图层变化矩阵数据配置](http://upload-images.jianshu.io/upload_images/3340896-54966cd3653e1120.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n- Layer Tree 分类\n\n    - 模型树(Model Tree)\n    - 显示树(Presentation Tree)\n    - 渲染树(Render Tree)\n\n- 图层(CALayer) 添加动画(CAAnimation)\n动画基于操作图层对象来展示效果,通过下列方法来给图层添加动画\n```\n- (void)addAnimation:(CAAnimation *)anim \n              forKey:(NSString *)key;\n```\n\n## CAAnimation\n- CoreAnimation层级\n![层级](http://upload-images.jianshu.io/upload_images/3340896-f0db3c26d671677e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n- CoreAnimation如何绘制内容\n![绘制流程](http://upload-images.jianshu.io/upload_images/3340896-ac2ef3c4d239d1aa.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n- CoreAnimation API\n\n```\n CAAnimationGroup `animations`\n CAPropertyAnimation `keypath`\n      - CABasicAnimation `fromValue` `toValue`\n      - CAKeyframeAnimation `values` `path` `keyTimes`\n CATransition `type` `subType` `startProgress` `endProgress`\n```\n\n- 关于动画时间的控制\n\n动画暂停\n\n```\n//根据全局时间获取本地时间\nCFTimeInterval pausedTime = [layer convertTime:CACurrentMediaTime() fromLayer:nil];\n//将图层动画速度设为0\nlayer.speed = 0.0;\n//根据暂停的本地时间设置偏移\nlayer.timerOffset = pausedTime;\n```\n动画恢复\n\n```\n//得到偏移时间\nCFTimeInterval pausedTime = layer.timeOffset;\n\n//恢复图层的速度\nlayer.speed = 1.0;\n\n//设置timerOffset\nlayer.timeOffset = 0.0;\n\n//设值为0,进行时间转换\nlayer.beginTime = 0.0;\n\n//beginTime在当前时间的左侧\nCFTimeInterval timeSincePause = [layer convertTime:CACurrentMediaTime() fromLayer:nil] - puasedTime;\nlayer.beginTime = timeSincePause;\n\n```\n```\n//动画恢复的时间点,要求:\n1.beginTime = currentTime - timeOffset\n2.timeOffset = 0\n```\n\n## CAMediaTiming Delegate\nCAAimation, CALayer 都遵循 CAMediatiming 协议,都包含下列属性 \n`begintTime` `speed` `timeoffset` `duration` `repeatDuration` `repeatCount` `fillmode`\n\n![CAMediaTiming的理解](https://upload-images.jianshu.io/upload_images/3340896-2a7edb149c839e71.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n## 参考资料\n\n[Core Animation Programming Guide](https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/CoreAnimation_guide/Introduction/Introduction.html#//apple_ref/doc/uid/TP40004514)\n\n[xiaolinyeyi](https://blog.csdn.net/xiaolinyeyi/article/details/51736907)\n\n[DH's Den](https://blog.csdn.net/u013282174/article/details/51605403)\n","source":"_posts/iOS/CALayer-和-CAAnimation.md","raw":"\n---\ntitle:  CALayer及CAAnimation \ndate:  2018-04-27 15:39\ncategories:\n- iOS\ntags: \n- CoreAnimation \n---\n## Layer\n- Layer可以绘制的动画\n![动画类型](http://upload-images.jianshu.io/upload_images/3340896-901e4849bf35fa8c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n- CALayer position 和 anchorpoint\n\n![positon属性](http://upload-images.jianshu.io/upload_images/3340896-64a48bd8dd7ba3f6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![锚点属性](http://upload-images.jianshu.io/upload_images/3340896-38913e949dcbfeac.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n       - anchorpoint 基于单位坐标系,默认 (0.5,0.5)\n       - position    基于点坐标系,具体位置由锚点决定\n    frame 属性是在 positon和bounds属性下衍生出来的,frame相对于父类坐标系,bounds定义自身坐标系\n\n![锚点位置与postion的变化](http://upload-images.jianshu.io/upload_images/3340896-d58622e2018f19a8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![锚点如何影响图层变化](http://upload-images.jianshu.io/upload_images/3340896-1dde00133bac2ba9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n![图层变化矩阵数据配置](http://upload-images.jianshu.io/upload_images/3340896-54966cd3653e1120.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n- Layer Tree 分类\n\n    - 模型树(Model Tree)\n    - 显示树(Presentation Tree)\n    - 渲染树(Render Tree)\n\n- 图层(CALayer) 添加动画(CAAnimation)\n动画基于操作图层对象来展示效果,通过下列方法来给图层添加动画\n```\n- (void)addAnimation:(CAAnimation *)anim \n              forKey:(NSString *)key;\n```\n\n## CAAnimation\n- CoreAnimation层级\n![层级](http://upload-images.jianshu.io/upload_images/3340896-f0db3c26d671677e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n- CoreAnimation如何绘制内容\n![绘制流程](http://upload-images.jianshu.io/upload_images/3340896-ac2ef3c4d239d1aa.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n- CoreAnimation API\n\n```\n CAAnimationGroup `animations`\n CAPropertyAnimation `keypath`\n      - CABasicAnimation `fromValue` `toValue`\n      - CAKeyframeAnimation `values` `path` `keyTimes`\n CATransition `type` `subType` `startProgress` `endProgress`\n```\n\n- 关于动画时间的控制\n\n动画暂停\n\n```\n//根据全局时间获取本地时间\nCFTimeInterval pausedTime = [layer convertTime:CACurrentMediaTime() fromLayer:nil];\n//将图层动画速度设为0\nlayer.speed = 0.0;\n//根据暂停的本地时间设置偏移\nlayer.timerOffset = pausedTime;\n```\n动画恢复\n\n```\n//得到偏移时间\nCFTimeInterval pausedTime = layer.timeOffset;\n\n//恢复图层的速度\nlayer.speed = 1.0;\n\n//设置timerOffset\nlayer.timeOffset = 0.0;\n\n//设值为0,进行时间转换\nlayer.beginTime = 0.0;\n\n//beginTime在当前时间的左侧\nCFTimeInterval timeSincePause = [layer convertTime:CACurrentMediaTime() fromLayer:nil] - puasedTime;\nlayer.beginTime = timeSincePause;\n\n```\n```\n//动画恢复的时间点,要求:\n1.beginTime = currentTime - timeOffset\n2.timeOffset = 0\n```\n\n## CAMediaTiming Delegate\nCAAimation, CALayer 都遵循 CAMediatiming 协议,都包含下列属性 \n`begintTime` `speed` `timeoffset` `duration` `repeatDuration` `repeatCount` `fillmode`\n\n![CAMediaTiming的理解](https://upload-images.jianshu.io/upload_images/3340896-2a7edb149c839e71.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n## 参考资料\n\n[Core Animation Programming Guide](https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/CoreAnimation_guide/Introduction/Introduction.html#//apple_ref/doc/uid/TP40004514)\n\n[xiaolinyeyi](https://blog.csdn.net/xiaolinyeyi/article/details/51736907)\n\n[DH's Den](https://blog.csdn.net/u013282174/article/details/51605403)\n","slug":"iOS/CALayer-和-CAAnimation","published":1,"updated":"2020-09-27T10:38:10.129Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgq6gnws001ft29kcbnu4vir","content":"<h2 id=\"Layer\"><a href=\"#Layer\" class=\"headerlink\" title=\"Layer\"></a>Layer</h2><ul>\n<li><p>Layer可以绘制的动画<br><img src=\"http://upload-images.jianshu.io/upload_images/3340896-901e4849bf35fa8c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"动画类型\"></p>\n</li>\n<li><p>CALayer position 和 anchorpoint</p>\n</li>\n</ul>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/3340896-64a48bd8dd7ba3f6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"positon属性\"></p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/3340896-38913e949dcbfeac.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"锚点属性\"></p>\n<pre><code>   - anchorpoint 基于单位坐标系,默认 (0.5,0.5)\n   - position    基于点坐标系,具体位置由锚点决定\nframe 属性是在 positon和bounds属性下衍生出来的,frame相对于父类坐标系,bounds定义自身坐标系</code></pre>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/3340896-d58622e2018f19a8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"锚点位置与postion的变化\"></p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/3340896-1dde00133bac2ba9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"锚点如何影响图层变化\"></p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/3340896-54966cd3653e1120.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"图层变化矩阵数据配置\"></p>\n<ul>\n<li><p>Layer Tree 分类</p>\n<ul>\n<li>模型树(Model Tree)</li>\n<li>显示树(Presentation Tree)</li>\n<li>渲染树(Render Tree)</li>\n</ul>\n</li>\n<li><p>图层(CALayer) 添加动画(CAAnimation)<br>动画基于操作图层对象来展示效果,通过下列方法来给图层添加动画</p>\n<pre><code class=\"hljs erlang\">- <span class=\"hljs-params\">(void)</span>addAnimation:<span class=\"hljs-params\">(CAAnimation *)</span>anim \n              forKey:<span class=\"hljs-params\">(NSString *)</span>key;</code></pre>\n\n</li>\n</ul>\n<h2 id=\"CAAnimation\"><a href=\"#CAAnimation\" class=\"headerlink\" title=\"CAAnimation\"></a>CAAnimation</h2><ul>\n<li><p>CoreAnimation层级<br><img src=\"http://upload-images.jianshu.io/upload_images/3340896-f0db3c26d671677e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"层级\"></p>\n</li>\n<li><p>CoreAnimation如何绘制内容<br><img src=\"http://upload-images.jianshu.io/upload_images/3340896-ac2ef3c4d239d1aa.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"绘制流程\"></p>\n</li>\n<li><p>CoreAnimation API</p>\n</li>\n</ul>\n<pre><code class=\"hljs autohotkey\">CAAnimationGroup `animations`\nCAPropertyAnimation `keypath`\n     - CABasicAnimation `fromValue` `toValue`\n     - CAKeyframeAnimation `values` `path` `keyTimes`\nCATransition `type` `subType` `startProgress` `endProgress`</code></pre>\n\n<ul>\n<li>关于动画时间的控制</li>\n</ul>\n<p>动画暂停</p>\n<pre><code class=\"hljs gml\"><span class=\"hljs-comment\">//根据全局时间获取本地时间</span>\nCFTimeInterval pausedTime = [<span class=\"hljs-symbol\">layer</span> convertTime:CACurrentMediaTime() fromLayer:nil];\n<span class=\"hljs-comment\">//将图层动画速度设为0</span>\n<span class=\"hljs-symbol\">layer</span>.<span class=\"hljs-symbol\">speed</span> = <span class=\"hljs-number\">0.0</span>;\n<span class=\"hljs-comment\">//根据暂停的本地时间设置偏移</span>\n<span class=\"hljs-symbol\">layer</span>.timerOffset = pausedTime;</code></pre>\n<p>动画恢复</p>\n<pre><code class=\"hljs gml\"><span class=\"hljs-comment\">//得到偏移时间</span>\nCFTimeInterval pausedTime = <span class=\"hljs-symbol\">layer</span>.timeOffset;\n\n<span class=\"hljs-comment\">//恢复图层的速度</span>\n<span class=\"hljs-symbol\">layer</span>.<span class=\"hljs-symbol\">speed</span> = <span class=\"hljs-number\">1.0</span>;\n\n<span class=\"hljs-comment\">//设置timerOffset</span>\n<span class=\"hljs-symbol\">layer</span>.timeOffset = <span class=\"hljs-number\">0.0</span>;\n\n<span class=\"hljs-comment\">//设值为0,进行时间转换</span>\n<span class=\"hljs-symbol\">layer</span>.beginTime = <span class=\"hljs-number\">0.0</span>;\n\n<span class=\"hljs-comment\">//beginTime在当前时间的左侧</span>\nCFTimeInterval timeSincePause = [<span class=\"hljs-symbol\">layer</span> convertTime:CACurrentMediaTime() fromLayer:nil] - puasedTime;\n<span class=\"hljs-symbol\">layer</span>.beginTime = timeSincePause;\n</code></pre>\n<pre><code class=\"hljs angelscript\"><span class=\"hljs-comment\">//动画恢复的时间点,要求:</span>\n<span class=\"hljs-number\">1.</span>beginTime = currentTime - timeOffset\n<span class=\"hljs-number\">2.</span>timeOffset = <span class=\"hljs-number\">0</span></code></pre>\n\n<h2 id=\"CAMediaTiming-Delegate\"><a href=\"#CAMediaTiming-Delegate\" class=\"headerlink\" title=\"CAMediaTiming Delegate\"></a>CAMediaTiming Delegate</h2><p>CAAimation, CALayer 都遵循 CAMediatiming 协议,都包含下列属性<br><code>begintTime</code> <code>speed</code> <code>timeoffset</code> <code>duration</code> <code>repeatDuration</code> <code>repeatCount</code> <code>fillmode</code></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/3340896-2a7edb149c839e71.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"CAMediaTiming的理解\"></p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p><a href=\"https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/CoreAnimation_guide/Introduction/Introduction.html#//apple_ref/doc/uid/TP40004514\">Core Animation Programming Guide</a></p>\n<p><a href=\"https://blog.csdn.net/xiaolinyeyi/article/details/51736907\">xiaolinyeyi</a></p>\n<p><a href=\"https://blog.csdn.net/u013282174/article/details/51605403\">DH’s Den</a></p>\n","site":{"data":{"fluid_static_prefix":{"internal_js":"/js","internal_css":"/css","internal_img":"/img","iconfont":"//at.alicdn.com/t/font_1736178_kmeydafke9r.css","anchor":"https://cdn.staticfile.org/anchor-js/4.2.2/","github_markdown":"https://cdn.staticfile.org/github-markdown-css/4.0.0/","jquery":"https://cdn.staticfile.org/jquery/3.4.1/","bootstrap":"https://cdn.staticfile.org/twitter-bootstrap/4.4.1/","highlightjs":"https://cdn.staticfile.org/highlight.js/10.0.0/","prismjs":"https://cdn.staticfile.org/prism/1.21.0/","tocbot":"https://cdn.staticfile.org/tocbot/4.11.1/","typed":"https://cdn.staticfile.org/typed.js/2.0.11/","fancybox":"https://cdn.staticfile.org/fancybox/3.5.7/","mathjax":"https://cdn.staticfile.org/mathjax/3.0.5/es5/","katex":"https://cdn.staticfile.org/KaTeX/0.11.1/","aplayer":"https://cdn.staticfile.org/aplayer/1.10.1/","busuanzi":"https://busuanzi.ibruce.info/busuanzi/2.3/","clipboard":"https://cdn.staticfile.org/clipboard.js/2.0.6/","mermaid":"https://cdn.staticfile.org/mermaid/8.5.0/","valine":"https://cdn.staticfile.org/valine/1.4.14/","gitalk":"https://cdn.staticfile.org/gitalk/1.6.2/","blueimp_md5":"https://cdn.staticfile.org/blueimp-md5/2.13.0/","disqusjs":"https://cdn.jsdelivr.net/npm/disqusjs@1.0/dist/","hint":"/lib/hint/"},"fluid_config":{"favicon":"/img/favicon.png","apple_touch_icon":"/img/favicon.png","title_join_string":" - ","force_https":false,"code":{"copy_btn":true,"highlight":{"enable":true,"lib":"highlightjs","highlightjs":{"style":"Github Gist","bg_color":false},"prismjs":{"style":"default","preprocess":true}}},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"_","loop":false},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"right","visible":"hover","icon":""},"mouse_click":{"enable":false,"style":"values"}},"dark_mode":{"enable":true,"default":"auto"},"color":{"body_bg_color":"#eee","body_bg_color_dark":"#181c27","navbar_bg_color":"#2f4154","navbar_bg_color_dark":"#1f3144","navbar_text_color":"#fff","navbar_text_color_dark":"#d0d0d0","text_color":"#3c4858","text_color_dark":"#c4c6c9","sec_text_color":"#718096","sec_text_color_dark":"#a7a9ad","post_text_color":"#2c3e50","post_text_color_dark":"#c4c6c9","post_heading_color":"#1a202c","post_heading_color_dark":"#c4c6c9","post_link_color":"#0366d6","post_link_color_dark":"#1589e9","link_hover_color":"#30a9de","link_hover_color_dark":"#30a9de","link_hover_bg_color":"#f8f9fa","link_hover_bg_color_dark":"#364151","board_color":"#fff","board_color_dark":"#252d38"},"font":{"font_size":"16px","font_family":null,"code_font_size":"85%"},"custom_js":null,"custom_css":null,"custom_html":"","web_analytics":{"enable":false,"baidu":null,"google":null,"gtag":null,"tencent":{"sid":null,"cid":null},"woyaola":null,"cnzz":null,"leancloud":{"app_id":null,"app_key":null,"server_url":null}},"lazyload":{"enable":true,"onlypost":false},"daovoice":{"enable":false,"appid":""},"aplayer":{"enable":false,"autoplay":false,"loop":"all","order":"random","theme":"#b7daff","songs":[{"name":"name","artist":"artist","url":"/songs/test.mp3","cover":"/img/cover.jpg"},{"name":"name","artist":"artist","url":"https://...url.mp3","cover":"https://...cover.jpg"}]},"version":{"check":false},"navbar":{"blog_title":"吃面多放葱","ground_glass":{"enable":false,"px":3,"alpha":0.7},"menu":[{"key":"home","link":"/","icon":"iconfont icon-home-fill"},{"key":"category","link":"/categories/","icon":"iconfont icon-category-fill"},{"key":"tag","link":"/tags/","icon":"iconfont icon-tags-fill"},{"key":"about","link":"/about/","icon":"iconfont icon-user-fill"}]},"search":{"enable":true,"path":"/local-search.xml","generate_path":"/local-search.xml","field":"post","content":true},"scroll_down_arrow":{"enable":true,"banner_height_limit":90,"scroll_after_turning_page":true},"banner_parallax":true,"footer":{"statistics":{"enable":false,"source":"busuanzi","pv_format":"总访问量 {} 次","uv_format":"总访客数 {} 人"},"beian":{"enable":false,"icp_text":"京ICP证123456号","police_text":"京公网安备12345678号","police_code":12345678,"police_icon":"/img/police_beian.png"}},"scroll_top_arrow":{"enable":true},"index":{"banner_img":"/img/default.png","banner_img_height":100,"banner_mask_alpha":0.3,"post_default_img":"","slogan":{"enable":true,"text":"像蚂蚁一样工作，像蝴蝶一样生活"},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"category":true,"tag":true}},"page":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3},"post":{"banner_img":"/img/default.png","banner_img_height":70,"banner_mask_alpha":0.3,"meta":{"author":{"enable":false},"date":{"enable":true,"format":"LL a"},"wordcount":{"enable":true,"format":"{} 字"},"min2read":{"enable":true,"format":"{} 分钟","words":100},"views":{"enable":false,"source":"busuanzi","format":"{} 次"}},"updated":{"enable":false,"content":"本文最后更新于：","relative":false},"toc":{"enable":true,"headingSelector":"h1,h2,h3,h4,h5,h6","collapseDepth":0},"copyright":{"enable":true,"content":"本博客所有文章除特别声明外，均采用 <a href=\"https://creativecommons.org/licenses/by-sa/4.0/deed.zh\" rel=\"nofollow noopener\">CC BY-SA 4.0 协议</a> ，转载请注明出处！"},"prev_next":{"enable":true},"custom":{"enable":false,"content":"<img src=\"https://octodex.github.com/images/jetpacktocat.png\" class=\"rounded mx-auto d-block mt-5\" style=\"width:150px; height:150px;\">"},"image_zoom":{"enable":true},"footnote":{"enable":true,"header":""},"math":{"enable":false,"specific":false,"engine":"mathjax"},"mermaid":{"enable":false,"specific":false,"options":{"theme":"default"}},"comments":{"enable":false,"type":"disqus"}},"utterances":{"repo":null,"issue_term":"pathname","label":"utterances","theme":"github-light","theme_dark":"github-dark","crossorigin":"anonymous"},"disqus":{"shortname":null,"disqusjs":false,"apikey":null},"gitalk":{"clientID":null,"clientSecret":null,"repo":null,"owner":null,"admin":["name"],"id":"location.pathname","language":"zh-CN","labels":["Gitalk"],"perPage":10,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true},"valine":{"appid":null,"appkey":null,"placeholder":"说点什么","path":"window.location.pathname","avatar":"retro","meta":["nick","mail","link"],"pageSize":10,"lang":"zh-CN","highlight":false,"recordIP":false,"serverURLs":null},"changyan":{"appid":"","appkey":""},"livere":{"uid":""},"remark42":{"host":"https://remark.haoyizebo.com","site_id":"haoyizebo","max_shown_comments":10,"locale":"zh"},"archive":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null},"category":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"post_limit":10,"order_by":"-length","collapse_depth":0},"tag":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null,"tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"avatar":"/img/avatar.png","name":"蔺国防","introduce":"移动应用开发者，历史文学爱好者","icons":[{"class":"iconfont icon-github-fill","link":"https://github.com","tip":"GitHub"},{"class":"iconfont icon-douban-fill","link":"https://douban.com","tip":"豆瓣"},{"class":"iconfont icon-wechat-fill","qrcode":"/img/favicon.png"}]},"page404":{"banner_img":"/img/default.png","banner_img_height":85,"banner_mask_alpha":0.3,"subtitle":"Page not found"},"links":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"items":[{"title":"Fluid Docs","intro":"主题使用指南","link":"https://hexo.fluid-dev.com/docs/","image":"/img/favicon.png"},{"title":"Fluid Repo","intro":"主题 GitHub 仓库","link":"https://github.com/fluid-dev/hexo-theme-fluid","image":"/img/favicon.png"},{"title":"Fluid Example","intro":"主题操作示例","link":"https://hexo.fluid-dev.com/docs/example/","image":"/img/favicon.png"}]}}}},"excerpt":"","more":"<h2 id=\"Layer\"><a href=\"#Layer\" class=\"headerlink\" title=\"Layer\"></a>Layer</h2><ul>\n<li><p>Layer可以绘制的动画<br><img src=\"http://upload-images.jianshu.io/upload_images/3340896-901e4849bf35fa8c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"动画类型\"></p>\n</li>\n<li><p>CALayer position 和 anchorpoint</p>\n</li>\n</ul>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/3340896-64a48bd8dd7ba3f6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"positon属性\"></p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/3340896-38913e949dcbfeac.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"锚点属性\"></p>\n<pre><code>   - anchorpoint 基于单位坐标系,默认 (0.5,0.5)\n   - position    基于点坐标系,具体位置由锚点决定\nframe 属性是在 positon和bounds属性下衍生出来的,frame相对于父类坐标系,bounds定义自身坐标系</code></pre>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/3340896-d58622e2018f19a8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"锚点位置与postion的变化\"></p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/3340896-1dde00133bac2ba9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"锚点如何影响图层变化\"></p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/3340896-54966cd3653e1120.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"图层变化矩阵数据配置\"></p>\n<ul>\n<li><p>Layer Tree 分类</p>\n<ul>\n<li>模型树(Model Tree)</li>\n<li>显示树(Presentation Tree)</li>\n<li>渲染树(Render Tree)</li>\n</ul>\n</li>\n<li><p>图层(CALayer) 添加动画(CAAnimation)<br>动画基于操作图层对象来展示效果,通过下列方法来给图层添加动画</p>\n<pre><code class=\"hljs erlang\">- <span class=\"hljs-params\">(void)</span>addAnimation:<span class=\"hljs-params\">(CAAnimation *)</span>anim \n              forKey:<span class=\"hljs-params\">(NSString *)</span>key;</code></pre>\n\n</li>\n</ul>\n<h2 id=\"CAAnimation\"><a href=\"#CAAnimation\" class=\"headerlink\" title=\"CAAnimation\"></a>CAAnimation</h2><ul>\n<li><p>CoreAnimation层级<br><img src=\"http://upload-images.jianshu.io/upload_images/3340896-f0db3c26d671677e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"层级\"></p>\n</li>\n<li><p>CoreAnimation如何绘制内容<br><img src=\"http://upload-images.jianshu.io/upload_images/3340896-ac2ef3c4d239d1aa.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"绘制流程\"></p>\n</li>\n<li><p>CoreAnimation API</p>\n</li>\n</ul>\n<pre><code class=\"hljs autohotkey\">CAAnimationGroup `animations`\nCAPropertyAnimation `keypath`\n     - CABasicAnimation `fromValue` `toValue`\n     - CAKeyframeAnimation `values` `path` `keyTimes`\nCATransition `type` `subType` `startProgress` `endProgress`</code></pre>\n\n<ul>\n<li>关于动画时间的控制</li>\n</ul>\n<p>动画暂停</p>\n<pre><code class=\"hljs gml\"><span class=\"hljs-comment\">//根据全局时间获取本地时间</span>\nCFTimeInterval pausedTime = [<span class=\"hljs-symbol\">layer</span> convertTime:CACurrentMediaTime() fromLayer:nil];\n<span class=\"hljs-comment\">//将图层动画速度设为0</span>\n<span class=\"hljs-symbol\">layer</span>.<span class=\"hljs-symbol\">speed</span> = <span class=\"hljs-number\">0.0</span>;\n<span class=\"hljs-comment\">//根据暂停的本地时间设置偏移</span>\n<span class=\"hljs-symbol\">layer</span>.timerOffset = pausedTime;</code></pre>\n<p>动画恢复</p>\n<pre><code class=\"hljs gml\"><span class=\"hljs-comment\">//得到偏移时间</span>\nCFTimeInterval pausedTime = <span class=\"hljs-symbol\">layer</span>.timeOffset;\n\n<span class=\"hljs-comment\">//恢复图层的速度</span>\n<span class=\"hljs-symbol\">layer</span>.<span class=\"hljs-symbol\">speed</span> = <span class=\"hljs-number\">1.0</span>;\n\n<span class=\"hljs-comment\">//设置timerOffset</span>\n<span class=\"hljs-symbol\">layer</span>.timeOffset = <span class=\"hljs-number\">0.0</span>;\n\n<span class=\"hljs-comment\">//设值为0,进行时间转换</span>\n<span class=\"hljs-symbol\">layer</span>.beginTime = <span class=\"hljs-number\">0.0</span>;\n\n<span class=\"hljs-comment\">//beginTime在当前时间的左侧</span>\nCFTimeInterval timeSincePause = [<span class=\"hljs-symbol\">layer</span> convertTime:CACurrentMediaTime() fromLayer:nil] - puasedTime;\n<span class=\"hljs-symbol\">layer</span>.beginTime = timeSincePause;\n</code></pre>\n<pre><code class=\"hljs angelscript\"><span class=\"hljs-comment\">//动画恢复的时间点,要求:</span>\n<span class=\"hljs-number\">1.</span>beginTime = currentTime - timeOffset\n<span class=\"hljs-number\">2.</span>timeOffset = <span class=\"hljs-number\">0</span></code></pre>\n\n<h2 id=\"CAMediaTiming-Delegate\"><a href=\"#CAMediaTiming-Delegate\" class=\"headerlink\" title=\"CAMediaTiming Delegate\"></a>CAMediaTiming Delegate</h2><p>CAAimation, CALayer 都遵循 CAMediatiming 协议,都包含下列属性<br><code>begintTime</code> <code>speed</code> <code>timeoffset</code> <code>duration</code> <code>repeatDuration</code> <code>repeatCount</code> <code>fillmode</code></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/3340896-2a7edb149c839e71.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"CAMediaTiming的理解\"></p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p><a href=\"https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/CoreAnimation_guide/Introduction/Introduction.html#//apple_ref/doc/uid/TP40004514\">Core Animation Programming Guide</a></p>\n<p><a href=\"https://blog.csdn.net/xiaolinyeyi/article/details/51736907\">xiaolinyeyi</a></p>\n<p><a href=\"https://blog.csdn.net/u013282174/article/details/51605403\">DH’s Den</a></p>\n"},{"title":"CoreGraphics","date":"2019-03-14T07:48:00.000Z","_content":"采用 `Quartz` 高级绘画引擎提供基于路径的绘制,形变,颜色管理,离屏渲染,渐变与阴影,图片数据管理,图片创建,图片蒙版,同样的PDF创建,显示和解析.\n\n###几何数据类型\n[CGFloat](https://developer.apple.com/documentation/coregraphics/cgfloat)\n\n[CGPoint](https://developer.apple.com/documentation/coregraphics/cgpoint)\n\n[CGSize](https://developer.apple.com/documentation/coregraphics/cgsize)\n\n[CGRect](https://developer.apple.com/documentation/coregraphics/cgrect)\n\n[CGVector](https://developer.apple.com/documentation/coregraphics/cgvector)\n\n[CGAffineTransform](https://developer.apple.com/documentation/coregraphics/cgaffinetransform)\n\n### 2D 绘制\n\n[CGContext]()\n\n#### 常用API说明\n\n```\n\n/*构建绘制路径*/\n//在图形环境中创建一个新的空路径\nfunc beginPath()\n//在指定点开始一个新的子路径\nfunc move(to: CGPoint)\n//从当前点添加一条直线到指定点\nfunc addLine(to: CGPoint)\n//根据数组内的点连线,其中数组里的第一个点作为线的初始起点\nfunc addLines(between: [CGPoint])\n//添加一个矩形路径\nfunc addRect(CGRect)\n//添加多个矩形路径\nfunc addRects([CGRect])\n//添加椭圆\nfunc addEllipse(in: CGRect)\n//添加圆\nfunc addArc(center: CGPoint, radius: CGFloat, startAngle: CGFloat, endAngle: CGFloat, clockwise: Bool)\n//三阶贝塞尔曲线\nfunc addCurve(to end: CGPoint, control1: CGPoint, control2: CGPoint)\n//二阶贝塞尔曲线\nfunc addQuadCurve(to end: CGPoint, control: CGPoint)\n//关闭当前的子路径\nfunc closePath()\n\n\n/*绘制当前路径*/\n//沿着当前路径绘制线\nfunc strokePath()\n\n/*绘制形状*/\n//透明\nfunc clear(CGRect)\n//使用填充色在当前的图形状态下填充指定区域\nfunc fill(CGRect)\n//填充多个区域\nfunc fill([CGRect])\n//填充区域内的椭圆形\nfunc fillEllipse(in: CGRect)\n//画指定区域的路径\nfunc stoke(CGRect)\n//画椭圆\nfunc stokeEllipse(in: CGRect)\n//画多条线段\nfunc stokeLineSegments(between: [CGPoint])\n\n/*画渐变和阴影*/\n//直线平滑过渡\nfunc drawLinearGradient(_ gradient: CGGradient, \n                  start startPoint: CGPoint, \n                    end endPoint: CGPoint, \n                options: CGGradientDrawingOptions)\n\n//扇面渐变过渡\nfunc drawRadialGradient(_ gradient: CGGradient, \n            startCenter: CGPoint, \n            startRadius: CGFloat, \n              endCenter: CGPoint, \n              endRadius: CGFloat, \n                options: CGGradientDrawingOptions)               \n            \n/*绘制文字*/\n//文字绘制位置\nvar textPosition: CGPoint\n//设置字符间距\nfunc setCharacterSpacing(CGFloat)\n//设置字体\nfunc setFont(CGFont)\nfunc setFontSize(CGFloat)\nfunc setTextDrawingMode(CGTextDrawingMode)\n\n/*设置填充,描画,和阴影颜色*/\n//填充色\nfunc setFillColor(CGColor)\n//阴影\nfunc setShadow(offset: CGSize, blur: CGFloat)  \n//描画线颜色\nfunc setStokeColor(CGColor)  \n//设置透明度\nfunc setAlpha(CGFloat)\n\n\n/*裁切路径*/   \n//裁切区域内指定矩形\nfunc clip(to: CGRect)\n//裁切区域内多个矩形\nfunc clip(to: [CGRect]) \n//裁切区域内用图片填充\nfunc clip(to: CGRect, mask: CGImage)\n\n\n/*设置路径绘制选项*/\n//是否允许反锯齿\nfunc setAllowAntialiasing(Bool)\n//平滑度\nfunc setFlatness(CGFloat)\n//线帽\nfunc setLineCap(CGLineCap)\n//虚线\nfunc setLineDash(phase: CGFloat, lengths: [CGFloat])\n//线连接处样式\nfunc setLineJoin(CGLineJoin)\n//线宽\nfunc setLineWidth(CGFloat)\n \n/*保存上下文状态*/\nfunc saveGState()\n//保存最新的状态,需要之前保存过一次状态,否则会崩溃\nfunc restoreGState()\n\n\n/*管理图形上下文*/\n//强制立即绘制\nfunc flush()\n//标记窗口上下文需要更新\nfunc synchronize()\n\n/*管理位图*/\n//位图信息\nvar bitmapInfo: CGBitmapInfo\n//像素高\nvar height: Int\n//像素宽\nvar width: Int\n//生成一个CGImage\nfunc makeImage() -> CGImage?\n               \n```\n\n[CGPath](https://developer.apple.com/documentation/coregraphics/cgpath)\n\n[CGMutablePath](https://developer.apple.com/documentation/coregraphics/cgmutablepath)\n\n[CGLayer]()\n\n## 参考资料\n[Core Graphics](https://developer.apple.com/documentation/coregraphics)\n","source":"_posts/iOS/Core-Graphics.md","raw":"---\ntitle:  CoreGraphics \ndate:  2019-03-14 15:48\ncategories:\n- iOS\ntags: \n- CoreGraphics \n---\n采用 `Quartz` 高级绘画引擎提供基于路径的绘制,形变,颜色管理,离屏渲染,渐变与阴影,图片数据管理,图片创建,图片蒙版,同样的PDF创建,显示和解析.\n\n###几何数据类型\n[CGFloat](https://developer.apple.com/documentation/coregraphics/cgfloat)\n\n[CGPoint](https://developer.apple.com/documentation/coregraphics/cgpoint)\n\n[CGSize](https://developer.apple.com/documentation/coregraphics/cgsize)\n\n[CGRect](https://developer.apple.com/documentation/coregraphics/cgrect)\n\n[CGVector](https://developer.apple.com/documentation/coregraphics/cgvector)\n\n[CGAffineTransform](https://developer.apple.com/documentation/coregraphics/cgaffinetransform)\n\n### 2D 绘制\n\n[CGContext]()\n\n#### 常用API说明\n\n```\n\n/*构建绘制路径*/\n//在图形环境中创建一个新的空路径\nfunc beginPath()\n//在指定点开始一个新的子路径\nfunc move(to: CGPoint)\n//从当前点添加一条直线到指定点\nfunc addLine(to: CGPoint)\n//根据数组内的点连线,其中数组里的第一个点作为线的初始起点\nfunc addLines(between: [CGPoint])\n//添加一个矩形路径\nfunc addRect(CGRect)\n//添加多个矩形路径\nfunc addRects([CGRect])\n//添加椭圆\nfunc addEllipse(in: CGRect)\n//添加圆\nfunc addArc(center: CGPoint, radius: CGFloat, startAngle: CGFloat, endAngle: CGFloat, clockwise: Bool)\n//三阶贝塞尔曲线\nfunc addCurve(to end: CGPoint, control1: CGPoint, control2: CGPoint)\n//二阶贝塞尔曲线\nfunc addQuadCurve(to end: CGPoint, control: CGPoint)\n//关闭当前的子路径\nfunc closePath()\n\n\n/*绘制当前路径*/\n//沿着当前路径绘制线\nfunc strokePath()\n\n/*绘制形状*/\n//透明\nfunc clear(CGRect)\n//使用填充色在当前的图形状态下填充指定区域\nfunc fill(CGRect)\n//填充多个区域\nfunc fill([CGRect])\n//填充区域内的椭圆形\nfunc fillEllipse(in: CGRect)\n//画指定区域的路径\nfunc stoke(CGRect)\n//画椭圆\nfunc stokeEllipse(in: CGRect)\n//画多条线段\nfunc stokeLineSegments(between: [CGPoint])\n\n/*画渐变和阴影*/\n//直线平滑过渡\nfunc drawLinearGradient(_ gradient: CGGradient, \n                  start startPoint: CGPoint, \n                    end endPoint: CGPoint, \n                options: CGGradientDrawingOptions)\n\n//扇面渐变过渡\nfunc drawRadialGradient(_ gradient: CGGradient, \n            startCenter: CGPoint, \n            startRadius: CGFloat, \n              endCenter: CGPoint, \n              endRadius: CGFloat, \n                options: CGGradientDrawingOptions)               \n            \n/*绘制文字*/\n//文字绘制位置\nvar textPosition: CGPoint\n//设置字符间距\nfunc setCharacterSpacing(CGFloat)\n//设置字体\nfunc setFont(CGFont)\nfunc setFontSize(CGFloat)\nfunc setTextDrawingMode(CGTextDrawingMode)\n\n/*设置填充,描画,和阴影颜色*/\n//填充色\nfunc setFillColor(CGColor)\n//阴影\nfunc setShadow(offset: CGSize, blur: CGFloat)  \n//描画线颜色\nfunc setStokeColor(CGColor)  \n//设置透明度\nfunc setAlpha(CGFloat)\n\n\n/*裁切路径*/   \n//裁切区域内指定矩形\nfunc clip(to: CGRect)\n//裁切区域内多个矩形\nfunc clip(to: [CGRect]) \n//裁切区域内用图片填充\nfunc clip(to: CGRect, mask: CGImage)\n\n\n/*设置路径绘制选项*/\n//是否允许反锯齿\nfunc setAllowAntialiasing(Bool)\n//平滑度\nfunc setFlatness(CGFloat)\n//线帽\nfunc setLineCap(CGLineCap)\n//虚线\nfunc setLineDash(phase: CGFloat, lengths: [CGFloat])\n//线连接处样式\nfunc setLineJoin(CGLineJoin)\n//线宽\nfunc setLineWidth(CGFloat)\n \n/*保存上下文状态*/\nfunc saveGState()\n//保存最新的状态,需要之前保存过一次状态,否则会崩溃\nfunc restoreGState()\n\n\n/*管理图形上下文*/\n//强制立即绘制\nfunc flush()\n//标记窗口上下文需要更新\nfunc synchronize()\n\n/*管理位图*/\n//位图信息\nvar bitmapInfo: CGBitmapInfo\n//像素高\nvar height: Int\n//像素宽\nvar width: Int\n//生成一个CGImage\nfunc makeImage() -> CGImage?\n               \n```\n\n[CGPath](https://developer.apple.com/documentation/coregraphics/cgpath)\n\n[CGMutablePath](https://developer.apple.com/documentation/coregraphics/cgmutablepath)\n\n[CGLayer]()\n\n## 参考资料\n[Core Graphics](https://developer.apple.com/documentation/coregraphics)\n","slug":"iOS/Core-Graphics","published":1,"updated":"2020-09-27T10:29:23.486Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgq6gnwu001jt29k508p9j98","content":"<p>采用 <code>Quartz</code> 高级绘画引擎提供基于路径的绘制,形变,颜色管理,离屏渲染,渐变与阴影,图片数据管理,图片创建,图片蒙版,同样的PDF创建,显示和解析.</p>\n<p>###几何数据类型<br><a href=\"https://developer.apple.com/documentation/coregraphics/cgfloat\">CGFloat</a></p>\n<p><a href=\"https://developer.apple.com/documentation/coregraphics/cgpoint\">CGPoint</a></p>\n<p><a href=\"https://developer.apple.com/documentation/coregraphics/cgsize\">CGSize</a></p>\n<p><a href=\"https://developer.apple.com/documentation/coregraphics/cgrect\">CGRect</a></p>\n<p><a href=\"https://developer.apple.com/documentation/coregraphics/cgvector\">CGVector</a></p>\n<p><a href=\"https://developer.apple.com/documentation/coregraphics/cgaffinetransform\">CGAffineTransform</a></p>\n<h3 id=\"2D-绘制\"><a href=\"#2D-绘制\" class=\"headerlink\" title=\"2D 绘制\"></a>2D 绘制</h3><p><a href=\"\">CGContext</a></p>\n<h4 id=\"常用API说明\"><a href=\"#常用API说明\" class=\"headerlink\" title=\"常用API说明\"></a>常用API说明</h4><pre><code class=\"hljs swift\">\n<span class=\"hljs-comment\">/*构建绘制路径*/</span>\n<span class=\"hljs-comment\">//在图形环境中创建一个新的空路径</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">beginPath</span><span class=\"hljs-params\">()</span></span>\n<span class=\"hljs-comment\">//在指定点开始一个新的子路径</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">move</span><span class=\"hljs-params\">(to: CGPoint)</span></span>\n<span class=\"hljs-comment\">//从当前点添加一条直线到指定点</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">addLine</span><span class=\"hljs-params\">(to: CGPoint)</span></span>\n<span class=\"hljs-comment\">//根据数组内的点连线,其中数组里的第一个点作为线的初始起点</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">addLines</span><span class=\"hljs-params\">(between: [CGPoint])</span></span>\n<span class=\"hljs-comment\">//添加一个矩形路径</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">addRect</span><span class=\"hljs-params\">(CGRect)</span></span>\n<span class=\"hljs-comment\">//添加多个矩形路径</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">addRects</span><span class=\"hljs-params\">([CGRect])</span></span>\n<span class=\"hljs-comment\">//添加椭圆</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">addEllipse</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">in</span>: CGRect)</span></span>\n<span class=\"hljs-comment\">//添加圆</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">addArc</span><span class=\"hljs-params\">(center: CGPoint, radius: CGFloat, startAngle: CGFloat, endAngle: CGFloat, clockwise: Bool)</span></span>\n<span class=\"hljs-comment\">//三阶贝塞尔曲线</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">addCurve</span><span class=\"hljs-params\">(to end: CGPoint, control1: CGPoint, control2: CGPoint)</span></span>\n<span class=\"hljs-comment\">//二阶贝塞尔曲线</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">addQuadCurve</span><span class=\"hljs-params\">(to end: CGPoint, control: CGPoint)</span></span>\n<span class=\"hljs-comment\">//关闭当前的子路径</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">closePath</span><span class=\"hljs-params\">()</span></span>\n\n\n<span class=\"hljs-comment\">/*绘制当前路径*/</span>\n<span class=\"hljs-comment\">//沿着当前路径绘制线</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">strokePath</span><span class=\"hljs-params\">()</span></span>\n\n<span class=\"hljs-comment\">/*绘制形状*/</span>\n<span class=\"hljs-comment\">//透明</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">clear</span><span class=\"hljs-params\">(CGRect)</span></span>\n<span class=\"hljs-comment\">//使用填充色在当前的图形状态下填充指定区域</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">fill</span><span class=\"hljs-params\">(CGRect)</span></span>\n<span class=\"hljs-comment\">//填充多个区域</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">fill</span><span class=\"hljs-params\">([CGRect])</span></span>\n<span class=\"hljs-comment\">//填充区域内的椭圆形</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">fillEllipse</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">in</span>: CGRect)</span></span>\n<span class=\"hljs-comment\">//画指定区域的路径</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">stoke</span><span class=\"hljs-params\">(CGRect)</span></span>\n<span class=\"hljs-comment\">//画椭圆</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">stokeEllipse</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">in</span>: CGRect)</span></span>\n<span class=\"hljs-comment\">//画多条线段</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">stokeLineSegments</span><span class=\"hljs-params\">(between: [CGPoint])</span></span>\n\n<span class=\"hljs-comment\">/*画渐变和阴影*/</span>\n<span class=\"hljs-comment\">//直线平滑过渡</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">drawLinearGradient</span><span class=\"hljs-params\">(<span class=\"hljs-number\">_</span> gradient: CGGradient, </span></span>\n<span class=\"hljs-function\"><span class=\"hljs-params\">                  start startPoint: CGPoint, </span></span>\n<span class=\"hljs-function\"><span class=\"hljs-params\">                    end endPoint: CGPoint, </span></span>\n<span class=\"hljs-function\"><span class=\"hljs-params\">                options: CGGradientDrawingOptions)</span></span>\n\n<span class=\"hljs-comment\">//扇面渐变过渡</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">drawRadialGradient</span><span class=\"hljs-params\">(<span class=\"hljs-number\">_</span> gradient: CGGradient, </span></span>\n<span class=\"hljs-function\"><span class=\"hljs-params\">            startCenter: CGPoint, </span></span>\n<span class=\"hljs-function\"><span class=\"hljs-params\">            startRadius: CGFloat, </span></span>\n<span class=\"hljs-function\"><span class=\"hljs-params\">              endCenter: CGPoint, </span></span>\n<span class=\"hljs-function\"><span class=\"hljs-params\">              endRadius: CGFloat, </span></span>\n<span class=\"hljs-function\"><span class=\"hljs-params\">                options: CGGradientDrawingOptions)</span></span>               \n            \n<span class=\"hljs-comment\">/*绘制文字*/</span>\n<span class=\"hljs-comment\">//文字绘制位置</span>\n<span class=\"hljs-keyword\">var</span> textPosition: <span class=\"hljs-type\">CGPoint</span>\n<span class=\"hljs-comment\">//设置字符间距</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">setCharacterSpacing</span><span class=\"hljs-params\">(CGFloat)</span></span>\n<span class=\"hljs-comment\">//设置字体</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">setFont</span><span class=\"hljs-params\">(CGFont)</span></span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">setFontSize</span><span class=\"hljs-params\">(CGFloat)</span></span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">setTextDrawingMode</span><span class=\"hljs-params\">(CGTextDrawingMode)</span></span>\n\n<span class=\"hljs-comment\">/*设置填充,描画,和阴影颜色*/</span>\n<span class=\"hljs-comment\">//填充色</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">setFillColor</span><span class=\"hljs-params\">(CGColor)</span></span>\n<span class=\"hljs-comment\">//阴影</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">setShadow</span><span class=\"hljs-params\">(offset: CGSize, blur: CGFloat)</span></span>  \n<span class=\"hljs-comment\">//描画线颜色</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">setStokeColor</span><span class=\"hljs-params\">(CGColor)</span></span>  \n<span class=\"hljs-comment\">//设置透明度</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">setAlpha</span><span class=\"hljs-params\">(CGFloat)</span></span>\n\n\n<span class=\"hljs-comment\">/*裁切路径*/</span>   \n<span class=\"hljs-comment\">//裁切区域内指定矩形</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">clip</span><span class=\"hljs-params\">(to: CGRect)</span></span>\n<span class=\"hljs-comment\">//裁切区域内多个矩形</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">clip</span><span class=\"hljs-params\">(to: [CGRect])</span></span> \n<span class=\"hljs-comment\">//裁切区域内用图片填充</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">clip</span><span class=\"hljs-params\">(to: CGRect, mask: CGImage)</span></span>\n\n\n<span class=\"hljs-comment\">/*设置路径绘制选项*/</span>\n<span class=\"hljs-comment\">//是否允许反锯齿</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">setAllowAntialiasing</span><span class=\"hljs-params\">(Bool)</span></span>\n<span class=\"hljs-comment\">//平滑度</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">setFlatness</span><span class=\"hljs-params\">(CGFloat)</span></span>\n<span class=\"hljs-comment\">//线帽</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">setLineCap</span><span class=\"hljs-params\">(CGLineCap)</span></span>\n<span class=\"hljs-comment\">//虚线</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">setLineDash</span><span class=\"hljs-params\">(phase: CGFloat, lengths: [CGFloat])</span></span>\n<span class=\"hljs-comment\">//线连接处样式</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">setLineJoin</span><span class=\"hljs-params\">(CGLineJoin)</span></span>\n<span class=\"hljs-comment\">//线宽</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">setLineWidth</span><span class=\"hljs-params\">(CGFloat)</span></span>\n \n<span class=\"hljs-comment\">/*保存上下文状态*/</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">saveGState</span><span class=\"hljs-params\">()</span></span>\n<span class=\"hljs-comment\">//保存最新的状态,需要之前保存过一次状态,否则会崩溃</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">restoreGState</span><span class=\"hljs-params\">()</span></span>\n\n\n<span class=\"hljs-comment\">/*管理图形上下文*/</span>\n<span class=\"hljs-comment\">//强制立即绘制</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">flush</span><span class=\"hljs-params\">()</span></span>\n<span class=\"hljs-comment\">//标记窗口上下文需要更新</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">synchronize</span><span class=\"hljs-params\">()</span></span>\n\n<span class=\"hljs-comment\">/*管理位图*/</span>\n<span class=\"hljs-comment\">//位图信息</span>\n<span class=\"hljs-keyword\">var</span> bitmapInfo: <span class=\"hljs-type\">CGBitmapInfo</span>\n<span class=\"hljs-comment\">//像素高</span>\n<span class=\"hljs-keyword\">var</span> height: <span class=\"hljs-type\">Int</span>\n<span class=\"hljs-comment\">//像素宽</span>\n<span class=\"hljs-keyword\">var</span> width: <span class=\"hljs-type\">Int</span>\n<span class=\"hljs-comment\">//生成一个CGImage</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">makeImage</span><span class=\"hljs-params\">()</span></span> -&gt; <span class=\"hljs-type\">CGImage?</span></code></pre>\n\n<p><a href=\"https://developer.apple.com/documentation/coregraphics/cgpath\">CGPath</a></p>\n<p><a href=\"https://developer.apple.com/documentation/coregraphics/cgmutablepath\">CGMutablePath</a></p>\n<p><a href=\"\">CGLayer</a></p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p><a href=\"https://developer.apple.com/documentation/coregraphics\">Core Graphics</a></p>\n","site":{"data":{"fluid_static_prefix":{"internal_js":"/js","internal_css":"/css","internal_img":"/img","iconfont":"//at.alicdn.com/t/font_1736178_kmeydafke9r.css","anchor":"https://cdn.staticfile.org/anchor-js/4.2.2/","github_markdown":"https://cdn.staticfile.org/github-markdown-css/4.0.0/","jquery":"https://cdn.staticfile.org/jquery/3.4.1/","bootstrap":"https://cdn.staticfile.org/twitter-bootstrap/4.4.1/","highlightjs":"https://cdn.staticfile.org/highlight.js/10.0.0/","prismjs":"https://cdn.staticfile.org/prism/1.21.0/","tocbot":"https://cdn.staticfile.org/tocbot/4.11.1/","typed":"https://cdn.staticfile.org/typed.js/2.0.11/","fancybox":"https://cdn.staticfile.org/fancybox/3.5.7/","mathjax":"https://cdn.staticfile.org/mathjax/3.0.5/es5/","katex":"https://cdn.staticfile.org/KaTeX/0.11.1/","aplayer":"https://cdn.staticfile.org/aplayer/1.10.1/","busuanzi":"https://busuanzi.ibruce.info/busuanzi/2.3/","clipboard":"https://cdn.staticfile.org/clipboard.js/2.0.6/","mermaid":"https://cdn.staticfile.org/mermaid/8.5.0/","valine":"https://cdn.staticfile.org/valine/1.4.14/","gitalk":"https://cdn.staticfile.org/gitalk/1.6.2/","blueimp_md5":"https://cdn.staticfile.org/blueimp-md5/2.13.0/","disqusjs":"https://cdn.jsdelivr.net/npm/disqusjs@1.0/dist/","hint":"/lib/hint/"},"fluid_config":{"favicon":"/img/favicon.png","apple_touch_icon":"/img/favicon.png","title_join_string":" - ","force_https":false,"code":{"copy_btn":true,"highlight":{"enable":true,"lib":"highlightjs","highlightjs":{"style":"Github Gist","bg_color":false},"prismjs":{"style":"default","preprocess":true}}},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"_","loop":false},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"right","visible":"hover","icon":""},"mouse_click":{"enable":false,"style":"values"}},"dark_mode":{"enable":true,"default":"auto"},"color":{"body_bg_color":"#eee","body_bg_color_dark":"#181c27","navbar_bg_color":"#2f4154","navbar_bg_color_dark":"#1f3144","navbar_text_color":"#fff","navbar_text_color_dark":"#d0d0d0","text_color":"#3c4858","text_color_dark":"#c4c6c9","sec_text_color":"#718096","sec_text_color_dark":"#a7a9ad","post_text_color":"#2c3e50","post_text_color_dark":"#c4c6c9","post_heading_color":"#1a202c","post_heading_color_dark":"#c4c6c9","post_link_color":"#0366d6","post_link_color_dark":"#1589e9","link_hover_color":"#30a9de","link_hover_color_dark":"#30a9de","link_hover_bg_color":"#f8f9fa","link_hover_bg_color_dark":"#364151","board_color":"#fff","board_color_dark":"#252d38"},"font":{"font_size":"16px","font_family":null,"code_font_size":"85%"},"custom_js":null,"custom_css":null,"custom_html":"","web_analytics":{"enable":false,"baidu":null,"google":null,"gtag":null,"tencent":{"sid":null,"cid":null},"woyaola":null,"cnzz":null,"leancloud":{"app_id":null,"app_key":null,"server_url":null}},"lazyload":{"enable":true,"onlypost":false},"daovoice":{"enable":false,"appid":""},"aplayer":{"enable":false,"autoplay":false,"loop":"all","order":"random","theme":"#b7daff","songs":[{"name":"name","artist":"artist","url":"/songs/test.mp3","cover":"/img/cover.jpg"},{"name":"name","artist":"artist","url":"https://...url.mp3","cover":"https://...cover.jpg"}]},"version":{"check":false},"navbar":{"blog_title":"吃面多放葱","ground_glass":{"enable":false,"px":3,"alpha":0.7},"menu":[{"key":"home","link":"/","icon":"iconfont icon-home-fill"},{"key":"category","link":"/categories/","icon":"iconfont icon-category-fill"},{"key":"tag","link":"/tags/","icon":"iconfont icon-tags-fill"},{"key":"about","link":"/about/","icon":"iconfont icon-user-fill"}]},"search":{"enable":true,"path":"/local-search.xml","generate_path":"/local-search.xml","field":"post","content":true},"scroll_down_arrow":{"enable":true,"banner_height_limit":90,"scroll_after_turning_page":true},"banner_parallax":true,"footer":{"statistics":{"enable":false,"source":"busuanzi","pv_format":"总访问量 {} 次","uv_format":"总访客数 {} 人"},"beian":{"enable":false,"icp_text":"京ICP证123456号","police_text":"京公网安备12345678号","police_code":12345678,"police_icon":"/img/police_beian.png"}},"scroll_top_arrow":{"enable":true},"index":{"banner_img":"/img/default.png","banner_img_height":100,"banner_mask_alpha":0.3,"post_default_img":"","slogan":{"enable":true,"text":"像蚂蚁一样工作，像蝴蝶一样生活"},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"category":true,"tag":true}},"page":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3},"post":{"banner_img":"/img/default.png","banner_img_height":70,"banner_mask_alpha":0.3,"meta":{"author":{"enable":false},"date":{"enable":true,"format":"LL a"},"wordcount":{"enable":true,"format":"{} 字"},"min2read":{"enable":true,"format":"{} 分钟","words":100},"views":{"enable":false,"source":"busuanzi","format":"{} 次"}},"updated":{"enable":false,"content":"本文最后更新于：","relative":false},"toc":{"enable":true,"headingSelector":"h1,h2,h3,h4,h5,h6","collapseDepth":0},"copyright":{"enable":true,"content":"本博客所有文章除特别声明外，均采用 <a href=\"https://creativecommons.org/licenses/by-sa/4.0/deed.zh\" rel=\"nofollow noopener\">CC BY-SA 4.0 协议</a> ，转载请注明出处！"},"prev_next":{"enable":true},"custom":{"enable":false,"content":"<img src=\"https://octodex.github.com/images/jetpacktocat.png\" class=\"rounded mx-auto d-block mt-5\" style=\"width:150px; height:150px;\">"},"image_zoom":{"enable":true},"footnote":{"enable":true,"header":""},"math":{"enable":false,"specific":false,"engine":"mathjax"},"mermaid":{"enable":false,"specific":false,"options":{"theme":"default"}},"comments":{"enable":false,"type":"disqus"}},"utterances":{"repo":null,"issue_term":"pathname","label":"utterances","theme":"github-light","theme_dark":"github-dark","crossorigin":"anonymous"},"disqus":{"shortname":null,"disqusjs":false,"apikey":null},"gitalk":{"clientID":null,"clientSecret":null,"repo":null,"owner":null,"admin":["name"],"id":"location.pathname","language":"zh-CN","labels":["Gitalk"],"perPage":10,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true},"valine":{"appid":null,"appkey":null,"placeholder":"说点什么","path":"window.location.pathname","avatar":"retro","meta":["nick","mail","link"],"pageSize":10,"lang":"zh-CN","highlight":false,"recordIP":false,"serverURLs":null},"changyan":{"appid":"","appkey":""},"livere":{"uid":""},"remark42":{"host":"https://remark.haoyizebo.com","site_id":"haoyizebo","max_shown_comments":10,"locale":"zh"},"archive":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null},"category":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"post_limit":10,"order_by":"-length","collapse_depth":0},"tag":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null,"tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"avatar":"/img/avatar.png","name":"蔺国防","introduce":"移动应用开发者，历史文学爱好者","icons":[{"class":"iconfont icon-github-fill","link":"https://github.com","tip":"GitHub"},{"class":"iconfont icon-douban-fill","link":"https://douban.com","tip":"豆瓣"},{"class":"iconfont icon-wechat-fill","qrcode":"/img/favicon.png"}]},"page404":{"banner_img":"/img/default.png","banner_img_height":85,"banner_mask_alpha":0.3,"subtitle":"Page not found"},"links":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"items":[{"title":"Fluid Docs","intro":"主题使用指南","link":"https://hexo.fluid-dev.com/docs/","image":"/img/favicon.png"},{"title":"Fluid Repo","intro":"主题 GitHub 仓库","link":"https://github.com/fluid-dev/hexo-theme-fluid","image":"/img/favicon.png"},{"title":"Fluid Example","intro":"主题操作示例","link":"https://hexo.fluid-dev.com/docs/example/","image":"/img/favicon.png"}]}}}},"excerpt":"","more":"<p>采用 <code>Quartz</code> 高级绘画引擎提供基于路径的绘制,形变,颜色管理,离屏渲染,渐变与阴影,图片数据管理,图片创建,图片蒙版,同样的PDF创建,显示和解析.</p>\n<p>###几何数据类型<br><a href=\"https://developer.apple.com/documentation/coregraphics/cgfloat\">CGFloat</a></p>\n<p><a href=\"https://developer.apple.com/documentation/coregraphics/cgpoint\">CGPoint</a></p>\n<p><a href=\"https://developer.apple.com/documentation/coregraphics/cgsize\">CGSize</a></p>\n<p><a href=\"https://developer.apple.com/documentation/coregraphics/cgrect\">CGRect</a></p>\n<p><a href=\"https://developer.apple.com/documentation/coregraphics/cgvector\">CGVector</a></p>\n<p><a href=\"https://developer.apple.com/documentation/coregraphics/cgaffinetransform\">CGAffineTransform</a></p>\n<h3 id=\"2D-绘制\"><a href=\"#2D-绘制\" class=\"headerlink\" title=\"2D 绘制\"></a>2D 绘制</h3><p><a href=\"\">CGContext</a></p>\n<h4 id=\"常用API说明\"><a href=\"#常用API说明\" class=\"headerlink\" title=\"常用API说明\"></a>常用API说明</h4><pre><code class=\"hljs swift\">\n<span class=\"hljs-comment\">/*构建绘制路径*/</span>\n<span class=\"hljs-comment\">//在图形环境中创建一个新的空路径</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">beginPath</span><span class=\"hljs-params\">()</span></span>\n<span class=\"hljs-comment\">//在指定点开始一个新的子路径</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">move</span><span class=\"hljs-params\">(to: CGPoint)</span></span>\n<span class=\"hljs-comment\">//从当前点添加一条直线到指定点</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">addLine</span><span class=\"hljs-params\">(to: CGPoint)</span></span>\n<span class=\"hljs-comment\">//根据数组内的点连线,其中数组里的第一个点作为线的初始起点</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">addLines</span><span class=\"hljs-params\">(between: [CGPoint])</span></span>\n<span class=\"hljs-comment\">//添加一个矩形路径</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">addRect</span><span class=\"hljs-params\">(CGRect)</span></span>\n<span class=\"hljs-comment\">//添加多个矩形路径</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">addRects</span><span class=\"hljs-params\">([CGRect])</span></span>\n<span class=\"hljs-comment\">//添加椭圆</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">addEllipse</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">in</span>: CGRect)</span></span>\n<span class=\"hljs-comment\">//添加圆</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">addArc</span><span class=\"hljs-params\">(center: CGPoint, radius: CGFloat, startAngle: CGFloat, endAngle: CGFloat, clockwise: Bool)</span></span>\n<span class=\"hljs-comment\">//三阶贝塞尔曲线</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">addCurve</span><span class=\"hljs-params\">(to end: CGPoint, control1: CGPoint, control2: CGPoint)</span></span>\n<span class=\"hljs-comment\">//二阶贝塞尔曲线</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">addQuadCurve</span><span class=\"hljs-params\">(to end: CGPoint, control: CGPoint)</span></span>\n<span class=\"hljs-comment\">//关闭当前的子路径</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">closePath</span><span class=\"hljs-params\">()</span></span>\n\n\n<span class=\"hljs-comment\">/*绘制当前路径*/</span>\n<span class=\"hljs-comment\">//沿着当前路径绘制线</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">strokePath</span><span class=\"hljs-params\">()</span></span>\n\n<span class=\"hljs-comment\">/*绘制形状*/</span>\n<span class=\"hljs-comment\">//透明</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">clear</span><span class=\"hljs-params\">(CGRect)</span></span>\n<span class=\"hljs-comment\">//使用填充色在当前的图形状态下填充指定区域</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">fill</span><span class=\"hljs-params\">(CGRect)</span></span>\n<span class=\"hljs-comment\">//填充多个区域</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">fill</span><span class=\"hljs-params\">([CGRect])</span></span>\n<span class=\"hljs-comment\">//填充区域内的椭圆形</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">fillEllipse</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">in</span>: CGRect)</span></span>\n<span class=\"hljs-comment\">//画指定区域的路径</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">stoke</span><span class=\"hljs-params\">(CGRect)</span></span>\n<span class=\"hljs-comment\">//画椭圆</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">stokeEllipse</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">in</span>: CGRect)</span></span>\n<span class=\"hljs-comment\">//画多条线段</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">stokeLineSegments</span><span class=\"hljs-params\">(between: [CGPoint])</span></span>\n\n<span class=\"hljs-comment\">/*画渐变和阴影*/</span>\n<span class=\"hljs-comment\">//直线平滑过渡</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">drawLinearGradient</span><span class=\"hljs-params\">(<span class=\"hljs-number\">_</span> gradient: CGGradient, </span></span>\n<span class=\"hljs-function\"><span class=\"hljs-params\">                  start startPoint: CGPoint, </span></span>\n<span class=\"hljs-function\"><span class=\"hljs-params\">                    end endPoint: CGPoint, </span></span>\n<span class=\"hljs-function\"><span class=\"hljs-params\">                options: CGGradientDrawingOptions)</span></span>\n\n<span class=\"hljs-comment\">//扇面渐变过渡</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">drawRadialGradient</span><span class=\"hljs-params\">(<span class=\"hljs-number\">_</span> gradient: CGGradient, </span></span>\n<span class=\"hljs-function\"><span class=\"hljs-params\">            startCenter: CGPoint, </span></span>\n<span class=\"hljs-function\"><span class=\"hljs-params\">            startRadius: CGFloat, </span></span>\n<span class=\"hljs-function\"><span class=\"hljs-params\">              endCenter: CGPoint, </span></span>\n<span class=\"hljs-function\"><span class=\"hljs-params\">              endRadius: CGFloat, </span></span>\n<span class=\"hljs-function\"><span class=\"hljs-params\">                options: CGGradientDrawingOptions)</span></span>               \n            \n<span class=\"hljs-comment\">/*绘制文字*/</span>\n<span class=\"hljs-comment\">//文字绘制位置</span>\n<span class=\"hljs-keyword\">var</span> textPosition: <span class=\"hljs-type\">CGPoint</span>\n<span class=\"hljs-comment\">//设置字符间距</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">setCharacterSpacing</span><span class=\"hljs-params\">(CGFloat)</span></span>\n<span class=\"hljs-comment\">//设置字体</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">setFont</span><span class=\"hljs-params\">(CGFont)</span></span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">setFontSize</span><span class=\"hljs-params\">(CGFloat)</span></span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">setTextDrawingMode</span><span class=\"hljs-params\">(CGTextDrawingMode)</span></span>\n\n<span class=\"hljs-comment\">/*设置填充,描画,和阴影颜色*/</span>\n<span class=\"hljs-comment\">//填充色</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">setFillColor</span><span class=\"hljs-params\">(CGColor)</span></span>\n<span class=\"hljs-comment\">//阴影</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">setShadow</span><span class=\"hljs-params\">(offset: CGSize, blur: CGFloat)</span></span>  \n<span class=\"hljs-comment\">//描画线颜色</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">setStokeColor</span><span class=\"hljs-params\">(CGColor)</span></span>  \n<span class=\"hljs-comment\">//设置透明度</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">setAlpha</span><span class=\"hljs-params\">(CGFloat)</span></span>\n\n\n<span class=\"hljs-comment\">/*裁切路径*/</span>   \n<span class=\"hljs-comment\">//裁切区域内指定矩形</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">clip</span><span class=\"hljs-params\">(to: CGRect)</span></span>\n<span class=\"hljs-comment\">//裁切区域内多个矩形</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">clip</span><span class=\"hljs-params\">(to: [CGRect])</span></span> \n<span class=\"hljs-comment\">//裁切区域内用图片填充</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">clip</span><span class=\"hljs-params\">(to: CGRect, mask: CGImage)</span></span>\n\n\n<span class=\"hljs-comment\">/*设置路径绘制选项*/</span>\n<span class=\"hljs-comment\">//是否允许反锯齿</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">setAllowAntialiasing</span><span class=\"hljs-params\">(Bool)</span></span>\n<span class=\"hljs-comment\">//平滑度</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">setFlatness</span><span class=\"hljs-params\">(CGFloat)</span></span>\n<span class=\"hljs-comment\">//线帽</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">setLineCap</span><span class=\"hljs-params\">(CGLineCap)</span></span>\n<span class=\"hljs-comment\">//虚线</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">setLineDash</span><span class=\"hljs-params\">(phase: CGFloat, lengths: [CGFloat])</span></span>\n<span class=\"hljs-comment\">//线连接处样式</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">setLineJoin</span><span class=\"hljs-params\">(CGLineJoin)</span></span>\n<span class=\"hljs-comment\">//线宽</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">setLineWidth</span><span class=\"hljs-params\">(CGFloat)</span></span>\n \n<span class=\"hljs-comment\">/*保存上下文状态*/</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">saveGState</span><span class=\"hljs-params\">()</span></span>\n<span class=\"hljs-comment\">//保存最新的状态,需要之前保存过一次状态,否则会崩溃</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">restoreGState</span><span class=\"hljs-params\">()</span></span>\n\n\n<span class=\"hljs-comment\">/*管理图形上下文*/</span>\n<span class=\"hljs-comment\">//强制立即绘制</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">flush</span><span class=\"hljs-params\">()</span></span>\n<span class=\"hljs-comment\">//标记窗口上下文需要更新</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">synchronize</span><span class=\"hljs-params\">()</span></span>\n\n<span class=\"hljs-comment\">/*管理位图*/</span>\n<span class=\"hljs-comment\">//位图信息</span>\n<span class=\"hljs-keyword\">var</span> bitmapInfo: <span class=\"hljs-type\">CGBitmapInfo</span>\n<span class=\"hljs-comment\">//像素高</span>\n<span class=\"hljs-keyword\">var</span> height: <span class=\"hljs-type\">Int</span>\n<span class=\"hljs-comment\">//像素宽</span>\n<span class=\"hljs-keyword\">var</span> width: <span class=\"hljs-type\">Int</span>\n<span class=\"hljs-comment\">//生成一个CGImage</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">makeImage</span><span class=\"hljs-params\">()</span></span> -&gt; <span class=\"hljs-type\">CGImage?</span></code></pre>\n\n<p><a href=\"https://developer.apple.com/documentation/coregraphics/cgpath\">CGPath</a></p>\n<p><a href=\"https://developer.apple.com/documentation/coregraphics/cgmutablepath\">CGMutablePath</a></p>\n<p><a href=\"\">CGLayer</a></p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p><a href=\"https://developer.apple.com/documentation/coregraphics\">Core Graphics</a></p>\n"},{"title":"CoreNFC","date":"2017-10-30T09:23:00.000Z","_content":"\n检测NFC 设备并读取里面包含的NDEF格式数据.\n\n## 简述\n\n使用CoreNFC,你能够读取(目前只能读取) 1-5种NDEF格式的Near Field Communication(NFC)设备信息.为了读取NFC信息,你的app需要创建一个NDEF reader session 并且实现相关协议.一个运行的reader session 会查询NFC设备并且返回它包含的NDEF信息时,会调用相关协议方法.代理对象能够读取相关信息并决定reader session 是否失效.\n\n>  #### 注意:\n> 读取NFC数据的设备仅支持iPhone 7 以上机型\n> 当前的NFC芯片,大部分读取不到信息,必须是标准的NFCNDEF格式写入的芯片才能读取.(北京地铁卡,门禁卡,身份证等卡片测试的时候无法识别,反正我是什么都没有读到,就出现一个调取NFC的界面,然后就没有然后了...)\n\n#### 项目配置\n-  开启NFC功能(如果你的证书勾选自动管理的话, TARGETS -> Capabilities -> Near Field Communication Tag Reading 勾选ON),然后会自动创建一个 \"项目名.entitlements\" 文件.\n\n![开启NFC.jpeg](http://upload-images.jianshu.io/upload_images/3340896-88ca287b76f4f852.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n- 证书对工程进行授权\n![TestNFC.entitlements](http://upload-images.jianshu.io/upload_images/3340896-ab200d5472bdfcf5.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n \n- info.plist 文件中添加隐私访问权限申请.\n![info.plist](http://upload-images.jianshu.io/upload_images/3340896-e6375dba9089d513.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n#### 核心代码\n\n```\nclass ViewController: UIViewController, NFCNDEFReaderSessionDelegate {\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        \n        //判断设备是否支持NFC,支持创建NFC对话对象\n        if NFCNDEFReaderSession.readingAvailable == true {\n            \n            let session = NFCNDEFReaderSession.init(delegate: self, queue: nil, invalidateAfterFirstRead: false)\n            session.alertMessage = \"请将卡片靠近手机\"\n            session.begin()\n        }\n    }\n    \n    // MARK: - NFCNDEFReaderSessionDelegate\n    func readerSession(_ session: NFCNDEFReaderSession, didInvalidateWithError error: Error) {\n        debugPrint(\"\\(session)\\n\\(error)\")\n    }\n    \n    func readerSession(_ session: NFCNDEFReaderSession, didDetectNDEFs messages: [NFCNDEFMessage]) {\n        debugPrint(\"\\(session)\\n\\(messages)\")\n    }\n}\n\n```\n\n## Topics\n\n#### Reader Session  \n\n```\nclass [NFCNDEFReaderSession ]()\n//reader session 类  用来探测NFC设备的NDEF数据.\n\n//实例创建\n\ninit(delegate: NFCNDEFReaderSessionDelegate, queue: DispatchQueue?, invalidateAfterFirstRead: Bool)\n//参数介绍:\n//delegate: 代理对象\n//queue    : 代理对象回调被分派的队列.  可选值, 置为nil 后,会在内部为该会话创建一个串行队列\n//invalidateAfterFirRead: 设备第一次成功读取到信息后,reader session是否自动失效. 一般填false\n\n//设备可用性检查\n//类属性,返回设备是否支持NFC读取功能\nclass var readingAvailable: Bool\n\n protocol [NFCReaderSessionProtocol]()\n//通用交互接口协议  用来跟reader session进行交互\n\n// 会话检测到NDEF信息\nfunc readerSession(NFCNDEFReaderSession, didDetectNDEFs: [NFCNDEFMessage])\n\n// 会话失效,返回错误信息\nfunc readerSession(NFCNDEFReaderSession, didInvalidateWithError: Error)\n\nclass [NFCReaderSession]()\n// NFCNDEFReaderSession 的基类.\n```\n***\n#### NDEF Messages\n```\nclass   [NFCNDEFMessage]()\n//  records 属性是[NFCNDEFPayload]数组\n\nclass  [NFCNDEFPayload]()\n//  NFC NDEF信息的载体\n\n//载体的id\nvar identifier : Data\n\n// 数据内容,这是我们需要读取的二进制信息\nvar payload: Data\n\n// 载体类型\nvar type      : Data \n\n// 类型格式名  枚举值\nvar typeNameFormat: NFCTypeNameFormat\n\nenum [NFCTypeNameFormat]()\n//枚举值 标明NFC NDEF信息的格式\n```\n#### Errors \n```\nstruct [NFCReaderError]()\n//结构体 reader session的错误类型\n```\n","source":"_posts/iOS/CoreNFC.md","raw":"\n---\ntitle:  CoreNFC \ndate: 2017-10-30 17:23\ncategories:\n- iOS\ntags: \n- CoreNFC \n---\n\n检测NFC 设备并读取里面包含的NDEF格式数据.\n\n## 简述\n\n使用CoreNFC,你能够读取(目前只能读取) 1-5种NDEF格式的Near Field Communication(NFC)设备信息.为了读取NFC信息,你的app需要创建一个NDEF reader session 并且实现相关协议.一个运行的reader session 会查询NFC设备并且返回它包含的NDEF信息时,会调用相关协议方法.代理对象能够读取相关信息并决定reader session 是否失效.\n\n>  #### 注意:\n> 读取NFC数据的设备仅支持iPhone 7 以上机型\n> 当前的NFC芯片,大部分读取不到信息,必须是标准的NFCNDEF格式写入的芯片才能读取.(北京地铁卡,门禁卡,身份证等卡片测试的时候无法识别,反正我是什么都没有读到,就出现一个调取NFC的界面,然后就没有然后了...)\n\n#### 项目配置\n-  开启NFC功能(如果你的证书勾选自动管理的话, TARGETS -> Capabilities -> Near Field Communication Tag Reading 勾选ON),然后会自动创建一个 \"项目名.entitlements\" 文件.\n\n![开启NFC.jpeg](http://upload-images.jianshu.io/upload_images/3340896-88ca287b76f4f852.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n- 证书对工程进行授权\n![TestNFC.entitlements](http://upload-images.jianshu.io/upload_images/3340896-ab200d5472bdfcf5.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n \n- info.plist 文件中添加隐私访问权限申请.\n![info.plist](http://upload-images.jianshu.io/upload_images/3340896-e6375dba9089d513.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n#### 核心代码\n\n```\nclass ViewController: UIViewController, NFCNDEFReaderSessionDelegate {\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        \n        //判断设备是否支持NFC,支持创建NFC对话对象\n        if NFCNDEFReaderSession.readingAvailable == true {\n            \n            let session = NFCNDEFReaderSession.init(delegate: self, queue: nil, invalidateAfterFirstRead: false)\n            session.alertMessage = \"请将卡片靠近手机\"\n            session.begin()\n        }\n    }\n    \n    // MARK: - NFCNDEFReaderSessionDelegate\n    func readerSession(_ session: NFCNDEFReaderSession, didInvalidateWithError error: Error) {\n        debugPrint(\"\\(session)\\n\\(error)\")\n    }\n    \n    func readerSession(_ session: NFCNDEFReaderSession, didDetectNDEFs messages: [NFCNDEFMessage]) {\n        debugPrint(\"\\(session)\\n\\(messages)\")\n    }\n}\n\n```\n\n## Topics\n\n#### Reader Session  \n\n```\nclass [NFCNDEFReaderSession ]()\n//reader session 类  用来探测NFC设备的NDEF数据.\n\n//实例创建\n\ninit(delegate: NFCNDEFReaderSessionDelegate, queue: DispatchQueue?, invalidateAfterFirstRead: Bool)\n//参数介绍:\n//delegate: 代理对象\n//queue    : 代理对象回调被分派的队列.  可选值, 置为nil 后,会在内部为该会话创建一个串行队列\n//invalidateAfterFirRead: 设备第一次成功读取到信息后,reader session是否自动失效. 一般填false\n\n//设备可用性检查\n//类属性,返回设备是否支持NFC读取功能\nclass var readingAvailable: Bool\n\n protocol [NFCReaderSessionProtocol]()\n//通用交互接口协议  用来跟reader session进行交互\n\n// 会话检测到NDEF信息\nfunc readerSession(NFCNDEFReaderSession, didDetectNDEFs: [NFCNDEFMessage])\n\n// 会话失效,返回错误信息\nfunc readerSession(NFCNDEFReaderSession, didInvalidateWithError: Error)\n\nclass [NFCReaderSession]()\n// NFCNDEFReaderSession 的基类.\n```\n***\n#### NDEF Messages\n```\nclass   [NFCNDEFMessage]()\n//  records 属性是[NFCNDEFPayload]数组\n\nclass  [NFCNDEFPayload]()\n//  NFC NDEF信息的载体\n\n//载体的id\nvar identifier : Data\n\n// 数据内容,这是我们需要读取的二进制信息\nvar payload: Data\n\n// 载体类型\nvar type      : Data \n\n// 类型格式名  枚举值\nvar typeNameFormat: NFCTypeNameFormat\n\nenum [NFCTypeNameFormat]()\n//枚举值 标明NFC NDEF信息的格式\n```\n#### Errors \n```\nstruct [NFCReaderError]()\n//结构体 reader session的错误类型\n```\n","slug":"iOS/CoreNFC","published":1,"updated":"2020-09-27T11:08:53.877Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgq6gnwv001nt29k11mw17kz","content":"<p>检测NFC 设备并读取里面包含的NDEF格式数据.</p>\n<h2 id=\"简述\"><a href=\"#简述\" class=\"headerlink\" title=\"简述\"></a>简述</h2><p>使用CoreNFC,你能够读取(目前只能读取) 1-5种NDEF格式的Near Field Communication(NFC)设备信息.为了读取NFC信息,你的app需要创建一个NDEF reader session 并且实现相关协议.一个运行的reader session 会查询NFC设备并且返回它包含的NDEF信息时,会调用相关协议方法.代理对象能够读取相关信息并决定reader session 是否失效.</p>\n<blockquote>\n<h4 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意:\"></a>注意:</h4><p>读取NFC数据的设备仅支持iPhone 7 以上机型<br>当前的NFC芯片,大部分读取不到信息,必须是标准的NFCNDEF格式写入的芯片才能读取.(北京地铁卡,门禁卡,身份证等卡片测试的时候无法识别,反正我是什么都没有读到,就出现一个调取NFC的界面,然后就没有然后了…)</p>\n</blockquote>\n<h4 id=\"项目配置\"><a href=\"#项目配置\" class=\"headerlink\" title=\"项目配置\"></a>项目配置</h4><ul>\n<li>开启NFC功能(如果你的证书勾选自动管理的话, TARGETS -&gt; Capabilities -&gt; Near Field Communication Tag Reading 勾选ON),然后会自动创建一个 “项目名.entitlements” 文件.</li>\n</ul>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/3340896-88ca287b76f4f852.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"开启NFC.jpeg\"></p>\n<ul>\n<li><p>证书对工程进行授权<br><img src=\"http://upload-images.jianshu.io/upload_images/3340896-ab200d5472bdfcf5.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"TestNFC.entitlements\"></p>\n</li>\n<li><p>info.plist 文件中添加隐私访问权限申请.<br><img src=\"http://upload-images.jianshu.io/upload_images/3340896-e6375dba9089d513.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"info.plist\"></p>\n</li>\n</ul>\n<h4 id=\"核心代码\"><a href=\"#核心代码\" class=\"headerlink\" title=\"核心代码\"></a>核心代码</h4><pre><code class=\"hljs swift\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">ViewController</span>: <span class=\"hljs-title\">UIViewController</span>, <span class=\"hljs-title\">NFCNDEFReaderSessionDelegate</span> </span>&#123;\n    \n    <span class=\"hljs-keyword\">override</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">viewDidLoad</span><span class=\"hljs-params\">()</span></span> &#123;\n        <span class=\"hljs-keyword\">super</span>.viewDidLoad()\n        \n        <span class=\"hljs-comment\">//判断设备是否支持NFC,支持创建NFC对话对象</span>\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-type\">NFCNDEFReaderSession</span>.readingAvailable == <span class=\"hljs-literal\">true</span> &#123;\n            \n            <span class=\"hljs-keyword\">let</span> session = <span class=\"hljs-type\">NFCNDEFReaderSession</span>.<span class=\"hljs-keyword\">init</span>(delegate: <span class=\"hljs-keyword\">self</span>, queue: <span class=\"hljs-literal\">nil</span>, invalidateAfterFirstRead: <span class=\"hljs-literal\">false</span>)\n            session.alertMessage = <span class=\"hljs-string\">&quot;请将卡片靠近手机&quot;</span>\n            session.begin()\n        &#125;\n    &#125;\n    \n    <span class=\"hljs-comment\">// MARK: - NFCNDEFReaderSessionDelegate</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">readerSession</span><span class=\"hljs-params\">(<span class=\"hljs-number\">_</span> session: NFCNDEFReaderSession, didInvalidateWithError error: Error)</span></span> &#123;\n        <span class=\"hljs-built_in\">debugPrint</span>(<span class=\"hljs-string\">&quot;\\(session)\\n\\(error)&quot;</span>)\n    &#125;\n    \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">readerSession</span><span class=\"hljs-params\">(<span class=\"hljs-number\">_</span> session: NFCNDEFReaderSession, didDetectNDEFs messages: [NFCNDEFMessage])</span></span> &#123;\n        <span class=\"hljs-built_in\">debugPrint</span>(<span class=\"hljs-string\">&quot;\\(session)\\n\\(messages)&quot;</span>)\n    &#125;\n&#125;\n</code></pre>\n\n<h2 id=\"Topics\"><a href=\"#Topics\" class=\"headerlink\" title=\"Topics\"></a>Topics</h2><h4 id=\"Reader-Session\"><a href=\"#Reader-Session\" class=\"headerlink\" title=\"Reader Session\"></a>Reader Session</h4><pre><code class=\"hljs markdown\">class [<span class=\"hljs-string\">NFCNDEFReaderSession </span>](<span class=\"hljs-link\"></span>)\n//reader session 类  用来探测NFC设备的NDEF数据.\n\n//实例创建\n\ninit(delegate: NFCNDEFReaderSessionDelegate, queue: DispatchQueue?, invalidateAfterFirstRead: Bool)\n//参数介绍:\n//delegate: 代理对象\n//queue    : 代理对象回调被分派的队列.  可选值, 置为nil 后,会在内部为该会话创建一个串行队列\n//invalidateAfterFirRead: 设备第一次成功读取到信息后,reader session是否自动失效. 一般填false\n\n//设备可用性检查\n//类属性,返回设备是否支持NFC读取功能\nclass var readingAvailable: Bool\n\n protocol [<span class=\"hljs-string\">NFCReaderSessionProtocol</span>](<span class=\"hljs-link\"></span>)\n//通用交互接口协议  用来跟reader session进行交互\n\n// 会话检测到NDEF信息\nfunc readerSession(NFCNDEFReaderSession, didDetectNDEFs: [NFCNDEFMessage])\n\n// 会话失效,返回错误信息\nfunc readerSession(NFCNDEFReaderSession, didInvalidateWithError: Error)\n\nclass [<span class=\"hljs-string\">NFCReaderSession</span>](<span class=\"hljs-link\"></span>)\n// NFCNDEFReaderSession 的基类.</code></pre>\n<hr>\n<h4 id=\"NDEF-Messages\"><a href=\"#NDEF-Messages\" class=\"headerlink\" title=\"NDEF Messages\"></a>NDEF Messages</h4><pre><code class=\"hljs markdown\">class   [<span class=\"hljs-string\">NFCNDEFMessage</span>](<span class=\"hljs-link\"></span>)\n//  records 属性是[NFCNDEFPayload]数组\n\nclass  [<span class=\"hljs-string\">NFCNDEFPayload</span>](<span class=\"hljs-link\"></span>)\n//  NFC NDEF信息的载体\n\n//载体的id\nvar identifier : Data\n\n// 数据内容,这是我们需要读取的二进制信息\nvar payload: Data\n\n// 载体类型\nvar type      : Data \n\n// 类型格式名  枚举值\nvar typeNameFormat: NFCTypeNameFormat\n\nenum [<span class=\"hljs-string\">NFCTypeNameFormat</span>](<span class=\"hljs-link\"></span>)\n//枚举值 标明NFC NDEF信息的格式</code></pre>\n<h4 id=\"Errors\"><a href=\"#Errors\" class=\"headerlink\" title=\"Errors\"></a>Errors</h4><pre><code class=\"hljs markdown\">struct [<span class=\"hljs-string\">NFCReaderError</span>](<span class=\"hljs-link\"></span>)\n//结构体 reader session的错误类型</code></pre>\n","site":{"data":{"fluid_static_prefix":{"internal_js":"/js","internal_css":"/css","internal_img":"/img","iconfont":"//at.alicdn.com/t/font_1736178_kmeydafke9r.css","anchor":"https://cdn.staticfile.org/anchor-js/4.2.2/","github_markdown":"https://cdn.staticfile.org/github-markdown-css/4.0.0/","jquery":"https://cdn.staticfile.org/jquery/3.4.1/","bootstrap":"https://cdn.staticfile.org/twitter-bootstrap/4.4.1/","highlightjs":"https://cdn.staticfile.org/highlight.js/10.0.0/","prismjs":"https://cdn.staticfile.org/prism/1.21.0/","tocbot":"https://cdn.staticfile.org/tocbot/4.11.1/","typed":"https://cdn.staticfile.org/typed.js/2.0.11/","fancybox":"https://cdn.staticfile.org/fancybox/3.5.7/","mathjax":"https://cdn.staticfile.org/mathjax/3.0.5/es5/","katex":"https://cdn.staticfile.org/KaTeX/0.11.1/","aplayer":"https://cdn.staticfile.org/aplayer/1.10.1/","busuanzi":"https://busuanzi.ibruce.info/busuanzi/2.3/","clipboard":"https://cdn.staticfile.org/clipboard.js/2.0.6/","mermaid":"https://cdn.staticfile.org/mermaid/8.5.0/","valine":"https://cdn.staticfile.org/valine/1.4.14/","gitalk":"https://cdn.staticfile.org/gitalk/1.6.2/","blueimp_md5":"https://cdn.staticfile.org/blueimp-md5/2.13.0/","disqusjs":"https://cdn.jsdelivr.net/npm/disqusjs@1.0/dist/","hint":"/lib/hint/"},"fluid_config":{"favicon":"/img/favicon.png","apple_touch_icon":"/img/favicon.png","title_join_string":" - ","force_https":false,"code":{"copy_btn":true,"highlight":{"enable":true,"lib":"highlightjs","highlightjs":{"style":"Github Gist","bg_color":false},"prismjs":{"style":"default","preprocess":true}}},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"_","loop":false},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"right","visible":"hover","icon":""},"mouse_click":{"enable":false,"style":"values"}},"dark_mode":{"enable":true,"default":"auto"},"color":{"body_bg_color":"#eee","body_bg_color_dark":"#181c27","navbar_bg_color":"#2f4154","navbar_bg_color_dark":"#1f3144","navbar_text_color":"#fff","navbar_text_color_dark":"#d0d0d0","text_color":"#3c4858","text_color_dark":"#c4c6c9","sec_text_color":"#718096","sec_text_color_dark":"#a7a9ad","post_text_color":"#2c3e50","post_text_color_dark":"#c4c6c9","post_heading_color":"#1a202c","post_heading_color_dark":"#c4c6c9","post_link_color":"#0366d6","post_link_color_dark":"#1589e9","link_hover_color":"#30a9de","link_hover_color_dark":"#30a9de","link_hover_bg_color":"#f8f9fa","link_hover_bg_color_dark":"#364151","board_color":"#fff","board_color_dark":"#252d38"},"font":{"font_size":"16px","font_family":null,"code_font_size":"85%"},"custom_js":null,"custom_css":null,"custom_html":"","web_analytics":{"enable":false,"baidu":null,"google":null,"gtag":null,"tencent":{"sid":null,"cid":null},"woyaola":null,"cnzz":null,"leancloud":{"app_id":null,"app_key":null,"server_url":null}},"lazyload":{"enable":true,"onlypost":false},"daovoice":{"enable":false,"appid":""},"aplayer":{"enable":false,"autoplay":false,"loop":"all","order":"random","theme":"#b7daff","songs":[{"name":"name","artist":"artist","url":"/songs/test.mp3","cover":"/img/cover.jpg"},{"name":"name","artist":"artist","url":"https://...url.mp3","cover":"https://...cover.jpg"}]},"version":{"check":false},"navbar":{"blog_title":"吃面多放葱","ground_glass":{"enable":false,"px":3,"alpha":0.7},"menu":[{"key":"home","link":"/","icon":"iconfont icon-home-fill"},{"key":"category","link":"/categories/","icon":"iconfont icon-category-fill"},{"key":"tag","link":"/tags/","icon":"iconfont icon-tags-fill"},{"key":"about","link":"/about/","icon":"iconfont icon-user-fill"}]},"search":{"enable":true,"path":"/local-search.xml","generate_path":"/local-search.xml","field":"post","content":true},"scroll_down_arrow":{"enable":true,"banner_height_limit":90,"scroll_after_turning_page":true},"banner_parallax":true,"footer":{"statistics":{"enable":false,"source":"busuanzi","pv_format":"总访问量 {} 次","uv_format":"总访客数 {} 人"},"beian":{"enable":false,"icp_text":"京ICP证123456号","police_text":"京公网安备12345678号","police_code":12345678,"police_icon":"/img/police_beian.png"}},"scroll_top_arrow":{"enable":true},"index":{"banner_img":"/img/default.png","banner_img_height":100,"banner_mask_alpha":0.3,"post_default_img":"","slogan":{"enable":true,"text":"像蚂蚁一样工作，像蝴蝶一样生活"},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"category":true,"tag":true}},"page":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3},"post":{"banner_img":"/img/default.png","banner_img_height":70,"banner_mask_alpha":0.3,"meta":{"author":{"enable":false},"date":{"enable":true,"format":"LL a"},"wordcount":{"enable":true,"format":"{} 字"},"min2read":{"enable":true,"format":"{} 分钟","words":100},"views":{"enable":false,"source":"busuanzi","format":"{} 次"}},"updated":{"enable":false,"content":"本文最后更新于：","relative":false},"toc":{"enable":true,"headingSelector":"h1,h2,h3,h4,h5,h6","collapseDepth":0},"copyright":{"enable":true,"content":"本博客所有文章除特别声明外，均采用 <a href=\"https://creativecommons.org/licenses/by-sa/4.0/deed.zh\" rel=\"nofollow noopener\">CC BY-SA 4.0 协议</a> ，转载请注明出处！"},"prev_next":{"enable":true},"custom":{"enable":false,"content":"<img src=\"https://octodex.github.com/images/jetpacktocat.png\" class=\"rounded mx-auto d-block mt-5\" style=\"width:150px; height:150px;\">"},"image_zoom":{"enable":true},"footnote":{"enable":true,"header":""},"math":{"enable":false,"specific":false,"engine":"mathjax"},"mermaid":{"enable":false,"specific":false,"options":{"theme":"default"}},"comments":{"enable":false,"type":"disqus"}},"utterances":{"repo":null,"issue_term":"pathname","label":"utterances","theme":"github-light","theme_dark":"github-dark","crossorigin":"anonymous"},"disqus":{"shortname":null,"disqusjs":false,"apikey":null},"gitalk":{"clientID":null,"clientSecret":null,"repo":null,"owner":null,"admin":["name"],"id":"location.pathname","language":"zh-CN","labels":["Gitalk"],"perPage":10,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true},"valine":{"appid":null,"appkey":null,"placeholder":"说点什么","path":"window.location.pathname","avatar":"retro","meta":["nick","mail","link"],"pageSize":10,"lang":"zh-CN","highlight":false,"recordIP":false,"serverURLs":null},"changyan":{"appid":"","appkey":""},"livere":{"uid":""},"remark42":{"host":"https://remark.haoyizebo.com","site_id":"haoyizebo","max_shown_comments":10,"locale":"zh"},"archive":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null},"category":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"post_limit":10,"order_by":"-length","collapse_depth":0},"tag":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null,"tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"avatar":"/img/avatar.png","name":"蔺国防","introduce":"移动应用开发者，历史文学爱好者","icons":[{"class":"iconfont icon-github-fill","link":"https://github.com","tip":"GitHub"},{"class":"iconfont icon-douban-fill","link":"https://douban.com","tip":"豆瓣"},{"class":"iconfont icon-wechat-fill","qrcode":"/img/favicon.png"}]},"page404":{"banner_img":"/img/default.png","banner_img_height":85,"banner_mask_alpha":0.3,"subtitle":"Page not found"},"links":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"items":[{"title":"Fluid Docs","intro":"主题使用指南","link":"https://hexo.fluid-dev.com/docs/","image":"/img/favicon.png"},{"title":"Fluid Repo","intro":"主题 GitHub 仓库","link":"https://github.com/fluid-dev/hexo-theme-fluid","image":"/img/favicon.png"},{"title":"Fluid Example","intro":"主题操作示例","link":"https://hexo.fluid-dev.com/docs/example/","image":"/img/favicon.png"}]}}}},"excerpt":"","more":"<p>检测NFC 设备并读取里面包含的NDEF格式数据.</p>\n<h2 id=\"简述\"><a href=\"#简述\" class=\"headerlink\" title=\"简述\"></a>简述</h2><p>使用CoreNFC,你能够读取(目前只能读取) 1-5种NDEF格式的Near Field Communication(NFC)设备信息.为了读取NFC信息,你的app需要创建一个NDEF reader session 并且实现相关协议.一个运行的reader session 会查询NFC设备并且返回它包含的NDEF信息时,会调用相关协议方法.代理对象能够读取相关信息并决定reader session 是否失效.</p>\n<blockquote>\n<h4 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意:\"></a>注意:</h4><p>读取NFC数据的设备仅支持iPhone 7 以上机型<br>当前的NFC芯片,大部分读取不到信息,必须是标准的NFCNDEF格式写入的芯片才能读取.(北京地铁卡,门禁卡,身份证等卡片测试的时候无法识别,反正我是什么都没有读到,就出现一个调取NFC的界面,然后就没有然后了…)</p>\n</blockquote>\n<h4 id=\"项目配置\"><a href=\"#项目配置\" class=\"headerlink\" title=\"项目配置\"></a>项目配置</h4><ul>\n<li>开启NFC功能(如果你的证书勾选自动管理的话, TARGETS -&gt; Capabilities -&gt; Near Field Communication Tag Reading 勾选ON),然后会自动创建一个 “项目名.entitlements” 文件.</li>\n</ul>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/3340896-88ca287b76f4f852.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"开启NFC.jpeg\"></p>\n<ul>\n<li><p>证书对工程进行授权<br><img src=\"http://upload-images.jianshu.io/upload_images/3340896-ab200d5472bdfcf5.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"TestNFC.entitlements\"></p>\n</li>\n<li><p>info.plist 文件中添加隐私访问权限申请.<br><img src=\"http://upload-images.jianshu.io/upload_images/3340896-e6375dba9089d513.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"info.plist\"></p>\n</li>\n</ul>\n<h4 id=\"核心代码\"><a href=\"#核心代码\" class=\"headerlink\" title=\"核心代码\"></a>核心代码</h4><pre><code class=\"hljs swift\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">ViewController</span>: <span class=\"hljs-title\">UIViewController</span>, <span class=\"hljs-title\">NFCNDEFReaderSessionDelegate</span> </span>&#123;\n    \n    <span class=\"hljs-keyword\">override</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">viewDidLoad</span><span class=\"hljs-params\">()</span></span> &#123;\n        <span class=\"hljs-keyword\">super</span>.viewDidLoad()\n        \n        <span class=\"hljs-comment\">//判断设备是否支持NFC,支持创建NFC对话对象</span>\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-type\">NFCNDEFReaderSession</span>.readingAvailable == <span class=\"hljs-literal\">true</span> &#123;\n            \n            <span class=\"hljs-keyword\">let</span> session = <span class=\"hljs-type\">NFCNDEFReaderSession</span>.<span class=\"hljs-keyword\">init</span>(delegate: <span class=\"hljs-keyword\">self</span>, queue: <span class=\"hljs-literal\">nil</span>, invalidateAfterFirstRead: <span class=\"hljs-literal\">false</span>)\n            session.alertMessage = <span class=\"hljs-string\">&quot;请将卡片靠近手机&quot;</span>\n            session.begin()\n        &#125;\n    &#125;\n    \n    <span class=\"hljs-comment\">// MARK: - NFCNDEFReaderSessionDelegate</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">readerSession</span><span class=\"hljs-params\">(<span class=\"hljs-number\">_</span> session: NFCNDEFReaderSession, didInvalidateWithError error: Error)</span></span> &#123;\n        <span class=\"hljs-built_in\">debugPrint</span>(<span class=\"hljs-string\">&quot;\\(session)\\n\\(error)&quot;</span>)\n    &#125;\n    \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">readerSession</span><span class=\"hljs-params\">(<span class=\"hljs-number\">_</span> session: NFCNDEFReaderSession, didDetectNDEFs messages: [NFCNDEFMessage])</span></span> &#123;\n        <span class=\"hljs-built_in\">debugPrint</span>(<span class=\"hljs-string\">&quot;\\(session)\\n\\(messages)&quot;</span>)\n    &#125;\n&#125;\n</code></pre>\n\n<h2 id=\"Topics\"><a href=\"#Topics\" class=\"headerlink\" title=\"Topics\"></a>Topics</h2><h4 id=\"Reader-Session\"><a href=\"#Reader-Session\" class=\"headerlink\" title=\"Reader Session\"></a>Reader Session</h4><pre><code class=\"hljs markdown\">class [<span class=\"hljs-string\">NFCNDEFReaderSession </span>](<span class=\"hljs-link\"></span>)\n//reader session 类  用来探测NFC设备的NDEF数据.\n\n//实例创建\n\ninit(delegate: NFCNDEFReaderSessionDelegate, queue: DispatchQueue?, invalidateAfterFirstRead: Bool)\n//参数介绍:\n//delegate: 代理对象\n//queue    : 代理对象回调被分派的队列.  可选值, 置为nil 后,会在内部为该会话创建一个串行队列\n//invalidateAfterFirRead: 设备第一次成功读取到信息后,reader session是否自动失效. 一般填false\n\n//设备可用性检查\n//类属性,返回设备是否支持NFC读取功能\nclass var readingAvailable: Bool\n\n protocol [<span class=\"hljs-string\">NFCReaderSessionProtocol</span>](<span class=\"hljs-link\"></span>)\n//通用交互接口协议  用来跟reader session进行交互\n\n// 会话检测到NDEF信息\nfunc readerSession(NFCNDEFReaderSession, didDetectNDEFs: [NFCNDEFMessage])\n\n// 会话失效,返回错误信息\nfunc readerSession(NFCNDEFReaderSession, didInvalidateWithError: Error)\n\nclass [<span class=\"hljs-string\">NFCReaderSession</span>](<span class=\"hljs-link\"></span>)\n// NFCNDEFReaderSession 的基类.</code></pre>\n<hr>\n<h4 id=\"NDEF-Messages\"><a href=\"#NDEF-Messages\" class=\"headerlink\" title=\"NDEF Messages\"></a>NDEF Messages</h4><pre><code class=\"hljs markdown\">class   [<span class=\"hljs-string\">NFCNDEFMessage</span>](<span class=\"hljs-link\"></span>)\n//  records 属性是[NFCNDEFPayload]数组\n\nclass  [<span class=\"hljs-string\">NFCNDEFPayload</span>](<span class=\"hljs-link\"></span>)\n//  NFC NDEF信息的载体\n\n//载体的id\nvar identifier : Data\n\n// 数据内容,这是我们需要读取的二进制信息\nvar payload: Data\n\n// 载体类型\nvar type      : Data \n\n// 类型格式名  枚举值\nvar typeNameFormat: NFCTypeNameFormat\n\nenum [<span class=\"hljs-string\">NFCTypeNameFormat</span>](<span class=\"hljs-link\"></span>)\n//枚举值 标明NFC NDEF信息的格式</code></pre>\n<h4 id=\"Errors\"><a href=\"#Errors\" class=\"headerlink\" title=\"Errors\"></a>Errors</h4><pre><code class=\"hljs markdown\">struct [<span class=\"hljs-string\">NFCReaderError</span>](<span class=\"hljs-link\"></span>)\n//结构体 reader session的错误类型</code></pre>\n"},{"title":"Dispatch","date":"2017-10-27T14:05:00.000Z","_content":"# DispatchQueue\n该类管理任务项的执行.每个提交到一个队列中的任务项将被系统管理的线程池处理.\n[测试Demo](https://github.com/913868456/SwiftDemo)\n\n## 同步和异步执行\n\n每个任务项可以被同步或者异步执行.当一个任务项使用同步方法执行时,程序会直到执行项执行完毕才返回.当一个任务项使用异步方法执行时,异步方法会马上返回\n\n## 串行和并行队列\n\n一个分发队列可以是串行队列,任务项一次只能执行一个.或者是并行队列,任务项目被序列化,但是却可以一次全部运行或者在任何顺序下终止.\n串行或者并行队列处理工作项都遵循FIFO原则\n\n>  ## 重要\n>  尝试同步执行工作项在主队列容易导致死锁.\n\n## 全局队列(global concurrent queue)\n\n全局队列是并行队列，系统创建了许多全局队列供程序使用\n\n\n## DispatchQueue\nDispatchqueue  管理任务项的执行。每个提交到队列中的任务项被系统管理的线程池处理。\n\n## 常用方法\n~~~\n\n实例创建\n\ninit(__label: UnsafePointer<Int8>?, attr: __OS_dispatch_queue_attr?)\n\n参数介绍\n\nlabel:  com.example.myqueue (可不填)，主要功能是标记线程，方便调试。\nattr :  DISPATCH_QUEUE_SERIAL; DISPATCH_QUEUE_CONCURRENT; 标明创建的是串行队列还是并行队列。\n\ninit(label: String, qos: DispatchQoS, attributes: DispatchQueue.Attributes, autoreleaseFrequency: DispatchQueue.AutoreleaseFrequency, target: DispatchQueue?)\n\n参数介绍\n\nattributes: concurrent 可以用来创建并行队列\n\nQoS  : 枚举（unspecified,background,utility,default,userInitiated,userInterractive）\n优先级从低到高,在有优先级需求的时候使用.\n\ntarget: 可以将队列添加到一个某个目标队列，最终将在目标队列执行。\n\n实例方法\n\n同步方法\n\n// 提交block到一个队列中执行，直到那个block完成。\nfunc sync(execute: () -> Void)\n\nfunc sync(execute: DispatchWorkItem)\n\n异步方法\nfunc async(execute: DispatchWorkItem)\n\n类属性\nclass var main: DispatchQueue\n\n类方法\nclass func concurrentPerform(iterations: Int, execute work: (Int) -> Void)\n\niterations: 迭代次数\n\n其他方法\nfunc setTarget(queue: DispatchQueue?)\n参数说明: 对象所在的新的目标队列.这个队列引用加一,之前所在队列,如果可能的话,将被释放.这个参数不能为NULL\n\n 讨论\n目标队列为对象处理负责.目标队列决定了对象的析构器的调用.更改对象的目标队列会改变他们的行为.\n如果提交一个block到串行队列,串行队列的目标队列是一个不同的串行队列,该Block不会与提交到目标队列的其他Block并发调用或者说其他与该队列拥有相同目标队列的队列并发执行.\n\nDispatch souces: 分发源的目标队列明确了(事件处理和取消)的位置.\n\n全局队列明确优先级,获取一个具有优先级别的全局队列.\nclass func global(qos: DispatchQoS.QoSClass)\n\n~~~\n用一个表格来表示串并行队列同步异步执行的情况\n\n| | 同步执行| 异步执行\n----|------|----\n串行队列| 当前线程，一个一个执行| 其他线程，一个一个执行\n并行队列| 当前线程，一个一个执行| 多个线程，一起执行 \n\n# DispatchWorkItem\n\nDispatchWorkItem包含能够被执行的任务。一个任务项能够被分配至DispatchQueue 和 DispatchGroup.一个任务项也能被置为一个DispatchSource 事件，注册项，或者错误处理。\n```\n实例化\n\ninit(qos: DispatchQoS = default, flags: DispatchWorkItemFlags = default, block: @escaping () -> Void)\n\n参数介绍\nQos:   同上\nflags: 任务项的性质，是否要创建新线程，或者创建barrior。\n关于barrior需要描述一下,网上查找的资料描述: 只针对一个并行队列.同步点之前的任务，会并发执行，到了同步点就会等待，等待同步点的任务执行完成的时候，继续后面的任务，再次并发执行\n\n项目中主要还是用到它的创建方法，其他略。\n```\n\n# DispatchTime\n\nDispatchTime代表与具有纳秒（十亿分之一秒）精度的时钟相关的一个时间点。\n\n~~~\n实例方法\n// 创建后即开始启动计时。\ninit(uptimeNanoseconds: UInt64)\n\n\n实例属性\n// 返回创建以来到当前时间的纳秒数，包含系统休眠的时间。\nvar uptimeNanoseconds: UInt64\n\n类属性\nstatic let distantFuture: DispatchTime\n\n类方法\n// 返回当前时间\nstatic func now()\n~~~\n##  DispatchTimeInterVal\n枚举类  使用其值来确定DispatchSourceTimer启动或者I/O处理的时间间隔。\n\n（未完待续）\n","source":"_posts/iOS/Dispatch.md","raw":"---\ntitle:  Dispatch \ndate: 2017-10-27 22:05\ncategories:\n- iOS\ntags: \n- DispatchQueue \n---\n# DispatchQueue\n该类管理任务项的执行.每个提交到一个队列中的任务项将被系统管理的线程池处理.\n[测试Demo](https://github.com/913868456/SwiftDemo)\n\n## 同步和异步执行\n\n每个任务项可以被同步或者异步执行.当一个任务项使用同步方法执行时,程序会直到执行项执行完毕才返回.当一个任务项使用异步方法执行时,异步方法会马上返回\n\n## 串行和并行队列\n\n一个分发队列可以是串行队列,任务项一次只能执行一个.或者是并行队列,任务项目被序列化,但是却可以一次全部运行或者在任何顺序下终止.\n串行或者并行队列处理工作项都遵循FIFO原则\n\n>  ## 重要\n>  尝试同步执行工作项在主队列容易导致死锁.\n\n## 全局队列(global concurrent queue)\n\n全局队列是并行队列，系统创建了许多全局队列供程序使用\n\n\n## DispatchQueue\nDispatchqueue  管理任务项的执行。每个提交到队列中的任务项被系统管理的线程池处理。\n\n## 常用方法\n~~~\n\n实例创建\n\ninit(__label: UnsafePointer<Int8>?, attr: __OS_dispatch_queue_attr?)\n\n参数介绍\n\nlabel:  com.example.myqueue (可不填)，主要功能是标记线程，方便调试。\nattr :  DISPATCH_QUEUE_SERIAL; DISPATCH_QUEUE_CONCURRENT; 标明创建的是串行队列还是并行队列。\n\ninit(label: String, qos: DispatchQoS, attributes: DispatchQueue.Attributes, autoreleaseFrequency: DispatchQueue.AutoreleaseFrequency, target: DispatchQueue?)\n\n参数介绍\n\nattributes: concurrent 可以用来创建并行队列\n\nQoS  : 枚举（unspecified,background,utility,default,userInitiated,userInterractive）\n优先级从低到高,在有优先级需求的时候使用.\n\ntarget: 可以将队列添加到一个某个目标队列，最终将在目标队列执行。\n\n实例方法\n\n同步方法\n\n// 提交block到一个队列中执行，直到那个block完成。\nfunc sync(execute: () -> Void)\n\nfunc sync(execute: DispatchWorkItem)\n\n异步方法\nfunc async(execute: DispatchWorkItem)\n\n类属性\nclass var main: DispatchQueue\n\n类方法\nclass func concurrentPerform(iterations: Int, execute work: (Int) -> Void)\n\niterations: 迭代次数\n\n其他方法\nfunc setTarget(queue: DispatchQueue?)\n参数说明: 对象所在的新的目标队列.这个队列引用加一,之前所在队列,如果可能的话,将被释放.这个参数不能为NULL\n\n 讨论\n目标队列为对象处理负责.目标队列决定了对象的析构器的调用.更改对象的目标队列会改变他们的行为.\n如果提交一个block到串行队列,串行队列的目标队列是一个不同的串行队列,该Block不会与提交到目标队列的其他Block并发调用或者说其他与该队列拥有相同目标队列的队列并发执行.\n\nDispatch souces: 分发源的目标队列明确了(事件处理和取消)的位置.\n\n全局队列明确优先级,获取一个具有优先级别的全局队列.\nclass func global(qos: DispatchQoS.QoSClass)\n\n~~~\n用一个表格来表示串并行队列同步异步执行的情况\n\n| | 同步执行| 异步执行\n----|------|----\n串行队列| 当前线程，一个一个执行| 其他线程，一个一个执行\n并行队列| 当前线程，一个一个执行| 多个线程，一起执行 \n\n# DispatchWorkItem\n\nDispatchWorkItem包含能够被执行的任务。一个任务项能够被分配至DispatchQueue 和 DispatchGroup.一个任务项也能被置为一个DispatchSource 事件，注册项，或者错误处理。\n```\n实例化\n\ninit(qos: DispatchQoS = default, flags: DispatchWorkItemFlags = default, block: @escaping () -> Void)\n\n参数介绍\nQos:   同上\nflags: 任务项的性质，是否要创建新线程，或者创建barrior。\n关于barrior需要描述一下,网上查找的资料描述: 只针对一个并行队列.同步点之前的任务，会并发执行，到了同步点就会等待，等待同步点的任务执行完成的时候，继续后面的任务，再次并发执行\n\n项目中主要还是用到它的创建方法，其他略。\n```\n\n# DispatchTime\n\nDispatchTime代表与具有纳秒（十亿分之一秒）精度的时钟相关的一个时间点。\n\n~~~\n实例方法\n// 创建后即开始启动计时。\ninit(uptimeNanoseconds: UInt64)\n\n\n实例属性\n// 返回创建以来到当前时间的纳秒数，包含系统休眠的时间。\nvar uptimeNanoseconds: UInt64\n\n类属性\nstatic let distantFuture: DispatchTime\n\n类方法\n// 返回当前时间\nstatic func now()\n~~~\n##  DispatchTimeInterVal\n枚举类  使用其值来确定DispatchSourceTimer启动或者I/O处理的时间间隔。\n\n（未完待续）\n","slug":"iOS/Dispatch","published":1,"updated":"2020-09-27T11:08:15.741Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgq6gnx0001rt29k8dvd29hq","content":"<h1 id=\"DispatchQueue\"><a href=\"#DispatchQueue\" class=\"headerlink\" title=\"DispatchQueue\"></a>DispatchQueue</h1><p>该类管理任务项的执行.每个提交到一个队列中的任务项将被系统管理的线程池处理.<br><a href=\"https://github.com/913868456/SwiftDemo\">测试Demo</a></p>\n<h2 id=\"同步和异步执行\"><a href=\"#同步和异步执行\" class=\"headerlink\" title=\"同步和异步执行\"></a>同步和异步执行</h2><p>每个任务项可以被同步或者异步执行.当一个任务项使用同步方法执行时,程序会直到执行项执行完毕才返回.当一个任务项使用异步方法执行时,异步方法会马上返回</p>\n<h2 id=\"串行和并行队列\"><a href=\"#串行和并行队列\" class=\"headerlink\" title=\"串行和并行队列\"></a>串行和并行队列</h2><p>一个分发队列可以是串行队列,任务项一次只能执行一个.或者是并行队列,任务项目被序列化,但是却可以一次全部运行或者在任何顺序下终止.<br>串行或者并行队列处理工作项都遵循FIFO原则</p>\n<blockquote>\n<h2 id=\"重要\"><a href=\"#重要\" class=\"headerlink\" title=\"重要\"></a>重要</h2><p> 尝试同步执行工作项在主队列容易导致死锁.</p>\n</blockquote>\n<h2 id=\"全局队列-global-concurrent-queue\"><a href=\"#全局队列-global-concurrent-queue\" class=\"headerlink\" title=\"全局队列(global concurrent queue)\"></a>全局队列(global concurrent queue)</h2><p>全局队列是并行队列，系统创建了许多全局队列供程序使用</p>\n<h2 id=\"DispatchQueue-1\"><a href=\"#DispatchQueue-1\" class=\"headerlink\" title=\"DispatchQueue\"></a>DispatchQueue</h2><p>Dispatchqueue  管理任务项的执行。每个提交到队列中的任务项被系统管理的线程池处理。</p>\n<h2 id=\"常用方法\"><a href=\"#常用方法\" class=\"headerlink\" title=\"常用方法\"></a>常用方法</h2><pre><code class=\"hljs less\">\n实例创建\n\n<span class=\"hljs-selector-tag\">init</span>(<span class=\"hljs-attribute\">__label</span>: UnsafePointer&lt;Int8&gt;?, <span class=\"hljs-attribute\">attr</span>: __OS_dispatch_queue_attr?)\n\n参数介绍\n\n<span class=\"hljs-selector-tag\">label</span>:  <span class=\"hljs-selector-tag\">com</span><span class=\"hljs-selector-class\">.example</span><span class=\"hljs-selector-class\">.myqueue</span> (可不填)，主要功能是标记线程，方便调试。\n<span class=\"hljs-selector-tag\">attr</span> :  <span class=\"hljs-selector-tag\">DISPATCH_QUEUE_SERIAL</span>; <span class=\"hljs-selector-tag\">DISPATCH_QUEUE_CONCURRENT</span>; 标明创建的是串行队列还是并行队列。\n\n<span class=\"hljs-selector-tag\">init</span>(<span class=\"hljs-attribute\">label</span>: String, <span class=\"hljs-attribute\">qos</span>: DispatchQoS, <span class=\"hljs-attribute\">attributes</span>: DispatchQueue.Attributes, <span class=\"hljs-attribute\">autoreleaseFrequency</span>: DispatchQueue.AutoreleaseFrequency, <span class=\"hljs-attribute\">target</span>: DispatchQueue?)\n\n参数介绍\n\n<span class=\"hljs-selector-tag\">attributes</span>: <span class=\"hljs-selector-tag\">concurrent</span> 可以用来创建并行队列\n\n<span class=\"hljs-selector-tag\">QoS</span>  : 枚举（<span class=\"hljs-selector-tag\">unspecified</span>,<span class=\"hljs-selector-tag\">background</span>,<span class=\"hljs-selector-tag\">utility</span>,<span class=\"hljs-selector-tag\">default</span>,<span class=\"hljs-selector-tag\">userInitiated</span>,<span class=\"hljs-selector-tag\">userInterractive</span>）\n优先级从低到高,在有优先级需求的时候使用.\n\n<span class=\"hljs-selector-tag\">target</span>: 可以将队列添加到一个某个目标队列，最终将在目标队列执行。\n\n实例方法\n\n同步方法\n\n<span class=\"hljs-comment\">// 提交block到一个队列中执行，直到那个block完成。</span>\n<span class=\"hljs-selector-tag\">func</span> <span class=\"hljs-selector-tag\">sync</span>(<span class=\"hljs-attribute\">execute</span>: () -&gt; Void)\n\n<span class=\"hljs-selector-tag\">func</span> <span class=\"hljs-selector-tag\">sync</span>(<span class=\"hljs-attribute\">execute</span>: DispatchWorkItem)\n\n异步方法\n<span class=\"hljs-selector-tag\">func</span> <span class=\"hljs-selector-tag\">async</span>(<span class=\"hljs-attribute\">execute</span>: DispatchWorkItem)\n\n类属性\n<span class=\"hljs-selector-tag\">class</span> <span class=\"hljs-selector-tag\">var</span> <span class=\"hljs-selector-tag\">main</span>: <span class=\"hljs-selector-tag\">DispatchQueue</span>\n\n类方法\n<span class=\"hljs-selector-tag\">class</span> <span class=\"hljs-selector-tag\">func</span> <span class=\"hljs-selector-tag\">concurrentPerform</span>(<span class=\"hljs-attribute\">iterations</span>: Int, execute <span class=\"hljs-attribute\">work</span>: (Int) -&gt; Void)\n\n<span class=\"hljs-selector-tag\">iterations</span>: 迭代次数\n\n其他方法\n<span class=\"hljs-selector-tag\">func</span> <span class=\"hljs-selector-tag\">setTarget</span>(<span class=\"hljs-attribute\">queue</span>: DispatchQueue?)\n参数说明: 对象所在的新的目标队列.这个队列引用加一,之前所在队列,如果可能的话,将被释放.这个参数不能为<span class=\"hljs-selector-tag\">NULL</span>\n\n 讨论\n目标队列为对象处理负责.目标队列决定了对象的析构器的调用.更改对象的目标队列会改变他们的行为.\n如果提交一个<span class=\"hljs-selector-tag\">block</span>到串行队列,串行队列的目标队列是一个不同的串行队列,该<span class=\"hljs-selector-tag\">Block</span>不会与提交到目标队列的其他<span class=\"hljs-selector-tag\">Block</span>并发调用或者说其他与该队列拥有相同目标队列的队列并发执行.\n\n<span class=\"hljs-selector-tag\">Dispatch</span> <span class=\"hljs-selector-tag\">souces</span>: 分发源的目标队列明确了(事件处理和取消)的位置.\n\n全局队列明确优先级,获取一个具有优先级别的全局队列.\n<span class=\"hljs-selector-tag\">class</span> <span class=\"hljs-selector-tag\">func</span> <span class=\"hljs-selector-tag\">global</span>(<span class=\"hljs-attribute\">qos</span>: DispatchQoS.QoSClass)\n</code></pre>\n<p>用一个表格来表示串并行队列同步异步执行的情况</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>同步执行</th>\n<th>异步执行</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>串行队列</td>\n<td>当前线程，一个一个执行</td>\n<td>其他线程，一个一个执行</td>\n</tr>\n<tr>\n<td>并行队列</td>\n<td>当前线程，一个一个执行</td>\n<td>多个线程，一起执行</td>\n</tr>\n</tbody></table>\n<h1 id=\"DispatchWorkItem\"><a href=\"#DispatchWorkItem\" class=\"headerlink\" title=\"DispatchWorkItem\"></a>DispatchWorkItem</h1><p>DispatchWorkItem包含能够被执行的任务。一个任务项能够被分配至DispatchQueue 和 DispatchGroup.一个任务项也能被置为一个DispatchSource 事件，注册项，或者错误处理。</p>\n<pre><code class=\"hljs less\">实例化\n\n<span class=\"hljs-selector-tag\">init</span>(<span class=\"hljs-attribute\">qos</span>: DispatchQoS = default, <span class=\"hljs-attribute\">flags</span>: DispatchWorkItemFlags = default, <span class=\"hljs-attribute\">block</span>: <span class=\"hljs-variable\">@escaping</span> () -&gt; Void)\n\n参数介绍\n<span class=\"hljs-selector-tag\">Qos</span>:   同上\n<span class=\"hljs-selector-tag\">flags</span>: 任务项的性质，是否要创建新线程，或者创建<span class=\"hljs-selector-tag\">barrior</span>。\n关于<span class=\"hljs-selector-tag\">barrior</span>需要描述一下,网上查找的资料描述: 只针对一个并行队列.同步点之前的任务，会并发执行，到了同步点就会等待，等待同步点的任务执行完成的时候，继续后面的任务，再次并发执行\n\n项目中主要还是用到它的创建方法，其他略。</code></pre>\n\n<h1 id=\"DispatchTime\"><a href=\"#DispatchTime\" class=\"headerlink\" title=\"DispatchTime\"></a>DispatchTime</h1><p>DispatchTime代表与具有纳秒（十亿分之一秒）精度的时钟相关的一个时间点。</p>\n<pre><code class=\"hljs swift\">实例方法\n<span class=\"hljs-comment\">// 创建后即开始启动计时。</span>\n<span class=\"hljs-keyword\">init</span>(uptimeNanoseconds: <span class=\"hljs-type\">UInt64</span>)\n\n\n实例属性\n<span class=\"hljs-comment\">// 返回创建以来到当前时间的纳秒数，包含系统休眠的时间。</span>\n<span class=\"hljs-keyword\">var</span> uptimeNanoseconds: <span class=\"hljs-type\">UInt64</span>\n\n类属性\n<span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">let</span> distantFuture: <span class=\"hljs-type\">DispatchTime</span>\n\n类方法\n<span class=\"hljs-comment\">// 返回当前时间</span>\n<span class=\"hljs-keyword\">static</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">now</span><span class=\"hljs-params\">()</span></span></code></pre>\n<h2 id=\"DispatchTimeInterVal\"><a href=\"#DispatchTimeInterVal\" class=\"headerlink\" title=\"DispatchTimeInterVal\"></a>DispatchTimeInterVal</h2><p>枚举类  使用其值来确定DispatchSourceTimer启动或者I/O处理的时间间隔。</p>\n<p>（未完待续）</p>\n","site":{"data":{"fluid_static_prefix":{"internal_js":"/js","internal_css":"/css","internal_img":"/img","iconfont":"//at.alicdn.com/t/font_1736178_kmeydafke9r.css","anchor":"https://cdn.staticfile.org/anchor-js/4.2.2/","github_markdown":"https://cdn.staticfile.org/github-markdown-css/4.0.0/","jquery":"https://cdn.staticfile.org/jquery/3.4.1/","bootstrap":"https://cdn.staticfile.org/twitter-bootstrap/4.4.1/","highlightjs":"https://cdn.staticfile.org/highlight.js/10.0.0/","prismjs":"https://cdn.staticfile.org/prism/1.21.0/","tocbot":"https://cdn.staticfile.org/tocbot/4.11.1/","typed":"https://cdn.staticfile.org/typed.js/2.0.11/","fancybox":"https://cdn.staticfile.org/fancybox/3.5.7/","mathjax":"https://cdn.staticfile.org/mathjax/3.0.5/es5/","katex":"https://cdn.staticfile.org/KaTeX/0.11.1/","aplayer":"https://cdn.staticfile.org/aplayer/1.10.1/","busuanzi":"https://busuanzi.ibruce.info/busuanzi/2.3/","clipboard":"https://cdn.staticfile.org/clipboard.js/2.0.6/","mermaid":"https://cdn.staticfile.org/mermaid/8.5.0/","valine":"https://cdn.staticfile.org/valine/1.4.14/","gitalk":"https://cdn.staticfile.org/gitalk/1.6.2/","blueimp_md5":"https://cdn.staticfile.org/blueimp-md5/2.13.0/","disqusjs":"https://cdn.jsdelivr.net/npm/disqusjs@1.0/dist/","hint":"/lib/hint/"},"fluid_config":{"favicon":"/img/favicon.png","apple_touch_icon":"/img/favicon.png","title_join_string":" - ","force_https":false,"code":{"copy_btn":true,"highlight":{"enable":true,"lib":"highlightjs","highlightjs":{"style":"Github Gist","bg_color":false},"prismjs":{"style":"default","preprocess":true}}},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"_","loop":false},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"right","visible":"hover","icon":""},"mouse_click":{"enable":false,"style":"values"}},"dark_mode":{"enable":true,"default":"auto"},"color":{"body_bg_color":"#eee","body_bg_color_dark":"#181c27","navbar_bg_color":"#2f4154","navbar_bg_color_dark":"#1f3144","navbar_text_color":"#fff","navbar_text_color_dark":"#d0d0d0","text_color":"#3c4858","text_color_dark":"#c4c6c9","sec_text_color":"#718096","sec_text_color_dark":"#a7a9ad","post_text_color":"#2c3e50","post_text_color_dark":"#c4c6c9","post_heading_color":"#1a202c","post_heading_color_dark":"#c4c6c9","post_link_color":"#0366d6","post_link_color_dark":"#1589e9","link_hover_color":"#30a9de","link_hover_color_dark":"#30a9de","link_hover_bg_color":"#f8f9fa","link_hover_bg_color_dark":"#364151","board_color":"#fff","board_color_dark":"#252d38"},"font":{"font_size":"16px","font_family":null,"code_font_size":"85%"},"custom_js":null,"custom_css":null,"custom_html":"","web_analytics":{"enable":false,"baidu":null,"google":null,"gtag":null,"tencent":{"sid":null,"cid":null},"woyaola":null,"cnzz":null,"leancloud":{"app_id":null,"app_key":null,"server_url":null}},"lazyload":{"enable":true,"onlypost":false},"daovoice":{"enable":false,"appid":""},"aplayer":{"enable":false,"autoplay":false,"loop":"all","order":"random","theme":"#b7daff","songs":[{"name":"name","artist":"artist","url":"/songs/test.mp3","cover":"/img/cover.jpg"},{"name":"name","artist":"artist","url":"https://...url.mp3","cover":"https://...cover.jpg"}]},"version":{"check":false},"navbar":{"blog_title":"吃面多放葱","ground_glass":{"enable":false,"px":3,"alpha":0.7},"menu":[{"key":"home","link":"/","icon":"iconfont icon-home-fill"},{"key":"category","link":"/categories/","icon":"iconfont icon-category-fill"},{"key":"tag","link":"/tags/","icon":"iconfont icon-tags-fill"},{"key":"about","link":"/about/","icon":"iconfont icon-user-fill"}]},"search":{"enable":true,"path":"/local-search.xml","generate_path":"/local-search.xml","field":"post","content":true},"scroll_down_arrow":{"enable":true,"banner_height_limit":90,"scroll_after_turning_page":true},"banner_parallax":true,"footer":{"statistics":{"enable":false,"source":"busuanzi","pv_format":"总访问量 {} 次","uv_format":"总访客数 {} 人"},"beian":{"enable":false,"icp_text":"京ICP证123456号","police_text":"京公网安备12345678号","police_code":12345678,"police_icon":"/img/police_beian.png"}},"scroll_top_arrow":{"enable":true},"index":{"banner_img":"/img/default.png","banner_img_height":100,"banner_mask_alpha":0.3,"post_default_img":"","slogan":{"enable":true,"text":"像蚂蚁一样工作，像蝴蝶一样生活"},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"category":true,"tag":true}},"page":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3},"post":{"banner_img":"/img/default.png","banner_img_height":70,"banner_mask_alpha":0.3,"meta":{"author":{"enable":false},"date":{"enable":true,"format":"LL a"},"wordcount":{"enable":true,"format":"{} 字"},"min2read":{"enable":true,"format":"{} 分钟","words":100},"views":{"enable":false,"source":"busuanzi","format":"{} 次"}},"updated":{"enable":false,"content":"本文最后更新于：","relative":false},"toc":{"enable":true,"headingSelector":"h1,h2,h3,h4,h5,h6","collapseDepth":0},"copyright":{"enable":true,"content":"本博客所有文章除特别声明外，均采用 <a href=\"https://creativecommons.org/licenses/by-sa/4.0/deed.zh\" rel=\"nofollow noopener\">CC BY-SA 4.0 协议</a> ，转载请注明出处！"},"prev_next":{"enable":true},"custom":{"enable":false,"content":"<img src=\"https://octodex.github.com/images/jetpacktocat.png\" class=\"rounded mx-auto d-block mt-5\" style=\"width:150px; height:150px;\">"},"image_zoom":{"enable":true},"footnote":{"enable":true,"header":""},"math":{"enable":false,"specific":false,"engine":"mathjax"},"mermaid":{"enable":false,"specific":false,"options":{"theme":"default"}},"comments":{"enable":false,"type":"disqus"}},"utterances":{"repo":null,"issue_term":"pathname","label":"utterances","theme":"github-light","theme_dark":"github-dark","crossorigin":"anonymous"},"disqus":{"shortname":null,"disqusjs":false,"apikey":null},"gitalk":{"clientID":null,"clientSecret":null,"repo":null,"owner":null,"admin":["name"],"id":"location.pathname","language":"zh-CN","labels":["Gitalk"],"perPage":10,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true},"valine":{"appid":null,"appkey":null,"placeholder":"说点什么","path":"window.location.pathname","avatar":"retro","meta":["nick","mail","link"],"pageSize":10,"lang":"zh-CN","highlight":false,"recordIP":false,"serverURLs":null},"changyan":{"appid":"","appkey":""},"livere":{"uid":""},"remark42":{"host":"https://remark.haoyizebo.com","site_id":"haoyizebo","max_shown_comments":10,"locale":"zh"},"archive":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null},"category":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"post_limit":10,"order_by":"-length","collapse_depth":0},"tag":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null,"tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"avatar":"/img/avatar.png","name":"蔺国防","introduce":"移动应用开发者，历史文学爱好者","icons":[{"class":"iconfont icon-github-fill","link":"https://github.com","tip":"GitHub"},{"class":"iconfont icon-douban-fill","link":"https://douban.com","tip":"豆瓣"},{"class":"iconfont icon-wechat-fill","qrcode":"/img/favicon.png"}]},"page404":{"banner_img":"/img/default.png","banner_img_height":85,"banner_mask_alpha":0.3,"subtitle":"Page not found"},"links":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"items":[{"title":"Fluid Docs","intro":"主题使用指南","link":"https://hexo.fluid-dev.com/docs/","image":"/img/favicon.png"},{"title":"Fluid Repo","intro":"主题 GitHub 仓库","link":"https://github.com/fluid-dev/hexo-theme-fluid","image":"/img/favicon.png"},{"title":"Fluid Example","intro":"主题操作示例","link":"https://hexo.fluid-dev.com/docs/example/","image":"/img/favicon.png"}]}}}},"excerpt":"","more":"<h1 id=\"DispatchQueue\"><a href=\"#DispatchQueue\" class=\"headerlink\" title=\"DispatchQueue\"></a>DispatchQueue</h1><p>该类管理任务项的执行.每个提交到一个队列中的任务项将被系统管理的线程池处理.<br><a href=\"https://github.com/913868456/SwiftDemo\">测试Demo</a></p>\n<h2 id=\"同步和异步执行\"><a href=\"#同步和异步执行\" class=\"headerlink\" title=\"同步和异步执行\"></a>同步和异步执行</h2><p>每个任务项可以被同步或者异步执行.当一个任务项使用同步方法执行时,程序会直到执行项执行完毕才返回.当一个任务项使用异步方法执行时,异步方法会马上返回</p>\n<h2 id=\"串行和并行队列\"><a href=\"#串行和并行队列\" class=\"headerlink\" title=\"串行和并行队列\"></a>串行和并行队列</h2><p>一个分发队列可以是串行队列,任务项一次只能执行一个.或者是并行队列,任务项目被序列化,但是却可以一次全部运行或者在任何顺序下终止.<br>串行或者并行队列处理工作项都遵循FIFO原则</p>\n<blockquote>\n<h2 id=\"重要\"><a href=\"#重要\" class=\"headerlink\" title=\"重要\"></a>重要</h2><p> 尝试同步执行工作项在主队列容易导致死锁.</p>\n</blockquote>\n<h2 id=\"全局队列-global-concurrent-queue\"><a href=\"#全局队列-global-concurrent-queue\" class=\"headerlink\" title=\"全局队列(global concurrent queue)\"></a>全局队列(global concurrent queue)</h2><p>全局队列是并行队列，系统创建了许多全局队列供程序使用</p>\n<h2 id=\"DispatchQueue-1\"><a href=\"#DispatchQueue-1\" class=\"headerlink\" title=\"DispatchQueue\"></a>DispatchQueue</h2><p>Dispatchqueue  管理任务项的执行。每个提交到队列中的任务项被系统管理的线程池处理。</p>\n<h2 id=\"常用方法\"><a href=\"#常用方法\" class=\"headerlink\" title=\"常用方法\"></a>常用方法</h2><pre><code class=\"hljs less\">\n实例创建\n\n<span class=\"hljs-selector-tag\">init</span>(<span class=\"hljs-attribute\">__label</span>: UnsafePointer&lt;Int8&gt;?, <span class=\"hljs-attribute\">attr</span>: __OS_dispatch_queue_attr?)\n\n参数介绍\n\n<span class=\"hljs-selector-tag\">label</span>:  <span class=\"hljs-selector-tag\">com</span><span class=\"hljs-selector-class\">.example</span><span class=\"hljs-selector-class\">.myqueue</span> (可不填)，主要功能是标记线程，方便调试。\n<span class=\"hljs-selector-tag\">attr</span> :  <span class=\"hljs-selector-tag\">DISPATCH_QUEUE_SERIAL</span>; <span class=\"hljs-selector-tag\">DISPATCH_QUEUE_CONCURRENT</span>; 标明创建的是串行队列还是并行队列。\n\n<span class=\"hljs-selector-tag\">init</span>(<span class=\"hljs-attribute\">label</span>: String, <span class=\"hljs-attribute\">qos</span>: DispatchQoS, <span class=\"hljs-attribute\">attributes</span>: DispatchQueue.Attributes, <span class=\"hljs-attribute\">autoreleaseFrequency</span>: DispatchQueue.AutoreleaseFrequency, <span class=\"hljs-attribute\">target</span>: DispatchQueue?)\n\n参数介绍\n\n<span class=\"hljs-selector-tag\">attributes</span>: <span class=\"hljs-selector-tag\">concurrent</span> 可以用来创建并行队列\n\n<span class=\"hljs-selector-tag\">QoS</span>  : 枚举（<span class=\"hljs-selector-tag\">unspecified</span>,<span class=\"hljs-selector-tag\">background</span>,<span class=\"hljs-selector-tag\">utility</span>,<span class=\"hljs-selector-tag\">default</span>,<span class=\"hljs-selector-tag\">userInitiated</span>,<span class=\"hljs-selector-tag\">userInterractive</span>）\n优先级从低到高,在有优先级需求的时候使用.\n\n<span class=\"hljs-selector-tag\">target</span>: 可以将队列添加到一个某个目标队列，最终将在目标队列执行。\n\n实例方法\n\n同步方法\n\n<span class=\"hljs-comment\">// 提交block到一个队列中执行，直到那个block完成。</span>\n<span class=\"hljs-selector-tag\">func</span> <span class=\"hljs-selector-tag\">sync</span>(<span class=\"hljs-attribute\">execute</span>: () -&gt; Void)\n\n<span class=\"hljs-selector-tag\">func</span> <span class=\"hljs-selector-tag\">sync</span>(<span class=\"hljs-attribute\">execute</span>: DispatchWorkItem)\n\n异步方法\n<span class=\"hljs-selector-tag\">func</span> <span class=\"hljs-selector-tag\">async</span>(<span class=\"hljs-attribute\">execute</span>: DispatchWorkItem)\n\n类属性\n<span class=\"hljs-selector-tag\">class</span> <span class=\"hljs-selector-tag\">var</span> <span class=\"hljs-selector-tag\">main</span>: <span class=\"hljs-selector-tag\">DispatchQueue</span>\n\n类方法\n<span class=\"hljs-selector-tag\">class</span> <span class=\"hljs-selector-tag\">func</span> <span class=\"hljs-selector-tag\">concurrentPerform</span>(<span class=\"hljs-attribute\">iterations</span>: Int, execute <span class=\"hljs-attribute\">work</span>: (Int) -&gt; Void)\n\n<span class=\"hljs-selector-tag\">iterations</span>: 迭代次数\n\n其他方法\n<span class=\"hljs-selector-tag\">func</span> <span class=\"hljs-selector-tag\">setTarget</span>(<span class=\"hljs-attribute\">queue</span>: DispatchQueue?)\n参数说明: 对象所在的新的目标队列.这个队列引用加一,之前所在队列,如果可能的话,将被释放.这个参数不能为<span class=\"hljs-selector-tag\">NULL</span>\n\n 讨论\n目标队列为对象处理负责.目标队列决定了对象的析构器的调用.更改对象的目标队列会改变他们的行为.\n如果提交一个<span class=\"hljs-selector-tag\">block</span>到串行队列,串行队列的目标队列是一个不同的串行队列,该<span class=\"hljs-selector-tag\">Block</span>不会与提交到目标队列的其他<span class=\"hljs-selector-tag\">Block</span>并发调用或者说其他与该队列拥有相同目标队列的队列并发执行.\n\n<span class=\"hljs-selector-tag\">Dispatch</span> <span class=\"hljs-selector-tag\">souces</span>: 分发源的目标队列明确了(事件处理和取消)的位置.\n\n全局队列明确优先级,获取一个具有优先级别的全局队列.\n<span class=\"hljs-selector-tag\">class</span> <span class=\"hljs-selector-tag\">func</span> <span class=\"hljs-selector-tag\">global</span>(<span class=\"hljs-attribute\">qos</span>: DispatchQoS.QoSClass)\n</code></pre>\n<p>用一个表格来表示串并行队列同步异步执行的情况</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>同步执行</th>\n<th>异步执行</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>串行队列</td>\n<td>当前线程，一个一个执行</td>\n<td>其他线程，一个一个执行</td>\n</tr>\n<tr>\n<td>并行队列</td>\n<td>当前线程，一个一个执行</td>\n<td>多个线程，一起执行</td>\n</tr>\n</tbody></table>\n<h1 id=\"DispatchWorkItem\"><a href=\"#DispatchWorkItem\" class=\"headerlink\" title=\"DispatchWorkItem\"></a>DispatchWorkItem</h1><p>DispatchWorkItem包含能够被执行的任务。一个任务项能够被分配至DispatchQueue 和 DispatchGroup.一个任务项也能被置为一个DispatchSource 事件，注册项，或者错误处理。</p>\n<pre><code class=\"hljs less\">实例化\n\n<span class=\"hljs-selector-tag\">init</span>(<span class=\"hljs-attribute\">qos</span>: DispatchQoS = default, <span class=\"hljs-attribute\">flags</span>: DispatchWorkItemFlags = default, <span class=\"hljs-attribute\">block</span>: <span class=\"hljs-variable\">@escaping</span> () -&gt; Void)\n\n参数介绍\n<span class=\"hljs-selector-tag\">Qos</span>:   同上\n<span class=\"hljs-selector-tag\">flags</span>: 任务项的性质，是否要创建新线程，或者创建<span class=\"hljs-selector-tag\">barrior</span>。\n关于<span class=\"hljs-selector-tag\">barrior</span>需要描述一下,网上查找的资料描述: 只针对一个并行队列.同步点之前的任务，会并发执行，到了同步点就会等待，等待同步点的任务执行完成的时候，继续后面的任务，再次并发执行\n\n项目中主要还是用到它的创建方法，其他略。</code></pre>\n\n<h1 id=\"DispatchTime\"><a href=\"#DispatchTime\" class=\"headerlink\" title=\"DispatchTime\"></a>DispatchTime</h1><p>DispatchTime代表与具有纳秒（十亿分之一秒）精度的时钟相关的一个时间点。</p>\n<pre><code class=\"hljs swift\">实例方法\n<span class=\"hljs-comment\">// 创建后即开始启动计时。</span>\n<span class=\"hljs-keyword\">init</span>(uptimeNanoseconds: <span class=\"hljs-type\">UInt64</span>)\n\n\n实例属性\n<span class=\"hljs-comment\">// 返回创建以来到当前时间的纳秒数，包含系统休眠的时间。</span>\n<span class=\"hljs-keyword\">var</span> uptimeNanoseconds: <span class=\"hljs-type\">UInt64</span>\n\n类属性\n<span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">let</span> distantFuture: <span class=\"hljs-type\">DispatchTime</span>\n\n类方法\n<span class=\"hljs-comment\">// 返回当前时间</span>\n<span class=\"hljs-keyword\">static</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">now</span><span class=\"hljs-params\">()</span></span></code></pre>\n<h2 id=\"DispatchTimeInterVal\"><a href=\"#DispatchTimeInterVal\" class=\"headerlink\" title=\"DispatchTimeInterVal\"></a>DispatchTimeInterVal</h2><p>枚举类  使用其值来确定DispatchSourceTimer启动或者I/O处理的时间间隔。</p>\n<p>（未完待续）</p>\n"},{"title":"JavaScriptCore","date":"2018-02-06T12:26:00.000Z","_content":"\n运行应用程序中的JavaScript程序，并支持在应用程序编写JavaScript。\n\n## 通览\nJavaScriptCore框架能够在Swift, Objective-C和C等环境中运行JS脚本.也可以使用JavaScriptCore框架插入自定义的对象到JS脚本中.\n\n## Topics\n\n#### Classes \n\n###### Class JSContext\n\n一个JSContext对象表示一个JavaScript执行环境.你创建和使用JavaScript contexts去运行来自OC或者Swift代码编写的JavaScript脚本.来访问JavaScript中定义的或计算的值，并使JavaScript能够访问本地对象、方法或函数。\n\n```\n//创建一个JavaScript context\n//Discussion\n//初始化创建context时,会伴随一个新的,独立的virtual machine(一个JSVirtual Machine 对象).您无法在包含在不同virtual machines中的context之间传递JavaScript values(JSValue 对象).创建共享一个virtual machine的context,使用下面的初始化方法\ninit!()\n\n//创建一个JavaScript context, 与一个具体的virtual machine关联.\n//Discussion\n//默认情况下,每个context拥有一个独立的virtual machine(一个 JSVirtualMachine对象).您无法在不同的virtual machine中的context传递JavaScript value.使用该方法创建的context,可以和其他的contexts共享它的virtual machine,从而允许在不同的context中传递JSValue对象.\ninit!(virturalMachine: JSVirturalmachine!)\n\n\n/**\n    执行具体的JavaScript代码\n    参数:   需要评估的JavaScript 源码\n    返回值: 脚本最后生成的值. 注意,脚本可以导致未定义的JavaScript值\n */\n //Discussion\n //一个脚本运行任何级高级别代码并且给context的全局对象对象添加方法和对象定义.\nfunc evaluateScript(String!)\n\n//执行性具体的JavaScript代码,指定的URL用来对它定位.(调试的时候可以使用)\nfunc evaluateScript(String!, withSourceURL: URL!)\n\n//在一个运行的context中检查回调状态\n//返回当前执行JS的context\nclass func current()\n\n//返回当前执行的JS方法\nclass func currentCallee()\n\n//返回当前执行JS代码中这个关键字的值\nclass func currentThis()\n\n//返会从JS代码到当前本地回调的参数\nclass func currentArguments()\n\n//与Context关联的JS全局对象\nvar globalObject: JSValue!\n\n//脚本执行中被抛出的异常\nvar exception: JSValue!\n\n//一个block用来处理JS脚本执行中抛出的异常\nvar exceptionHandler: ((JSContext?, JSValue?) -> Void)!\n\n//当前context所在的JavaScript virtual machine \nvar virtualMachine: JSVirtualMachine!\n\n//context 的描述\nvar name: String!\n\n//允许通过下标语法,返回在context的全局对象中的具体JS属性值\nfunc objectForKeyedSubscript(Any!)\n\n//允许通过下标语法,给context的全局对象设定指定JS属性\nfunc setObject(Any!, forKeyedSubscript: (NSCoping & NSobject Protocol)!)\n\n//举个例子\n\nJSContext *context = [[JSContext alloc] init];\ncontext[@\"makeNSColor\"] = ^(NSDictionary *rgb){\n    float r = rgb[@\"red\"].floatValue;\n    float g = rgb[@\"green\"].floatValue;\n    float b = rgb[@\"blue\"].floatValue;\n    return [NSColor colorWithRed:(r / 255.f) green:(g / 255.f) blue:(b / 255.f) alpha:1.0];\n};\n\n```\n\n\n###### Class JSManageValue\n\n一个JSManagedValue对象包装了一个JSValue对象.添加\"条件引用\"行为,以实现对值的自动内存管理.对于一个管理值,主要用例是在一个OC或者Swift对象中存储一个JavaScript值,该OC或者Swift对象本身被导出到JavaScript.\n\n###### Class JSValue\n\n一个JSValue实例是对一个JavaScript 值的参照.您可以使用JSValue类转换JavaScript和objective - c 或者 Swift 之间的基本值(例如数字和字符串)，以便在本地代码和JavaScript代码之间传递数据。您还可以使用这个类创建JavaScript对象，这些对象包装自定义类的本地对象或JavaScript函数，这些函数的实现由本地方法或Block提供。\n\n```\n// JS类型与本地类型转换\n\nOC(Swift) Types           JS Types           Notes\n-----------------------------------------------------\nnil                       undefined \n-----------------------------------------------------\nNSNull                    null\n-----------------------------------------------------\nNSString (String )        String \n-----------------------------------------------------\nNSNumber                  Number,Boolean\n-----------------------------------------------------\nNSDictionary(Dictionary)  Object\n-----------------------------------------------------\nNSArray (Array)           Array\n----------------------------------------------------\nNSDate                    Date\n-----------------------------------------------------\nObject (AnyObject)        Object \n\nClasss (AnyClass)\n-----------------------------------------------------\nNSRange,CGRect,           Object          其他结构体类型不支持\nCGPoint,CGSize\n-----------------------------------------------------\nBlock(Closure)            Function        JS函数不转换本地block/闭包除非通过一个本地blcok/closure 返回\n-----------------------------------------------------\n\n//创建一个JS 值来转换指定的本地对象\ninit!(object: Any!, in: JSContext!)\n\n//创建一个JS 值来表示指定的布尔值\ninit!(bool: Bool, in: JSContext!)\n\n//创建一个JS 值来表示指定的Double类型值\ninit!(double: Double, in: JSContext!)\n\n//创建一个空的JS对象\ninit!(newObjectIn: JSContext!)\n\n//创建一个空的JS数组\ninit!(newArrayIn: JSContext!)\n\n//创建一个JSError\ninit!(neewErrorFromMessage: String!, in: JSContext!)\n\n...\n\n//读取并转换JS值为本地类型\nfunc toObject()\n\nfunc toObjectOf(AnyClass!)\n\nfunc toBool()\n\nfunc toDouble()\n\nfunc toString()\n\nfunc toDate()\n\nfunc toArray()\n\nfunc toDictionary()\n\n//类型判断\n\nvar isUndefined: Bool\n\nvar isNull     : Bool\n\nvar isBoolean  : Bool\n\nvar isNumber   : Bool\n\n...\n\n//JS值比较\nfunc isEqual(to: Any!)\n\nfunc isEqualWithTypeCoercion(to: Any!)\n\nfunc isInstance(of: Any!)\n\n//方法调用\nfunc invokeMethod(String!, withArguments: [Any]!)\n\n//容器值\n//定义一个JS对象的属性或者修改属性的定义\nfunc defineProperty(String!, descriptor: Any!)\n\n//删除JS对象的属性\nfunc deleteProperty(String!)\n\n//根据下标赋值\nfunc setValue(Any!, at: Int)\n\n//根据下标取值\nfunc atIndex(Int)\n\n//给指定属性赋值\nfunc setValue(Any!, forProperty: String!)\n\n//根据指定属性取值\nfunc forProperty(String!)\n\n//获取持有这个值的context\nvar context: JSContext!\n\n//通过下标语法获取值\nfunc objectAtIndexedSubscript(Int)\n\nfunc setObject(Any!, atIndexedSubscript: Int)\n\nfunc objectForkeyedSubscript(Any!)\n\nfunc setObject(Any!, forKeyedSubscritp: (NSCoping & NSObjectProtocol)!)\n\n```\n\n\n###### Class JSVirtualMachine\n\n一个JSVirtualMachine 实例表示JavaScript执行中的一个独立环境.您可以使用该类用于两个主要目的:去支撑并发的JavaScript执行,管理JavaScript与OC,Swift之间桥接过来的对象内存.\n\n###### Protocol JSExport\n\n实现该协议用来导出OC类和他们的实例方法,类方法,属性到JavaScript代码中.\n\nListing 1  Exporting an Objective-C Class to JavaScript\n\n```\n@protocol MyPointExports <JSExport>\n@property double x;\n@property double y;\n- (NSString *)description;\n- (instancetype)initWithX:(double)x y:(double)y;\n+ (MyPoint *)makePointWithX:(double)x y:(double)y;\n@end\n \n@interface MyPoint : NSObject <MyPointExports>\n- (void)myPrivateMethod;  // Not in the MyPointExports protocol, so not visible to JavaScript code.\n@end\n \n@implementation MyPoint\n// ...\n@end\n```\nListing 2 Useing an Exported Objectiv-C Class from JavaScript\n\n```\n// Objective-C properties become fields.\npoint.x;\npoint.x = 10;\n// Objective-C instance methods become functions.\npoint.description();\n// Objective-C initializers can be called with constructor syntax.\nvar p = MyPoint(1, 2);\n// Objective-C class methods become functions on the constructor object.\nvar q = MyPoint.makePointWithXY(0, 0);\n\n```\n\n## 参考文档\n\n[JavaScriptCore](https://developer.apple.com/documentation/javascriptcore?language=occ)\n","source":"_posts/iOS/JavaScriptCore.md","raw":"---\ntitle:  JavaScriptCore \ndate:  2018-02-06 20:26\ncategories:\n- iOS\ntags: \n- JavaScriptCore \n---\n\n运行应用程序中的JavaScript程序，并支持在应用程序编写JavaScript。\n\n## 通览\nJavaScriptCore框架能够在Swift, Objective-C和C等环境中运行JS脚本.也可以使用JavaScriptCore框架插入自定义的对象到JS脚本中.\n\n## Topics\n\n#### Classes \n\n###### Class JSContext\n\n一个JSContext对象表示一个JavaScript执行环境.你创建和使用JavaScript contexts去运行来自OC或者Swift代码编写的JavaScript脚本.来访问JavaScript中定义的或计算的值，并使JavaScript能够访问本地对象、方法或函数。\n\n```\n//创建一个JavaScript context\n//Discussion\n//初始化创建context时,会伴随一个新的,独立的virtual machine(一个JSVirtual Machine 对象).您无法在包含在不同virtual machines中的context之间传递JavaScript values(JSValue 对象).创建共享一个virtual machine的context,使用下面的初始化方法\ninit!()\n\n//创建一个JavaScript context, 与一个具体的virtual machine关联.\n//Discussion\n//默认情况下,每个context拥有一个独立的virtual machine(一个 JSVirtualMachine对象).您无法在不同的virtual machine中的context传递JavaScript value.使用该方法创建的context,可以和其他的contexts共享它的virtual machine,从而允许在不同的context中传递JSValue对象.\ninit!(virturalMachine: JSVirturalmachine!)\n\n\n/**\n    执行具体的JavaScript代码\n    参数:   需要评估的JavaScript 源码\n    返回值: 脚本最后生成的值. 注意,脚本可以导致未定义的JavaScript值\n */\n //Discussion\n //一个脚本运行任何级高级别代码并且给context的全局对象对象添加方法和对象定义.\nfunc evaluateScript(String!)\n\n//执行性具体的JavaScript代码,指定的URL用来对它定位.(调试的时候可以使用)\nfunc evaluateScript(String!, withSourceURL: URL!)\n\n//在一个运行的context中检查回调状态\n//返回当前执行JS的context\nclass func current()\n\n//返回当前执行的JS方法\nclass func currentCallee()\n\n//返回当前执行JS代码中这个关键字的值\nclass func currentThis()\n\n//返会从JS代码到当前本地回调的参数\nclass func currentArguments()\n\n//与Context关联的JS全局对象\nvar globalObject: JSValue!\n\n//脚本执行中被抛出的异常\nvar exception: JSValue!\n\n//一个block用来处理JS脚本执行中抛出的异常\nvar exceptionHandler: ((JSContext?, JSValue?) -> Void)!\n\n//当前context所在的JavaScript virtual machine \nvar virtualMachine: JSVirtualMachine!\n\n//context 的描述\nvar name: String!\n\n//允许通过下标语法,返回在context的全局对象中的具体JS属性值\nfunc objectForKeyedSubscript(Any!)\n\n//允许通过下标语法,给context的全局对象设定指定JS属性\nfunc setObject(Any!, forKeyedSubscript: (NSCoping & NSobject Protocol)!)\n\n//举个例子\n\nJSContext *context = [[JSContext alloc] init];\ncontext[@\"makeNSColor\"] = ^(NSDictionary *rgb){\n    float r = rgb[@\"red\"].floatValue;\n    float g = rgb[@\"green\"].floatValue;\n    float b = rgb[@\"blue\"].floatValue;\n    return [NSColor colorWithRed:(r / 255.f) green:(g / 255.f) blue:(b / 255.f) alpha:1.0];\n};\n\n```\n\n\n###### Class JSManageValue\n\n一个JSManagedValue对象包装了一个JSValue对象.添加\"条件引用\"行为,以实现对值的自动内存管理.对于一个管理值,主要用例是在一个OC或者Swift对象中存储一个JavaScript值,该OC或者Swift对象本身被导出到JavaScript.\n\n###### Class JSValue\n\n一个JSValue实例是对一个JavaScript 值的参照.您可以使用JSValue类转换JavaScript和objective - c 或者 Swift 之间的基本值(例如数字和字符串)，以便在本地代码和JavaScript代码之间传递数据。您还可以使用这个类创建JavaScript对象，这些对象包装自定义类的本地对象或JavaScript函数，这些函数的实现由本地方法或Block提供。\n\n```\n// JS类型与本地类型转换\n\nOC(Swift) Types           JS Types           Notes\n-----------------------------------------------------\nnil                       undefined \n-----------------------------------------------------\nNSNull                    null\n-----------------------------------------------------\nNSString (String )        String \n-----------------------------------------------------\nNSNumber                  Number,Boolean\n-----------------------------------------------------\nNSDictionary(Dictionary)  Object\n-----------------------------------------------------\nNSArray (Array)           Array\n----------------------------------------------------\nNSDate                    Date\n-----------------------------------------------------\nObject (AnyObject)        Object \n\nClasss (AnyClass)\n-----------------------------------------------------\nNSRange,CGRect,           Object          其他结构体类型不支持\nCGPoint,CGSize\n-----------------------------------------------------\nBlock(Closure)            Function        JS函数不转换本地block/闭包除非通过一个本地blcok/closure 返回\n-----------------------------------------------------\n\n//创建一个JS 值来转换指定的本地对象\ninit!(object: Any!, in: JSContext!)\n\n//创建一个JS 值来表示指定的布尔值\ninit!(bool: Bool, in: JSContext!)\n\n//创建一个JS 值来表示指定的Double类型值\ninit!(double: Double, in: JSContext!)\n\n//创建一个空的JS对象\ninit!(newObjectIn: JSContext!)\n\n//创建一个空的JS数组\ninit!(newArrayIn: JSContext!)\n\n//创建一个JSError\ninit!(neewErrorFromMessage: String!, in: JSContext!)\n\n...\n\n//读取并转换JS值为本地类型\nfunc toObject()\n\nfunc toObjectOf(AnyClass!)\n\nfunc toBool()\n\nfunc toDouble()\n\nfunc toString()\n\nfunc toDate()\n\nfunc toArray()\n\nfunc toDictionary()\n\n//类型判断\n\nvar isUndefined: Bool\n\nvar isNull     : Bool\n\nvar isBoolean  : Bool\n\nvar isNumber   : Bool\n\n...\n\n//JS值比较\nfunc isEqual(to: Any!)\n\nfunc isEqualWithTypeCoercion(to: Any!)\n\nfunc isInstance(of: Any!)\n\n//方法调用\nfunc invokeMethod(String!, withArguments: [Any]!)\n\n//容器值\n//定义一个JS对象的属性或者修改属性的定义\nfunc defineProperty(String!, descriptor: Any!)\n\n//删除JS对象的属性\nfunc deleteProperty(String!)\n\n//根据下标赋值\nfunc setValue(Any!, at: Int)\n\n//根据下标取值\nfunc atIndex(Int)\n\n//给指定属性赋值\nfunc setValue(Any!, forProperty: String!)\n\n//根据指定属性取值\nfunc forProperty(String!)\n\n//获取持有这个值的context\nvar context: JSContext!\n\n//通过下标语法获取值\nfunc objectAtIndexedSubscript(Int)\n\nfunc setObject(Any!, atIndexedSubscript: Int)\n\nfunc objectForkeyedSubscript(Any!)\n\nfunc setObject(Any!, forKeyedSubscritp: (NSCoping & NSObjectProtocol)!)\n\n```\n\n\n###### Class JSVirtualMachine\n\n一个JSVirtualMachine 实例表示JavaScript执行中的一个独立环境.您可以使用该类用于两个主要目的:去支撑并发的JavaScript执行,管理JavaScript与OC,Swift之间桥接过来的对象内存.\n\n###### Protocol JSExport\n\n实现该协议用来导出OC类和他们的实例方法,类方法,属性到JavaScript代码中.\n\nListing 1  Exporting an Objective-C Class to JavaScript\n\n```\n@protocol MyPointExports <JSExport>\n@property double x;\n@property double y;\n- (NSString *)description;\n- (instancetype)initWithX:(double)x y:(double)y;\n+ (MyPoint *)makePointWithX:(double)x y:(double)y;\n@end\n \n@interface MyPoint : NSObject <MyPointExports>\n- (void)myPrivateMethod;  // Not in the MyPointExports protocol, so not visible to JavaScript code.\n@end\n \n@implementation MyPoint\n// ...\n@end\n```\nListing 2 Useing an Exported Objectiv-C Class from JavaScript\n\n```\n// Objective-C properties become fields.\npoint.x;\npoint.x = 10;\n// Objective-C instance methods become functions.\npoint.description();\n// Objective-C initializers can be called with constructor syntax.\nvar p = MyPoint(1, 2);\n// Objective-C class methods become functions on the constructor object.\nvar q = MyPoint.makePointWithXY(0, 0);\n\n```\n\n## 参考文档\n\n[JavaScriptCore](https://developer.apple.com/documentation/javascriptcore?language=occ)\n","slug":"iOS/JavaScriptCore","published":1,"updated":"2020-09-27T10:42:09.751Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgq6gnx1001ut29k5c7nhoi0","content":"<p>运行应用程序中的JavaScript程序，并支持在应用程序编写JavaScript。</p>\n<h2 id=\"通览\"><a href=\"#通览\" class=\"headerlink\" title=\"通览\"></a>通览</h2><p>JavaScriptCore框架能够在Swift, Objective-C和C等环境中运行JS脚本.也可以使用JavaScriptCore框架插入自定义的对象到JS脚本中.</p>\n<h2 id=\"Topics\"><a href=\"#Topics\" class=\"headerlink\" title=\"Topics\"></a>Topics</h2><h4 id=\"Classes\"><a href=\"#Classes\" class=\"headerlink\" title=\"Classes\"></a>Classes</h4><h6 id=\"Class-JSContext\"><a href=\"#Class-JSContext\" class=\"headerlink\" title=\"Class JSContext\"></a>Class JSContext</h6><p>一个JSContext对象表示一个JavaScript执行环境.你创建和使用JavaScript contexts去运行来自OC或者Swift代码编写的JavaScript脚本.来访问JavaScript中定义的或计算的值，并使JavaScript能够访问本地对象、方法或函数。</p>\n<pre><code class=\"hljs awk\"><span class=\"hljs-regexp\">//</span>创建一个JavaScript context\n<span class=\"hljs-regexp\">//</span>Discussion\n<span class=\"hljs-regexp\">//</span>初始化创建context时,会伴随一个新的,独立的virtual machine(一个JSVirtual Machine 对象).您无法在包含在不同virtual machines中的context之间传递JavaScript values(JSValue 对象).创建共享一个virtual machine的context,使用下面的初始化方法\ninit!()\n\n<span class=\"hljs-regexp\">//</span>创建一个JavaScript context, 与一个具体的virtual machine关联.\n<span class=\"hljs-regexp\">//</span>Discussion\n<span class=\"hljs-regexp\">//</span>默认情况下,每个context拥有一个独立的virtual machine(一个 JSVirtualMachine对象).您无法在不同的virtual machine中的context传递JavaScript value.使用该方法创建的context,可以和其他的contexts共享它的virtual machine,从而允许在不同的context中传递JSValue对象.\ninit!(virturalMachine: JSVirturalmachine!)\n\n\n/**\n    执行具体的JavaScript代码\n    参数:   需要评估的JavaScript 源码\n    返回值: 脚本最后生成的值. 注意,脚本可以导致未定义的JavaScript值\n */\n <span class=\"hljs-regexp\">//</span>Discussion\n <span class=\"hljs-regexp\">//</span>一个脚本运行任何级高级别代码并且给context的全局对象对象添加方法和对象定义.\n<span class=\"hljs-keyword\">func</span> evaluateScript(String!)\n\n<span class=\"hljs-regexp\">//</span>执行性具体的JavaScript代码,指定的URL用来对它定位.(调试的时候可以使用)\n<span class=\"hljs-keyword\">func</span> evaluateScript(String!, withSourceURL: URL!)\n\n<span class=\"hljs-regexp\">//</span>在一个运行的context中检查回调状态\n<span class=\"hljs-regexp\">//</span>返回当前执行JS的context\nclass <span class=\"hljs-keyword\">func</span> current()\n\n<span class=\"hljs-regexp\">//</span>返回当前执行的JS方法\nclass <span class=\"hljs-keyword\">func</span> currentCallee()\n\n<span class=\"hljs-regexp\">//</span>返回当前执行JS代码中这个关键字的值\nclass <span class=\"hljs-keyword\">func</span> currentThis()\n\n<span class=\"hljs-regexp\">//</span>返会从JS代码到当前本地回调的参数\nclass <span class=\"hljs-keyword\">func</span> currentArguments()\n\n<span class=\"hljs-regexp\">//</span>与Context关联的JS全局对象\nvar globalObject: JSValue!\n\n<span class=\"hljs-regexp\">//</span>脚本执行中被抛出的异常\nvar exception: JSValue!\n\n<span class=\"hljs-regexp\">//</span>一个block用来处理JS脚本执行中抛出的异常\nvar exceptionHandler: ((JSContext?, JSValue?) -&gt; Void)!\n\n<span class=\"hljs-regexp\">//</span>当前context所在的JavaScript virtual machine \nvar virtualMachine: JSVirtualMachine!\n\n<span class=\"hljs-regexp\">//</span>context 的描述\nvar name: String!\n\n<span class=\"hljs-regexp\">//</span>允许通过下标语法,返回在context的全局对象中的具体JS属性值\n<span class=\"hljs-keyword\">func</span> objectForKeyedSubscript(Any!)\n\n<span class=\"hljs-regexp\">//</span>允许通过下标语法,给context的全局对象设定指定JS属性\n<span class=\"hljs-keyword\">func</span> setObject(Any!, forKeyedSubscript: (NSCoping &amp; NSobject Protocol)!)\n\n<span class=\"hljs-regexp\">//</span>举个例子\n\nJSContext *context = [[JSContext alloc] init];\ncontext[@<span class=\"hljs-string\">&quot;makeNSColor&quot;</span>] = ^(NSDictionary *rgb)&#123;\n    float r = rgb[@<span class=\"hljs-string\">&quot;red&quot;</span>].floatValue;\n    float g = rgb[@<span class=\"hljs-string\">&quot;green&quot;</span>].floatValue;\n    float b = rgb[@<span class=\"hljs-string\">&quot;blue&quot;</span>].floatValue;\n    return [NSColor colorWithRed:(r <span class=\"hljs-regexp\">/ 255.f) green:(g /</span> <span class=\"hljs-number\">255</span>.f) blue:(b / <span class=\"hljs-number\">255</span>.f) alpha:<span class=\"hljs-number\">1.0</span>];\n&#125;;\n</code></pre>\n\n\n<h6 id=\"Class-JSManageValue\"><a href=\"#Class-JSManageValue\" class=\"headerlink\" title=\"Class JSManageValue\"></a>Class JSManageValue</h6><p>一个JSManagedValue对象包装了一个JSValue对象.添加”条件引用”行为,以实现对值的自动内存管理.对于一个管理值,主要用例是在一个OC或者Swift对象中存储一个JavaScript值,该OC或者Swift对象本身被导出到JavaScript.</p>\n<h6 id=\"Class-JSValue\"><a href=\"#Class-JSValue\" class=\"headerlink\" title=\"Class JSValue\"></a>Class JSValue</h6><p>一个JSValue实例是对一个JavaScript 值的参照.您可以使用JSValue类转换JavaScript和objective - c 或者 Swift 之间的基本值(例如数字和字符串)，以便在本地代码和JavaScript代码之间传递数据。您还可以使用这个类创建JavaScript对象，这些对象包装自定义类的本地对象或JavaScript函数，这些函数的实现由本地方法或Block提供。</p>\n<pre><code class=\"hljs swift\"><span class=\"hljs-comment\">// JS类型与本地类型转换</span>\n\n<span class=\"hljs-type\">OC</span>(<span class=\"hljs-type\">Swift</span>) <span class=\"hljs-type\">Types</span>           <span class=\"hljs-type\">JS</span> <span class=\"hljs-type\">Types</span>           <span class=\"hljs-type\">Notes</span>\n-----------------------------------------------------\n<span class=\"hljs-literal\">nil</span>                       undefined \n-----------------------------------------------------\n<span class=\"hljs-type\">NSNull</span>                    null\n-----------------------------------------------------\n<span class=\"hljs-type\">NSString</span> (<span class=\"hljs-type\">String</span> )        <span class=\"hljs-type\">String</span> \n-----------------------------------------------------\n<span class=\"hljs-type\">NSNumber</span>                  <span class=\"hljs-type\">Number</span>,<span class=\"hljs-type\">Boolean</span>\n-----------------------------------------------------\n<span class=\"hljs-type\">NSDictionary</span>(<span class=\"hljs-type\">Dictionary</span>)  <span class=\"hljs-type\">Object</span>\n-----------------------------------------------------\n<span class=\"hljs-type\">NSArray</span> (<span class=\"hljs-type\">Array</span>)           <span class=\"hljs-type\">Array</span>\n----------------------------------------------------\n<span class=\"hljs-type\">NSDate</span>                    <span class=\"hljs-type\">Date</span>\n-----------------------------------------------------\n<span class=\"hljs-type\">Object</span> (<span class=\"hljs-type\">AnyObject</span>)        <span class=\"hljs-type\">Object</span> \n\n<span class=\"hljs-type\">Classs</span> (<span class=\"hljs-type\">AnyClass</span>)\n-----------------------------------------------------\n<span class=\"hljs-type\">NSRange</span>,<span class=\"hljs-type\">CGRect</span>,           <span class=\"hljs-type\">Object</span>          其他结构体类型不支持\n<span class=\"hljs-type\">CGPoint</span>,<span class=\"hljs-type\">CGSize</span>\n-----------------------------------------------------\n<span class=\"hljs-type\">Block</span>(<span class=\"hljs-type\">Closure</span>)            <span class=\"hljs-type\">Function</span>        <span class=\"hljs-type\">JS</span>函数不转换本地block/闭包除非通过一个本地blcok/closure 返回\n-----------------------------------------------------\n\n<span class=\"hljs-comment\">//创建一个JS 值来转换指定的本地对象</span>\n<span class=\"hljs-keyword\">init</span>!(object: <span class=\"hljs-type\">Any!</span>, <span class=\"hljs-keyword\">in</span>: <span class=\"hljs-type\">JSContext!</span>)\n\n<span class=\"hljs-comment\">//创建一个JS 值来表示指定的布尔值</span>\n<span class=\"hljs-keyword\">init</span>!(bool: <span class=\"hljs-type\">Bool</span>, <span class=\"hljs-keyword\">in</span>: <span class=\"hljs-type\">JSContext!</span>)\n\n<span class=\"hljs-comment\">//创建一个JS 值来表示指定的Double类型值</span>\n<span class=\"hljs-keyword\">init</span>!(double: <span class=\"hljs-type\">Double</span>, <span class=\"hljs-keyword\">in</span>: <span class=\"hljs-type\">JSContext!</span>)\n\n<span class=\"hljs-comment\">//创建一个空的JS对象</span>\n<span class=\"hljs-keyword\">init</span>!(newObjectIn: <span class=\"hljs-type\">JSContext!</span>)\n\n<span class=\"hljs-comment\">//创建一个空的JS数组</span>\n<span class=\"hljs-keyword\">init</span>!(newArrayIn: <span class=\"hljs-type\">JSContext!</span>)\n\n<span class=\"hljs-comment\">//创建一个JSError</span>\n<span class=\"hljs-keyword\">init</span>!(neewErrorFromMessage: <span class=\"hljs-type\">String!</span>, <span class=\"hljs-keyword\">in</span>: <span class=\"hljs-type\">JSContext!</span>)\n\n...\n\n<span class=\"hljs-comment\">//读取并转换JS值为本地类型</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">toObject</span><span class=\"hljs-params\">()</span></span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">toObjectOf</span><span class=\"hljs-params\">(AnyClass!)</span></span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">toBool</span><span class=\"hljs-params\">()</span></span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">toDouble</span><span class=\"hljs-params\">()</span></span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">toString</span><span class=\"hljs-params\">()</span></span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">toDate</span><span class=\"hljs-params\">()</span></span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">toArray</span><span class=\"hljs-params\">()</span></span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">toDictionary</span><span class=\"hljs-params\">()</span></span>\n\n<span class=\"hljs-comment\">//类型判断</span>\n\n<span class=\"hljs-keyword\">var</span> isUndefined: <span class=\"hljs-type\">Bool</span>\n\n<span class=\"hljs-keyword\">var</span> isNull     : <span class=\"hljs-type\">Bool</span>\n\n<span class=\"hljs-keyword\">var</span> isBoolean  : <span class=\"hljs-type\">Bool</span>\n\n<span class=\"hljs-keyword\">var</span> isNumber   : <span class=\"hljs-type\">Bool</span>\n\n...\n\n<span class=\"hljs-comment\">//JS值比较</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">isEqual</span><span class=\"hljs-params\">(to: <span class=\"hljs-keyword\">Any</span>!)</span></span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">isEqualWithTypeCoercion</span><span class=\"hljs-params\">(to: <span class=\"hljs-keyword\">Any</span>!)</span></span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">isInstance</span><span class=\"hljs-params\">(of: <span class=\"hljs-keyword\">Any</span>!)</span></span>\n\n<span class=\"hljs-comment\">//方法调用</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">invokeMethod</span><span class=\"hljs-params\">(String!, withArguments: [<span class=\"hljs-keyword\">Any</span>]!)</span></span>\n\n<span class=\"hljs-comment\">//容器值</span>\n<span class=\"hljs-comment\">//定义一个JS对象的属性或者修改属性的定义</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">defineProperty</span><span class=\"hljs-params\">(String!, descriptor: <span class=\"hljs-keyword\">Any</span>!)</span></span>\n\n<span class=\"hljs-comment\">//删除JS对象的属性</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">deleteProperty</span><span class=\"hljs-params\">(String!)</span></span>\n\n<span class=\"hljs-comment\">//根据下标赋值</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">setValue</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">Any</span>!, at: Int)</span></span>\n\n<span class=\"hljs-comment\">//根据下标取值</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">atIndex</span><span class=\"hljs-params\">(Int)</span></span>\n\n<span class=\"hljs-comment\">//给指定属性赋值</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">setValue</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">Any</span>!, forProperty: String!)</span></span>\n\n<span class=\"hljs-comment\">//根据指定属性取值</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">forProperty</span><span class=\"hljs-params\">(String!)</span></span>\n\n<span class=\"hljs-comment\">//获取持有这个值的context</span>\n<span class=\"hljs-keyword\">var</span> context: <span class=\"hljs-type\">JSContext!</span>\n\n<span class=\"hljs-comment\">//通过下标语法获取值</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">objectAtIndexedSubscript</span><span class=\"hljs-params\">(Int)</span></span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">setObject</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">Any</span>!, atIndexedSubscript: Int)</span></span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">objectForkeyedSubscript</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">Any</span>!)</span></span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">setObject</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">Any</span>!, forKeyedSubscritp: <span class=\"hljs-params\">(NSCoping &amp; NSObjectProtocol)</span></span></span>!)\n</code></pre>\n\n\n<h6 id=\"Class-JSVirtualMachine\"><a href=\"#Class-JSVirtualMachine\" class=\"headerlink\" title=\"Class JSVirtualMachine\"></a>Class JSVirtualMachine</h6><p>一个JSVirtualMachine 实例表示JavaScript执行中的一个独立环境.您可以使用该类用于两个主要目的:去支撑并发的JavaScript执行,管理JavaScript与OC,Swift之间桥接过来的对象内存.</p>\n<h6 id=\"Protocol-JSExport\"><a href=\"#Protocol-JSExport\" class=\"headerlink\" title=\"Protocol JSExport\"></a>Protocol JSExport</h6><p>实现该协议用来导出OC类和他们的实例方法,类方法,属性到JavaScript代码中.</p>\n<p>Listing 1  Exporting an Objective-C Class to JavaScript</p>\n<pre><code class=\"hljs groovy\"><span class=\"hljs-meta\">@protocol</span> MyPointExports &lt;JSExport&gt;\n<span class=\"hljs-meta\">@property</span> <span class=\"hljs-keyword\">double</span> x;\n<span class=\"hljs-meta\">@property</span> <span class=\"hljs-keyword\">double</span> y;\n- (NSString *)description;\n- (instancetype)<span class=\"hljs-attr\">initWithX:</span>(<span class=\"hljs-keyword\">double</span>)x <span class=\"hljs-attr\">y:</span>(<span class=\"hljs-keyword\">double</span>)y;\n+ (MyPoint *)<span class=\"hljs-attr\">makePointWithX:</span>(<span class=\"hljs-keyword\">double</span>)x <span class=\"hljs-attr\">y:</span>(<span class=\"hljs-keyword\">double</span>)y;\n<span class=\"hljs-meta\">@end</span>\n \n<span class=\"hljs-meta\">@interface</span> <span class=\"hljs-attr\">MyPoint :</span> NSObject &lt;MyPointExports&gt;\n- (<span class=\"hljs-keyword\">void</span>)myPrivateMethod;  <span class=\"hljs-comment\">// Not in the MyPointExports protocol, so not visible to JavaScript code.</span>\n<span class=\"hljs-meta\">@end</span>\n \n<span class=\"hljs-meta\">@implementation</span> MyPoint\n<span class=\"hljs-comment\">// ...</span>\n<span class=\"hljs-meta\">@end</span></code></pre>\n<p>Listing 2 Useing an Exported Objectiv-C Class from JavaScript</p>\n<pre><code class=\"hljs smali\">// Objective-C properties become fields.\npoint.x;\npoint.x = 10;\n// Objective-C<span class=\"hljs-built_in\"> instance </span>methods become functions.\npoint.description();\n// Objective-C initializers can be called with<span class=\"hljs-keyword\"> constructor</span> syntax.\nvar p = MyPoint(1, 2);\n// Objective-C class methods become functions on the<span class=\"hljs-keyword\"> constructor</span> object.\nvar q = MyPoint.makePointWithXY(0, 0);\n</code></pre>\n\n<h2 id=\"参考文档\"><a href=\"#参考文档\" class=\"headerlink\" title=\"参考文档\"></a>参考文档</h2><p><a href=\"https://developer.apple.com/documentation/javascriptcore?language=occ\">JavaScriptCore</a></p>\n","site":{"data":{"fluid_static_prefix":{"internal_js":"/js","internal_css":"/css","internal_img":"/img","iconfont":"//at.alicdn.com/t/font_1736178_kmeydafke9r.css","anchor":"https://cdn.staticfile.org/anchor-js/4.2.2/","github_markdown":"https://cdn.staticfile.org/github-markdown-css/4.0.0/","jquery":"https://cdn.staticfile.org/jquery/3.4.1/","bootstrap":"https://cdn.staticfile.org/twitter-bootstrap/4.4.1/","highlightjs":"https://cdn.staticfile.org/highlight.js/10.0.0/","prismjs":"https://cdn.staticfile.org/prism/1.21.0/","tocbot":"https://cdn.staticfile.org/tocbot/4.11.1/","typed":"https://cdn.staticfile.org/typed.js/2.0.11/","fancybox":"https://cdn.staticfile.org/fancybox/3.5.7/","mathjax":"https://cdn.staticfile.org/mathjax/3.0.5/es5/","katex":"https://cdn.staticfile.org/KaTeX/0.11.1/","aplayer":"https://cdn.staticfile.org/aplayer/1.10.1/","busuanzi":"https://busuanzi.ibruce.info/busuanzi/2.3/","clipboard":"https://cdn.staticfile.org/clipboard.js/2.0.6/","mermaid":"https://cdn.staticfile.org/mermaid/8.5.0/","valine":"https://cdn.staticfile.org/valine/1.4.14/","gitalk":"https://cdn.staticfile.org/gitalk/1.6.2/","blueimp_md5":"https://cdn.staticfile.org/blueimp-md5/2.13.0/","disqusjs":"https://cdn.jsdelivr.net/npm/disqusjs@1.0/dist/","hint":"/lib/hint/"},"fluid_config":{"favicon":"/img/favicon.png","apple_touch_icon":"/img/favicon.png","title_join_string":" - ","force_https":false,"code":{"copy_btn":true,"highlight":{"enable":true,"lib":"highlightjs","highlightjs":{"style":"Github Gist","bg_color":false},"prismjs":{"style":"default","preprocess":true}}},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"_","loop":false},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"right","visible":"hover","icon":""},"mouse_click":{"enable":false,"style":"values"}},"dark_mode":{"enable":true,"default":"auto"},"color":{"body_bg_color":"#eee","body_bg_color_dark":"#181c27","navbar_bg_color":"#2f4154","navbar_bg_color_dark":"#1f3144","navbar_text_color":"#fff","navbar_text_color_dark":"#d0d0d0","text_color":"#3c4858","text_color_dark":"#c4c6c9","sec_text_color":"#718096","sec_text_color_dark":"#a7a9ad","post_text_color":"#2c3e50","post_text_color_dark":"#c4c6c9","post_heading_color":"#1a202c","post_heading_color_dark":"#c4c6c9","post_link_color":"#0366d6","post_link_color_dark":"#1589e9","link_hover_color":"#30a9de","link_hover_color_dark":"#30a9de","link_hover_bg_color":"#f8f9fa","link_hover_bg_color_dark":"#364151","board_color":"#fff","board_color_dark":"#252d38"},"font":{"font_size":"16px","font_family":null,"code_font_size":"85%"},"custom_js":null,"custom_css":null,"custom_html":"","web_analytics":{"enable":false,"baidu":null,"google":null,"gtag":null,"tencent":{"sid":null,"cid":null},"woyaola":null,"cnzz":null,"leancloud":{"app_id":null,"app_key":null,"server_url":null}},"lazyload":{"enable":true,"onlypost":false},"daovoice":{"enable":false,"appid":""},"aplayer":{"enable":false,"autoplay":false,"loop":"all","order":"random","theme":"#b7daff","songs":[{"name":"name","artist":"artist","url":"/songs/test.mp3","cover":"/img/cover.jpg"},{"name":"name","artist":"artist","url":"https://...url.mp3","cover":"https://...cover.jpg"}]},"version":{"check":false},"navbar":{"blog_title":"吃面多放葱","ground_glass":{"enable":false,"px":3,"alpha":0.7},"menu":[{"key":"home","link":"/","icon":"iconfont icon-home-fill"},{"key":"category","link":"/categories/","icon":"iconfont icon-category-fill"},{"key":"tag","link":"/tags/","icon":"iconfont icon-tags-fill"},{"key":"about","link":"/about/","icon":"iconfont icon-user-fill"}]},"search":{"enable":true,"path":"/local-search.xml","generate_path":"/local-search.xml","field":"post","content":true},"scroll_down_arrow":{"enable":true,"banner_height_limit":90,"scroll_after_turning_page":true},"banner_parallax":true,"footer":{"statistics":{"enable":false,"source":"busuanzi","pv_format":"总访问量 {} 次","uv_format":"总访客数 {} 人"},"beian":{"enable":false,"icp_text":"京ICP证123456号","police_text":"京公网安备12345678号","police_code":12345678,"police_icon":"/img/police_beian.png"}},"scroll_top_arrow":{"enable":true},"index":{"banner_img":"/img/default.png","banner_img_height":100,"banner_mask_alpha":0.3,"post_default_img":"","slogan":{"enable":true,"text":"像蚂蚁一样工作，像蝴蝶一样生活"},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"category":true,"tag":true}},"page":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3},"post":{"banner_img":"/img/default.png","banner_img_height":70,"banner_mask_alpha":0.3,"meta":{"author":{"enable":false},"date":{"enable":true,"format":"LL a"},"wordcount":{"enable":true,"format":"{} 字"},"min2read":{"enable":true,"format":"{} 分钟","words":100},"views":{"enable":false,"source":"busuanzi","format":"{} 次"}},"updated":{"enable":false,"content":"本文最后更新于：","relative":false},"toc":{"enable":true,"headingSelector":"h1,h2,h3,h4,h5,h6","collapseDepth":0},"copyright":{"enable":true,"content":"本博客所有文章除特别声明外，均采用 <a href=\"https://creativecommons.org/licenses/by-sa/4.0/deed.zh\" rel=\"nofollow noopener\">CC BY-SA 4.0 协议</a> ，转载请注明出处！"},"prev_next":{"enable":true},"custom":{"enable":false,"content":"<img src=\"https://octodex.github.com/images/jetpacktocat.png\" class=\"rounded mx-auto d-block mt-5\" style=\"width:150px; height:150px;\">"},"image_zoom":{"enable":true},"footnote":{"enable":true,"header":""},"math":{"enable":false,"specific":false,"engine":"mathjax"},"mermaid":{"enable":false,"specific":false,"options":{"theme":"default"}},"comments":{"enable":false,"type":"disqus"}},"utterances":{"repo":null,"issue_term":"pathname","label":"utterances","theme":"github-light","theme_dark":"github-dark","crossorigin":"anonymous"},"disqus":{"shortname":null,"disqusjs":false,"apikey":null},"gitalk":{"clientID":null,"clientSecret":null,"repo":null,"owner":null,"admin":["name"],"id":"location.pathname","language":"zh-CN","labels":["Gitalk"],"perPage":10,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true},"valine":{"appid":null,"appkey":null,"placeholder":"说点什么","path":"window.location.pathname","avatar":"retro","meta":["nick","mail","link"],"pageSize":10,"lang":"zh-CN","highlight":false,"recordIP":false,"serverURLs":null},"changyan":{"appid":"","appkey":""},"livere":{"uid":""},"remark42":{"host":"https://remark.haoyizebo.com","site_id":"haoyizebo","max_shown_comments":10,"locale":"zh"},"archive":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null},"category":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"post_limit":10,"order_by":"-length","collapse_depth":0},"tag":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null,"tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"avatar":"/img/avatar.png","name":"蔺国防","introduce":"移动应用开发者，历史文学爱好者","icons":[{"class":"iconfont icon-github-fill","link":"https://github.com","tip":"GitHub"},{"class":"iconfont icon-douban-fill","link":"https://douban.com","tip":"豆瓣"},{"class":"iconfont icon-wechat-fill","qrcode":"/img/favicon.png"}]},"page404":{"banner_img":"/img/default.png","banner_img_height":85,"banner_mask_alpha":0.3,"subtitle":"Page not found"},"links":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"items":[{"title":"Fluid Docs","intro":"主题使用指南","link":"https://hexo.fluid-dev.com/docs/","image":"/img/favicon.png"},{"title":"Fluid Repo","intro":"主题 GitHub 仓库","link":"https://github.com/fluid-dev/hexo-theme-fluid","image":"/img/favicon.png"},{"title":"Fluid Example","intro":"主题操作示例","link":"https://hexo.fluid-dev.com/docs/example/","image":"/img/favicon.png"}]}}}},"excerpt":"","more":"<p>运行应用程序中的JavaScript程序，并支持在应用程序编写JavaScript。</p>\n<h2 id=\"通览\"><a href=\"#通览\" class=\"headerlink\" title=\"通览\"></a>通览</h2><p>JavaScriptCore框架能够在Swift, Objective-C和C等环境中运行JS脚本.也可以使用JavaScriptCore框架插入自定义的对象到JS脚本中.</p>\n<h2 id=\"Topics\"><a href=\"#Topics\" class=\"headerlink\" title=\"Topics\"></a>Topics</h2><h4 id=\"Classes\"><a href=\"#Classes\" class=\"headerlink\" title=\"Classes\"></a>Classes</h4><h6 id=\"Class-JSContext\"><a href=\"#Class-JSContext\" class=\"headerlink\" title=\"Class JSContext\"></a>Class JSContext</h6><p>一个JSContext对象表示一个JavaScript执行环境.你创建和使用JavaScript contexts去运行来自OC或者Swift代码编写的JavaScript脚本.来访问JavaScript中定义的或计算的值，并使JavaScript能够访问本地对象、方法或函数。</p>\n<pre><code class=\"hljs awk\"><span class=\"hljs-regexp\">//</span>创建一个JavaScript context\n<span class=\"hljs-regexp\">//</span>Discussion\n<span class=\"hljs-regexp\">//</span>初始化创建context时,会伴随一个新的,独立的virtual machine(一个JSVirtual Machine 对象).您无法在包含在不同virtual machines中的context之间传递JavaScript values(JSValue 对象).创建共享一个virtual machine的context,使用下面的初始化方法\ninit!()\n\n<span class=\"hljs-regexp\">//</span>创建一个JavaScript context, 与一个具体的virtual machine关联.\n<span class=\"hljs-regexp\">//</span>Discussion\n<span class=\"hljs-regexp\">//</span>默认情况下,每个context拥有一个独立的virtual machine(一个 JSVirtualMachine对象).您无法在不同的virtual machine中的context传递JavaScript value.使用该方法创建的context,可以和其他的contexts共享它的virtual machine,从而允许在不同的context中传递JSValue对象.\ninit!(virturalMachine: JSVirturalmachine!)\n\n\n/**\n    执行具体的JavaScript代码\n    参数:   需要评估的JavaScript 源码\n    返回值: 脚本最后生成的值. 注意,脚本可以导致未定义的JavaScript值\n */\n <span class=\"hljs-regexp\">//</span>Discussion\n <span class=\"hljs-regexp\">//</span>一个脚本运行任何级高级别代码并且给context的全局对象对象添加方法和对象定义.\n<span class=\"hljs-keyword\">func</span> evaluateScript(String!)\n\n<span class=\"hljs-regexp\">//</span>执行性具体的JavaScript代码,指定的URL用来对它定位.(调试的时候可以使用)\n<span class=\"hljs-keyword\">func</span> evaluateScript(String!, withSourceURL: URL!)\n\n<span class=\"hljs-regexp\">//</span>在一个运行的context中检查回调状态\n<span class=\"hljs-regexp\">//</span>返回当前执行JS的context\nclass <span class=\"hljs-keyword\">func</span> current()\n\n<span class=\"hljs-regexp\">//</span>返回当前执行的JS方法\nclass <span class=\"hljs-keyword\">func</span> currentCallee()\n\n<span class=\"hljs-regexp\">//</span>返回当前执行JS代码中这个关键字的值\nclass <span class=\"hljs-keyword\">func</span> currentThis()\n\n<span class=\"hljs-regexp\">//</span>返会从JS代码到当前本地回调的参数\nclass <span class=\"hljs-keyword\">func</span> currentArguments()\n\n<span class=\"hljs-regexp\">//</span>与Context关联的JS全局对象\nvar globalObject: JSValue!\n\n<span class=\"hljs-regexp\">//</span>脚本执行中被抛出的异常\nvar exception: JSValue!\n\n<span class=\"hljs-regexp\">//</span>一个block用来处理JS脚本执行中抛出的异常\nvar exceptionHandler: ((JSContext?, JSValue?) -&gt; Void)!\n\n<span class=\"hljs-regexp\">//</span>当前context所在的JavaScript virtual machine \nvar virtualMachine: JSVirtualMachine!\n\n<span class=\"hljs-regexp\">//</span>context 的描述\nvar name: String!\n\n<span class=\"hljs-regexp\">//</span>允许通过下标语法,返回在context的全局对象中的具体JS属性值\n<span class=\"hljs-keyword\">func</span> objectForKeyedSubscript(Any!)\n\n<span class=\"hljs-regexp\">//</span>允许通过下标语法,给context的全局对象设定指定JS属性\n<span class=\"hljs-keyword\">func</span> setObject(Any!, forKeyedSubscript: (NSCoping &amp; NSobject Protocol)!)\n\n<span class=\"hljs-regexp\">//</span>举个例子\n\nJSContext *context = [[JSContext alloc] init];\ncontext[@<span class=\"hljs-string\">&quot;makeNSColor&quot;</span>] = ^(NSDictionary *rgb)&#123;\n    float r = rgb[@<span class=\"hljs-string\">&quot;red&quot;</span>].floatValue;\n    float g = rgb[@<span class=\"hljs-string\">&quot;green&quot;</span>].floatValue;\n    float b = rgb[@<span class=\"hljs-string\">&quot;blue&quot;</span>].floatValue;\n    return [NSColor colorWithRed:(r <span class=\"hljs-regexp\">/ 255.f) green:(g /</span> <span class=\"hljs-number\">255</span>.f) blue:(b / <span class=\"hljs-number\">255</span>.f) alpha:<span class=\"hljs-number\">1.0</span>];\n&#125;;\n</code></pre>\n\n\n<h6 id=\"Class-JSManageValue\"><a href=\"#Class-JSManageValue\" class=\"headerlink\" title=\"Class JSManageValue\"></a>Class JSManageValue</h6><p>一个JSManagedValue对象包装了一个JSValue对象.添加”条件引用”行为,以实现对值的自动内存管理.对于一个管理值,主要用例是在一个OC或者Swift对象中存储一个JavaScript值,该OC或者Swift对象本身被导出到JavaScript.</p>\n<h6 id=\"Class-JSValue\"><a href=\"#Class-JSValue\" class=\"headerlink\" title=\"Class JSValue\"></a>Class JSValue</h6><p>一个JSValue实例是对一个JavaScript 值的参照.您可以使用JSValue类转换JavaScript和objective - c 或者 Swift 之间的基本值(例如数字和字符串)，以便在本地代码和JavaScript代码之间传递数据。您还可以使用这个类创建JavaScript对象，这些对象包装自定义类的本地对象或JavaScript函数，这些函数的实现由本地方法或Block提供。</p>\n<pre><code class=\"hljs swift\"><span class=\"hljs-comment\">// JS类型与本地类型转换</span>\n\n<span class=\"hljs-type\">OC</span>(<span class=\"hljs-type\">Swift</span>) <span class=\"hljs-type\">Types</span>           <span class=\"hljs-type\">JS</span> <span class=\"hljs-type\">Types</span>           <span class=\"hljs-type\">Notes</span>\n-----------------------------------------------------\n<span class=\"hljs-literal\">nil</span>                       undefined \n-----------------------------------------------------\n<span class=\"hljs-type\">NSNull</span>                    null\n-----------------------------------------------------\n<span class=\"hljs-type\">NSString</span> (<span class=\"hljs-type\">String</span> )        <span class=\"hljs-type\">String</span> \n-----------------------------------------------------\n<span class=\"hljs-type\">NSNumber</span>                  <span class=\"hljs-type\">Number</span>,<span class=\"hljs-type\">Boolean</span>\n-----------------------------------------------------\n<span class=\"hljs-type\">NSDictionary</span>(<span class=\"hljs-type\">Dictionary</span>)  <span class=\"hljs-type\">Object</span>\n-----------------------------------------------------\n<span class=\"hljs-type\">NSArray</span> (<span class=\"hljs-type\">Array</span>)           <span class=\"hljs-type\">Array</span>\n----------------------------------------------------\n<span class=\"hljs-type\">NSDate</span>                    <span class=\"hljs-type\">Date</span>\n-----------------------------------------------------\n<span class=\"hljs-type\">Object</span> (<span class=\"hljs-type\">AnyObject</span>)        <span class=\"hljs-type\">Object</span> \n\n<span class=\"hljs-type\">Classs</span> (<span class=\"hljs-type\">AnyClass</span>)\n-----------------------------------------------------\n<span class=\"hljs-type\">NSRange</span>,<span class=\"hljs-type\">CGRect</span>,           <span class=\"hljs-type\">Object</span>          其他结构体类型不支持\n<span class=\"hljs-type\">CGPoint</span>,<span class=\"hljs-type\">CGSize</span>\n-----------------------------------------------------\n<span class=\"hljs-type\">Block</span>(<span class=\"hljs-type\">Closure</span>)            <span class=\"hljs-type\">Function</span>        <span class=\"hljs-type\">JS</span>函数不转换本地block/闭包除非通过一个本地blcok/closure 返回\n-----------------------------------------------------\n\n<span class=\"hljs-comment\">//创建一个JS 值来转换指定的本地对象</span>\n<span class=\"hljs-keyword\">init</span>!(object: <span class=\"hljs-type\">Any!</span>, <span class=\"hljs-keyword\">in</span>: <span class=\"hljs-type\">JSContext!</span>)\n\n<span class=\"hljs-comment\">//创建一个JS 值来表示指定的布尔值</span>\n<span class=\"hljs-keyword\">init</span>!(bool: <span class=\"hljs-type\">Bool</span>, <span class=\"hljs-keyword\">in</span>: <span class=\"hljs-type\">JSContext!</span>)\n\n<span class=\"hljs-comment\">//创建一个JS 值来表示指定的Double类型值</span>\n<span class=\"hljs-keyword\">init</span>!(double: <span class=\"hljs-type\">Double</span>, <span class=\"hljs-keyword\">in</span>: <span class=\"hljs-type\">JSContext!</span>)\n\n<span class=\"hljs-comment\">//创建一个空的JS对象</span>\n<span class=\"hljs-keyword\">init</span>!(newObjectIn: <span class=\"hljs-type\">JSContext!</span>)\n\n<span class=\"hljs-comment\">//创建一个空的JS数组</span>\n<span class=\"hljs-keyword\">init</span>!(newArrayIn: <span class=\"hljs-type\">JSContext!</span>)\n\n<span class=\"hljs-comment\">//创建一个JSError</span>\n<span class=\"hljs-keyword\">init</span>!(neewErrorFromMessage: <span class=\"hljs-type\">String!</span>, <span class=\"hljs-keyword\">in</span>: <span class=\"hljs-type\">JSContext!</span>)\n\n...\n\n<span class=\"hljs-comment\">//读取并转换JS值为本地类型</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">toObject</span><span class=\"hljs-params\">()</span></span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">toObjectOf</span><span class=\"hljs-params\">(AnyClass!)</span></span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">toBool</span><span class=\"hljs-params\">()</span></span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">toDouble</span><span class=\"hljs-params\">()</span></span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">toString</span><span class=\"hljs-params\">()</span></span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">toDate</span><span class=\"hljs-params\">()</span></span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">toArray</span><span class=\"hljs-params\">()</span></span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">toDictionary</span><span class=\"hljs-params\">()</span></span>\n\n<span class=\"hljs-comment\">//类型判断</span>\n\n<span class=\"hljs-keyword\">var</span> isUndefined: <span class=\"hljs-type\">Bool</span>\n\n<span class=\"hljs-keyword\">var</span> isNull     : <span class=\"hljs-type\">Bool</span>\n\n<span class=\"hljs-keyword\">var</span> isBoolean  : <span class=\"hljs-type\">Bool</span>\n\n<span class=\"hljs-keyword\">var</span> isNumber   : <span class=\"hljs-type\">Bool</span>\n\n...\n\n<span class=\"hljs-comment\">//JS值比较</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">isEqual</span><span class=\"hljs-params\">(to: <span class=\"hljs-keyword\">Any</span>!)</span></span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">isEqualWithTypeCoercion</span><span class=\"hljs-params\">(to: <span class=\"hljs-keyword\">Any</span>!)</span></span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">isInstance</span><span class=\"hljs-params\">(of: <span class=\"hljs-keyword\">Any</span>!)</span></span>\n\n<span class=\"hljs-comment\">//方法调用</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">invokeMethod</span><span class=\"hljs-params\">(String!, withArguments: [<span class=\"hljs-keyword\">Any</span>]!)</span></span>\n\n<span class=\"hljs-comment\">//容器值</span>\n<span class=\"hljs-comment\">//定义一个JS对象的属性或者修改属性的定义</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">defineProperty</span><span class=\"hljs-params\">(String!, descriptor: <span class=\"hljs-keyword\">Any</span>!)</span></span>\n\n<span class=\"hljs-comment\">//删除JS对象的属性</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">deleteProperty</span><span class=\"hljs-params\">(String!)</span></span>\n\n<span class=\"hljs-comment\">//根据下标赋值</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">setValue</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">Any</span>!, at: Int)</span></span>\n\n<span class=\"hljs-comment\">//根据下标取值</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">atIndex</span><span class=\"hljs-params\">(Int)</span></span>\n\n<span class=\"hljs-comment\">//给指定属性赋值</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">setValue</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">Any</span>!, forProperty: String!)</span></span>\n\n<span class=\"hljs-comment\">//根据指定属性取值</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">forProperty</span><span class=\"hljs-params\">(String!)</span></span>\n\n<span class=\"hljs-comment\">//获取持有这个值的context</span>\n<span class=\"hljs-keyword\">var</span> context: <span class=\"hljs-type\">JSContext!</span>\n\n<span class=\"hljs-comment\">//通过下标语法获取值</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">objectAtIndexedSubscript</span><span class=\"hljs-params\">(Int)</span></span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">setObject</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">Any</span>!, atIndexedSubscript: Int)</span></span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">objectForkeyedSubscript</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">Any</span>!)</span></span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">setObject</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">Any</span>!, forKeyedSubscritp: <span class=\"hljs-params\">(NSCoping &amp; NSObjectProtocol)</span></span></span>!)\n</code></pre>\n\n\n<h6 id=\"Class-JSVirtualMachine\"><a href=\"#Class-JSVirtualMachine\" class=\"headerlink\" title=\"Class JSVirtualMachine\"></a>Class JSVirtualMachine</h6><p>一个JSVirtualMachine 实例表示JavaScript执行中的一个独立环境.您可以使用该类用于两个主要目的:去支撑并发的JavaScript执行,管理JavaScript与OC,Swift之间桥接过来的对象内存.</p>\n<h6 id=\"Protocol-JSExport\"><a href=\"#Protocol-JSExport\" class=\"headerlink\" title=\"Protocol JSExport\"></a>Protocol JSExport</h6><p>实现该协议用来导出OC类和他们的实例方法,类方法,属性到JavaScript代码中.</p>\n<p>Listing 1  Exporting an Objective-C Class to JavaScript</p>\n<pre><code class=\"hljs groovy\"><span class=\"hljs-meta\">@protocol</span> MyPointExports &lt;JSExport&gt;\n<span class=\"hljs-meta\">@property</span> <span class=\"hljs-keyword\">double</span> x;\n<span class=\"hljs-meta\">@property</span> <span class=\"hljs-keyword\">double</span> y;\n- (NSString *)description;\n- (instancetype)<span class=\"hljs-attr\">initWithX:</span>(<span class=\"hljs-keyword\">double</span>)x <span class=\"hljs-attr\">y:</span>(<span class=\"hljs-keyword\">double</span>)y;\n+ (MyPoint *)<span class=\"hljs-attr\">makePointWithX:</span>(<span class=\"hljs-keyword\">double</span>)x <span class=\"hljs-attr\">y:</span>(<span class=\"hljs-keyword\">double</span>)y;\n<span class=\"hljs-meta\">@end</span>\n \n<span class=\"hljs-meta\">@interface</span> <span class=\"hljs-attr\">MyPoint :</span> NSObject &lt;MyPointExports&gt;\n- (<span class=\"hljs-keyword\">void</span>)myPrivateMethod;  <span class=\"hljs-comment\">// Not in the MyPointExports protocol, so not visible to JavaScript code.</span>\n<span class=\"hljs-meta\">@end</span>\n \n<span class=\"hljs-meta\">@implementation</span> MyPoint\n<span class=\"hljs-comment\">// ...</span>\n<span class=\"hljs-meta\">@end</span></code></pre>\n<p>Listing 2 Useing an Exported Objectiv-C Class from JavaScript</p>\n<pre><code class=\"hljs smali\">// Objective-C properties become fields.\npoint.x;\npoint.x = 10;\n// Objective-C<span class=\"hljs-built_in\"> instance </span>methods become functions.\npoint.description();\n// Objective-C initializers can be called with<span class=\"hljs-keyword\"> constructor</span> syntax.\nvar p = MyPoint(1, 2);\n// Objective-C class methods become functions on the<span class=\"hljs-keyword\"> constructor</span> object.\nvar q = MyPoint.makePointWithXY(0, 0);\n</code></pre>\n\n<h2 id=\"参考文档\"><a href=\"#参考文档\" class=\"headerlink\" title=\"参考文档\"></a>参考文档</h2><p><a href=\"https://developer.apple.com/documentation/javascriptcore?language=occ\">JavaScriptCore</a></p>\n"},{"title":"JavaScriptCore与WebView","date":"2017-11-07T13:57:00.000Z","_content":"### Html中JS 与 Native交互情况\n\n- Native调用JS\n- JS调用Native\n\n### 一.  获取WebView的JSContext\n\n```\n    func webViewDidFinishLoad(_ webView: UIWebView) {\n        \n        self.context = webView.value(forKeyPath: \"documentView.webView.mainFrame.javaScriptContext\") as? JSContext\n    }\n```\n\n> 不同网页JSContext不同,只有在 webViewDidFinishLoad() 方法中获取,才能获取当前网页的JSContext\n\n\n### 二.   Native调用JS\n\nHtml中JS提供的接口\n\n```\n<script>\n\t\n\t  function handler(argument) {\n\n        document.getElementById(\"jsContent\").innerHTML = argument[\"name\"] + \" \" + argument[\"age\"] + \"岁 \" +  argument[\"job\"]\n\n      }\n</script>\n\n```\nNative调用方法\n\n```\n     //本地调用JS方法\n    @objc func nativeCallJS() {\n\n        //方法一 (直接执行JS脚本)\n        let scriptStr = \"handler({'name':'小明', 'age':'18','job':'学生'})\"\n        let _ = self.context?.evaluateScript(scriptStr)\n        \n        //方法二 (获取函数,然后调用函数传参)\n        let handleFunc = self.context?.objectForKeyedSubscript(\"handler\")\n        let paraDic = [\"name\":\"小明\", \"age\": 18, \"job\":\"学生\"] as [String : Any]\n        let _ = handleFunc?.call(withArguments: [paraDic])\n\n    }\n```\n### 三.    JS调用Native \n\n#### 方式一: 使用Block(Swift 用闭包)\n\n```\n- (void)webViewDidFinishLoad:(UIWebView *)webView{\n\n    //获取JS运行环境\n    _context = [webView valueForKeyPath:@\"documentView.webView.mainFrame.javaScriptContext\"];\n    //html调用无参数OC\n    _context[@\"test1\"] = ^(){\n        [self method1];\n    };\n    \n    _context[@\"test2\"] = ^(){\n        \n        NSArray *args = [JSContext currentArguments];//传过来的参数\n        NSString *name = args[0];\n        NSString *str = args[1];\n        [self method2:name and:str];\n    };\n\n}\n\n```\n\n#### 方式二: 使用JSExport \n\n```\n@objc protocol SwiftBridgeProtocol: JSExport{\n   \n    //JS调用本地方法(无参数)\n    func method1()\n    func method2(_ title: String, _ message: String)\n    func method3(_ handlerName: String)\n}\n\n@objc class SwiftBrige: NSObject, SwiftBridgeProtocol{\n    \n    weak var controller: UIViewController?\n    weak var context   : JSContext?\n    \n    //JS调用本地方法(无参数)\n    func method1()  {\n        \n        let controller = UIAlertController.init(title: \"测试\", message: \"JS调用本地方法\", preferredStyle: .alert)\n        controller.addAction(UIAlertAction(title: \"取消\", style: .cancel, handler: nil))\n        self.controller?.present(controller, animated: true, completion: nil)\n    }\n    \n    //JS调用本地方法(传参数)\n    func method2(_ title: String, _ message: String) {\n        \n        let controller = UIAlertController.init(title: title, message: message, preferredStyle: .alert)\n        controller.addAction(UIAlertAction(title: \"取消\", style: .cancel, handler: nil))\n        self.controller?.present(controller, animated: true, completion: nil)\n    }\n    \n    //JS调用本地方法  本地方法回调JS方法\n    func method3(_ handlerName: String){\n        \n        //回调参数\n        let paraDic = [\"name\":\"小明\", \"age\": 18, \"job\":\"学生\"] as [String : Any]\n        \n        //获取JS回调函数\n        let handleFunc = self.context?.objectForKeyedSubscript(\"\\(handlerName)\")\n        \n        //调用该函数\n        let _ = handleFunc?.call(withArguments: [paraDic])\n    }\n}\n```\n[项目代码Swift](https://github.com/913868456/SwiftDemo)\n[项目代码OC](https://github.com/913868456/OCDemo)\n\n","source":"_posts/iOS/JavaScriptCore与WebView.md","raw":"\n---\ntitle:  JavaScriptCore与WebView \ndate: 2017-11-07 21:57\ncategories:\n- iOS\ntags: \n- JavaScriptCore\n- WebView\n---\n### Html中JS 与 Native交互情况\n\n- Native调用JS\n- JS调用Native\n\n### 一.  获取WebView的JSContext\n\n```\n    func webViewDidFinishLoad(_ webView: UIWebView) {\n        \n        self.context = webView.value(forKeyPath: \"documentView.webView.mainFrame.javaScriptContext\") as? JSContext\n    }\n```\n\n> 不同网页JSContext不同,只有在 webViewDidFinishLoad() 方法中获取,才能获取当前网页的JSContext\n\n\n### 二.   Native调用JS\n\nHtml中JS提供的接口\n\n```\n<script>\n\t\n\t  function handler(argument) {\n\n        document.getElementById(\"jsContent\").innerHTML = argument[\"name\"] + \" \" + argument[\"age\"] + \"岁 \" +  argument[\"job\"]\n\n      }\n</script>\n\n```\nNative调用方法\n\n```\n     //本地调用JS方法\n    @objc func nativeCallJS() {\n\n        //方法一 (直接执行JS脚本)\n        let scriptStr = \"handler({'name':'小明', 'age':'18','job':'学生'})\"\n        let _ = self.context?.evaluateScript(scriptStr)\n        \n        //方法二 (获取函数,然后调用函数传参)\n        let handleFunc = self.context?.objectForKeyedSubscript(\"handler\")\n        let paraDic = [\"name\":\"小明\", \"age\": 18, \"job\":\"学生\"] as [String : Any]\n        let _ = handleFunc?.call(withArguments: [paraDic])\n\n    }\n```\n### 三.    JS调用Native \n\n#### 方式一: 使用Block(Swift 用闭包)\n\n```\n- (void)webViewDidFinishLoad:(UIWebView *)webView{\n\n    //获取JS运行环境\n    _context = [webView valueForKeyPath:@\"documentView.webView.mainFrame.javaScriptContext\"];\n    //html调用无参数OC\n    _context[@\"test1\"] = ^(){\n        [self method1];\n    };\n    \n    _context[@\"test2\"] = ^(){\n        \n        NSArray *args = [JSContext currentArguments];//传过来的参数\n        NSString *name = args[0];\n        NSString *str = args[1];\n        [self method2:name and:str];\n    };\n\n}\n\n```\n\n#### 方式二: 使用JSExport \n\n```\n@objc protocol SwiftBridgeProtocol: JSExport{\n   \n    //JS调用本地方法(无参数)\n    func method1()\n    func method2(_ title: String, _ message: String)\n    func method3(_ handlerName: String)\n}\n\n@objc class SwiftBrige: NSObject, SwiftBridgeProtocol{\n    \n    weak var controller: UIViewController?\n    weak var context   : JSContext?\n    \n    //JS调用本地方法(无参数)\n    func method1()  {\n        \n        let controller = UIAlertController.init(title: \"测试\", message: \"JS调用本地方法\", preferredStyle: .alert)\n        controller.addAction(UIAlertAction(title: \"取消\", style: .cancel, handler: nil))\n        self.controller?.present(controller, animated: true, completion: nil)\n    }\n    \n    //JS调用本地方法(传参数)\n    func method2(_ title: String, _ message: String) {\n        \n        let controller = UIAlertController.init(title: title, message: message, preferredStyle: .alert)\n        controller.addAction(UIAlertAction(title: \"取消\", style: .cancel, handler: nil))\n        self.controller?.present(controller, animated: true, completion: nil)\n    }\n    \n    //JS调用本地方法  本地方法回调JS方法\n    func method3(_ handlerName: String){\n        \n        //回调参数\n        let paraDic = [\"name\":\"小明\", \"age\": 18, \"job\":\"学生\"] as [String : Any]\n        \n        //获取JS回调函数\n        let handleFunc = self.context?.objectForKeyedSubscript(\"\\(handlerName)\")\n        \n        //调用该函数\n        let _ = handleFunc?.call(withArguments: [paraDic])\n    }\n}\n```\n[项目代码Swift](https://github.com/913868456/SwiftDemo)\n[项目代码OC](https://github.com/913868456/OCDemo)\n\n","slug":"iOS/JavaScriptCore与WebView","published":1,"updated":"2020-09-27T11:09:27.327Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgq6gnx2001yt29kc831f29j","content":"<h3 id=\"Html中JS-与-Native交互情况\"><a href=\"#Html中JS-与-Native交互情况\" class=\"headerlink\" title=\"Html中JS 与 Native交互情况\"></a>Html中JS 与 Native交互情况</h3><ul>\n<li>Native调用JS</li>\n<li>JS调用Native</li>\n</ul>\n<h3 id=\"一-获取WebView的JSContext\"><a href=\"#一-获取WebView的JSContext\" class=\"headerlink\" title=\"一.  获取WebView的JSContext\"></a>一.  获取WebView的JSContext</h3><pre><code class=\"hljs swift\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">webViewDidFinishLoad</span><span class=\"hljs-params\">(<span class=\"hljs-number\">_</span> webView: UIWebView)</span></span> &#123;\n    \n    <span class=\"hljs-keyword\">self</span>.context = webView.value(forKeyPath: <span class=\"hljs-string\">&quot;documentView.webView.mainFrame.javaScriptContext&quot;</span>) <span class=\"hljs-keyword\">as</span>? <span class=\"hljs-type\">JSContext</span>\n&#125;</code></pre>\n\n<blockquote>\n<p>不同网页JSContext不同,只有在 webViewDidFinishLoad() 方法中获取,才能获取当前网页的JSContext</p>\n</blockquote>\n<h3 id=\"二-Native调用JS\"><a href=\"#二-Native调用JS\" class=\"headerlink\" title=\"二.   Native调用JS\"></a>二.   Native调用JS</h3><p>Html中JS提供的接口</p>\n<pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span>\n\t\n<span class=\"javascript\">\t  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">handler</span>(<span class=\"hljs-params\">argument</span>) </span>&#123;</span>\n\n<span class=\"javascript\">        <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">&quot;jsContent&quot;</span>).innerHTML = argument[<span class=\"hljs-string\">&quot;name&quot;</span>] + <span class=\"hljs-string\">&quot; &quot;</span> + argument[<span class=\"hljs-string\">&quot;age&quot;</span>] + <span class=\"hljs-string\">&quot;岁 &quot;</span> +  argument[<span class=\"hljs-string\">&quot;job&quot;</span>]</span>\n\n      &#125;\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n</code></pre>\n<p>Native调用方法</p>\n<pre><code class=\"hljs swift\"> <span class=\"hljs-comment\">//本地调用JS方法</span>\n<span class=\"hljs-meta\">@objc</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">nativeCallJS</span><span class=\"hljs-params\">()</span></span> &#123;\n\n    <span class=\"hljs-comment\">//方法一 (直接执行JS脚本)</span>\n    <span class=\"hljs-keyword\">let</span> scriptStr = <span class=\"hljs-string\">&quot;handler(&#123;&#x27;name&#x27;:&#x27;小明&#x27;, &#x27;age&#x27;:&#x27;18&#x27;,&#x27;job&#x27;:&#x27;学生&#x27;&#125;)&quot;</span>\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-number\">_</span> = <span class=\"hljs-keyword\">self</span>.context?.evaluateScript(scriptStr)\n    \n    <span class=\"hljs-comment\">//方法二 (获取函数,然后调用函数传参)</span>\n    <span class=\"hljs-keyword\">let</span> handleFunc = <span class=\"hljs-keyword\">self</span>.context?.objectForKeyedSubscript(<span class=\"hljs-string\">&quot;handler&quot;</span>)\n    <span class=\"hljs-keyword\">let</span> paraDic = [<span class=\"hljs-string\">&quot;name&quot;</span>:<span class=\"hljs-string\">&quot;小明&quot;</span>, <span class=\"hljs-string\">&quot;age&quot;</span>: <span class=\"hljs-number\">18</span>, <span class=\"hljs-string\">&quot;job&quot;</span>:<span class=\"hljs-string\">&quot;学生&quot;</span>] <span class=\"hljs-keyword\">as</span> [<span class=\"hljs-type\">String</span> : <span class=\"hljs-type\">Any</span>]\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-number\">_</span> = handleFunc?.call(withArguments: [paraDic])\n\n&#125;</code></pre>\n<h3 id=\"三-JS调用Native\"><a href=\"#三-JS调用Native\" class=\"headerlink\" title=\"三.    JS调用Native\"></a>三.    JS调用Native</h3><h4 id=\"方式一-使用Block-Swift-用闭包\"><a href=\"#方式一-使用Block-Swift-用闭包\" class=\"headerlink\" title=\"方式一: 使用Block(Swift 用闭包)\"></a>方式一: 使用Block(Swift 用闭包)</h4><pre><code class=\"hljs objectivec\">- (<span class=\"hljs-keyword\">void</span>)webViewDidFinishLoad:(<span class=\"hljs-built_in\">UIWebView</span> *)webView&#123;\n\n    <span class=\"hljs-comment\">//获取JS运行环境</span>\n    _context = [webView valueForKeyPath:<span class=\"hljs-string\">@&quot;documentView.webView.mainFrame.javaScriptContext&quot;</span>];\n    <span class=\"hljs-comment\">//html调用无参数OC</span>\n    _context[<span class=\"hljs-string\">@&quot;test1&quot;</span>] = ^()&#123;\n        [<span class=\"hljs-keyword\">self</span> method1];\n    &#125;;\n    \n    _context[<span class=\"hljs-string\">@&quot;test2&quot;</span>] = ^()&#123;\n        \n        <span class=\"hljs-built_in\">NSArray</span> *args = [JSContext currentArguments];<span class=\"hljs-comment\">//传过来的参数</span>\n        <span class=\"hljs-built_in\">NSString</span> *name = args[<span class=\"hljs-number\">0</span>];\n        <span class=\"hljs-built_in\">NSString</span> *str = args[<span class=\"hljs-number\">1</span>];\n        [<span class=\"hljs-keyword\">self</span> method2:name and:str];\n    &#125;;\n\n&#125;\n</code></pre>\n\n<h4 id=\"方式二-使用JSExport\"><a href=\"#方式二-使用JSExport\" class=\"headerlink\" title=\"方式二: 使用JSExport\"></a>方式二: 使用JSExport</h4><pre><code class=\"hljs swift\"><span class=\"hljs-meta\">@objc</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">protocol</span> <span class=\"hljs-title\">SwiftBridgeProtocol</span>: <span class=\"hljs-title\">JSExport</span></span>&#123;\n   \n    <span class=\"hljs-comment\">//JS调用本地方法(无参数)</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">method1</span><span class=\"hljs-params\">()</span></span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">method2</span><span class=\"hljs-params\">(<span class=\"hljs-number\">_</span> title: String, <span class=\"hljs-number\">_</span> message: String)</span></span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">method3</span><span class=\"hljs-params\">(<span class=\"hljs-number\">_</span> handlerName: String)</span></span>\n&#125;\n\n<span class=\"hljs-meta\">@objc</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">SwiftBrige</span>: <span class=\"hljs-title\">NSObject</span>, <span class=\"hljs-title\">SwiftBridgeProtocol</span></span>&#123;\n    \n    <span class=\"hljs-keyword\">weak</span> <span class=\"hljs-keyword\">var</span> controller: <span class=\"hljs-type\">UIViewController?</span>\n    <span class=\"hljs-keyword\">weak</span> <span class=\"hljs-keyword\">var</span> context   : <span class=\"hljs-type\">JSContext?</span>\n    \n    <span class=\"hljs-comment\">//JS调用本地方法(无参数)</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">method1</span><span class=\"hljs-params\">()</span></span>  &#123;\n        \n        <span class=\"hljs-keyword\">let</span> controller = <span class=\"hljs-type\">UIAlertController</span>.<span class=\"hljs-keyword\">init</span>(title: <span class=\"hljs-string\">&quot;测试&quot;</span>, message: <span class=\"hljs-string\">&quot;JS调用本地方法&quot;</span>, preferredStyle: .alert)\n        controller.addAction(<span class=\"hljs-type\">UIAlertAction</span>(title: <span class=\"hljs-string\">&quot;取消&quot;</span>, style: .cancel, handler: <span class=\"hljs-literal\">nil</span>))\n        <span class=\"hljs-keyword\">self</span>.controller?.present(controller, animated: <span class=\"hljs-literal\">true</span>, completion: <span class=\"hljs-literal\">nil</span>)\n    &#125;\n    \n    <span class=\"hljs-comment\">//JS调用本地方法(传参数)</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">method2</span><span class=\"hljs-params\">(<span class=\"hljs-number\">_</span> title: String, <span class=\"hljs-number\">_</span> message: String)</span></span> &#123;\n        \n        <span class=\"hljs-keyword\">let</span> controller = <span class=\"hljs-type\">UIAlertController</span>.<span class=\"hljs-keyword\">init</span>(title: title, message: message, preferredStyle: .alert)\n        controller.addAction(<span class=\"hljs-type\">UIAlertAction</span>(title: <span class=\"hljs-string\">&quot;取消&quot;</span>, style: .cancel, handler: <span class=\"hljs-literal\">nil</span>))\n        <span class=\"hljs-keyword\">self</span>.controller?.present(controller, animated: <span class=\"hljs-literal\">true</span>, completion: <span class=\"hljs-literal\">nil</span>)\n    &#125;\n    \n    <span class=\"hljs-comment\">//JS调用本地方法  本地方法回调JS方法</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">method3</span><span class=\"hljs-params\">(<span class=\"hljs-number\">_</span> handlerName: String)</span></span>&#123;\n        \n        <span class=\"hljs-comment\">//回调参数</span>\n        <span class=\"hljs-keyword\">let</span> paraDic = [<span class=\"hljs-string\">&quot;name&quot;</span>:<span class=\"hljs-string\">&quot;小明&quot;</span>, <span class=\"hljs-string\">&quot;age&quot;</span>: <span class=\"hljs-number\">18</span>, <span class=\"hljs-string\">&quot;job&quot;</span>:<span class=\"hljs-string\">&quot;学生&quot;</span>] <span class=\"hljs-keyword\">as</span> [<span class=\"hljs-type\">String</span> : <span class=\"hljs-type\">Any</span>]\n        \n        <span class=\"hljs-comment\">//获取JS回调函数</span>\n        <span class=\"hljs-keyword\">let</span> handleFunc = <span class=\"hljs-keyword\">self</span>.context?.objectForKeyedSubscript(<span class=\"hljs-string\">&quot;\\(handlerName)&quot;</span>)\n        \n        <span class=\"hljs-comment\">//调用该函数</span>\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-number\">_</span> = handleFunc?.call(withArguments: [paraDic])\n    &#125;\n&#125;</code></pre>\n<p><a href=\"https://github.com/913868456/SwiftDemo\">项目代码Swift</a><br><a href=\"https://github.com/913868456/OCDemo\">项目代码OC</a></p>\n","site":{"data":{"fluid_static_prefix":{"internal_js":"/js","internal_css":"/css","internal_img":"/img","iconfont":"//at.alicdn.com/t/font_1736178_kmeydafke9r.css","anchor":"https://cdn.staticfile.org/anchor-js/4.2.2/","github_markdown":"https://cdn.staticfile.org/github-markdown-css/4.0.0/","jquery":"https://cdn.staticfile.org/jquery/3.4.1/","bootstrap":"https://cdn.staticfile.org/twitter-bootstrap/4.4.1/","highlightjs":"https://cdn.staticfile.org/highlight.js/10.0.0/","prismjs":"https://cdn.staticfile.org/prism/1.21.0/","tocbot":"https://cdn.staticfile.org/tocbot/4.11.1/","typed":"https://cdn.staticfile.org/typed.js/2.0.11/","fancybox":"https://cdn.staticfile.org/fancybox/3.5.7/","mathjax":"https://cdn.staticfile.org/mathjax/3.0.5/es5/","katex":"https://cdn.staticfile.org/KaTeX/0.11.1/","aplayer":"https://cdn.staticfile.org/aplayer/1.10.1/","busuanzi":"https://busuanzi.ibruce.info/busuanzi/2.3/","clipboard":"https://cdn.staticfile.org/clipboard.js/2.0.6/","mermaid":"https://cdn.staticfile.org/mermaid/8.5.0/","valine":"https://cdn.staticfile.org/valine/1.4.14/","gitalk":"https://cdn.staticfile.org/gitalk/1.6.2/","blueimp_md5":"https://cdn.staticfile.org/blueimp-md5/2.13.0/","disqusjs":"https://cdn.jsdelivr.net/npm/disqusjs@1.0/dist/","hint":"/lib/hint/"},"fluid_config":{"favicon":"/img/favicon.png","apple_touch_icon":"/img/favicon.png","title_join_string":" - ","force_https":false,"code":{"copy_btn":true,"highlight":{"enable":true,"lib":"highlightjs","highlightjs":{"style":"Github Gist","bg_color":false},"prismjs":{"style":"default","preprocess":true}}},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"_","loop":false},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"right","visible":"hover","icon":""},"mouse_click":{"enable":false,"style":"values"}},"dark_mode":{"enable":true,"default":"auto"},"color":{"body_bg_color":"#eee","body_bg_color_dark":"#181c27","navbar_bg_color":"#2f4154","navbar_bg_color_dark":"#1f3144","navbar_text_color":"#fff","navbar_text_color_dark":"#d0d0d0","text_color":"#3c4858","text_color_dark":"#c4c6c9","sec_text_color":"#718096","sec_text_color_dark":"#a7a9ad","post_text_color":"#2c3e50","post_text_color_dark":"#c4c6c9","post_heading_color":"#1a202c","post_heading_color_dark":"#c4c6c9","post_link_color":"#0366d6","post_link_color_dark":"#1589e9","link_hover_color":"#30a9de","link_hover_color_dark":"#30a9de","link_hover_bg_color":"#f8f9fa","link_hover_bg_color_dark":"#364151","board_color":"#fff","board_color_dark":"#252d38"},"font":{"font_size":"16px","font_family":null,"code_font_size":"85%"},"custom_js":null,"custom_css":null,"custom_html":"","web_analytics":{"enable":false,"baidu":null,"google":null,"gtag":null,"tencent":{"sid":null,"cid":null},"woyaola":null,"cnzz":null,"leancloud":{"app_id":null,"app_key":null,"server_url":null}},"lazyload":{"enable":true,"onlypost":false},"daovoice":{"enable":false,"appid":""},"aplayer":{"enable":false,"autoplay":false,"loop":"all","order":"random","theme":"#b7daff","songs":[{"name":"name","artist":"artist","url":"/songs/test.mp3","cover":"/img/cover.jpg"},{"name":"name","artist":"artist","url":"https://...url.mp3","cover":"https://...cover.jpg"}]},"version":{"check":false},"navbar":{"blog_title":"吃面多放葱","ground_glass":{"enable":false,"px":3,"alpha":0.7},"menu":[{"key":"home","link":"/","icon":"iconfont icon-home-fill"},{"key":"category","link":"/categories/","icon":"iconfont icon-category-fill"},{"key":"tag","link":"/tags/","icon":"iconfont icon-tags-fill"},{"key":"about","link":"/about/","icon":"iconfont icon-user-fill"}]},"search":{"enable":true,"path":"/local-search.xml","generate_path":"/local-search.xml","field":"post","content":true},"scroll_down_arrow":{"enable":true,"banner_height_limit":90,"scroll_after_turning_page":true},"banner_parallax":true,"footer":{"statistics":{"enable":false,"source":"busuanzi","pv_format":"总访问量 {} 次","uv_format":"总访客数 {} 人"},"beian":{"enable":false,"icp_text":"京ICP证123456号","police_text":"京公网安备12345678号","police_code":12345678,"police_icon":"/img/police_beian.png"}},"scroll_top_arrow":{"enable":true},"index":{"banner_img":"/img/default.png","banner_img_height":100,"banner_mask_alpha":0.3,"post_default_img":"","slogan":{"enable":true,"text":"像蚂蚁一样工作，像蝴蝶一样生活"},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"category":true,"tag":true}},"page":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3},"post":{"banner_img":"/img/default.png","banner_img_height":70,"banner_mask_alpha":0.3,"meta":{"author":{"enable":false},"date":{"enable":true,"format":"LL a"},"wordcount":{"enable":true,"format":"{} 字"},"min2read":{"enable":true,"format":"{} 分钟","words":100},"views":{"enable":false,"source":"busuanzi","format":"{} 次"}},"updated":{"enable":false,"content":"本文最后更新于：","relative":false},"toc":{"enable":true,"headingSelector":"h1,h2,h3,h4,h5,h6","collapseDepth":0},"copyright":{"enable":true,"content":"本博客所有文章除特别声明外，均采用 <a href=\"https://creativecommons.org/licenses/by-sa/4.0/deed.zh\" rel=\"nofollow noopener\">CC BY-SA 4.0 协议</a> ，转载请注明出处！"},"prev_next":{"enable":true},"custom":{"enable":false,"content":"<img src=\"https://octodex.github.com/images/jetpacktocat.png\" class=\"rounded mx-auto d-block mt-5\" style=\"width:150px; height:150px;\">"},"image_zoom":{"enable":true},"footnote":{"enable":true,"header":""},"math":{"enable":false,"specific":false,"engine":"mathjax"},"mermaid":{"enable":false,"specific":false,"options":{"theme":"default"}},"comments":{"enable":false,"type":"disqus"}},"utterances":{"repo":null,"issue_term":"pathname","label":"utterances","theme":"github-light","theme_dark":"github-dark","crossorigin":"anonymous"},"disqus":{"shortname":null,"disqusjs":false,"apikey":null},"gitalk":{"clientID":null,"clientSecret":null,"repo":null,"owner":null,"admin":["name"],"id":"location.pathname","language":"zh-CN","labels":["Gitalk"],"perPage":10,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true},"valine":{"appid":null,"appkey":null,"placeholder":"说点什么","path":"window.location.pathname","avatar":"retro","meta":["nick","mail","link"],"pageSize":10,"lang":"zh-CN","highlight":false,"recordIP":false,"serverURLs":null},"changyan":{"appid":"","appkey":""},"livere":{"uid":""},"remark42":{"host":"https://remark.haoyizebo.com","site_id":"haoyizebo","max_shown_comments":10,"locale":"zh"},"archive":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null},"category":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"post_limit":10,"order_by":"-length","collapse_depth":0},"tag":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null,"tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"avatar":"/img/avatar.png","name":"蔺国防","introduce":"移动应用开发者，历史文学爱好者","icons":[{"class":"iconfont icon-github-fill","link":"https://github.com","tip":"GitHub"},{"class":"iconfont icon-douban-fill","link":"https://douban.com","tip":"豆瓣"},{"class":"iconfont icon-wechat-fill","qrcode":"/img/favicon.png"}]},"page404":{"banner_img":"/img/default.png","banner_img_height":85,"banner_mask_alpha":0.3,"subtitle":"Page not found"},"links":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"items":[{"title":"Fluid Docs","intro":"主题使用指南","link":"https://hexo.fluid-dev.com/docs/","image":"/img/favicon.png"},{"title":"Fluid Repo","intro":"主题 GitHub 仓库","link":"https://github.com/fluid-dev/hexo-theme-fluid","image":"/img/favicon.png"},{"title":"Fluid Example","intro":"主题操作示例","link":"https://hexo.fluid-dev.com/docs/example/","image":"/img/favicon.png"}]}}}},"excerpt":"","more":"<h3 id=\"Html中JS-与-Native交互情况\"><a href=\"#Html中JS-与-Native交互情况\" class=\"headerlink\" title=\"Html中JS 与 Native交互情况\"></a>Html中JS 与 Native交互情况</h3><ul>\n<li>Native调用JS</li>\n<li>JS调用Native</li>\n</ul>\n<h3 id=\"一-获取WebView的JSContext\"><a href=\"#一-获取WebView的JSContext\" class=\"headerlink\" title=\"一.  获取WebView的JSContext\"></a>一.  获取WebView的JSContext</h3><pre><code class=\"hljs swift\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">webViewDidFinishLoad</span><span class=\"hljs-params\">(<span class=\"hljs-number\">_</span> webView: UIWebView)</span></span> &#123;\n    \n    <span class=\"hljs-keyword\">self</span>.context = webView.value(forKeyPath: <span class=\"hljs-string\">&quot;documentView.webView.mainFrame.javaScriptContext&quot;</span>) <span class=\"hljs-keyword\">as</span>? <span class=\"hljs-type\">JSContext</span>\n&#125;</code></pre>\n\n<blockquote>\n<p>不同网页JSContext不同,只有在 webViewDidFinishLoad() 方法中获取,才能获取当前网页的JSContext</p>\n</blockquote>\n<h3 id=\"二-Native调用JS\"><a href=\"#二-Native调用JS\" class=\"headerlink\" title=\"二.   Native调用JS\"></a>二.   Native调用JS</h3><p>Html中JS提供的接口</p>\n<pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span>\n\t\n<span class=\"javascript\">\t  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">handler</span>(<span class=\"hljs-params\">argument</span>) </span>&#123;</span>\n\n<span class=\"javascript\">        <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">&quot;jsContent&quot;</span>).innerHTML = argument[<span class=\"hljs-string\">&quot;name&quot;</span>] + <span class=\"hljs-string\">&quot; &quot;</span> + argument[<span class=\"hljs-string\">&quot;age&quot;</span>] + <span class=\"hljs-string\">&quot;岁 &quot;</span> +  argument[<span class=\"hljs-string\">&quot;job&quot;</span>]</span>\n\n      &#125;\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n</code></pre>\n<p>Native调用方法</p>\n<pre><code class=\"hljs swift\"> <span class=\"hljs-comment\">//本地调用JS方法</span>\n<span class=\"hljs-meta\">@objc</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">nativeCallJS</span><span class=\"hljs-params\">()</span></span> &#123;\n\n    <span class=\"hljs-comment\">//方法一 (直接执行JS脚本)</span>\n    <span class=\"hljs-keyword\">let</span> scriptStr = <span class=\"hljs-string\">&quot;handler(&#123;&#x27;name&#x27;:&#x27;小明&#x27;, &#x27;age&#x27;:&#x27;18&#x27;,&#x27;job&#x27;:&#x27;学生&#x27;&#125;)&quot;</span>\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-number\">_</span> = <span class=\"hljs-keyword\">self</span>.context?.evaluateScript(scriptStr)\n    \n    <span class=\"hljs-comment\">//方法二 (获取函数,然后调用函数传参)</span>\n    <span class=\"hljs-keyword\">let</span> handleFunc = <span class=\"hljs-keyword\">self</span>.context?.objectForKeyedSubscript(<span class=\"hljs-string\">&quot;handler&quot;</span>)\n    <span class=\"hljs-keyword\">let</span> paraDic = [<span class=\"hljs-string\">&quot;name&quot;</span>:<span class=\"hljs-string\">&quot;小明&quot;</span>, <span class=\"hljs-string\">&quot;age&quot;</span>: <span class=\"hljs-number\">18</span>, <span class=\"hljs-string\">&quot;job&quot;</span>:<span class=\"hljs-string\">&quot;学生&quot;</span>] <span class=\"hljs-keyword\">as</span> [<span class=\"hljs-type\">String</span> : <span class=\"hljs-type\">Any</span>]\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-number\">_</span> = handleFunc?.call(withArguments: [paraDic])\n\n&#125;</code></pre>\n<h3 id=\"三-JS调用Native\"><a href=\"#三-JS调用Native\" class=\"headerlink\" title=\"三.    JS调用Native\"></a>三.    JS调用Native</h3><h4 id=\"方式一-使用Block-Swift-用闭包\"><a href=\"#方式一-使用Block-Swift-用闭包\" class=\"headerlink\" title=\"方式一: 使用Block(Swift 用闭包)\"></a>方式一: 使用Block(Swift 用闭包)</h4><pre><code class=\"hljs objectivec\">- (<span class=\"hljs-keyword\">void</span>)webViewDidFinishLoad:(<span class=\"hljs-built_in\">UIWebView</span> *)webView&#123;\n\n    <span class=\"hljs-comment\">//获取JS运行环境</span>\n    _context = [webView valueForKeyPath:<span class=\"hljs-string\">@&quot;documentView.webView.mainFrame.javaScriptContext&quot;</span>];\n    <span class=\"hljs-comment\">//html调用无参数OC</span>\n    _context[<span class=\"hljs-string\">@&quot;test1&quot;</span>] = ^()&#123;\n        [<span class=\"hljs-keyword\">self</span> method1];\n    &#125;;\n    \n    _context[<span class=\"hljs-string\">@&quot;test2&quot;</span>] = ^()&#123;\n        \n        <span class=\"hljs-built_in\">NSArray</span> *args = [JSContext currentArguments];<span class=\"hljs-comment\">//传过来的参数</span>\n        <span class=\"hljs-built_in\">NSString</span> *name = args[<span class=\"hljs-number\">0</span>];\n        <span class=\"hljs-built_in\">NSString</span> *str = args[<span class=\"hljs-number\">1</span>];\n        [<span class=\"hljs-keyword\">self</span> method2:name and:str];\n    &#125;;\n\n&#125;\n</code></pre>\n\n<h4 id=\"方式二-使用JSExport\"><a href=\"#方式二-使用JSExport\" class=\"headerlink\" title=\"方式二: 使用JSExport\"></a>方式二: 使用JSExport</h4><pre><code class=\"hljs swift\"><span class=\"hljs-meta\">@objc</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">protocol</span> <span class=\"hljs-title\">SwiftBridgeProtocol</span>: <span class=\"hljs-title\">JSExport</span></span>&#123;\n   \n    <span class=\"hljs-comment\">//JS调用本地方法(无参数)</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">method1</span><span class=\"hljs-params\">()</span></span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">method2</span><span class=\"hljs-params\">(<span class=\"hljs-number\">_</span> title: String, <span class=\"hljs-number\">_</span> message: String)</span></span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">method3</span><span class=\"hljs-params\">(<span class=\"hljs-number\">_</span> handlerName: String)</span></span>\n&#125;\n\n<span class=\"hljs-meta\">@objc</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">SwiftBrige</span>: <span class=\"hljs-title\">NSObject</span>, <span class=\"hljs-title\">SwiftBridgeProtocol</span></span>&#123;\n    \n    <span class=\"hljs-keyword\">weak</span> <span class=\"hljs-keyword\">var</span> controller: <span class=\"hljs-type\">UIViewController?</span>\n    <span class=\"hljs-keyword\">weak</span> <span class=\"hljs-keyword\">var</span> context   : <span class=\"hljs-type\">JSContext?</span>\n    \n    <span class=\"hljs-comment\">//JS调用本地方法(无参数)</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">method1</span><span class=\"hljs-params\">()</span></span>  &#123;\n        \n        <span class=\"hljs-keyword\">let</span> controller = <span class=\"hljs-type\">UIAlertController</span>.<span class=\"hljs-keyword\">init</span>(title: <span class=\"hljs-string\">&quot;测试&quot;</span>, message: <span class=\"hljs-string\">&quot;JS调用本地方法&quot;</span>, preferredStyle: .alert)\n        controller.addAction(<span class=\"hljs-type\">UIAlertAction</span>(title: <span class=\"hljs-string\">&quot;取消&quot;</span>, style: .cancel, handler: <span class=\"hljs-literal\">nil</span>))\n        <span class=\"hljs-keyword\">self</span>.controller?.present(controller, animated: <span class=\"hljs-literal\">true</span>, completion: <span class=\"hljs-literal\">nil</span>)\n    &#125;\n    \n    <span class=\"hljs-comment\">//JS调用本地方法(传参数)</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">method2</span><span class=\"hljs-params\">(<span class=\"hljs-number\">_</span> title: String, <span class=\"hljs-number\">_</span> message: String)</span></span> &#123;\n        \n        <span class=\"hljs-keyword\">let</span> controller = <span class=\"hljs-type\">UIAlertController</span>.<span class=\"hljs-keyword\">init</span>(title: title, message: message, preferredStyle: .alert)\n        controller.addAction(<span class=\"hljs-type\">UIAlertAction</span>(title: <span class=\"hljs-string\">&quot;取消&quot;</span>, style: .cancel, handler: <span class=\"hljs-literal\">nil</span>))\n        <span class=\"hljs-keyword\">self</span>.controller?.present(controller, animated: <span class=\"hljs-literal\">true</span>, completion: <span class=\"hljs-literal\">nil</span>)\n    &#125;\n    \n    <span class=\"hljs-comment\">//JS调用本地方法  本地方法回调JS方法</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">method3</span><span class=\"hljs-params\">(<span class=\"hljs-number\">_</span> handlerName: String)</span></span>&#123;\n        \n        <span class=\"hljs-comment\">//回调参数</span>\n        <span class=\"hljs-keyword\">let</span> paraDic = [<span class=\"hljs-string\">&quot;name&quot;</span>:<span class=\"hljs-string\">&quot;小明&quot;</span>, <span class=\"hljs-string\">&quot;age&quot;</span>: <span class=\"hljs-number\">18</span>, <span class=\"hljs-string\">&quot;job&quot;</span>:<span class=\"hljs-string\">&quot;学生&quot;</span>] <span class=\"hljs-keyword\">as</span> [<span class=\"hljs-type\">String</span> : <span class=\"hljs-type\">Any</span>]\n        \n        <span class=\"hljs-comment\">//获取JS回调函数</span>\n        <span class=\"hljs-keyword\">let</span> handleFunc = <span class=\"hljs-keyword\">self</span>.context?.objectForKeyedSubscript(<span class=\"hljs-string\">&quot;\\(handlerName)&quot;</span>)\n        \n        <span class=\"hljs-comment\">//调用该函数</span>\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-number\">_</span> = handleFunc?.call(withArguments: [paraDic])\n    &#125;\n&#125;</code></pre>\n<p><a href=\"https://github.com/913868456/SwiftDemo\">项目代码Swift</a><br><a href=\"https://github.com/913868456/OCDemo\">项目代码OC</a></p>\n"},{"title":"KVC","date":"2017-12-10T12:07:00.000Z","_content":"# NSKeyValueCoding\n\n一种可以直接通过key的名字来获取对象属性的机制.\n\n## 通览\n\n访问对象值的基本方法是 setValue(_:forKey:),该方法给指定属性设置值,还有value(forKey:)方法,通过指定key获取该属性的value.因此,所有对象属性都可以通过同一种方式去访问.\n\n默认实现依赖于通过对象的访问器方法正常地实现.(或者如果需要的话直接获取实例变量)\n\n## Topics\n\n### 取值\n\n```\n\n//返回指定key的属性值\nfunc value(forKey: String)\n\n//返回指定的key path 推断出的属性值\nfunc value(forKeyPath: String)\n\n//返回一个字典,该字典包含一个数组中包含的所以key对应的属性值\nfunc dictionaryWithValues(forKeys: [String])\n\n/**\n 当调用value(forKey:)方法,发现没有key对应属性时,调用此方法.\n \n 讨论:\n 子类可以重写该方法给未定义的key返回一个可选值,默认实现是会抛出一个NSUndefinedKeyException异常.\n \n */\nfunc value(forUndefineKey: String)\n\n\n/**\n 当key对应对象的属性为一个有序集合时,返回一个可变数组.\n \n */\nfunc mutableArrayValue(forKey: String)\n\n//返回一个可变数组,代理其提供指定key path的序列关系集合的读写权限.\nfunc mutableArrayValue(forKeyPath: String)\n\n//返回一个可变集合,代理其提供指定key的无序关系集合的读写访问\nfunc mutableSetValue(forKey: String)\n\n//返回一个可变集合,代理其提供指定key path的无序关系集合的读写访问.\nfunc mutableSetValue(forKeyPaht: String)\n\n//返回一个可变序列化集合,该集合通过指定key提供对这个特殊的有序集合的读写访问.\nfunc mutableOrderedSetValue(forKey: String)\n\n//返回一个可变序列化集合,该集合通过指定key path 提供对这个特殊有序集合的读写访问.\nfunc mutableOrderedSetValue(forKeyPath: String)\n\n```\n\n### 赋值\n\n```\n\n//给指定keyPath赋值\nfunc setValue(Any?, forKeyPath: String)\n\n//根据指定字典的key对应的value,给key对应的属性赋值\nfunc setValuesForKeys([String : Any])\n\n//当给setValue(_:forKey:)的标量值(比如一个int 或者 float 值)为nil时调用此方法\nfunc setNilValueForKey(String)\n\n/**\n 给指定key对应属性赋值\n\n */\nfunc setValue(Any?, forKey: String)\n\n//当调用setValue(_:forKey:)方法发现没有key对应的属性时,调用此方法\nfunc setValue(Any?, forUndefineKey: String)\n\n\n```\n\n### 校验\n\n```\n//校验一个对象赋值给key对应的属性是否有效,无效则抛出一个错误\nfunc validateValue(AutoreleasingUnsafeMutablePointer<AnyObject?>, forKey: String)\n\n//校验一个对象赋值给对应的keypath属性是否有效,无效抛出一个错误\nfunc validateValue(AutoreleasingUnsafeMutablePointer<AnyObject?>, forKeyPath: String)\n\n```\n\n## 参考资料\n\n[NSKeyValueCoding](https://developer.apple.com/documentation/foundation/object_runtime/nskeyvaluecoding)\n","source":"_posts/iOS/KVC.md","raw":"---\ntitle:  KVC \ndate: 2017-12-10 20:07\ncategories:\n- iOS\ntags: \n- KVC \n---\n# NSKeyValueCoding\n\n一种可以直接通过key的名字来获取对象属性的机制.\n\n## 通览\n\n访问对象值的基本方法是 setValue(_:forKey:),该方法给指定属性设置值,还有value(forKey:)方法,通过指定key获取该属性的value.因此,所有对象属性都可以通过同一种方式去访问.\n\n默认实现依赖于通过对象的访问器方法正常地实现.(或者如果需要的话直接获取实例变量)\n\n## Topics\n\n### 取值\n\n```\n\n//返回指定key的属性值\nfunc value(forKey: String)\n\n//返回指定的key path 推断出的属性值\nfunc value(forKeyPath: String)\n\n//返回一个字典,该字典包含一个数组中包含的所以key对应的属性值\nfunc dictionaryWithValues(forKeys: [String])\n\n/**\n 当调用value(forKey:)方法,发现没有key对应属性时,调用此方法.\n \n 讨论:\n 子类可以重写该方法给未定义的key返回一个可选值,默认实现是会抛出一个NSUndefinedKeyException异常.\n \n */\nfunc value(forUndefineKey: String)\n\n\n/**\n 当key对应对象的属性为一个有序集合时,返回一个可变数组.\n \n */\nfunc mutableArrayValue(forKey: String)\n\n//返回一个可变数组,代理其提供指定key path的序列关系集合的读写权限.\nfunc mutableArrayValue(forKeyPath: String)\n\n//返回一个可变集合,代理其提供指定key的无序关系集合的读写访问\nfunc mutableSetValue(forKey: String)\n\n//返回一个可变集合,代理其提供指定key path的无序关系集合的读写访问.\nfunc mutableSetValue(forKeyPaht: String)\n\n//返回一个可变序列化集合,该集合通过指定key提供对这个特殊的有序集合的读写访问.\nfunc mutableOrderedSetValue(forKey: String)\n\n//返回一个可变序列化集合,该集合通过指定key path 提供对这个特殊有序集合的读写访问.\nfunc mutableOrderedSetValue(forKeyPath: String)\n\n```\n\n### 赋值\n\n```\n\n//给指定keyPath赋值\nfunc setValue(Any?, forKeyPath: String)\n\n//根据指定字典的key对应的value,给key对应的属性赋值\nfunc setValuesForKeys([String : Any])\n\n//当给setValue(_:forKey:)的标量值(比如一个int 或者 float 值)为nil时调用此方法\nfunc setNilValueForKey(String)\n\n/**\n 给指定key对应属性赋值\n\n */\nfunc setValue(Any?, forKey: String)\n\n//当调用setValue(_:forKey:)方法发现没有key对应的属性时,调用此方法\nfunc setValue(Any?, forUndefineKey: String)\n\n\n```\n\n### 校验\n\n```\n//校验一个对象赋值给key对应的属性是否有效,无效则抛出一个错误\nfunc validateValue(AutoreleasingUnsafeMutablePointer<AnyObject?>, forKey: String)\n\n//校验一个对象赋值给对应的keypath属性是否有效,无效抛出一个错误\nfunc validateValue(AutoreleasingUnsafeMutablePointer<AnyObject?>, forKeyPath: String)\n\n```\n\n## 参考资料\n\n[NSKeyValueCoding](https://developer.apple.com/documentation/foundation/object_runtime/nskeyvaluecoding)\n","slug":"iOS/KVC","published":1,"updated":"2020-09-27T11:11:15.201Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgq6gnx30021t29k2y237jeb","content":"<h1 id=\"NSKeyValueCoding\"><a href=\"#NSKeyValueCoding\" class=\"headerlink\" title=\"NSKeyValueCoding\"></a>NSKeyValueCoding</h1><p>一种可以直接通过key的名字来获取对象属性的机制.</p>\n<h2 id=\"通览\"><a href=\"#通览\" class=\"headerlink\" title=\"通览\"></a>通览</h2><p>访问对象值的基本方法是 setValue(_:forKey:),该方法给指定属性设置值,还有value(forKey:)方法,通过指定key获取该属性的value.因此,所有对象属性都可以通过同一种方式去访问.</p>\n<p>默认实现依赖于通过对象的访问器方法正常地实现.(或者如果需要的话直接获取实例变量)</p>\n<h2 id=\"Topics\"><a href=\"#Topics\" class=\"headerlink\" title=\"Topics\"></a>Topics</h2><h3 id=\"取值\"><a href=\"#取值\" class=\"headerlink\" title=\"取值\"></a>取值</h3><pre><code class=\"hljs swift\">\n<span class=\"hljs-comment\">//返回指定key的属性值</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">value</span><span class=\"hljs-params\">(forKey: String)</span></span>\n\n<span class=\"hljs-comment\">//返回指定的key path 推断出的属性值</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">value</span><span class=\"hljs-params\">(forKeyPath: String)</span></span>\n\n<span class=\"hljs-comment\">//返回一个字典,该字典包含一个数组中包含的所以key对应的属性值</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">dictionaryWithValues</span><span class=\"hljs-params\">(forKeys: [String])</span></span>\n\n<span class=\"hljs-comment\">/**</span>\n<span class=\"hljs-comment\"> 当调用value(forKey:)方法,发现没有key对应属性时,调用此方法.</span>\n<span class=\"hljs-comment\"> </span>\n<span class=\"hljs-comment\"> 讨论:</span>\n<span class=\"hljs-comment\"> 子类可以重写该方法给未定义的key返回一个可选值,默认实现是会抛出一个NSUndefinedKeyException异常.</span>\n<span class=\"hljs-comment\"> </span>\n<span class=\"hljs-comment\"> */</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">value</span><span class=\"hljs-params\">(forUndefineKey: String)</span></span>\n\n\n<span class=\"hljs-comment\">/**</span>\n<span class=\"hljs-comment\"> 当key对应对象的属性为一个有序集合时,返回一个可变数组.</span>\n<span class=\"hljs-comment\"> </span>\n<span class=\"hljs-comment\"> */</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">mutableArrayValue</span><span class=\"hljs-params\">(forKey: String)</span></span>\n\n<span class=\"hljs-comment\">//返回一个可变数组,代理其提供指定key path的序列关系集合的读写权限.</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">mutableArrayValue</span><span class=\"hljs-params\">(forKeyPath: String)</span></span>\n\n<span class=\"hljs-comment\">//返回一个可变集合,代理其提供指定key的无序关系集合的读写访问</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">mutableSetValue</span><span class=\"hljs-params\">(forKey: String)</span></span>\n\n<span class=\"hljs-comment\">//返回一个可变集合,代理其提供指定key path的无序关系集合的读写访问.</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">mutableSetValue</span><span class=\"hljs-params\">(forKeyPaht: String)</span></span>\n\n<span class=\"hljs-comment\">//返回一个可变序列化集合,该集合通过指定key提供对这个特殊的有序集合的读写访问.</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">mutableOrderedSetValue</span><span class=\"hljs-params\">(forKey: String)</span></span>\n\n<span class=\"hljs-comment\">//返回一个可变序列化集合,该集合通过指定key path 提供对这个特殊有序集合的读写访问.</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">mutableOrderedSetValue</span><span class=\"hljs-params\">(forKeyPath: String)</span></span>\n</code></pre>\n\n<h3 id=\"赋值\"><a href=\"#赋值\" class=\"headerlink\" title=\"赋值\"></a>赋值</h3><pre><code class=\"hljs swift\">\n<span class=\"hljs-comment\">//给指定keyPath赋值</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">setValue</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">Any</span>?, forKeyPath: String)</span></span>\n\n<span class=\"hljs-comment\">//根据指定字典的key对应的value,给key对应的属性赋值</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">setValuesForKeys</span><span class=\"hljs-params\">([String : <span class=\"hljs-keyword\">Any</span>])</span></span>\n\n<span class=\"hljs-comment\">//当给setValue(_:forKey:)的标量值(比如一个int 或者 float 值)为nil时调用此方法</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">setNilValueForKey</span><span class=\"hljs-params\">(String)</span></span>\n\n<span class=\"hljs-comment\">/**</span>\n<span class=\"hljs-comment\"> 给指定key对应属性赋值</span>\n<span class=\"hljs-comment\"></span>\n<span class=\"hljs-comment\"> */</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">setValue</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">Any</span>?, forKey: String)</span></span>\n\n<span class=\"hljs-comment\">//当调用setValue(_:forKey:)方法发现没有key对应的属性时,调用此方法</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">setValue</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">Any</span>?, forUndefineKey: String)</span></span>\n\n</code></pre>\n\n<h3 id=\"校验\"><a href=\"#校验\" class=\"headerlink\" title=\"校验\"></a>校验</h3><pre><code class=\"hljs swift\"><span class=\"hljs-comment\">//校验一个对象赋值给key对应的属性是否有效,无效则抛出一个错误</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">validateValue</span><span class=\"hljs-params\">(AutoreleasingUnsafeMutablePointer&lt;AnyObject?&gt;, forKey: String)</span></span>\n\n<span class=\"hljs-comment\">//校验一个对象赋值给对应的keypath属性是否有效,无效抛出一个错误</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">validateValue</span><span class=\"hljs-params\">(AutoreleasingUnsafeMutablePointer&lt;AnyObject?&gt;, forKeyPath: String)</span></span>\n</code></pre>\n\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p><a href=\"https://developer.apple.com/documentation/foundation/object_runtime/nskeyvaluecoding\">NSKeyValueCoding</a></p>\n","site":{"data":{"fluid_static_prefix":{"internal_js":"/js","internal_css":"/css","internal_img":"/img","iconfont":"//at.alicdn.com/t/font_1736178_kmeydafke9r.css","anchor":"https://cdn.staticfile.org/anchor-js/4.2.2/","github_markdown":"https://cdn.staticfile.org/github-markdown-css/4.0.0/","jquery":"https://cdn.staticfile.org/jquery/3.4.1/","bootstrap":"https://cdn.staticfile.org/twitter-bootstrap/4.4.1/","highlightjs":"https://cdn.staticfile.org/highlight.js/10.0.0/","prismjs":"https://cdn.staticfile.org/prism/1.21.0/","tocbot":"https://cdn.staticfile.org/tocbot/4.11.1/","typed":"https://cdn.staticfile.org/typed.js/2.0.11/","fancybox":"https://cdn.staticfile.org/fancybox/3.5.7/","mathjax":"https://cdn.staticfile.org/mathjax/3.0.5/es5/","katex":"https://cdn.staticfile.org/KaTeX/0.11.1/","aplayer":"https://cdn.staticfile.org/aplayer/1.10.1/","busuanzi":"https://busuanzi.ibruce.info/busuanzi/2.3/","clipboard":"https://cdn.staticfile.org/clipboard.js/2.0.6/","mermaid":"https://cdn.staticfile.org/mermaid/8.5.0/","valine":"https://cdn.staticfile.org/valine/1.4.14/","gitalk":"https://cdn.staticfile.org/gitalk/1.6.2/","blueimp_md5":"https://cdn.staticfile.org/blueimp-md5/2.13.0/","disqusjs":"https://cdn.jsdelivr.net/npm/disqusjs@1.0/dist/","hint":"/lib/hint/"},"fluid_config":{"favicon":"/img/favicon.png","apple_touch_icon":"/img/favicon.png","title_join_string":" - ","force_https":false,"code":{"copy_btn":true,"highlight":{"enable":true,"lib":"highlightjs","highlightjs":{"style":"Github Gist","bg_color":false},"prismjs":{"style":"default","preprocess":true}}},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"_","loop":false},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"right","visible":"hover","icon":""},"mouse_click":{"enable":false,"style":"values"}},"dark_mode":{"enable":true,"default":"auto"},"color":{"body_bg_color":"#eee","body_bg_color_dark":"#181c27","navbar_bg_color":"#2f4154","navbar_bg_color_dark":"#1f3144","navbar_text_color":"#fff","navbar_text_color_dark":"#d0d0d0","text_color":"#3c4858","text_color_dark":"#c4c6c9","sec_text_color":"#718096","sec_text_color_dark":"#a7a9ad","post_text_color":"#2c3e50","post_text_color_dark":"#c4c6c9","post_heading_color":"#1a202c","post_heading_color_dark":"#c4c6c9","post_link_color":"#0366d6","post_link_color_dark":"#1589e9","link_hover_color":"#30a9de","link_hover_color_dark":"#30a9de","link_hover_bg_color":"#f8f9fa","link_hover_bg_color_dark":"#364151","board_color":"#fff","board_color_dark":"#252d38"},"font":{"font_size":"16px","font_family":null,"code_font_size":"85%"},"custom_js":null,"custom_css":null,"custom_html":"","web_analytics":{"enable":false,"baidu":null,"google":null,"gtag":null,"tencent":{"sid":null,"cid":null},"woyaola":null,"cnzz":null,"leancloud":{"app_id":null,"app_key":null,"server_url":null}},"lazyload":{"enable":true,"onlypost":false},"daovoice":{"enable":false,"appid":""},"aplayer":{"enable":false,"autoplay":false,"loop":"all","order":"random","theme":"#b7daff","songs":[{"name":"name","artist":"artist","url":"/songs/test.mp3","cover":"/img/cover.jpg"},{"name":"name","artist":"artist","url":"https://...url.mp3","cover":"https://...cover.jpg"}]},"version":{"check":false},"navbar":{"blog_title":"吃面多放葱","ground_glass":{"enable":false,"px":3,"alpha":0.7},"menu":[{"key":"home","link":"/","icon":"iconfont icon-home-fill"},{"key":"category","link":"/categories/","icon":"iconfont icon-category-fill"},{"key":"tag","link":"/tags/","icon":"iconfont icon-tags-fill"},{"key":"about","link":"/about/","icon":"iconfont icon-user-fill"}]},"search":{"enable":true,"path":"/local-search.xml","generate_path":"/local-search.xml","field":"post","content":true},"scroll_down_arrow":{"enable":true,"banner_height_limit":90,"scroll_after_turning_page":true},"banner_parallax":true,"footer":{"statistics":{"enable":false,"source":"busuanzi","pv_format":"总访问量 {} 次","uv_format":"总访客数 {} 人"},"beian":{"enable":false,"icp_text":"京ICP证123456号","police_text":"京公网安备12345678号","police_code":12345678,"police_icon":"/img/police_beian.png"}},"scroll_top_arrow":{"enable":true},"index":{"banner_img":"/img/default.png","banner_img_height":100,"banner_mask_alpha":0.3,"post_default_img":"","slogan":{"enable":true,"text":"像蚂蚁一样工作，像蝴蝶一样生活"},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"category":true,"tag":true}},"page":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3},"post":{"banner_img":"/img/default.png","banner_img_height":70,"banner_mask_alpha":0.3,"meta":{"author":{"enable":false},"date":{"enable":true,"format":"LL a"},"wordcount":{"enable":true,"format":"{} 字"},"min2read":{"enable":true,"format":"{} 分钟","words":100},"views":{"enable":false,"source":"busuanzi","format":"{} 次"}},"updated":{"enable":false,"content":"本文最后更新于：","relative":false},"toc":{"enable":true,"headingSelector":"h1,h2,h3,h4,h5,h6","collapseDepth":0},"copyright":{"enable":true,"content":"本博客所有文章除特别声明外，均采用 <a href=\"https://creativecommons.org/licenses/by-sa/4.0/deed.zh\" rel=\"nofollow noopener\">CC BY-SA 4.0 协议</a> ，转载请注明出处！"},"prev_next":{"enable":true},"custom":{"enable":false,"content":"<img src=\"https://octodex.github.com/images/jetpacktocat.png\" class=\"rounded mx-auto d-block mt-5\" style=\"width:150px; height:150px;\">"},"image_zoom":{"enable":true},"footnote":{"enable":true,"header":""},"math":{"enable":false,"specific":false,"engine":"mathjax"},"mermaid":{"enable":false,"specific":false,"options":{"theme":"default"}},"comments":{"enable":false,"type":"disqus"}},"utterances":{"repo":null,"issue_term":"pathname","label":"utterances","theme":"github-light","theme_dark":"github-dark","crossorigin":"anonymous"},"disqus":{"shortname":null,"disqusjs":false,"apikey":null},"gitalk":{"clientID":null,"clientSecret":null,"repo":null,"owner":null,"admin":["name"],"id":"location.pathname","language":"zh-CN","labels":["Gitalk"],"perPage":10,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true},"valine":{"appid":null,"appkey":null,"placeholder":"说点什么","path":"window.location.pathname","avatar":"retro","meta":["nick","mail","link"],"pageSize":10,"lang":"zh-CN","highlight":false,"recordIP":false,"serverURLs":null},"changyan":{"appid":"","appkey":""},"livere":{"uid":""},"remark42":{"host":"https://remark.haoyizebo.com","site_id":"haoyizebo","max_shown_comments":10,"locale":"zh"},"archive":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null},"category":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"post_limit":10,"order_by":"-length","collapse_depth":0},"tag":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null,"tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"avatar":"/img/avatar.png","name":"蔺国防","introduce":"移动应用开发者，历史文学爱好者","icons":[{"class":"iconfont icon-github-fill","link":"https://github.com","tip":"GitHub"},{"class":"iconfont icon-douban-fill","link":"https://douban.com","tip":"豆瓣"},{"class":"iconfont icon-wechat-fill","qrcode":"/img/favicon.png"}]},"page404":{"banner_img":"/img/default.png","banner_img_height":85,"banner_mask_alpha":0.3,"subtitle":"Page not found"},"links":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"items":[{"title":"Fluid Docs","intro":"主题使用指南","link":"https://hexo.fluid-dev.com/docs/","image":"/img/favicon.png"},{"title":"Fluid Repo","intro":"主题 GitHub 仓库","link":"https://github.com/fluid-dev/hexo-theme-fluid","image":"/img/favicon.png"},{"title":"Fluid Example","intro":"主题操作示例","link":"https://hexo.fluid-dev.com/docs/example/","image":"/img/favicon.png"}]}}}},"excerpt":"","more":"<h1 id=\"NSKeyValueCoding\"><a href=\"#NSKeyValueCoding\" class=\"headerlink\" title=\"NSKeyValueCoding\"></a>NSKeyValueCoding</h1><p>一种可以直接通过key的名字来获取对象属性的机制.</p>\n<h2 id=\"通览\"><a href=\"#通览\" class=\"headerlink\" title=\"通览\"></a>通览</h2><p>访问对象值的基本方法是 setValue(_:forKey:),该方法给指定属性设置值,还有value(forKey:)方法,通过指定key获取该属性的value.因此,所有对象属性都可以通过同一种方式去访问.</p>\n<p>默认实现依赖于通过对象的访问器方法正常地实现.(或者如果需要的话直接获取实例变量)</p>\n<h2 id=\"Topics\"><a href=\"#Topics\" class=\"headerlink\" title=\"Topics\"></a>Topics</h2><h3 id=\"取值\"><a href=\"#取值\" class=\"headerlink\" title=\"取值\"></a>取值</h3><pre><code class=\"hljs swift\">\n<span class=\"hljs-comment\">//返回指定key的属性值</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">value</span><span class=\"hljs-params\">(forKey: String)</span></span>\n\n<span class=\"hljs-comment\">//返回指定的key path 推断出的属性值</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">value</span><span class=\"hljs-params\">(forKeyPath: String)</span></span>\n\n<span class=\"hljs-comment\">//返回一个字典,该字典包含一个数组中包含的所以key对应的属性值</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">dictionaryWithValues</span><span class=\"hljs-params\">(forKeys: [String])</span></span>\n\n<span class=\"hljs-comment\">/**</span>\n<span class=\"hljs-comment\"> 当调用value(forKey:)方法,发现没有key对应属性时,调用此方法.</span>\n<span class=\"hljs-comment\"> </span>\n<span class=\"hljs-comment\"> 讨论:</span>\n<span class=\"hljs-comment\"> 子类可以重写该方法给未定义的key返回一个可选值,默认实现是会抛出一个NSUndefinedKeyException异常.</span>\n<span class=\"hljs-comment\"> </span>\n<span class=\"hljs-comment\"> */</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">value</span><span class=\"hljs-params\">(forUndefineKey: String)</span></span>\n\n\n<span class=\"hljs-comment\">/**</span>\n<span class=\"hljs-comment\"> 当key对应对象的属性为一个有序集合时,返回一个可变数组.</span>\n<span class=\"hljs-comment\"> </span>\n<span class=\"hljs-comment\"> */</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">mutableArrayValue</span><span class=\"hljs-params\">(forKey: String)</span></span>\n\n<span class=\"hljs-comment\">//返回一个可变数组,代理其提供指定key path的序列关系集合的读写权限.</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">mutableArrayValue</span><span class=\"hljs-params\">(forKeyPath: String)</span></span>\n\n<span class=\"hljs-comment\">//返回一个可变集合,代理其提供指定key的无序关系集合的读写访问</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">mutableSetValue</span><span class=\"hljs-params\">(forKey: String)</span></span>\n\n<span class=\"hljs-comment\">//返回一个可变集合,代理其提供指定key path的无序关系集合的读写访问.</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">mutableSetValue</span><span class=\"hljs-params\">(forKeyPaht: String)</span></span>\n\n<span class=\"hljs-comment\">//返回一个可变序列化集合,该集合通过指定key提供对这个特殊的有序集合的读写访问.</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">mutableOrderedSetValue</span><span class=\"hljs-params\">(forKey: String)</span></span>\n\n<span class=\"hljs-comment\">//返回一个可变序列化集合,该集合通过指定key path 提供对这个特殊有序集合的读写访问.</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">mutableOrderedSetValue</span><span class=\"hljs-params\">(forKeyPath: String)</span></span>\n</code></pre>\n\n<h3 id=\"赋值\"><a href=\"#赋值\" class=\"headerlink\" title=\"赋值\"></a>赋值</h3><pre><code class=\"hljs swift\">\n<span class=\"hljs-comment\">//给指定keyPath赋值</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">setValue</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">Any</span>?, forKeyPath: String)</span></span>\n\n<span class=\"hljs-comment\">//根据指定字典的key对应的value,给key对应的属性赋值</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">setValuesForKeys</span><span class=\"hljs-params\">([String : <span class=\"hljs-keyword\">Any</span>])</span></span>\n\n<span class=\"hljs-comment\">//当给setValue(_:forKey:)的标量值(比如一个int 或者 float 值)为nil时调用此方法</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">setNilValueForKey</span><span class=\"hljs-params\">(String)</span></span>\n\n<span class=\"hljs-comment\">/**</span>\n<span class=\"hljs-comment\"> 给指定key对应属性赋值</span>\n<span class=\"hljs-comment\"></span>\n<span class=\"hljs-comment\"> */</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">setValue</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">Any</span>?, forKey: String)</span></span>\n\n<span class=\"hljs-comment\">//当调用setValue(_:forKey:)方法发现没有key对应的属性时,调用此方法</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">setValue</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">Any</span>?, forUndefineKey: String)</span></span>\n\n</code></pre>\n\n<h3 id=\"校验\"><a href=\"#校验\" class=\"headerlink\" title=\"校验\"></a>校验</h3><pre><code class=\"hljs swift\"><span class=\"hljs-comment\">//校验一个对象赋值给key对应的属性是否有效,无效则抛出一个错误</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">validateValue</span><span class=\"hljs-params\">(AutoreleasingUnsafeMutablePointer&lt;AnyObject?&gt;, forKey: String)</span></span>\n\n<span class=\"hljs-comment\">//校验一个对象赋值给对应的keypath属性是否有效,无效抛出一个错误</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">validateValue</span><span class=\"hljs-params\">(AutoreleasingUnsafeMutablePointer&lt;AnyObject?&gt;, forKeyPath: String)</span></span>\n</code></pre>\n\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p><a href=\"https://developer.apple.com/documentation/foundation/object_runtime/nskeyvaluecoding\">NSKeyValueCoding</a></p>\n"},{"title":"NSLayoutConstraint","date":"2017-10-19T08:02:00.000Z","_content":"#### 创建约束的两个方法\n\n```\n\n方法一:\n/* Create an array of constraints using an ASCII art-like visual format string.\n*/\nopen class func constraints(withVisualFormat format: String, options opts: NSLayoutFormatOptions = [], metrics: [String : Any]?, views: [String : Any]) -> [NSLayoutConstraint]\n\n方法二:\n/* Create constraints explicitly. Constraints are of the form \"view1.attr1 = view2.attr2 * multiplier + constant\"\nIf your equation does not have a second view and attribute, use nil and NSLayoutAttributeNotAnAttribute.\n*/\npublic convenience init(item view1: Any, attribute attr1: NSLayoutAttribute, relatedBy relation: NSLayoutRelation, toItem view2: Any?, attribute attr2: NSLayoutAttribute, multiplier: CGFloat, constant c: CGFloat)\n\n```\n\n#### 参数介绍\n方法一:\n\nformat: VFL字符串 \noptions: NSLayoutformatOptins (如果有一个则只需填写一个,若有多个则需要数组包含所有选项)\nmetrics 以字典的形式设置距离变量\n比如 \"H:|-[dis1]-[view1]-[dis2]-[view2(==view1)]-20-|\"这句中的[dis1] [dis2]为视图变量,将字典的view1 view2即为key 对应相应的视图\nviews 以字典的形式设置视图变量\n比如 \"H:|-20-[view1]-20-[view2(==view1)]-20-|\"这句中的[view1] [view2]为视图变量,将字典的view1 view2即为key 对应相应的视图\n\n方法二:\n\nview1:将要设置约束的控件\nview2:参考控件\nattr1:  将要设置控件的属性\nattr2:  参考控件的属性\nmultiplier: 相乘系数\nconstant： 约束常量\n\nview1.attr1 = view2.attr2 * multiplier + constant\n\n#### Visual Format Laguage(VFL)介绍\n\nH:表示水平约束\nV:表示垂直方向约束\n| 表示父视图\n-30- 表示间距30Point\n[View] 表示UI控件View\n\n#### Example\n\"H:|-20-[aView]-15-[bView(==aView)]-20-|\"\n翻译:  水平方向约束:距离父视图左右间距为20,aView 和 bView水平间距为15,aView和bView的宽度相等.\n\n#### 布局视图\n\n![1508392677456.jpg](http://upload-images.jianshu.io/upload_images/3340896-d4ba05585a04da9f.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n#### 布局代码\n```\n/**\n创建两个视图,两个视图距离顶部50,距离左右边界20,两个视图间距15,等宽,等高,视图高度为150\n*/\nlet aView = UIView()\naView.backgroundColor = .red\nview.addSubview(aView)\n\nlet bView = UIView()\nbView.backgroundColor = .brown\nview.addSubview(bView)\n\n//关闭Autoresize,防止与AutoLayout冲突,参与布局的视图都需要关闭\nview.translatesAutoresizingMaskIntoConstraints = false\naView.translatesAutoresizingMaskIntoConstraints = false\nbView.translatesAutoresizingMaskIntoConstraints = false\n\n//添加两个视图的水平约束\nlet contraintsH = NSLayoutConstraint.constraints(withVisualFormat: \"H:|-20-[aView]-15-[bView(==aView)]-20-|\", options: [.alignAllTop, .alignAllBottom], metrics: nil, views: [\"aView\": aView, \"bView\": bView])\nview.addConstraints(contraintsH)\n\n//添加两个视图的垂直约束\nlet contraintsV = NSLayoutConstraint.constraints(withVisualFormat: \"V:|-50-[aView(150)]\", options: .init(rawValue: 0), metrics: nil, views: [\"aView\": aView])\nview.addConstraints(contraintsV)\n\n/**\naView内添加一个子视图cView,cView与aView的中心对齐,宽高是aView的一半\n*/\nlet cView = UIView()\ncView.backgroundColor = .yellow\naView.addSubview(cView)\n\n//关闭autoresize\ncView.translatesAutoresizingMaskIntoConstraints = false\n\n//cView添加约束\nlet constraintX = NSLayoutConstraint.init(item: cView, attribute: .centerX, relatedBy: .equal, toItem: aView, attribute: .centerX, multiplier: 1.0, constant: 0)\nlet constraintY = NSLayoutConstraint.init(item: cView, attribute: .centerY, relatedBy: .equal, toItem: aView, attribute: .centerY, multiplier: 1.0, constant: 0)\nlet constraintsWidth = NSLayoutConstraint.init(item: cView, attribute: .width, relatedBy: .equal, toItem: aView, attribute: .width, multiplier: 0.5, constant: 0)\nlet constraintsHeight = NSLayoutConstraint.init(item: cView, attribute: .height, relatedBy: .equal, toItem: aView, attribute: .height, multiplier: 0.5, constant: 0)\naView.addConstraints([constraintX,constraintY,constraintsWidth,constraintsHeight])\n\n```\n\n\n\n\n","source":"_posts/iOS/NSLayoutConstraint.md","raw":"\n---\ntitle:  NSLayoutConstraint \ndate: 2017-10-19 16:02\ncategories:\n- iOS\ntags: \n- Layout \n---\n#### 创建约束的两个方法\n\n```\n\n方法一:\n/* Create an array of constraints using an ASCII art-like visual format string.\n*/\nopen class func constraints(withVisualFormat format: String, options opts: NSLayoutFormatOptions = [], metrics: [String : Any]?, views: [String : Any]) -> [NSLayoutConstraint]\n\n方法二:\n/* Create constraints explicitly. Constraints are of the form \"view1.attr1 = view2.attr2 * multiplier + constant\"\nIf your equation does not have a second view and attribute, use nil and NSLayoutAttributeNotAnAttribute.\n*/\npublic convenience init(item view1: Any, attribute attr1: NSLayoutAttribute, relatedBy relation: NSLayoutRelation, toItem view2: Any?, attribute attr2: NSLayoutAttribute, multiplier: CGFloat, constant c: CGFloat)\n\n```\n\n#### 参数介绍\n方法一:\n\nformat: VFL字符串 \noptions: NSLayoutformatOptins (如果有一个则只需填写一个,若有多个则需要数组包含所有选项)\nmetrics 以字典的形式设置距离变量\n比如 \"H:|-[dis1]-[view1]-[dis2]-[view2(==view1)]-20-|\"这句中的[dis1] [dis2]为视图变量,将字典的view1 view2即为key 对应相应的视图\nviews 以字典的形式设置视图变量\n比如 \"H:|-20-[view1]-20-[view2(==view1)]-20-|\"这句中的[view1] [view2]为视图变量,将字典的view1 view2即为key 对应相应的视图\n\n方法二:\n\nview1:将要设置约束的控件\nview2:参考控件\nattr1:  将要设置控件的属性\nattr2:  参考控件的属性\nmultiplier: 相乘系数\nconstant： 约束常量\n\nview1.attr1 = view2.attr2 * multiplier + constant\n\n#### Visual Format Laguage(VFL)介绍\n\nH:表示水平约束\nV:表示垂直方向约束\n| 表示父视图\n-30- 表示间距30Point\n[View] 表示UI控件View\n\n#### Example\n\"H:|-20-[aView]-15-[bView(==aView)]-20-|\"\n翻译:  水平方向约束:距离父视图左右间距为20,aView 和 bView水平间距为15,aView和bView的宽度相等.\n\n#### 布局视图\n\n![1508392677456.jpg](http://upload-images.jianshu.io/upload_images/3340896-d4ba05585a04da9f.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n#### 布局代码\n```\n/**\n创建两个视图,两个视图距离顶部50,距离左右边界20,两个视图间距15,等宽,等高,视图高度为150\n*/\nlet aView = UIView()\naView.backgroundColor = .red\nview.addSubview(aView)\n\nlet bView = UIView()\nbView.backgroundColor = .brown\nview.addSubview(bView)\n\n//关闭Autoresize,防止与AutoLayout冲突,参与布局的视图都需要关闭\nview.translatesAutoresizingMaskIntoConstraints = false\naView.translatesAutoresizingMaskIntoConstraints = false\nbView.translatesAutoresizingMaskIntoConstraints = false\n\n//添加两个视图的水平约束\nlet contraintsH = NSLayoutConstraint.constraints(withVisualFormat: \"H:|-20-[aView]-15-[bView(==aView)]-20-|\", options: [.alignAllTop, .alignAllBottom], metrics: nil, views: [\"aView\": aView, \"bView\": bView])\nview.addConstraints(contraintsH)\n\n//添加两个视图的垂直约束\nlet contraintsV = NSLayoutConstraint.constraints(withVisualFormat: \"V:|-50-[aView(150)]\", options: .init(rawValue: 0), metrics: nil, views: [\"aView\": aView])\nview.addConstraints(contraintsV)\n\n/**\naView内添加一个子视图cView,cView与aView的中心对齐,宽高是aView的一半\n*/\nlet cView = UIView()\ncView.backgroundColor = .yellow\naView.addSubview(cView)\n\n//关闭autoresize\ncView.translatesAutoresizingMaskIntoConstraints = false\n\n//cView添加约束\nlet constraintX = NSLayoutConstraint.init(item: cView, attribute: .centerX, relatedBy: .equal, toItem: aView, attribute: .centerX, multiplier: 1.0, constant: 0)\nlet constraintY = NSLayoutConstraint.init(item: cView, attribute: .centerY, relatedBy: .equal, toItem: aView, attribute: .centerY, multiplier: 1.0, constant: 0)\nlet constraintsWidth = NSLayoutConstraint.init(item: cView, attribute: .width, relatedBy: .equal, toItem: aView, attribute: .width, multiplier: 0.5, constant: 0)\nlet constraintsHeight = NSLayoutConstraint.init(item: cView, attribute: .height, relatedBy: .equal, toItem: aView, attribute: .height, multiplier: 0.5, constant: 0)\naView.addConstraints([constraintX,constraintY,constraintsWidth,constraintsHeight])\n\n```\n\n\n\n\n","slug":"iOS/NSLayoutConstraint","published":1,"updated":"2020-09-27T11:07:38.258Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgq6gnx40025t29kclkhby7s","content":"<h4 id=\"创建约束的两个方法\"><a href=\"#创建约束的两个方法\" class=\"headerlink\" title=\"创建约束的两个方法\"></a>创建约束的两个方法</h4><pre><code class=\"hljs less\">\n方法一:\n<span class=\"hljs-comment\">/* Create an array of constraints using an ASCII art-like visual format string.</span>\n<span class=\"hljs-comment\">*/</span>\n<span class=\"hljs-selector-tag\">open</span> <span class=\"hljs-selector-tag\">class</span> <span class=\"hljs-selector-tag\">func</span> <span class=\"hljs-selector-tag\">constraints</span>(withVisualFormat <span class=\"hljs-attribute\">format</span>: String, options <span class=\"hljs-attribute\">opts</span>: NSLayoutFormatOptions = [], <span class=\"hljs-attribute\">metrics</span>: [<span class=\"hljs-attribute\">String </span>: Any]?, <span class=\"hljs-attribute\">views</span>: [<span class=\"hljs-attribute\">String </span>: Any]) <span class=\"hljs-selector-tag\">-</span>&gt; <span class=\"hljs-selector-attr\">[NSLayoutConstraint]</span>\n\n方法二:\n<span class=\"hljs-comment\">/* Create constraints explicitly. Constraints are of the form &quot;view1.attr1 = view2.attr2 * multiplier + constant&quot;</span>\n<span class=\"hljs-comment\">If your equation does not have a second view and attribute, use nil and NSLayoutAttributeNotAnAttribute.</span>\n<span class=\"hljs-comment\">*/</span>\n<span class=\"hljs-selector-tag\">public</span> <span class=\"hljs-selector-tag\">convenience</span> <span class=\"hljs-selector-tag\">init</span>(item <span class=\"hljs-attribute\">view1</span>: Any, attribute <span class=\"hljs-attribute\">attr1</span>: NSLayoutAttribute, relatedBy <span class=\"hljs-attribute\">relation</span>: NSLayoutRelation, toItem <span class=\"hljs-attribute\">view2</span>: Any?, attribute <span class=\"hljs-attribute\">attr2</span>: NSLayoutAttribute, <span class=\"hljs-attribute\">multiplier</span>: CGFloat, constant <span class=\"hljs-attribute\">c</span>: CGFloat)\n</code></pre>\n\n<h4 id=\"参数介绍\"><a href=\"#参数介绍\" class=\"headerlink\" title=\"参数介绍\"></a>参数介绍</h4><p>方法一:</p>\n<p>format: VFL字符串<br>options: NSLayoutformatOptins (如果有一个则只需填写一个,若有多个则需要数组包含所有选项)<br>metrics 以字典的形式设置距离变量<br>比如 “H:|-[dis1]-[view1]-[dis2]-[view2(==view1)]-20-|”这句中的[dis1] [dis2]为视图变量,将字典的view1 view2即为key 对应相应的视图<br>views 以字典的形式设置视图变量<br>比如 “H:|-20-[view1]-20-[view2(==view1)]-20-|”这句中的[view1] [view2]为视图变量,将字典的view1 view2即为key 对应相应的视图</p>\n<p>方法二:</p>\n<p>view1:将要设置约束的控件<br>view2:参考控件<br>attr1:  将要设置控件的属性<br>attr2:  参考控件的属性<br>multiplier: 相乘系数<br>constant： 约束常量</p>\n<p>view1.attr1 = view2.attr2 * multiplier + constant</p>\n<h4 id=\"Visual-Format-Laguage-VFL-介绍\"><a href=\"#Visual-Format-Laguage-VFL-介绍\" class=\"headerlink\" title=\"Visual Format Laguage(VFL)介绍\"></a>Visual Format Laguage(VFL)介绍</h4><p>H:表示水平约束<br>V:表示垂直方向约束<br>| 表示父视图<br>-30- 表示间距30Point<br>[View] 表示UI控件View</p>\n<h4 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h4><p>“H:|-20-[aView]-15-[bView(==aView)]-20-|”<br>翻译:  水平方向约束:距离父视图左右间距为20,aView 和 bView水平间距为15,aView和bView的宽度相等.</p>\n<h4 id=\"布局视图\"><a href=\"#布局视图\" class=\"headerlink\" title=\"布局视图\"></a>布局视图</h4><p><img src=\"http://upload-images.jianshu.io/upload_images/3340896-d4ba05585a04da9f.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"1508392677456.jpg\"></p>\n<h4 id=\"布局代码\"><a href=\"#布局代码\" class=\"headerlink\" title=\"布局代码\"></a>布局代码</h4><pre><code class=\"hljs groovy\"><span class=\"hljs-comment\">/**</span>\n<span class=\"hljs-comment\">创建两个视图,两个视图距离顶部50,距离左右边界20,两个视图间距15,等宽,等高,视图高度为150</span>\n<span class=\"hljs-comment\">*/</span>\nlet aView = UIView()\naView.backgroundColor = .red\nview.addSubview(aView)\n\nlet bView = UIView()\nbView.backgroundColor = .brown\nview.addSubview(bView)\n\n<span class=\"hljs-comment\">//关闭Autoresize,防止与AutoLayout冲突,参与布局的视图都需要关闭</span>\nview.translatesAutoresizingMaskIntoConstraints = <span class=\"hljs-literal\">false</span>\naView.translatesAutoresizingMaskIntoConstraints = <span class=\"hljs-literal\">false</span>\nbView.translatesAutoresizingMaskIntoConstraints = <span class=\"hljs-literal\">false</span>\n\n<span class=\"hljs-comment\">//添加两个视图的水平约束</span>\nlet contraintsH = NSLayoutConstraint.constraints(<span class=\"hljs-attr\">withVisualFormat:</span> <span class=\"hljs-string\">&quot;H:|-20-[aView]-15-[bView(==aView)]-20-|&quot;</span>, <span class=\"hljs-attr\">options:</span> [.alignAllTop, .alignAllBottom], <span class=\"hljs-attr\">metrics:</span> nil, <span class=\"hljs-attr\">views:</span> [<span class=\"hljs-string\">&quot;aView&quot;</span>: aView, <span class=\"hljs-string\">&quot;bView&quot;</span>: bView])\nview.addConstraints(contraintsH)\n\n<span class=\"hljs-comment\">//添加两个视图的垂直约束</span>\nlet contraintsV = NSLayoutConstraint.constraints(<span class=\"hljs-attr\">withVisualFormat:</span> <span class=\"hljs-string\">&quot;V:|-50-[aView(150)]&quot;</span>, <span class=\"hljs-attr\">options:</span> .init(<span class=\"hljs-attr\">rawValue:</span> <span class=\"hljs-number\">0</span>), <span class=\"hljs-attr\">metrics:</span> nil, <span class=\"hljs-attr\">views:</span> [<span class=\"hljs-string\">&quot;aView&quot;</span>: aView])\nview.addConstraints(contraintsV)\n\n<span class=\"hljs-comment\">/**</span>\n<span class=\"hljs-comment\">aView内添加一个子视图cView,cView与aView的中心对齐,宽高是aView的一半</span>\n<span class=\"hljs-comment\">*/</span>\nlet cView = UIView()\ncView.backgroundColor = .yellow\naView.addSubview(cView)\n\n<span class=\"hljs-comment\">//关闭autoresize</span>\ncView.translatesAutoresizingMaskIntoConstraints = <span class=\"hljs-literal\">false</span>\n\n<span class=\"hljs-comment\">//cView添加约束</span>\nlet constraintX = NSLayoutConstraint.init(<span class=\"hljs-attr\">item:</span> cView, <span class=\"hljs-attr\">attribute:</span> .centerX, <span class=\"hljs-attr\">relatedBy:</span> .equal, <span class=\"hljs-attr\">toItem:</span> aView, <span class=\"hljs-attr\">attribute:</span> .centerX, <span class=\"hljs-attr\">multiplier:</span> <span class=\"hljs-number\">1.0</span>, <span class=\"hljs-attr\">constant:</span> <span class=\"hljs-number\">0</span>)\nlet constraintY = NSLayoutConstraint.init(<span class=\"hljs-attr\">item:</span> cView, <span class=\"hljs-attr\">attribute:</span> .centerY, <span class=\"hljs-attr\">relatedBy:</span> .equal, <span class=\"hljs-attr\">toItem:</span> aView, <span class=\"hljs-attr\">attribute:</span> .centerY, <span class=\"hljs-attr\">multiplier:</span> <span class=\"hljs-number\">1.0</span>, <span class=\"hljs-attr\">constant:</span> <span class=\"hljs-number\">0</span>)\nlet constraintsWidth = NSLayoutConstraint.init(<span class=\"hljs-attr\">item:</span> cView, <span class=\"hljs-attr\">attribute:</span> .width, <span class=\"hljs-attr\">relatedBy:</span> .equal, <span class=\"hljs-attr\">toItem:</span> aView, <span class=\"hljs-attr\">attribute:</span> .width, <span class=\"hljs-attr\">multiplier:</span> <span class=\"hljs-number\">0.5</span>, <span class=\"hljs-attr\">constant:</span> <span class=\"hljs-number\">0</span>)\nlet constraintsHeight = NSLayoutConstraint.init(<span class=\"hljs-attr\">item:</span> cView, <span class=\"hljs-attr\">attribute:</span> .height, <span class=\"hljs-attr\">relatedBy:</span> .equal, <span class=\"hljs-attr\">toItem:</span> aView, <span class=\"hljs-attr\">attribute:</span> .height, <span class=\"hljs-attr\">multiplier:</span> <span class=\"hljs-number\">0.5</span>, <span class=\"hljs-attr\">constant:</span> <span class=\"hljs-number\">0</span>)\naView.addConstraints([constraintX,constraintY,constraintsWidth,constraintsHeight])\n</code></pre>\n\n\n\n\n","site":{"data":{"fluid_static_prefix":{"internal_js":"/js","internal_css":"/css","internal_img":"/img","iconfont":"//at.alicdn.com/t/font_1736178_kmeydafke9r.css","anchor":"https://cdn.staticfile.org/anchor-js/4.2.2/","github_markdown":"https://cdn.staticfile.org/github-markdown-css/4.0.0/","jquery":"https://cdn.staticfile.org/jquery/3.4.1/","bootstrap":"https://cdn.staticfile.org/twitter-bootstrap/4.4.1/","highlightjs":"https://cdn.staticfile.org/highlight.js/10.0.0/","prismjs":"https://cdn.staticfile.org/prism/1.21.0/","tocbot":"https://cdn.staticfile.org/tocbot/4.11.1/","typed":"https://cdn.staticfile.org/typed.js/2.0.11/","fancybox":"https://cdn.staticfile.org/fancybox/3.5.7/","mathjax":"https://cdn.staticfile.org/mathjax/3.0.5/es5/","katex":"https://cdn.staticfile.org/KaTeX/0.11.1/","aplayer":"https://cdn.staticfile.org/aplayer/1.10.1/","busuanzi":"https://busuanzi.ibruce.info/busuanzi/2.3/","clipboard":"https://cdn.staticfile.org/clipboard.js/2.0.6/","mermaid":"https://cdn.staticfile.org/mermaid/8.5.0/","valine":"https://cdn.staticfile.org/valine/1.4.14/","gitalk":"https://cdn.staticfile.org/gitalk/1.6.2/","blueimp_md5":"https://cdn.staticfile.org/blueimp-md5/2.13.0/","disqusjs":"https://cdn.jsdelivr.net/npm/disqusjs@1.0/dist/","hint":"/lib/hint/"},"fluid_config":{"favicon":"/img/favicon.png","apple_touch_icon":"/img/favicon.png","title_join_string":" - ","force_https":false,"code":{"copy_btn":true,"highlight":{"enable":true,"lib":"highlightjs","highlightjs":{"style":"Github Gist","bg_color":false},"prismjs":{"style":"default","preprocess":true}}},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"_","loop":false},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"right","visible":"hover","icon":""},"mouse_click":{"enable":false,"style":"values"}},"dark_mode":{"enable":true,"default":"auto"},"color":{"body_bg_color":"#eee","body_bg_color_dark":"#181c27","navbar_bg_color":"#2f4154","navbar_bg_color_dark":"#1f3144","navbar_text_color":"#fff","navbar_text_color_dark":"#d0d0d0","text_color":"#3c4858","text_color_dark":"#c4c6c9","sec_text_color":"#718096","sec_text_color_dark":"#a7a9ad","post_text_color":"#2c3e50","post_text_color_dark":"#c4c6c9","post_heading_color":"#1a202c","post_heading_color_dark":"#c4c6c9","post_link_color":"#0366d6","post_link_color_dark":"#1589e9","link_hover_color":"#30a9de","link_hover_color_dark":"#30a9de","link_hover_bg_color":"#f8f9fa","link_hover_bg_color_dark":"#364151","board_color":"#fff","board_color_dark":"#252d38"},"font":{"font_size":"16px","font_family":null,"code_font_size":"85%"},"custom_js":null,"custom_css":null,"custom_html":"","web_analytics":{"enable":false,"baidu":null,"google":null,"gtag":null,"tencent":{"sid":null,"cid":null},"woyaola":null,"cnzz":null,"leancloud":{"app_id":null,"app_key":null,"server_url":null}},"lazyload":{"enable":true,"onlypost":false},"daovoice":{"enable":false,"appid":""},"aplayer":{"enable":false,"autoplay":false,"loop":"all","order":"random","theme":"#b7daff","songs":[{"name":"name","artist":"artist","url":"/songs/test.mp3","cover":"/img/cover.jpg"},{"name":"name","artist":"artist","url":"https://...url.mp3","cover":"https://...cover.jpg"}]},"version":{"check":false},"navbar":{"blog_title":"吃面多放葱","ground_glass":{"enable":false,"px":3,"alpha":0.7},"menu":[{"key":"home","link":"/","icon":"iconfont icon-home-fill"},{"key":"category","link":"/categories/","icon":"iconfont icon-category-fill"},{"key":"tag","link":"/tags/","icon":"iconfont icon-tags-fill"},{"key":"about","link":"/about/","icon":"iconfont icon-user-fill"}]},"search":{"enable":true,"path":"/local-search.xml","generate_path":"/local-search.xml","field":"post","content":true},"scroll_down_arrow":{"enable":true,"banner_height_limit":90,"scroll_after_turning_page":true},"banner_parallax":true,"footer":{"statistics":{"enable":false,"source":"busuanzi","pv_format":"总访问量 {} 次","uv_format":"总访客数 {} 人"},"beian":{"enable":false,"icp_text":"京ICP证123456号","police_text":"京公网安备12345678号","police_code":12345678,"police_icon":"/img/police_beian.png"}},"scroll_top_arrow":{"enable":true},"index":{"banner_img":"/img/default.png","banner_img_height":100,"banner_mask_alpha":0.3,"post_default_img":"","slogan":{"enable":true,"text":"像蚂蚁一样工作，像蝴蝶一样生活"},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"category":true,"tag":true}},"page":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3},"post":{"banner_img":"/img/default.png","banner_img_height":70,"banner_mask_alpha":0.3,"meta":{"author":{"enable":false},"date":{"enable":true,"format":"LL a"},"wordcount":{"enable":true,"format":"{} 字"},"min2read":{"enable":true,"format":"{} 分钟","words":100},"views":{"enable":false,"source":"busuanzi","format":"{} 次"}},"updated":{"enable":false,"content":"本文最后更新于：","relative":false},"toc":{"enable":true,"headingSelector":"h1,h2,h3,h4,h5,h6","collapseDepth":0},"copyright":{"enable":true,"content":"本博客所有文章除特别声明外，均采用 <a href=\"https://creativecommons.org/licenses/by-sa/4.0/deed.zh\" rel=\"nofollow noopener\">CC BY-SA 4.0 协议</a> ，转载请注明出处！"},"prev_next":{"enable":true},"custom":{"enable":false,"content":"<img src=\"https://octodex.github.com/images/jetpacktocat.png\" class=\"rounded mx-auto d-block mt-5\" style=\"width:150px; height:150px;\">"},"image_zoom":{"enable":true},"footnote":{"enable":true,"header":""},"math":{"enable":false,"specific":false,"engine":"mathjax"},"mermaid":{"enable":false,"specific":false,"options":{"theme":"default"}},"comments":{"enable":false,"type":"disqus"}},"utterances":{"repo":null,"issue_term":"pathname","label":"utterances","theme":"github-light","theme_dark":"github-dark","crossorigin":"anonymous"},"disqus":{"shortname":null,"disqusjs":false,"apikey":null},"gitalk":{"clientID":null,"clientSecret":null,"repo":null,"owner":null,"admin":["name"],"id":"location.pathname","language":"zh-CN","labels":["Gitalk"],"perPage":10,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true},"valine":{"appid":null,"appkey":null,"placeholder":"说点什么","path":"window.location.pathname","avatar":"retro","meta":["nick","mail","link"],"pageSize":10,"lang":"zh-CN","highlight":false,"recordIP":false,"serverURLs":null},"changyan":{"appid":"","appkey":""},"livere":{"uid":""},"remark42":{"host":"https://remark.haoyizebo.com","site_id":"haoyizebo","max_shown_comments":10,"locale":"zh"},"archive":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null},"category":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"post_limit":10,"order_by":"-length","collapse_depth":0},"tag":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null,"tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"avatar":"/img/avatar.png","name":"蔺国防","introduce":"移动应用开发者，历史文学爱好者","icons":[{"class":"iconfont icon-github-fill","link":"https://github.com","tip":"GitHub"},{"class":"iconfont icon-douban-fill","link":"https://douban.com","tip":"豆瓣"},{"class":"iconfont icon-wechat-fill","qrcode":"/img/favicon.png"}]},"page404":{"banner_img":"/img/default.png","banner_img_height":85,"banner_mask_alpha":0.3,"subtitle":"Page not found"},"links":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"items":[{"title":"Fluid Docs","intro":"主题使用指南","link":"https://hexo.fluid-dev.com/docs/","image":"/img/favicon.png"},{"title":"Fluid Repo","intro":"主题 GitHub 仓库","link":"https://github.com/fluid-dev/hexo-theme-fluid","image":"/img/favicon.png"},{"title":"Fluid Example","intro":"主题操作示例","link":"https://hexo.fluid-dev.com/docs/example/","image":"/img/favicon.png"}]}}}},"excerpt":"","more":"<h4 id=\"创建约束的两个方法\"><a href=\"#创建约束的两个方法\" class=\"headerlink\" title=\"创建约束的两个方法\"></a>创建约束的两个方法</h4><pre><code class=\"hljs less\">\n方法一:\n<span class=\"hljs-comment\">/* Create an array of constraints using an ASCII art-like visual format string.</span>\n<span class=\"hljs-comment\">*/</span>\n<span class=\"hljs-selector-tag\">open</span> <span class=\"hljs-selector-tag\">class</span> <span class=\"hljs-selector-tag\">func</span> <span class=\"hljs-selector-tag\">constraints</span>(withVisualFormat <span class=\"hljs-attribute\">format</span>: String, options <span class=\"hljs-attribute\">opts</span>: NSLayoutFormatOptions = [], <span class=\"hljs-attribute\">metrics</span>: [<span class=\"hljs-attribute\">String </span>: Any]?, <span class=\"hljs-attribute\">views</span>: [<span class=\"hljs-attribute\">String </span>: Any]) <span class=\"hljs-selector-tag\">-</span>&gt; <span class=\"hljs-selector-attr\">[NSLayoutConstraint]</span>\n\n方法二:\n<span class=\"hljs-comment\">/* Create constraints explicitly. Constraints are of the form &quot;view1.attr1 = view2.attr2 * multiplier + constant&quot;</span>\n<span class=\"hljs-comment\">If your equation does not have a second view and attribute, use nil and NSLayoutAttributeNotAnAttribute.</span>\n<span class=\"hljs-comment\">*/</span>\n<span class=\"hljs-selector-tag\">public</span> <span class=\"hljs-selector-tag\">convenience</span> <span class=\"hljs-selector-tag\">init</span>(item <span class=\"hljs-attribute\">view1</span>: Any, attribute <span class=\"hljs-attribute\">attr1</span>: NSLayoutAttribute, relatedBy <span class=\"hljs-attribute\">relation</span>: NSLayoutRelation, toItem <span class=\"hljs-attribute\">view2</span>: Any?, attribute <span class=\"hljs-attribute\">attr2</span>: NSLayoutAttribute, <span class=\"hljs-attribute\">multiplier</span>: CGFloat, constant <span class=\"hljs-attribute\">c</span>: CGFloat)\n</code></pre>\n\n<h4 id=\"参数介绍\"><a href=\"#参数介绍\" class=\"headerlink\" title=\"参数介绍\"></a>参数介绍</h4><p>方法一:</p>\n<p>format: VFL字符串<br>options: NSLayoutformatOptins (如果有一个则只需填写一个,若有多个则需要数组包含所有选项)<br>metrics 以字典的形式设置距离变量<br>比如 “H:|-[dis1]-[view1]-[dis2]-[view2(==view1)]-20-|”这句中的[dis1] [dis2]为视图变量,将字典的view1 view2即为key 对应相应的视图<br>views 以字典的形式设置视图变量<br>比如 “H:|-20-[view1]-20-[view2(==view1)]-20-|”这句中的[view1] [view2]为视图变量,将字典的view1 view2即为key 对应相应的视图</p>\n<p>方法二:</p>\n<p>view1:将要设置约束的控件<br>view2:参考控件<br>attr1:  将要设置控件的属性<br>attr2:  参考控件的属性<br>multiplier: 相乘系数<br>constant： 约束常量</p>\n<p>view1.attr1 = view2.attr2 * multiplier + constant</p>\n<h4 id=\"Visual-Format-Laguage-VFL-介绍\"><a href=\"#Visual-Format-Laguage-VFL-介绍\" class=\"headerlink\" title=\"Visual Format Laguage(VFL)介绍\"></a>Visual Format Laguage(VFL)介绍</h4><p>H:表示水平约束<br>V:表示垂直方向约束<br>| 表示父视图<br>-30- 表示间距30Point<br>[View] 表示UI控件View</p>\n<h4 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h4><p>“H:|-20-[aView]-15-[bView(==aView)]-20-|”<br>翻译:  水平方向约束:距离父视图左右间距为20,aView 和 bView水平间距为15,aView和bView的宽度相等.</p>\n<h4 id=\"布局视图\"><a href=\"#布局视图\" class=\"headerlink\" title=\"布局视图\"></a>布局视图</h4><p><img src=\"http://upload-images.jianshu.io/upload_images/3340896-d4ba05585a04da9f.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"1508392677456.jpg\"></p>\n<h4 id=\"布局代码\"><a href=\"#布局代码\" class=\"headerlink\" title=\"布局代码\"></a>布局代码</h4><pre><code class=\"hljs groovy\"><span class=\"hljs-comment\">/**</span>\n<span class=\"hljs-comment\">创建两个视图,两个视图距离顶部50,距离左右边界20,两个视图间距15,等宽,等高,视图高度为150</span>\n<span class=\"hljs-comment\">*/</span>\nlet aView = UIView()\naView.backgroundColor = .red\nview.addSubview(aView)\n\nlet bView = UIView()\nbView.backgroundColor = .brown\nview.addSubview(bView)\n\n<span class=\"hljs-comment\">//关闭Autoresize,防止与AutoLayout冲突,参与布局的视图都需要关闭</span>\nview.translatesAutoresizingMaskIntoConstraints = <span class=\"hljs-literal\">false</span>\naView.translatesAutoresizingMaskIntoConstraints = <span class=\"hljs-literal\">false</span>\nbView.translatesAutoresizingMaskIntoConstraints = <span class=\"hljs-literal\">false</span>\n\n<span class=\"hljs-comment\">//添加两个视图的水平约束</span>\nlet contraintsH = NSLayoutConstraint.constraints(<span class=\"hljs-attr\">withVisualFormat:</span> <span class=\"hljs-string\">&quot;H:|-20-[aView]-15-[bView(==aView)]-20-|&quot;</span>, <span class=\"hljs-attr\">options:</span> [.alignAllTop, .alignAllBottom], <span class=\"hljs-attr\">metrics:</span> nil, <span class=\"hljs-attr\">views:</span> [<span class=\"hljs-string\">&quot;aView&quot;</span>: aView, <span class=\"hljs-string\">&quot;bView&quot;</span>: bView])\nview.addConstraints(contraintsH)\n\n<span class=\"hljs-comment\">//添加两个视图的垂直约束</span>\nlet contraintsV = NSLayoutConstraint.constraints(<span class=\"hljs-attr\">withVisualFormat:</span> <span class=\"hljs-string\">&quot;V:|-50-[aView(150)]&quot;</span>, <span class=\"hljs-attr\">options:</span> .init(<span class=\"hljs-attr\">rawValue:</span> <span class=\"hljs-number\">0</span>), <span class=\"hljs-attr\">metrics:</span> nil, <span class=\"hljs-attr\">views:</span> [<span class=\"hljs-string\">&quot;aView&quot;</span>: aView])\nview.addConstraints(contraintsV)\n\n<span class=\"hljs-comment\">/**</span>\n<span class=\"hljs-comment\">aView内添加一个子视图cView,cView与aView的中心对齐,宽高是aView的一半</span>\n<span class=\"hljs-comment\">*/</span>\nlet cView = UIView()\ncView.backgroundColor = .yellow\naView.addSubview(cView)\n\n<span class=\"hljs-comment\">//关闭autoresize</span>\ncView.translatesAutoresizingMaskIntoConstraints = <span class=\"hljs-literal\">false</span>\n\n<span class=\"hljs-comment\">//cView添加约束</span>\nlet constraintX = NSLayoutConstraint.init(<span class=\"hljs-attr\">item:</span> cView, <span class=\"hljs-attr\">attribute:</span> .centerX, <span class=\"hljs-attr\">relatedBy:</span> .equal, <span class=\"hljs-attr\">toItem:</span> aView, <span class=\"hljs-attr\">attribute:</span> .centerX, <span class=\"hljs-attr\">multiplier:</span> <span class=\"hljs-number\">1.0</span>, <span class=\"hljs-attr\">constant:</span> <span class=\"hljs-number\">0</span>)\nlet constraintY = NSLayoutConstraint.init(<span class=\"hljs-attr\">item:</span> cView, <span class=\"hljs-attr\">attribute:</span> .centerY, <span class=\"hljs-attr\">relatedBy:</span> .equal, <span class=\"hljs-attr\">toItem:</span> aView, <span class=\"hljs-attr\">attribute:</span> .centerY, <span class=\"hljs-attr\">multiplier:</span> <span class=\"hljs-number\">1.0</span>, <span class=\"hljs-attr\">constant:</span> <span class=\"hljs-number\">0</span>)\nlet constraintsWidth = NSLayoutConstraint.init(<span class=\"hljs-attr\">item:</span> cView, <span class=\"hljs-attr\">attribute:</span> .width, <span class=\"hljs-attr\">relatedBy:</span> .equal, <span class=\"hljs-attr\">toItem:</span> aView, <span class=\"hljs-attr\">attribute:</span> .width, <span class=\"hljs-attr\">multiplier:</span> <span class=\"hljs-number\">0.5</span>, <span class=\"hljs-attr\">constant:</span> <span class=\"hljs-number\">0</span>)\nlet constraintsHeight = NSLayoutConstraint.init(<span class=\"hljs-attr\">item:</span> cView, <span class=\"hljs-attr\">attribute:</span> .height, <span class=\"hljs-attr\">relatedBy:</span> .equal, <span class=\"hljs-attr\">toItem:</span> aView, <span class=\"hljs-attr\">attribute:</span> .height, <span class=\"hljs-attr\">multiplier:</span> <span class=\"hljs-number\">0.5</span>, <span class=\"hljs-attr\">constant:</span> <span class=\"hljs-number\">0</span>)\naView.addConstraints([constraintX,constraintY,constraintsWidth,constraintsHeight])\n</code></pre>\n\n\n\n\n"},{"title":"通知编程","_content":"\n## 介绍\nFoundation 为传递事件发生的信息提供了一个编程架构,这篇文档描述这个架构的元素并解释如何使用他们.\n阅读这篇文档去学习[notifications](https://developer.apple.com/library/content/documentation/General/Conceptual/DevPedia-CocoaCore/Notification.html#//apple_ref/doc/uid/TP40008195-CH35),通知中心,和通知队列.\n\n### 本文档组织构成\n该文档包含下面文章:\n-  *通知*  描述封装事件信息的对象.\n-  *通知中心* 描述负责管理发送和接受通知的对象.\n-  *通知队列* 面搜狐\n- *注册通知*\n- *发送通知*\n- *投递通知给指定线程*\n\n## 通知\n\n## 通知中心 描述\n\n## 通知队列\n\n## 注册通知\n\n## 发送通知\n\n## 投递通知给指定线程\n\n---\n## 相关文档\n  [线程编程指南]() \n\n## 参考资料\n[Notification Programming Topics]()\n","source":"_posts/iOS/Notification-Programming-Topics.md","raw":"---\ntitle:  通知编程\ncategories:\n- iOS\ntags: \n- Notification \n---\n\n## 介绍\nFoundation 为传递事件发生的信息提供了一个编程架构,这篇文档描述这个架构的元素并解释如何使用他们.\n阅读这篇文档去学习[notifications](https://developer.apple.com/library/content/documentation/General/Conceptual/DevPedia-CocoaCore/Notification.html#//apple_ref/doc/uid/TP40008195-CH35),通知中心,和通知队列.\n\n### 本文档组织构成\n该文档包含下面文章:\n-  *通知*  描述封装事件信息的对象.\n-  *通知中心* 描述负责管理发送和接受通知的对象.\n-  *通知队列* 面搜狐\n- *注册通知*\n- *发送通知*\n- *投递通知给指定线程*\n\n## 通知\n\n## 通知中心 描述\n\n## 通知队列\n\n## 注册通知\n\n## 发送通知\n\n## 投递通知给指定线程\n\n---\n## 相关文档\n  [线程编程指南]() \n\n## 参考资料\n[Notification Programming Topics]()\n","slug":"iOS/Notification-Programming-Topics","published":1,"date":"2020-09-23T10:25:59.000Z","updated":"2020-09-24T09:53:23.619Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgq6gnx50027t29k3rt0au1d","content":"<h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><p>Foundation 为传递事件发生的信息提供了一个编程架构,这篇文档描述这个架构的元素并解释如何使用他们.<br>阅读这篇文档去学习<a href=\"https://developer.apple.com/library/content/documentation/General/Conceptual/DevPedia-CocoaCore/Notification.html#//apple_ref/doc/uid/TP40008195-CH35\">notifications</a>,通知中心,和通知队列.</p>\n<h3 id=\"本文档组织构成\"><a href=\"#本文档组织构成\" class=\"headerlink\" title=\"本文档组织构成\"></a>本文档组织构成</h3><p>该文档包含下面文章:</p>\n<ul>\n<li><em>通知</em>  描述封装事件信息的对象.</li>\n<li><em>通知中心</em> 描述负责管理发送和接受通知的对象.</li>\n<li><em>通知队列</em> 面搜狐</li>\n<li><em>注册通知</em></li>\n<li><em>发送通知</em></li>\n<li><em>投递通知给指定线程</em></li>\n</ul>\n<h2 id=\"通知\"><a href=\"#通知\" class=\"headerlink\" title=\"通知\"></a>通知</h2><h2 id=\"通知中心-描述\"><a href=\"#通知中心-描述\" class=\"headerlink\" title=\"通知中心 描述\"></a>通知中心 描述</h2><h2 id=\"通知队列\"><a href=\"#通知队列\" class=\"headerlink\" title=\"通知队列\"></a>通知队列</h2><h2 id=\"注册通知\"><a href=\"#注册通知\" class=\"headerlink\" title=\"注册通知\"></a>注册通知</h2><h2 id=\"发送通知\"><a href=\"#发送通知\" class=\"headerlink\" title=\"发送通知\"></a>发送通知</h2><h2 id=\"投递通知给指定线程\"><a href=\"#投递通知给指定线程\" class=\"headerlink\" title=\"投递通知给指定线程\"></a>投递通知给指定线程</h2><hr>\n<h2 id=\"相关文档\"><a href=\"#相关文档\" class=\"headerlink\" title=\"相关文档\"></a>相关文档</h2><p>  <a href=\"\">线程编程指南</a> </p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p><a href=\"\">Notification Programming Topics</a></p>\n","site":{"data":{"fluid_static_prefix":{"internal_js":"/js","internal_css":"/css","internal_img":"/img","iconfont":"//at.alicdn.com/t/font_1736178_kmeydafke9r.css","anchor":"https://cdn.staticfile.org/anchor-js/4.2.2/","github_markdown":"https://cdn.staticfile.org/github-markdown-css/4.0.0/","jquery":"https://cdn.staticfile.org/jquery/3.4.1/","bootstrap":"https://cdn.staticfile.org/twitter-bootstrap/4.4.1/","highlightjs":"https://cdn.staticfile.org/highlight.js/10.0.0/","prismjs":"https://cdn.staticfile.org/prism/1.21.0/","tocbot":"https://cdn.staticfile.org/tocbot/4.11.1/","typed":"https://cdn.staticfile.org/typed.js/2.0.11/","fancybox":"https://cdn.staticfile.org/fancybox/3.5.7/","mathjax":"https://cdn.staticfile.org/mathjax/3.0.5/es5/","katex":"https://cdn.staticfile.org/KaTeX/0.11.1/","aplayer":"https://cdn.staticfile.org/aplayer/1.10.1/","busuanzi":"https://busuanzi.ibruce.info/busuanzi/2.3/","clipboard":"https://cdn.staticfile.org/clipboard.js/2.0.6/","mermaid":"https://cdn.staticfile.org/mermaid/8.5.0/","valine":"https://cdn.staticfile.org/valine/1.4.14/","gitalk":"https://cdn.staticfile.org/gitalk/1.6.2/","blueimp_md5":"https://cdn.staticfile.org/blueimp-md5/2.13.0/","disqusjs":"https://cdn.jsdelivr.net/npm/disqusjs@1.0/dist/","hint":"/lib/hint/"},"fluid_config":{"favicon":"/img/favicon.png","apple_touch_icon":"/img/favicon.png","title_join_string":" - ","force_https":false,"code":{"copy_btn":true,"highlight":{"enable":true,"lib":"highlightjs","highlightjs":{"style":"Github Gist","bg_color":false},"prismjs":{"style":"default","preprocess":true}}},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"_","loop":false},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"right","visible":"hover","icon":""},"mouse_click":{"enable":false,"style":"values"}},"dark_mode":{"enable":true,"default":"auto"},"color":{"body_bg_color":"#eee","body_bg_color_dark":"#181c27","navbar_bg_color":"#2f4154","navbar_bg_color_dark":"#1f3144","navbar_text_color":"#fff","navbar_text_color_dark":"#d0d0d0","text_color":"#3c4858","text_color_dark":"#c4c6c9","sec_text_color":"#718096","sec_text_color_dark":"#a7a9ad","post_text_color":"#2c3e50","post_text_color_dark":"#c4c6c9","post_heading_color":"#1a202c","post_heading_color_dark":"#c4c6c9","post_link_color":"#0366d6","post_link_color_dark":"#1589e9","link_hover_color":"#30a9de","link_hover_color_dark":"#30a9de","link_hover_bg_color":"#f8f9fa","link_hover_bg_color_dark":"#364151","board_color":"#fff","board_color_dark":"#252d38"},"font":{"font_size":"16px","font_family":null,"code_font_size":"85%"},"custom_js":null,"custom_css":null,"custom_html":"","web_analytics":{"enable":false,"baidu":null,"google":null,"gtag":null,"tencent":{"sid":null,"cid":null},"woyaola":null,"cnzz":null,"leancloud":{"app_id":null,"app_key":null,"server_url":null}},"lazyload":{"enable":true,"onlypost":false},"daovoice":{"enable":false,"appid":""},"aplayer":{"enable":false,"autoplay":false,"loop":"all","order":"random","theme":"#b7daff","songs":[{"name":"name","artist":"artist","url":"/songs/test.mp3","cover":"/img/cover.jpg"},{"name":"name","artist":"artist","url":"https://...url.mp3","cover":"https://...cover.jpg"}]},"version":{"check":false},"navbar":{"blog_title":"吃面多放葱","ground_glass":{"enable":false,"px":3,"alpha":0.7},"menu":[{"key":"home","link":"/","icon":"iconfont icon-home-fill"},{"key":"category","link":"/categories/","icon":"iconfont icon-category-fill"},{"key":"tag","link":"/tags/","icon":"iconfont icon-tags-fill"},{"key":"about","link":"/about/","icon":"iconfont icon-user-fill"}]},"search":{"enable":true,"path":"/local-search.xml","generate_path":"/local-search.xml","field":"post","content":true},"scroll_down_arrow":{"enable":true,"banner_height_limit":90,"scroll_after_turning_page":true},"banner_parallax":true,"footer":{"statistics":{"enable":false,"source":"busuanzi","pv_format":"总访问量 {} 次","uv_format":"总访客数 {} 人"},"beian":{"enable":false,"icp_text":"京ICP证123456号","police_text":"京公网安备12345678号","police_code":12345678,"police_icon":"/img/police_beian.png"}},"scroll_top_arrow":{"enable":true},"index":{"banner_img":"/img/default.png","banner_img_height":100,"banner_mask_alpha":0.3,"post_default_img":"","slogan":{"enable":true,"text":"像蚂蚁一样工作，像蝴蝶一样生活"},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"category":true,"tag":true}},"page":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3},"post":{"banner_img":"/img/default.png","banner_img_height":70,"banner_mask_alpha":0.3,"meta":{"author":{"enable":false},"date":{"enable":true,"format":"LL a"},"wordcount":{"enable":true,"format":"{} 字"},"min2read":{"enable":true,"format":"{} 分钟","words":100},"views":{"enable":false,"source":"busuanzi","format":"{} 次"}},"updated":{"enable":false,"content":"本文最后更新于：","relative":false},"toc":{"enable":true,"headingSelector":"h1,h2,h3,h4,h5,h6","collapseDepth":0},"copyright":{"enable":true,"content":"本博客所有文章除特别声明外，均采用 <a href=\"https://creativecommons.org/licenses/by-sa/4.0/deed.zh\" rel=\"nofollow noopener\">CC BY-SA 4.0 协议</a> ，转载请注明出处！"},"prev_next":{"enable":true},"custom":{"enable":false,"content":"<img src=\"https://octodex.github.com/images/jetpacktocat.png\" class=\"rounded mx-auto d-block mt-5\" style=\"width:150px; height:150px;\">"},"image_zoom":{"enable":true},"footnote":{"enable":true,"header":""},"math":{"enable":false,"specific":false,"engine":"mathjax"},"mermaid":{"enable":false,"specific":false,"options":{"theme":"default"}},"comments":{"enable":false,"type":"disqus"}},"utterances":{"repo":null,"issue_term":"pathname","label":"utterances","theme":"github-light","theme_dark":"github-dark","crossorigin":"anonymous"},"disqus":{"shortname":null,"disqusjs":false,"apikey":null},"gitalk":{"clientID":null,"clientSecret":null,"repo":null,"owner":null,"admin":["name"],"id":"location.pathname","language":"zh-CN","labels":["Gitalk"],"perPage":10,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true},"valine":{"appid":null,"appkey":null,"placeholder":"说点什么","path":"window.location.pathname","avatar":"retro","meta":["nick","mail","link"],"pageSize":10,"lang":"zh-CN","highlight":false,"recordIP":false,"serverURLs":null},"changyan":{"appid":"","appkey":""},"livere":{"uid":""},"remark42":{"host":"https://remark.haoyizebo.com","site_id":"haoyizebo","max_shown_comments":10,"locale":"zh"},"archive":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null},"category":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"post_limit":10,"order_by":"-length","collapse_depth":0},"tag":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null,"tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"avatar":"/img/avatar.png","name":"蔺国防","introduce":"移动应用开发者，历史文学爱好者","icons":[{"class":"iconfont icon-github-fill","link":"https://github.com","tip":"GitHub"},{"class":"iconfont icon-douban-fill","link":"https://douban.com","tip":"豆瓣"},{"class":"iconfont icon-wechat-fill","qrcode":"/img/favicon.png"}]},"page404":{"banner_img":"/img/default.png","banner_img_height":85,"banner_mask_alpha":0.3,"subtitle":"Page not found"},"links":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"items":[{"title":"Fluid Docs","intro":"主题使用指南","link":"https://hexo.fluid-dev.com/docs/","image":"/img/favicon.png"},{"title":"Fluid Repo","intro":"主题 GitHub 仓库","link":"https://github.com/fluid-dev/hexo-theme-fluid","image":"/img/favicon.png"},{"title":"Fluid Example","intro":"主题操作示例","link":"https://hexo.fluid-dev.com/docs/example/","image":"/img/favicon.png"}]}}}},"excerpt":"","more":"<h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><p>Foundation 为传递事件发生的信息提供了一个编程架构,这篇文档描述这个架构的元素并解释如何使用他们.<br>阅读这篇文档去学习<a href=\"https://developer.apple.com/library/content/documentation/General/Conceptual/DevPedia-CocoaCore/Notification.html#//apple_ref/doc/uid/TP40008195-CH35\">notifications</a>,通知中心,和通知队列.</p>\n<h3 id=\"本文档组织构成\"><a href=\"#本文档组织构成\" class=\"headerlink\" title=\"本文档组织构成\"></a>本文档组织构成</h3><p>该文档包含下面文章:</p>\n<ul>\n<li><em>通知</em>  描述封装事件信息的对象.</li>\n<li><em>通知中心</em> 描述负责管理发送和接受通知的对象.</li>\n<li><em>通知队列</em> 面搜狐</li>\n<li><em>注册通知</em></li>\n<li><em>发送通知</em></li>\n<li><em>投递通知给指定线程</em></li>\n</ul>\n<h2 id=\"通知\"><a href=\"#通知\" class=\"headerlink\" title=\"通知\"></a>通知</h2><h2 id=\"通知中心-描述\"><a href=\"#通知中心-描述\" class=\"headerlink\" title=\"通知中心 描述\"></a>通知中心 描述</h2><h2 id=\"通知队列\"><a href=\"#通知队列\" class=\"headerlink\" title=\"通知队列\"></a>通知队列</h2><h2 id=\"注册通知\"><a href=\"#注册通知\" class=\"headerlink\" title=\"注册通知\"></a>注册通知</h2><h2 id=\"发送通知\"><a href=\"#发送通知\" class=\"headerlink\" title=\"发送通知\"></a>发送通知</h2><h2 id=\"投递通知给指定线程\"><a href=\"#投递通知给指定线程\" class=\"headerlink\" title=\"投递通知给指定线程\"></a>投递通知给指定线程</h2><hr>\n<h2 id=\"相关文档\"><a href=\"#相关文档\" class=\"headerlink\" title=\"相关文档\"></a>相关文档</h2><p>  <a href=\"\">线程编程指南</a> </p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p><a href=\"\">Notification Programming Topics</a></p>\n"},{"title":"TextView自适应高度","date":"2019-01-11T10:23:00.000Z","_content":"#### 应用场景\n TableView 的Cell内的textView根据文本输入内容,cell的高度自适应\n#### 实现方式\n- TableView Cell高度自适应 \n```\n        editList.estimatedRowHeight = 52;  //设置预估行高\n        editList.rowHeight = UITableViewAutomaticDimension;  //设置Cell高度自适应\n```\n-  Cell内部设置\n```\n      var textString: String {\n        get {\n            return textView?.text ?? \"\"\n        }\n        set {\n            if let textView = textView {\n                textView.text = newValue\n                textViewDidChange(textView) //在cell外部给textView赋值,需要调用textView的代理方法,重新计算textView的size\n            }\n        }\n      }\n     func setupUI() {\n        \n        selectionStyle = .none;\n        separatorInset = UIEdgeInsetsMake(0, 20, 0, 20);\n        contentView.backgroundColor = .white;\n        titleLabel = UILabel();\n        titleLabel.textAlignment = .left;\n        titleLabel.textColor = ResourceManager.LIGHT_TEXT_COLOR;\n        titleLabel.font = ResourceManager.NORMAL_FONT;\n        contentView.addSubview(titleLabel);\n        \n        textView = UITextView();\n        textView.textAlignment = .right;\n        textView.delegate = self;\n        textView.isScrollEnabled = false; //禁止textView的滚动\n        textView.font = ResourceManager.NORMAL_FONT;\n       \n        contentView.addSubview(textView);\n        \n        titleLabel.setContentCompressionResistancePriority(.defaultHigh, for: .horizontal);\n        textView.setContentCompressionResistancePriority(.defaultLow, for: .horizontal);\n        \n    }\n    \n    override func layoutSubviews() {\n        super.layoutSubviews();\n        titleLabel.snp.makeConstraints { (make) in\n            make.top.equalToSuperview().offset(16);\n            make.leading.equalToSuperview().offset(20);\n        }\n        \n        textView.snp.makeConstraints { (make) in\n            make.top.equalToSuperview().offset(8);\n            make.bottom.equalToSuperview().offset(-8);\n            make.trailing.equalToSuperview().offset(-20);\n            make.leading.equalTo(titleLabel.snp.trailing).offset(8);\n        }\n    }\n\n        //textView代理方法\n        func textViewDidChange(_ textView: UITextView) {\n              let size = textView.bounds.size\n              let newSize = textView.sizeThatFits(CGSize(width: size.width, height: CGFloat.greatestFiniteMagnitude))\n        \n            if let controller = self.parentViewController() as? ContractEditController {\n            // Resize the cell only when cell's size is changed\n            if size.height != newSize.height {\n                UIView.setAnimationsEnabled(false)\n                controller.editList.beginUpdates()\n                controller.editList.endUpdates()\n                UIView.setAnimationsEnabled(true)\n                \n                if let thisIndexPath = controller.editList.indexPath(for: self) {//滚动到cell底部\n                    controller.editList.scrollToRow(at: thisIndexPath, at: .bottom, animated: false)\n                }\n              } \n            }\n         }\n\n```\n","source":"_posts/iOS/TextView-高度自适应.md","raw":"\n---\ntitle:  TextView自适应高度 \ndate:  2019-01-11 18:23\ncategories:\n- iOS\ntags: \n- UITextView \n---\n#### 应用场景\n TableView 的Cell内的textView根据文本输入内容,cell的高度自适应\n#### 实现方式\n- TableView Cell高度自适应 \n```\n        editList.estimatedRowHeight = 52;  //设置预估行高\n        editList.rowHeight = UITableViewAutomaticDimension;  //设置Cell高度自适应\n```\n-  Cell内部设置\n```\n      var textString: String {\n        get {\n            return textView?.text ?? \"\"\n        }\n        set {\n            if let textView = textView {\n                textView.text = newValue\n                textViewDidChange(textView) //在cell外部给textView赋值,需要调用textView的代理方法,重新计算textView的size\n            }\n        }\n      }\n     func setupUI() {\n        \n        selectionStyle = .none;\n        separatorInset = UIEdgeInsetsMake(0, 20, 0, 20);\n        contentView.backgroundColor = .white;\n        titleLabel = UILabel();\n        titleLabel.textAlignment = .left;\n        titleLabel.textColor = ResourceManager.LIGHT_TEXT_COLOR;\n        titleLabel.font = ResourceManager.NORMAL_FONT;\n        contentView.addSubview(titleLabel);\n        \n        textView = UITextView();\n        textView.textAlignment = .right;\n        textView.delegate = self;\n        textView.isScrollEnabled = false; //禁止textView的滚动\n        textView.font = ResourceManager.NORMAL_FONT;\n       \n        contentView.addSubview(textView);\n        \n        titleLabel.setContentCompressionResistancePriority(.defaultHigh, for: .horizontal);\n        textView.setContentCompressionResistancePriority(.defaultLow, for: .horizontal);\n        \n    }\n    \n    override func layoutSubviews() {\n        super.layoutSubviews();\n        titleLabel.snp.makeConstraints { (make) in\n            make.top.equalToSuperview().offset(16);\n            make.leading.equalToSuperview().offset(20);\n        }\n        \n        textView.snp.makeConstraints { (make) in\n            make.top.equalToSuperview().offset(8);\n            make.bottom.equalToSuperview().offset(-8);\n            make.trailing.equalToSuperview().offset(-20);\n            make.leading.equalTo(titleLabel.snp.trailing).offset(8);\n        }\n    }\n\n        //textView代理方法\n        func textViewDidChange(_ textView: UITextView) {\n              let size = textView.bounds.size\n              let newSize = textView.sizeThatFits(CGSize(width: size.width, height: CGFloat.greatestFiniteMagnitude))\n        \n            if let controller = self.parentViewController() as? ContractEditController {\n            // Resize the cell only when cell's size is changed\n            if size.height != newSize.height {\n                UIView.setAnimationsEnabled(false)\n                controller.editList.beginUpdates()\n                controller.editList.endUpdates()\n                UIView.setAnimationsEnabled(true)\n                \n                if let thisIndexPath = controller.editList.indexPath(for: self) {//滚动到cell底部\n                    controller.editList.scrollToRow(at: thisIndexPath, at: .bottom, animated: false)\n                }\n              } \n            }\n         }\n\n```\n","slug":"iOS/TextView-高度自适应","published":1,"updated":"2020-09-27T10:30:40.674Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgq6gnx6002at29k7xqe76gq","content":"<h4 id=\"应用场景\"><a href=\"#应用场景\" class=\"headerlink\" title=\"应用场景\"></a>应用场景</h4><p> TableView 的Cell内的textView根据文本输入内容,cell的高度自适应</p>\n<h4 id=\"实现方式\"><a href=\"#实现方式\" class=\"headerlink\" title=\"实现方式\"></a>实现方式</h4><ul>\n<li>TableView Cell高度自适应 <pre><code class=\"hljs ini\"><span class=\"hljs-attr\">editList.estimatedRowHeight</span> = <span class=\"hljs-number\">52</span><span class=\"hljs-comment\">;  //设置预估行高</span>\n<span class=\"hljs-attr\">editList.rowHeight</span> = UITableViewAutomaticDimension<span class=\"hljs-comment\">;  //设置Cell高度自适应</span></code></pre></li>\n<li>Cell内部设置<pre><code class=\"hljs reasonml\">  var textString: String &#123;\n    get &#123;\n        return textView?.text ?? <span class=\"hljs-string\">&quot;&quot;</span>\n    &#125;\n    set &#123;\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">let</span> textView = textView &#123;\n            textView.text = newValue\n            text<span class=\"hljs-constructor\">ViewDidChange(<span class=\"hljs-params\">textView</span>)</span> <span class=\"hljs-comment\">//在cell外部给textView赋值,需要调用textView的代理方法,重新计算textView的size</span>\n        &#125;\n    &#125;\n  &#125;\n func setup<span class=\"hljs-constructor\">UI()</span> &#123;\n    \n    selectionStyle = .none;\n    separatorInset = <span class=\"hljs-constructor\">UIEdgeInsetsMake(0, 20, 0, 20)</span>;\n    contentView.backgroundColor = .white;\n    titleLabel = <span class=\"hljs-constructor\">UILabel()</span>;\n    titleLabel.textAlignment = .left;\n    titleLabel.textColor = ResourceManager.LIGHT_TEXT_COLOR;\n    titleLabel.font = ResourceManager.NORMAL_FONT;\n    contentView.add<span class=\"hljs-constructor\">Subview(<span class=\"hljs-params\">titleLabel</span>)</span>;\n    \n    textView = <span class=\"hljs-constructor\">UITextView()</span>;\n    textView.textAlignment = .right;\n    textView.delegate = self;\n    textView.isScrollEnabled = <span class=\"hljs-literal\">false</span>; <span class=\"hljs-comment\">//禁止textView的滚动</span>\n    textView.font = ResourceManager.NORMAL_FONT;\n   \n    contentView.add<span class=\"hljs-constructor\">Subview(<span class=\"hljs-params\">textView</span>)</span>;\n    \n    titleLabel.set<span class=\"hljs-constructor\">ContentCompressionResistancePriority(.<span class=\"hljs-params\">defaultHigh</span>, <span class=\"hljs-params\">for</span>: .<span class=\"hljs-params\">horizontal</span>)</span>;\n    textView.set<span class=\"hljs-constructor\">ContentCompressionResistancePriority(.<span class=\"hljs-params\">defaultLow</span>, <span class=\"hljs-params\">for</span>: .<span class=\"hljs-params\">horizontal</span>)</span>;\n    \n&#125;\n\noverride func layout<span class=\"hljs-constructor\">Subviews()</span> &#123;\n    super.layout<span class=\"hljs-constructor\">Subviews()</span>;\n    titleLabel.snp.makeConstraints &#123; (make) <span class=\"hljs-keyword\">in</span>\n        make.top.equal<span class=\"hljs-constructor\">ToSuperview()</span>.offset(<span class=\"hljs-number\">16</span>);\n        make.leading.equal<span class=\"hljs-constructor\">ToSuperview()</span>.offset(<span class=\"hljs-number\">20</span>);\n    &#125;\n    \n    textView.snp.makeConstraints &#123; (make) <span class=\"hljs-keyword\">in</span>\n        make.top.equal<span class=\"hljs-constructor\">ToSuperview()</span>.offset(<span class=\"hljs-number\">8</span>);\n        make.bottom.equal<span class=\"hljs-constructor\">ToSuperview()</span>.offset<span class=\"hljs-number\">(-8)</span>;\n        make.trailing.equal<span class=\"hljs-constructor\">ToSuperview()</span>.offset<span class=\"hljs-number\">(-20)</span>;\n        make.leading.equal<span class=\"hljs-constructor\">To(<span class=\"hljs-params\">titleLabel</span>.<span class=\"hljs-params\">snp</span>.<span class=\"hljs-params\">trailing</span>)</span>.offset(<span class=\"hljs-number\">8</span>);\n    &#125;\n&#125;\n\n    <span class=\"hljs-comment\">//textView代理方法</span>\n    func text<span class=\"hljs-constructor\">ViewDidChange(<span class=\"hljs-params\">_</span> <span class=\"hljs-params\">textView</span>: UITextView)</span> &#123;\n          <span class=\"hljs-keyword\">let</span> size = textView.bounds.size\n          <span class=\"hljs-keyword\">let</span> newSize = textView.size<span class=\"hljs-constructor\">ThatFits(CGSize(<span class=\"hljs-params\">width</span>: <span class=\"hljs-params\">size</span>.<span class=\"hljs-params\">width</span>, <span class=\"hljs-params\">height</span>: CGFloat.<span class=\"hljs-params\">greatestFiniteMagnitude</span>)</span>)\n    \n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">let</span> controller = self.parent<span class=\"hljs-constructor\">ViewController()</span> <span class=\"hljs-keyword\">as</span>? ContractEditController &#123;\n        <span class=\"hljs-comment\">// Resize the cell only when cell&#x27;s size is changed</span>\n        <span class=\"hljs-keyword\">if</span> size.height != newSize.height &#123;\n            <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">UIView</span>.</span></span>set<span class=\"hljs-constructor\">AnimationsEnabled(<span class=\"hljs-params\">false</span>)</span>\n            controller.editList.<span class=\"hljs-keyword\">begin</span><span class=\"hljs-constructor\">Updates()</span>\n            controller.editList.<span class=\"hljs-keyword\">end</span><span class=\"hljs-constructor\">Updates()</span>\n            <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">UIView</span>.</span></span>set<span class=\"hljs-constructor\">AnimationsEnabled(<span class=\"hljs-params\">true</span>)</span>\n            \n            <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">let</span> thisIndexPath = controller.editList.index<span class=\"hljs-constructor\">Path(<span class=\"hljs-params\">for</span>: <span class=\"hljs-params\">self</span>)</span> &#123;<span class=\"hljs-comment\">//滚动到cell底部</span>\n                controller.editList.scroll<span class=\"hljs-constructor\">ToRow(<span class=\"hljs-params\">at</span>: <span class=\"hljs-params\">thisIndexPath</span>, <span class=\"hljs-params\">at</span>: .<span class=\"hljs-params\">bottom</span>, <span class=\"hljs-params\">animated</span>: <span class=\"hljs-params\">false</span>)</span>\n            &#125;\n          &#125; \n        &#125;\n     &#125;\n</code></pre>\n</li>\n</ul>\n","site":{"data":{"fluid_static_prefix":{"internal_js":"/js","internal_css":"/css","internal_img":"/img","iconfont":"//at.alicdn.com/t/font_1736178_kmeydafke9r.css","anchor":"https://cdn.staticfile.org/anchor-js/4.2.2/","github_markdown":"https://cdn.staticfile.org/github-markdown-css/4.0.0/","jquery":"https://cdn.staticfile.org/jquery/3.4.1/","bootstrap":"https://cdn.staticfile.org/twitter-bootstrap/4.4.1/","highlightjs":"https://cdn.staticfile.org/highlight.js/10.0.0/","prismjs":"https://cdn.staticfile.org/prism/1.21.0/","tocbot":"https://cdn.staticfile.org/tocbot/4.11.1/","typed":"https://cdn.staticfile.org/typed.js/2.0.11/","fancybox":"https://cdn.staticfile.org/fancybox/3.5.7/","mathjax":"https://cdn.staticfile.org/mathjax/3.0.5/es5/","katex":"https://cdn.staticfile.org/KaTeX/0.11.1/","aplayer":"https://cdn.staticfile.org/aplayer/1.10.1/","busuanzi":"https://busuanzi.ibruce.info/busuanzi/2.3/","clipboard":"https://cdn.staticfile.org/clipboard.js/2.0.6/","mermaid":"https://cdn.staticfile.org/mermaid/8.5.0/","valine":"https://cdn.staticfile.org/valine/1.4.14/","gitalk":"https://cdn.staticfile.org/gitalk/1.6.2/","blueimp_md5":"https://cdn.staticfile.org/blueimp-md5/2.13.0/","disqusjs":"https://cdn.jsdelivr.net/npm/disqusjs@1.0/dist/","hint":"/lib/hint/"},"fluid_config":{"favicon":"/img/favicon.png","apple_touch_icon":"/img/favicon.png","title_join_string":" - ","force_https":false,"code":{"copy_btn":true,"highlight":{"enable":true,"lib":"highlightjs","highlightjs":{"style":"Github Gist","bg_color":false},"prismjs":{"style":"default","preprocess":true}}},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"_","loop":false},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"right","visible":"hover","icon":""},"mouse_click":{"enable":false,"style":"values"}},"dark_mode":{"enable":true,"default":"auto"},"color":{"body_bg_color":"#eee","body_bg_color_dark":"#181c27","navbar_bg_color":"#2f4154","navbar_bg_color_dark":"#1f3144","navbar_text_color":"#fff","navbar_text_color_dark":"#d0d0d0","text_color":"#3c4858","text_color_dark":"#c4c6c9","sec_text_color":"#718096","sec_text_color_dark":"#a7a9ad","post_text_color":"#2c3e50","post_text_color_dark":"#c4c6c9","post_heading_color":"#1a202c","post_heading_color_dark":"#c4c6c9","post_link_color":"#0366d6","post_link_color_dark":"#1589e9","link_hover_color":"#30a9de","link_hover_color_dark":"#30a9de","link_hover_bg_color":"#f8f9fa","link_hover_bg_color_dark":"#364151","board_color":"#fff","board_color_dark":"#252d38"},"font":{"font_size":"16px","font_family":null,"code_font_size":"85%"},"custom_js":null,"custom_css":null,"custom_html":"","web_analytics":{"enable":false,"baidu":null,"google":null,"gtag":null,"tencent":{"sid":null,"cid":null},"woyaola":null,"cnzz":null,"leancloud":{"app_id":null,"app_key":null,"server_url":null}},"lazyload":{"enable":true,"onlypost":false},"daovoice":{"enable":false,"appid":""},"aplayer":{"enable":false,"autoplay":false,"loop":"all","order":"random","theme":"#b7daff","songs":[{"name":"name","artist":"artist","url":"/songs/test.mp3","cover":"/img/cover.jpg"},{"name":"name","artist":"artist","url":"https://...url.mp3","cover":"https://...cover.jpg"}]},"version":{"check":false},"navbar":{"blog_title":"吃面多放葱","ground_glass":{"enable":false,"px":3,"alpha":0.7},"menu":[{"key":"home","link":"/","icon":"iconfont icon-home-fill"},{"key":"category","link":"/categories/","icon":"iconfont icon-category-fill"},{"key":"tag","link":"/tags/","icon":"iconfont icon-tags-fill"},{"key":"about","link":"/about/","icon":"iconfont icon-user-fill"}]},"search":{"enable":true,"path":"/local-search.xml","generate_path":"/local-search.xml","field":"post","content":true},"scroll_down_arrow":{"enable":true,"banner_height_limit":90,"scroll_after_turning_page":true},"banner_parallax":true,"footer":{"statistics":{"enable":false,"source":"busuanzi","pv_format":"总访问量 {} 次","uv_format":"总访客数 {} 人"},"beian":{"enable":false,"icp_text":"京ICP证123456号","police_text":"京公网安备12345678号","police_code":12345678,"police_icon":"/img/police_beian.png"}},"scroll_top_arrow":{"enable":true},"index":{"banner_img":"/img/default.png","banner_img_height":100,"banner_mask_alpha":0.3,"post_default_img":"","slogan":{"enable":true,"text":"像蚂蚁一样工作，像蝴蝶一样生活"},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"category":true,"tag":true}},"page":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3},"post":{"banner_img":"/img/default.png","banner_img_height":70,"banner_mask_alpha":0.3,"meta":{"author":{"enable":false},"date":{"enable":true,"format":"LL a"},"wordcount":{"enable":true,"format":"{} 字"},"min2read":{"enable":true,"format":"{} 分钟","words":100},"views":{"enable":false,"source":"busuanzi","format":"{} 次"}},"updated":{"enable":false,"content":"本文最后更新于：","relative":false},"toc":{"enable":true,"headingSelector":"h1,h2,h3,h4,h5,h6","collapseDepth":0},"copyright":{"enable":true,"content":"本博客所有文章除特别声明外，均采用 <a href=\"https://creativecommons.org/licenses/by-sa/4.0/deed.zh\" rel=\"nofollow noopener\">CC BY-SA 4.0 协议</a> ，转载请注明出处！"},"prev_next":{"enable":true},"custom":{"enable":false,"content":"<img src=\"https://octodex.github.com/images/jetpacktocat.png\" class=\"rounded mx-auto d-block mt-5\" style=\"width:150px; height:150px;\">"},"image_zoom":{"enable":true},"footnote":{"enable":true,"header":""},"math":{"enable":false,"specific":false,"engine":"mathjax"},"mermaid":{"enable":false,"specific":false,"options":{"theme":"default"}},"comments":{"enable":false,"type":"disqus"}},"utterances":{"repo":null,"issue_term":"pathname","label":"utterances","theme":"github-light","theme_dark":"github-dark","crossorigin":"anonymous"},"disqus":{"shortname":null,"disqusjs":false,"apikey":null},"gitalk":{"clientID":null,"clientSecret":null,"repo":null,"owner":null,"admin":["name"],"id":"location.pathname","language":"zh-CN","labels":["Gitalk"],"perPage":10,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true},"valine":{"appid":null,"appkey":null,"placeholder":"说点什么","path":"window.location.pathname","avatar":"retro","meta":["nick","mail","link"],"pageSize":10,"lang":"zh-CN","highlight":false,"recordIP":false,"serverURLs":null},"changyan":{"appid":"","appkey":""},"livere":{"uid":""},"remark42":{"host":"https://remark.haoyizebo.com","site_id":"haoyizebo","max_shown_comments":10,"locale":"zh"},"archive":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null},"category":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"post_limit":10,"order_by":"-length","collapse_depth":0},"tag":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null,"tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"avatar":"/img/avatar.png","name":"蔺国防","introduce":"移动应用开发者，历史文学爱好者","icons":[{"class":"iconfont icon-github-fill","link":"https://github.com","tip":"GitHub"},{"class":"iconfont icon-douban-fill","link":"https://douban.com","tip":"豆瓣"},{"class":"iconfont icon-wechat-fill","qrcode":"/img/favicon.png"}]},"page404":{"banner_img":"/img/default.png","banner_img_height":85,"banner_mask_alpha":0.3,"subtitle":"Page not found"},"links":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"items":[{"title":"Fluid Docs","intro":"主题使用指南","link":"https://hexo.fluid-dev.com/docs/","image":"/img/favicon.png"},{"title":"Fluid Repo","intro":"主题 GitHub 仓库","link":"https://github.com/fluid-dev/hexo-theme-fluid","image":"/img/favicon.png"},{"title":"Fluid Example","intro":"主题操作示例","link":"https://hexo.fluid-dev.com/docs/example/","image":"/img/favicon.png"}]}}}},"excerpt":"","more":"<h4 id=\"应用场景\"><a href=\"#应用场景\" class=\"headerlink\" title=\"应用场景\"></a>应用场景</h4><p> TableView 的Cell内的textView根据文本输入内容,cell的高度自适应</p>\n<h4 id=\"实现方式\"><a href=\"#实现方式\" class=\"headerlink\" title=\"实现方式\"></a>实现方式</h4><ul>\n<li>TableView Cell高度自适应 <pre><code class=\"hljs ini\"><span class=\"hljs-attr\">editList.estimatedRowHeight</span> = <span class=\"hljs-number\">52</span><span class=\"hljs-comment\">;  //设置预估行高</span>\n<span class=\"hljs-attr\">editList.rowHeight</span> = UITableViewAutomaticDimension<span class=\"hljs-comment\">;  //设置Cell高度自适应</span></code></pre></li>\n<li>Cell内部设置<pre><code class=\"hljs reasonml\">  var textString: String &#123;\n    get &#123;\n        return textView?.text ?? <span class=\"hljs-string\">&quot;&quot;</span>\n    &#125;\n    set &#123;\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">let</span> textView = textView &#123;\n            textView.text = newValue\n            text<span class=\"hljs-constructor\">ViewDidChange(<span class=\"hljs-params\">textView</span>)</span> <span class=\"hljs-comment\">//在cell外部给textView赋值,需要调用textView的代理方法,重新计算textView的size</span>\n        &#125;\n    &#125;\n  &#125;\n func setup<span class=\"hljs-constructor\">UI()</span> &#123;\n    \n    selectionStyle = .none;\n    separatorInset = <span class=\"hljs-constructor\">UIEdgeInsetsMake(0, 20, 0, 20)</span>;\n    contentView.backgroundColor = .white;\n    titleLabel = <span class=\"hljs-constructor\">UILabel()</span>;\n    titleLabel.textAlignment = .left;\n    titleLabel.textColor = ResourceManager.LIGHT_TEXT_COLOR;\n    titleLabel.font = ResourceManager.NORMAL_FONT;\n    contentView.add<span class=\"hljs-constructor\">Subview(<span class=\"hljs-params\">titleLabel</span>)</span>;\n    \n    textView = <span class=\"hljs-constructor\">UITextView()</span>;\n    textView.textAlignment = .right;\n    textView.delegate = self;\n    textView.isScrollEnabled = <span class=\"hljs-literal\">false</span>; <span class=\"hljs-comment\">//禁止textView的滚动</span>\n    textView.font = ResourceManager.NORMAL_FONT;\n   \n    contentView.add<span class=\"hljs-constructor\">Subview(<span class=\"hljs-params\">textView</span>)</span>;\n    \n    titleLabel.set<span class=\"hljs-constructor\">ContentCompressionResistancePriority(.<span class=\"hljs-params\">defaultHigh</span>, <span class=\"hljs-params\">for</span>: .<span class=\"hljs-params\">horizontal</span>)</span>;\n    textView.set<span class=\"hljs-constructor\">ContentCompressionResistancePriority(.<span class=\"hljs-params\">defaultLow</span>, <span class=\"hljs-params\">for</span>: .<span class=\"hljs-params\">horizontal</span>)</span>;\n    \n&#125;\n\noverride func layout<span class=\"hljs-constructor\">Subviews()</span> &#123;\n    super.layout<span class=\"hljs-constructor\">Subviews()</span>;\n    titleLabel.snp.makeConstraints &#123; (make) <span class=\"hljs-keyword\">in</span>\n        make.top.equal<span class=\"hljs-constructor\">ToSuperview()</span>.offset(<span class=\"hljs-number\">16</span>);\n        make.leading.equal<span class=\"hljs-constructor\">ToSuperview()</span>.offset(<span class=\"hljs-number\">20</span>);\n    &#125;\n    \n    textView.snp.makeConstraints &#123; (make) <span class=\"hljs-keyword\">in</span>\n        make.top.equal<span class=\"hljs-constructor\">ToSuperview()</span>.offset(<span class=\"hljs-number\">8</span>);\n        make.bottom.equal<span class=\"hljs-constructor\">ToSuperview()</span>.offset<span class=\"hljs-number\">(-8)</span>;\n        make.trailing.equal<span class=\"hljs-constructor\">ToSuperview()</span>.offset<span class=\"hljs-number\">(-20)</span>;\n        make.leading.equal<span class=\"hljs-constructor\">To(<span class=\"hljs-params\">titleLabel</span>.<span class=\"hljs-params\">snp</span>.<span class=\"hljs-params\">trailing</span>)</span>.offset(<span class=\"hljs-number\">8</span>);\n    &#125;\n&#125;\n\n    <span class=\"hljs-comment\">//textView代理方法</span>\n    func text<span class=\"hljs-constructor\">ViewDidChange(<span class=\"hljs-params\">_</span> <span class=\"hljs-params\">textView</span>: UITextView)</span> &#123;\n          <span class=\"hljs-keyword\">let</span> size = textView.bounds.size\n          <span class=\"hljs-keyword\">let</span> newSize = textView.size<span class=\"hljs-constructor\">ThatFits(CGSize(<span class=\"hljs-params\">width</span>: <span class=\"hljs-params\">size</span>.<span class=\"hljs-params\">width</span>, <span class=\"hljs-params\">height</span>: CGFloat.<span class=\"hljs-params\">greatestFiniteMagnitude</span>)</span>)\n    \n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">let</span> controller = self.parent<span class=\"hljs-constructor\">ViewController()</span> <span class=\"hljs-keyword\">as</span>? ContractEditController &#123;\n        <span class=\"hljs-comment\">// Resize the cell only when cell&#x27;s size is changed</span>\n        <span class=\"hljs-keyword\">if</span> size.height != newSize.height &#123;\n            <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">UIView</span>.</span></span>set<span class=\"hljs-constructor\">AnimationsEnabled(<span class=\"hljs-params\">false</span>)</span>\n            controller.editList.<span class=\"hljs-keyword\">begin</span><span class=\"hljs-constructor\">Updates()</span>\n            controller.editList.<span class=\"hljs-keyword\">end</span><span class=\"hljs-constructor\">Updates()</span>\n            <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">UIView</span>.</span></span>set<span class=\"hljs-constructor\">AnimationsEnabled(<span class=\"hljs-params\">true</span>)</span>\n            \n            <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">let</span> thisIndexPath = controller.editList.index<span class=\"hljs-constructor\">Path(<span class=\"hljs-params\">for</span>: <span class=\"hljs-params\">self</span>)</span> &#123;<span class=\"hljs-comment\">//滚动到cell底部</span>\n                controller.editList.scroll<span class=\"hljs-constructor\">ToRow(<span class=\"hljs-params\">at</span>: <span class=\"hljs-params\">thisIndexPath</span>, <span class=\"hljs-params\">at</span>: .<span class=\"hljs-params\">bottom</span>, <span class=\"hljs-params\">animated</span>: <span class=\"hljs-params\">false</span>)</span>\n            &#125;\n          &#125; \n        &#125;\n     &#125;\n</code></pre>\n</li>\n</ul>\n"},{"title":"AutoLayout Cell高度自适应","date":"2018-11-22T08:27:00.000Z","_content":"\n1. 不要设置TableView返回Cell高度的代理方法\n2. 设置底部控件约束与cell的contentView距离\n3. 设置预估行高,并且设置cell高度自动计算 \n\n**注意:** 如果不设置预估行高的话,Cell会设置固定行高为44,如果使用SnapKit设置的Cell自适应高度可能在某些机型上无效\n\n```\ntaskList.estimatedRowHeight = 77;\ntaskList.rowHeight = UITableViewAutomaticDimension;\n\n\n```\n\n有些时候,虽然设置了上面的动态约束,但是对cell高度做动态约束的时候,会在log里面有约束冲突的警告,这个时候是只需要将超过44的高度约束的Prority属性设置为大于750就行了,默认的高度约束是750;而默认高度的约束也是44,所以会出现冲突;\n```\n[LayoutConstraints] Unable to simultaneously satisfy constraints.\n\tProbably at least one of the constraints in the following list is one you don't want. \n\tTry this: \n\t\t(1) look at each constraint and try to figure out which you don't expect; \n\t\t(2) find the code that added the unwanted constraint or constraints and fix it. \n(\n    \"<SnapKit.LayoutConstraint:0x2833606c0@MalfunctionDetailCell.swift#88 UILabel:0x103983790.top == UITableViewCellContentView:0x103984060.top + 10.0>\",\n    \"<SnapKit.LayoutConstraint:0x283360a20@MalfunctionDetailCell.swift#95 UILabel:0x103983d70.top == UILabel:0x103983790.bottom + 6.0>\",\n    \"<SnapKit.LayoutConstraint:0x283360d80@MalfunctionDetailCell.swift#101 UILabel:0x103983a80.top == UILabel:0x103983d70.bottom + 6.0>\",\n    \"<SnapKit.LayoutConstraint:0x283360ea0@MalfunctionDetailCell.swift#104 UILabel:0x103983a80.height == 16.0>\",\n    \"<SnapKit.LayoutConstraint:0x283360f00@MalfunctionDetailCell.swift#105 UILabel:0x103983a80.bottom == UITableViewCellContentView:0x103984060.bottom - 8.0>\",\n    \"<NSLayoutConstraint:0x28346b8e0 'UIView-Encapsulated-Layout-Height' UITableViewCellContentView:0x103984060.height == 44   (active)>\"  //这里是重点\n)\n\n```\n\n#### Tips:  约束的优先级(Priority)\n在Xib或者storyBoard 中我们设置的约束默认的优先级都是Required(1000),如果想要设置约束根据优先级动态调整,则需要将优先级降至1000以下;当然,我们也可以设置优先级的具体数值;\n```\n##注意## \n当我们将某个约束优先级设置为Required时,其他等级的约束将无效;\n```\n###### xib 和 storyBoard下有以下几种优先级\n```\nRequired(1000) > High(750) > Low(250);\n```\n###### SnapKit增加一种\n```\nRequired(1000) > High(750) > Medium(500) > Low(250);\n```\n","source":"_posts/iOS/XIB--或者-AutoLayout-实现Cell高度自适应.md","raw":"---\ntitle:  AutoLayout Cell高度自适应 \ndate:  2018-11-22 16:27\ncategories:\n- iOS\ntags: \n- AutoLayout \n---\n\n1. 不要设置TableView返回Cell高度的代理方法\n2. 设置底部控件约束与cell的contentView距离\n3. 设置预估行高,并且设置cell高度自动计算 \n\n**注意:** 如果不设置预估行高的话,Cell会设置固定行高为44,如果使用SnapKit设置的Cell自适应高度可能在某些机型上无效\n\n```\ntaskList.estimatedRowHeight = 77;\ntaskList.rowHeight = UITableViewAutomaticDimension;\n\n\n```\n\n有些时候,虽然设置了上面的动态约束,但是对cell高度做动态约束的时候,会在log里面有约束冲突的警告,这个时候是只需要将超过44的高度约束的Prority属性设置为大于750就行了,默认的高度约束是750;而默认高度的约束也是44,所以会出现冲突;\n```\n[LayoutConstraints] Unable to simultaneously satisfy constraints.\n\tProbably at least one of the constraints in the following list is one you don't want. \n\tTry this: \n\t\t(1) look at each constraint and try to figure out which you don't expect; \n\t\t(2) find the code that added the unwanted constraint or constraints and fix it. \n(\n    \"<SnapKit.LayoutConstraint:0x2833606c0@MalfunctionDetailCell.swift#88 UILabel:0x103983790.top == UITableViewCellContentView:0x103984060.top + 10.0>\",\n    \"<SnapKit.LayoutConstraint:0x283360a20@MalfunctionDetailCell.swift#95 UILabel:0x103983d70.top == UILabel:0x103983790.bottom + 6.0>\",\n    \"<SnapKit.LayoutConstraint:0x283360d80@MalfunctionDetailCell.swift#101 UILabel:0x103983a80.top == UILabel:0x103983d70.bottom + 6.0>\",\n    \"<SnapKit.LayoutConstraint:0x283360ea0@MalfunctionDetailCell.swift#104 UILabel:0x103983a80.height == 16.0>\",\n    \"<SnapKit.LayoutConstraint:0x283360f00@MalfunctionDetailCell.swift#105 UILabel:0x103983a80.bottom == UITableViewCellContentView:0x103984060.bottom - 8.0>\",\n    \"<NSLayoutConstraint:0x28346b8e0 'UIView-Encapsulated-Layout-Height' UITableViewCellContentView:0x103984060.height == 44   (active)>\"  //这里是重点\n)\n\n```\n\n#### Tips:  约束的优先级(Priority)\n在Xib或者storyBoard 中我们设置的约束默认的优先级都是Required(1000),如果想要设置约束根据优先级动态调整,则需要将优先级降至1000以下;当然,我们也可以设置优先级的具体数值;\n```\n##注意## \n当我们将某个约束优先级设置为Required时,其他等级的约束将无效;\n```\n###### xib 和 storyBoard下有以下几种优先级\n```\nRequired(1000) > High(750) > Low(250);\n```\n###### SnapKit增加一种\n```\nRequired(1000) > High(750) > Medium(500) > Low(250);\n```\n","slug":"iOS/XIB--或者-AutoLayout-实现Cell高度自适应","published":1,"updated":"2020-09-27T10:32:25.804Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgq6gnx7002dt29k5fgtfvfv","content":"<ol>\n<li>不要设置TableView返回Cell高度的代理方法</li>\n<li>设置底部控件约束与cell的contentView距离</li>\n<li>设置预估行高,并且设置cell高度自动计算 </li>\n</ol>\n<p><strong>注意:</strong> 如果不设置预估行高的话,Cell会设置固定行高为44,如果使用SnapKit设置的Cell自适应高度可能在某些机型上无效</p>\n<pre><code class=\"hljs ini\"><span class=\"hljs-attr\">taskList.estimatedRowHeight</span> = <span class=\"hljs-number\">77</span><span class=\"hljs-comment\">;</span>\n<span class=\"hljs-attr\">taskList.rowHeight</span> = UITableViewAutomaticDimension<span class=\"hljs-comment\">;</span>\n\n</code></pre>\n\n<p>有些时候,虽然设置了上面的动态约束,但是对cell高度做动态约束的时候,会在log里面有约束冲突的警告,这个时候是只需要将超过44的高度约束的Prority属性设置为大于750就行了,默认的高度约束是750;而默认高度的约束也是44,所以会出现冲突;</p>\n<pre><code class=\"hljs dns\">[LayoutConstraints] Unable to simultaneously satisfy constraints.\n\tProbably at least one of the constraints in the following list is one you don&#x27;t want. \n\tTry this: \n\t\t(<span class=\"hljs-number\">1</span>) look at each constraint and try to figure out which you don&#x27;t expect<span class=\"hljs-comment\">; </span>\n\t\t(<span class=\"hljs-number\">2</span>) find the code that added the unwanted constraint or constraints and fix it. \n(\n    &quot;&lt;SnapKit.LayoutConstraint:<span class=\"hljs-number\">0</span>x<span class=\"hljs-number\">2833606c0</span>@MalfunctionDetailCell.swift#<span class=\"hljs-number\">88</span> UILabel:<span class=\"hljs-number\">0x103983790</span>.top == UITableViewCellContentView:<span class=\"hljs-number\">0x103984060</span>.top + <span class=\"hljs-number\">10</span>.<span class=\"hljs-number\">0</span>&gt;&quot;,\n    &quot;&lt;SnapKit.LayoutConstraint:<span class=\"hljs-number\">0</span>x<span class=\"hljs-number\">283360a20</span>@MalfunctionDetailCell.swift#<span class=\"hljs-number\">95</span> UILabel:<span class=\"hljs-number\">0x103983d70</span>.top == UILabel:<span class=\"hljs-number\">0x103983790</span>.bottom + <span class=\"hljs-number\">6</span>.<span class=\"hljs-number\">0</span>&gt;&quot;,\n    &quot;&lt;SnapKit.LayoutConstraint:<span class=\"hljs-number\">0</span>x<span class=\"hljs-number\">283360d80</span>@MalfunctionDetailCell.swift#<span class=\"hljs-number\">101</span> UILabel:<span class=\"hljs-number\">0x103983a80</span>.top == UILabel:<span class=\"hljs-number\">0x103983d70</span>.bottom + <span class=\"hljs-number\">6</span>.<span class=\"hljs-number\">0</span>&gt;&quot;,\n    &quot;&lt;SnapKit.LayoutConstraint:<span class=\"hljs-number\">0</span>x283360ea0@MalfunctionDetailCell.swift#<span class=\"hljs-number\">104</span> UILabel:<span class=\"hljs-number\">0x103983a80</span>.height == <span class=\"hljs-number\">16</span>.<span class=\"hljs-number\">0</span>&gt;&quot;,\n    &quot;&lt;SnapKit.LayoutConstraint:<span class=\"hljs-number\">0</span>x<span class=\"hljs-number\">283360f00</span>@MalfunctionDetailCell.swift#<span class=\"hljs-number\">105</span> UILabel:<span class=\"hljs-number\">0x103983a80</span>.bottom == UITableViewCellContentView:<span class=\"hljs-number\">0x103984060</span>.bottom - <span class=\"hljs-number\">8</span>.<span class=\"hljs-number\">0</span>&gt;&quot;,\n    &quot;&lt;NSLayoutConstraint:<span class=\"hljs-number\">0</span>x<span class=\"hljs-number\">28346b8e0</span> &#x27;UIView-Encapsulated-Layout-Height&#x27; UITableViewCellContentView:<span class=\"hljs-number\">0x103984060</span>.height == <span class=\"hljs-number\">44</span>   (active)&gt;&quot;  //这里是重点\n)\n</code></pre>\n\n<h4 id=\"Tips-约束的优先级-Priority\"><a href=\"#Tips-约束的优先级-Priority\" class=\"headerlink\" title=\"Tips:  约束的优先级(Priority)\"></a>Tips:  约束的优先级(Priority)</h4><p>在Xib或者storyBoard 中我们设置的约束默认的优先级都是Required(1000),如果想要设置约束根据优先级动态调整,则需要将优先级降至1000以下;当然,我们也可以设置优先级的具体数值;</p>\n<pre><code class=\"hljs clean\">##注意## \n当我们将某个约束优先级设置为Required时,其他等级的约束将无效;</code></pre>\n<h6 id=\"xib-和-storyBoard下有以下几种优先级\"><a href=\"#xib-和-storyBoard下有以下几种优先级\" class=\"headerlink\" title=\"xib 和 storyBoard下有以下几种优先级\"></a>xib 和 storyBoard下有以下几种优先级</h6><pre><code class=\"hljs angelscript\">Required(<span class=\"hljs-number\">1000</span>) &gt; High(<span class=\"hljs-number\">750</span>) &gt; Low(<span class=\"hljs-number\">250</span>);</code></pre>\n<h6 id=\"SnapKit增加一种\"><a href=\"#SnapKit增加一种\" class=\"headerlink\" title=\"SnapKit增加一种\"></a>SnapKit增加一种</h6><pre><code class=\"hljs angelscript\">Required(<span class=\"hljs-number\">1000</span>) &gt; High(<span class=\"hljs-number\">750</span>) &gt; Medium(<span class=\"hljs-number\">500</span>) &gt; Low(<span class=\"hljs-number\">250</span>);</code></pre>\n","site":{"data":{"fluid_static_prefix":{"internal_js":"/js","internal_css":"/css","internal_img":"/img","iconfont":"//at.alicdn.com/t/font_1736178_kmeydafke9r.css","anchor":"https://cdn.staticfile.org/anchor-js/4.2.2/","github_markdown":"https://cdn.staticfile.org/github-markdown-css/4.0.0/","jquery":"https://cdn.staticfile.org/jquery/3.4.1/","bootstrap":"https://cdn.staticfile.org/twitter-bootstrap/4.4.1/","highlightjs":"https://cdn.staticfile.org/highlight.js/10.0.0/","prismjs":"https://cdn.staticfile.org/prism/1.21.0/","tocbot":"https://cdn.staticfile.org/tocbot/4.11.1/","typed":"https://cdn.staticfile.org/typed.js/2.0.11/","fancybox":"https://cdn.staticfile.org/fancybox/3.5.7/","mathjax":"https://cdn.staticfile.org/mathjax/3.0.5/es5/","katex":"https://cdn.staticfile.org/KaTeX/0.11.1/","aplayer":"https://cdn.staticfile.org/aplayer/1.10.1/","busuanzi":"https://busuanzi.ibruce.info/busuanzi/2.3/","clipboard":"https://cdn.staticfile.org/clipboard.js/2.0.6/","mermaid":"https://cdn.staticfile.org/mermaid/8.5.0/","valine":"https://cdn.staticfile.org/valine/1.4.14/","gitalk":"https://cdn.staticfile.org/gitalk/1.6.2/","blueimp_md5":"https://cdn.staticfile.org/blueimp-md5/2.13.0/","disqusjs":"https://cdn.jsdelivr.net/npm/disqusjs@1.0/dist/","hint":"/lib/hint/"},"fluid_config":{"favicon":"/img/favicon.png","apple_touch_icon":"/img/favicon.png","title_join_string":" - ","force_https":false,"code":{"copy_btn":true,"highlight":{"enable":true,"lib":"highlightjs","highlightjs":{"style":"Github Gist","bg_color":false},"prismjs":{"style":"default","preprocess":true}}},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"_","loop":false},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"right","visible":"hover","icon":""},"mouse_click":{"enable":false,"style":"values"}},"dark_mode":{"enable":true,"default":"auto"},"color":{"body_bg_color":"#eee","body_bg_color_dark":"#181c27","navbar_bg_color":"#2f4154","navbar_bg_color_dark":"#1f3144","navbar_text_color":"#fff","navbar_text_color_dark":"#d0d0d0","text_color":"#3c4858","text_color_dark":"#c4c6c9","sec_text_color":"#718096","sec_text_color_dark":"#a7a9ad","post_text_color":"#2c3e50","post_text_color_dark":"#c4c6c9","post_heading_color":"#1a202c","post_heading_color_dark":"#c4c6c9","post_link_color":"#0366d6","post_link_color_dark":"#1589e9","link_hover_color":"#30a9de","link_hover_color_dark":"#30a9de","link_hover_bg_color":"#f8f9fa","link_hover_bg_color_dark":"#364151","board_color":"#fff","board_color_dark":"#252d38"},"font":{"font_size":"16px","font_family":null,"code_font_size":"85%"},"custom_js":null,"custom_css":null,"custom_html":"","web_analytics":{"enable":false,"baidu":null,"google":null,"gtag":null,"tencent":{"sid":null,"cid":null},"woyaola":null,"cnzz":null,"leancloud":{"app_id":null,"app_key":null,"server_url":null}},"lazyload":{"enable":true,"onlypost":false},"daovoice":{"enable":false,"appid":""},"aplayer":{"enable":false,"autoplay":false,"loop":"all","order":"random","theme":"#b7daff","songs":[{"name":"name","artist":"artist","url":"/songs/test.mp3","cover":"/img/cover.jpg"},{"name":"name","artist":"artist","url":"https://...url.mp3","cover":"https://...cover.jpg"}]},"version":{"check":false},"navbar":{"blog_title":"吃面多放葱","ground_glass":{"enable":false,"px":3,"alpha":0.7},"menu":[{"key":"home","link":"/","icon":"iconfont icon-home-fill"},{"key":"category","link":"/categories/","icon":"iconfont icon-category-fill"},{"key":"tag","link":"/tags/","icon":"iconfont icon-tags-fill"},{"key":"about","link":"/about/","icon":"iconfont icon-user-fill"}]},"search":{"enable":true,"path":"/local-search.xml","generate_path":"/local-search.xml","field":"post","content":true},"scroll_down_arrow":{"enable":true,"banner_height_limit":90,"scroll_after_turning_page":true},"banner_parallax":true,"footer":{"statistics":{"enable":false,"source":"busuanzi","pv_format":"总访问量 {} 次","uv_format":"总访客数 {} 人"},"beian":{"enable":false,"icp_text":"京ICP证123456号","police_text":"京公网安备12345678号","police_code":12345678,"police_icon":"/img/police_beian.png"}},"scroll_top_arrow":{"enable":true},"index":{"banner_img":"/img/default.png","banner_img_height":100,"banner_mask_alpha":0.3,"post_default_img":"","slogan":{"enable":true,"text":"像蚂蚁一样工作，像蝴蝶一样生活"},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"category":true,"tag":true}},"page":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3},"post":{"banner_img":"/img/default.png","banner_img_height":70,"banner_mask_alpha":0.3,"meta":{"author":{"enable":false},"date":{"enable":true,"format":"LL a"},"wordcount":{"enable":true,"format":"{} 字"},"min2read":{"enable":true,"format":"{} 分钟","words":100},"views":{"enable":false,"source":"busuanzi","format":"{} 次"}},"updated":{"enable":false,"content":"本文最后更新于：","relative":false},"toc":{"enable":true,"headingSelector":"h1,h2,h3,h4,h5,h6","collapseDepth":0},"copyright":{"enable":true,"content":"本博客所有文章除特别声明外，均采用 <a href=\"https://creativecommons.org/licenses/by-sa/4.0/deed.zh\" rel=\"nofollow noopener\">CC BY-SA 4.0 协议</a> ，转载请注明出处！"},"prev_next":{"enable":true},"custom":{"enable":false,"content":"<img src=\"https://octodex.github.com/images/jetpacktocat.png\" class=\"rounded mx-auto d-block mt-5\" style=\"width:150px; height:150px;\">"},"image_zoom":{"enable":true},"footnote":{"enable":true,"header":""},"math":{"enable":false,"specific":false,"engine":"mathjax"},"mermaid":{"enable":false,"specific":false,"options":{"theme":"default"}},"comments":{"enable":false,"type":"disqus"}},"utterances":{"repo":null,"issue_term":"pathname","label":"utterances","theme":"github-light","theme_dark":"github-dark","crossorigin":"anonymous"},"disqus":{"shortname":null,"disqusjs":false,"apikey":null},"gitalk":{"clientID":null,"clientSecret":null,"repo":null,"owner":null,"admin":["name"],"id":"location.pathname","language":"zh-CN","labels":["Gitalk"],"perPage":10,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true},"valine":{"appid":null,"appkey":null,"placeholder":"说点什么","path":"window.location.pathname","avatar":"retro","meta":["nick","mail","link"],"pageSize":10,"lang":"zh-CN","highlight":false,"recordIP":false,"serverURLs":null},"changyan":{"appid":"","appkey":""},"livere":{"uid":""},"remark42":{"host":"https://remark.haoyizebo.com","site_id":"haoyizebo","max_shown_comments":10,"locale":"zh"},"archive":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null},"category":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"post_limit":10,"order_by":"-length","collapse_depth":0},"tag":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null,"tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"avatar":"/img/avatar.png","name":"蔺国防","introduce":"移动应用开发者，历史文学爱好者","icons":[{"class":"iconfont icon-github-fill","link":"https://github.com","tip":"GitHub"},{"class":"iconfont icon-douban-fill","link":"https://douban.com","tip":"豆瓣"},{"class":"iconfont icon-wechat-fill","qrcode":"/img/favicon.png"}]},"page404":{"banner_img":"/img/default.png","banner_img_height":85,"banner_mask_alpha":0.3,"subtitle":"Page not found"},"links":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"items":[{"title":"Fluid Docs","intro":"主题使用指南","link":"https://hexo.fluid-dev.com/docs/","image":"/img/favicon.png"},{"title":"Fluid Repo","intro":"主题 GitHub 仓库","link":"https://github.com/fluid-dev/hexo-theme-fluid","image":"/img/favicon.png"},{"title":"Fluid Example","intro":"主题操作示例","link":"https://hexo.fluid-dev.com/docs/example/","image":"/img/favicon.png"}]}}}},"excerpt":"","more":"<ol>\n<li>不要设置TableView返回Cell高度的代理方法</li>\n<li>设置底部控件约束与cell的contentView距离</li>\n<li>设置预估行高,并且设置cell高度自动计算 </li>\n</ol>\n<p><strong>注意:</strong> 如果不设置预估行高的话,Cell会设置固定行高为44,如果使用SnapKit设置的Cell自适应高度可能在某些机型上无效</p>\n<pre><code class=\"hljs ini\"><span class=\"hljs-attr\">taskList.estimatedRowHeight</span> = <span class=\"hljs-number\">77</span><span class=\"hljs-comment\">;</span>\n<span class=\"hljs-attr\">taskList.rowHeight</span> = UITableViewAutomaticDimension<span class=\"hljs-comment\">;</span>\n\n</code></pre>\n\n<p>有些时候,虽然设置了上面的动态约束,但是对cell高度做动态约束的时候,会在log里面有约束冲突的警告,这个时候是只需要将超过44的高度约束的Prority属性设置为大于750就行了,默认的高度约束是750;而默认高度的约束也是44,所以会出现冲突;</p>\n<pre><code class=\"hljs dns\">[LayoutConstraints] Unable to simultaneously satisfy constraints.\n\tProbably at least one of the constraints in the following list is one you don&#x27;t want. \n\tTry this: \n\t\t(<span class=\"hljs-number\">1</span>) look at each constraint and try to figure out which you don&#x27;t expect<span class=\"hljs-comment\">; </span>\n\t\t(<span class=\"hljs-number\">2</span>) find the code that added the unwanted constraint or constraints and fix it. \n(\n    &quot;&lt;SnapKit.LayoutConstraint:<span class=\"hljs-number\">0</span>x<span class=\"hljs-number\">2833606c0</span>@MalfunctionDetailCell.swift#<span class=\"hljs-number\">88</span> UILabel:<span class=\"hljs-number\">0x103983790</span>.top == UITableViewCellContentView:<span class=\"hljs-number\">0x103984060</span>.top + <span class=\"hljs-number\">10</span>.<span class=\"hljs-number\">0</span>&gt;&quot;,\n    &quot;&lt;SnapKit.LayoutConstraint:<span class=\"hljs-number\">0</span>x<span class=\"hljs-number\">283360a20</span>@MalfunctionDetailCell.swift#<span class=\"hljs-number\">95</span> UILabel:<span class=\"hljs-number\">0x103983d70</span>.top == UILabel:<span class=\"hljs-number\">0x103983790</span>.bottom + <span class=\"hljs-number\">6</span>.<span class=\"hljs-number\">0</span>&gt;&quot;,\n    &quot;&lt;SnapKit.LayoutConstraint:<span class=\"hljs-number\">0</span>x<span class=\"hljs-number\">283360d80</span>@MalfunctionDetailCell.swift#<span class=\"hljs-number\">101</span> UILabel:<span class=\"hljs-number\">0x103983a80</span>.top == UILabel:<span class=\"hljs-number\">0x103983d70</span>.bottom + <span class=\"hljs-number\">6</span>.<span class=\"hljs-number\">0</span>&gt;&quot;,\n    &quot;&lt;SnapKit.LayoutConstraint:<span class=\"hljs-number\">0</span>x283360ea0@MalfunctionDetailCell.swift#<span class=\"hljs-number\">104</span> UILabel:<span class=\"hljs-number\">0x103983a80</span>.height == <span class=\"hljs-number\">16</span>.<span class=\"hljs-number\">0</span>&gt;&quot;,\n    &quot;&lt;SnapKit.LayoutConstraint:<span class=\"hljs-number\">0</span>x<span class=\"hljs-number\">283360f00</span>@MalfunctionDetailCell.swift#<span class=\"hljs-number\">105</span> UILabel:<span class=\"hljs-number\">0x103983a80</span>.bottom == UITableViewCellContentView:<span class=\"hljs-number\">0x103984060</span>.bottom - <span class=\"hljs-number\">8</span>.<span class=\"hljs-number\">0</span>&gt;&quot;,\n    &quot;&lt;NSLayoutConstraint:<span class=\"hljs-number\">0</span>x<span class=\"hljs-number\">28346b8e0</span> &#x27;UIView-Encapsulated-Layout-Height&#x27; UITableViewCellContentView:<span class=\"hljs-number\">0x103984060</span>.height == <span class=\"hljs-number\">44</span>   (active)&gt;&quot;  //这里是重点\n)\n</code></pre>\n\n<h4 id=\"Tips-约束的优先级-Priority\"><a href=\"#Tips-约束的优先级-Priority\" class=\"headerlink\" title=\"Tips:  约束的优先级(Priority)\"></a>Tips:  约束的优先级(Priority)</h4><p>在Xib或者storyBoard 中我们设置的约束默认的优先级都是Required(1000),如果想要设置约束根据优先级动态调整,则需要将优先级降至1000以下;当然,我们也可以设置优先级的具体数值;</p>\n<pre><code class=\"hljs clean\">##注意## \n当我们将某个约束优先级设置为Required时,其他等级的约束将无效;</code></pre>\n<h6 id=\"xib-和-storyBoard下有以下几种优先级\"><a href=\"#xib-和-storyBoard下有以下几种优先级\" class=\"headerlink\" title=\"xib 和 storyBoard下有以下几种优先级\"></a>xib 和 storyBoard下有以下几种优先级</h6><pre><code class=\"hljs angelscript\">Required(<span class=\"hljs-number\">1000</span>) &gt; High(<span class=\"hljs-number\">750</span>) &gt; Low(<span class=\"hljs-number\">250</span>);</code></pre>\n<h6 id=\"SnapKit增加一种\"><a href=\"#SnapKit增加一种\" class=\"headerlink\" title=\"SnapKit增加一种\"></a>SnapKit增加一种</h6><pre><code class=\"hljs angelscript\">Required(<span class=\"hljs-number\">1000</span>) &gt; High(<span class=\"hljs-number\">750</span>) &gt; Medium(<span class=\"hljs-number\">500</span>) &gt; Low(<span class=\"hljs-number\">250</span>);</code></pre>\n"},{"title":"Xcode问题","date":"2017-10-10T02:24:00.000Z","_content":"\n##  问题描述\n\n\n首先我们的项目是用Xcode 8.3版本写的,第三方库使用Carthage管理,从同事那里拷贝了一个Xcode9的包,然后安装,编译项目就出现了module compiled with Swift 3.1 cannot be imported in Swift 3.2: /User/......Alamofire.framework 这样的报错信息\n ![66C43EBF3CF24F18CCFFCABFC94025ED.png](http://upload-images.jianshu.io/upload_images/3340896-c90dc3fcea0add44.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n## 解决方法\n把旧的Xcode版本删掉,将Xcode 9拷贝到应用程序中, 然后打开终端 cd到项目目录, Carthage update --platform ios,等更新完毕后,重新打开项目, Commend + shift + k, 然后重新编译一下就不报错了.\n","source":"_posts/iOS/Xcode-module-compiled-with-Swift-3-1-cannot-be-imported-in-Swift-3-2--.md","raw":"---\ntitle:  Xcode问题\ndate: 2017-10-10 10:24\ncategories:\n- iOS\ntags: \n- Xcode \n---\n\n##  问题描述\n\n\n首先我们的项目是用Xcode 8.3版本写的,第三方库使用Carthage管理,从同事那里拷贝了一个Xcode9的包,然后安装,编译项目就出现了module compiled with Swift 3.1 cannot be imported in Swift 3.2: /User/......Alamofire.framework 这样的报错信息\n ![66C43EBF3CF24F18CCFFCABFC94025ED.png](http://upload-images.jianshu.io/upload_images/3340896-c90dc3fcea0add44.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n## 解决方法\n把旧的Xcode版本删掉,将Xcode 9拷贝到应用程序中, 然后打开终端 cd到项目目录, Carthage update --platform ios,等更新完毕后,重新打开项目, Commend + shift + k, 然后重新编译一下就不报错了.\n","slug":"iOS/Xcode-module-compiled-with-Swift-3-1-cannot-be-imported-in-Swift-3-2--","published":1,"updated":"2020-09-27T11:06:51.806Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgq6gnx8002ht29k9gti3eaj","content":"<h2 id=\"问题描述\"><a href=\"#问题描述\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h2><p>首先我们的项目是用Xcode 8.3版本写的,第三方库使用Carthage管理,从同事那里拷贝了一个Xcode9的包,然后安装,编译项目就出现了module compiled with Swift 3.1 cannot be imported in Swift 3.2: /User/……Alamofire.framework 这样的报错信息<br> <img src=\"http://upload-images.jianshu.io/upload_images/3340896-c90dc3fcea0add44.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"66C43EBF3CF24F18CCFFCABFC94025ED.png\"></p>\n<h2 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h2><p>把旧的Xcode版本删掉,将Xcode 9拷贝到应用程序中, 然后打开终端 cd到项目目录, Carthage update –platform ios,等更新完毕后,重新打开项目, Commend + shift + k, 然后重新编译一下就不报错了.</p>\n","site":{"data":{"fluid_static_prefix":{"internal_js":"/js","internal_css":"/css","internal_img":"/img","iconfont":"//at.alicdn.com/t/font_1736178_kmeydafke9r.css","anchor":"https://cdn.staticfile.org/anchor-js/4.2.2/","github_markdown":"https://cdn.staticfile.org/github-markdown-css/4.0.0/","jquery":"https://cdn.staticfile.org/jquery/3.4.1/","bootstrap":"https://cdn.staticfile.org/twitter-bootstrap/4.4.1/","highlightjs":"https://cdn.staticfile.org/highlight.js/10.0.0/","prismjs":"https://cdn.staticfile.org/prism/1.21.0/","tocbot":"https://cdn.staticfile.org/tocbot/4.11.1/","typed":"https://cdn.staticfile.org/typed.js/2.0.11/","fancybox":"https://cdn.staticfile.org/fancybox/3.5.7/","mathjax":"https://cdn.staticfile.org/mathjax/3.0.5/es5/","katex":"https://cdn.staticfile.org/KaTeX/0.11.1/","aplayer":"https://cdn.staticfile.org/aplayer/1.10.1/","busuanzi":"https://busuanzi.ibruce.info/busuanzi/2.3/","clipboard":"https://cdn.staticfile.org/clipboard.js/2.0.6/","mermaid":"https://cdn.staticfile.org/mermaid/8.5.0/","valine":"https://cdn.staticfile.org/valine/1.4.14/","gitalk":"https://cdn.staticfile.org/gitalk/1.6.2/","blueimp_md5":"https://cdn.staticfile.org/blueimp-md5/2.13.0/","disqusjs":"https://cdn.jsdelivr.net/npm/disqusjs@1.0/dist/","hint":"/lib/hint/"},"fluid_config":{"favicon":"/img/favicon.png","apple_touch_icon":"/img/favicon.png","title_join_string":" - ","force_https":false,"code":{"copy_btn":true,"highlight":{"enable":true,"lib":"highlightjs","highlightjs":{"style":"Github Gist","bg_color":false},"prismjs":{"style":"default","preprocess":true}}},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"_","loop":false},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"right","visible":"hover","icon":""},"mouse_click":{"enable":false,"style":"values"}},"dark_mode":{"enable":true,"default":"auto"},"color":{"body_bg_color":"#eee","body_bg_color_dark":"#181c27","navbar_bg_color":"#2f4154","navbar_bg_color_dark":"#1f3144","navbar_text_color":"#fff","navbar_text_color_dark":"#d0d0d0","text_color":"#3c4858","text_color_dark":"#c4c6c9","sec_text_color":"#718096","sec_text_color_dark":"#a7a9ad","post_text_color":"#2c3e50","post_text_color_dark":"#c4c6c9","post_heading_color":"#1a202c","post_heading_color_dark":"#c4c6c9","post_link_color":"#0366d6","post_link_color_dark":"#1589e9","link_hover_color":"#30a9de","link_hover_color_dark":"#30a9de","link_hover_bg_color":"#f8f9fa","link_hover_bg_color_dark":"#364151","board_color":"#fff","board_color_dark":"#252d38"},"font":{"font_size":"16px","font_family":null,"code_font_size":"85%"},"custom_js":null,"custom_css":null,"custom_html":"","web_analytics":{"enable":false,"baidu":null,"google":null,"gtag":null,"tencent":{"sid":null,"cid":null},"woyaola":null,"cnzz":null,"leancloud":{"app_id":null,"app_key":null,"server_url":null}},"lazyload":{"enable":true,"onlypost":false},"daovoice":{"enable":false,"appid":""},"aplayer":{"enable":false,"autoplay":false,"loop":"all","order":"random","theme":"#b7daff","songs":[{"name":"name","artist":"artist","url":"/songs/test.mp3","cover":"/img/cover.jpg"},{"name":"name","artist":"artist","url":"https://...url.mp3","cover":"https://...cover.jpg"}]},"version":{"check":false},"navbar":{"blog_title":"吃面多放葱","ground_glass":{"enable":false,"px":3,"alpha":0.7},"menu":[{"key":"home","link":"/","icon":"iconfont icon-home-fill"},{"key":"category","link":"/categories/","icon":"iconfont icon-category-fill"},{"key":"tag","link":"/tags/","icon":"iconfont icon-tags-fill"},{"key":"about","link":"/about/","icon":"iconfont icon-user-fill"}]},"search":{"enable":true,"path":"/local-search.xml","generate_path":"/local-search.xml","field":"post","content":true},"scroll_down_arrow":{"enable":true,"banner_height_limit":90,"scroll_after_turning_page":true},"banner_parallax":true,"footer":{"statistics":{"enable":false,"source":"busuanzi","pv_format":"总访问量 {} 次","uv_format":"总访客数 {} 人"},"beian":{"enable":false,"icp_text":"京ICP证123456号","police_text":"京公网安备12345678号","police_code":12345678,"police_icon":"/img/police_beian.png"}},"scroll_top_arrow":{"enable":true},"index":{"banner_img":"/img/default.png","banner_img_height":100,"banner_mask_alpha":0.3,"post_default_img":"","slogan":{"enable":true,"text":"像蚂蚁一样工作，像蝴蝶一样生活"},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"category":true,"tag":true}},"page":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3},"post":{"banner_img":"/img/default.png","banner_img_height":70,"banner_mask_alpha":0.3,"meta":{"author":{"enable":false},"date":{"enable":true,"format":"LL a"},"wordcount":{"enable":true,"format":"{} 字"},"min2read":{"enable":true,"format":"{} 分钟","words":100},"views":{"enable":false,"source":"busuanzi","format":"{} 次"}},"updated":{"enable":false,"content":"本文最后更新于：","relative":false},"toc":{"enable":true,"headingSelector":"h1,h2,h3,h4,h5,h6","collapseDepth":0},"copyright":{"enable":true,"content":"本博客所有文章除特别声明外，均采用 <a href=\"https://creativecommons.org/licenses/by-sa/4.0/deed.zh\" rel=\"nofollow noopener\">CC BY-SA 4.0 协议</a> ，转载请注明出处！"},"prev_next":{"enable":true},"custom":{"enable":false,"content":"<img src=\"https://octodex.github.com/images/jetpacktocat.png\" class=\"rounded mx-auto d-block mt-5\" style=\"width:150px; height:150px;\">"},"image_zoom":{"enable":true},"footnote":{"enable":true,"header":""},"math":{"enable":false,"specific":false,"engine":"mathjax"},"mermaid":{"enable":false,"specific":false,"options":{"theme":"default"}},"comments":{"enable":false,"type":"disqus"}},"utterances":{"repo":null,"issue_term":"pathname","label":"utterances","theme":"github-light","theme_dark":"github-dark","crossorigin":"anonymous"},"disqus":{"shortname":null,"disqusjs":false,"apikey":null},"gitalk":{"clientID":null,"clientSecret":null,"repo":null,"owner":null,"admin":["name"],"id":"location.pathname","language":"zh-CN","labels":["Gitalk"],"perPage":10,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true},"valine":{"appid":null,"appkey":null,"placeholder":"说点什么","path":"window.location.pathname","avatar":"retro","meta":["nick","mail","link"],"pageSize":10,"lang":"zh-CN","highlight":false,"recordIP":false,"serverURLs":null},"changyan":{"appid":"","appkey":""},"livere":{"uid":""},"remark42":{"host":"https://remark.haoyizebo.com","site_id":"haoyizebo","max_shown_comments":10,"locale":"zh"},"archive":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null},"category":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"post_limit":10,"order_by":"-length","collapse_depth":0},"tag":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null,"tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"avatar":"/img/avatar.png","name":"蔺国防","introduce":"移动应用开发者，历史文学爱好者","icons":[{"class":"iconfont icon-github-fill","link":"https://github.com","tip":"GitHub"},{"class":"iconfont icon-douban-fill","link":"https://douban.com","tip":"豆瓣"},{"class":"iconfont icon-wechat-fill","qrcode":"/img/favicon.png"}]},"page404":{"banner_img":"/img/default.png","banner_img_height":85,"banner_mask_alpha":0.3,"subtitle":"Page not found"},"links":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"items":[{"title":"Fluid Docs","intro":"主题使用指南","link":"https://hexo.fluid-dev.com/docs/","image":"/img/favicon.png"},{"title":"Fluid Repo","intro":"主题 GitHub 仓库","link":"https://github.com/fluid-dev/hexo-theme-fluid","image":"/img/favicon.png"},{"title":"Fluid Example","intro":"主题操作示例","link":"https://hexo.fluid-dev.com/docs/example/","image":"/img/favicon.png"}]}}}},"excerpt":"","more":"<h2 id=\"问题描述\"><a href=\"#问题描述\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h2><p>首先我们的项目是用Xcode 8.3版本写的,第三方库使用Carthage管理,从同事那里拷贝了一个Xcode9的包,然后安装,编译项目就出现了module compiled with Swift 3.1 cannot be imported in Swift 3.2: /User/……Alamofire.framework 这样的报错信息<br> <img src=\"http://upload-images.jianshu.io/upload_images/3340896-c90dc3fcea0add44.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"66C43EBF3CF24F18CCFFCABFC94025ED.png\"></p>\n<h2 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h2><p>把旧的Xcode版本删掉,将Xcode 9拷贝到应用程序中, 然后打开终端 cd到项目目录, Carthage update –platform ios,等更新完毕后,重新打开项目, Commend + shift + k, 然后重新编译一下就不报错了.</p>\n"},{"title":"YYCategories介绍","date":"2018-02-09T10:44:00.000Z","_content":"## 介绍\n功能丰富的 Category 类型工具库\n\n## 分析\n\n###### Code\n\n```\n#if __has_include(<YYCategories/YYCategories.h>)\n#import <YYCategories/YYCategoriesMacro.h>\n#import <YYCategories/NSObject+YYAdd.h>\n...\n#else\n#import \"YYCategoriesMacro.h\"\n#import \"NSObject+YYAdd.h\"\n...\n#endif\n```\n###### 功能\n\n这样做可以提高编译效率.如果指定文件路径,则搜索的更快一些.\\\n一般我们使用YYCategories导入的时候都是库文件,所以指定目录位置搜索更快一些\n\n```\n＃import < > 引用系统文件，它用于对系统自带的头文件的引用，编译器会在系统文件目录下去查找该文件.\n#import \" \"  用户自定义的文件用双引号引用，编译器首先会在用户目录下查找，然后到安装目录中查\n```\n\n---\n\n###### Code\n\n```\nFOUNDATION_EXPORT double YYCategoriesVersionNumber;\nFOUNDATION_EXPORT const unsigned char YYCategoriesVersionString[];\n```\n\n###### 功能\n\n例如比较两个字符串\n\n`FOUNDATION_EXPORT` 直接使用`stringInstance == MyFirstConstant`来比较,比较的是指针地址\\\n`define`使用`[stringInstance isEqualToString:MyFirstConstant]`\n比较字符串的每一个字符是否相等\\\n`FOUNDATION_EXPORT`效率更高\n\n```\n\nNS_ASSUME_NONNULL_BEGIN\n\n/**\n Provides extensions for `UIBarButtonItem`.\n */\n@interface UIBarButtonItem (YYAdd)\n\n/**\n The block that invoked when the item is selected. The objects captured by block\n will retained by the ButtonItem.\n \n @discussion This param is conflict with `target` and `action` property.\n Set this will set `target` and `action` property to some internal objects.\n */\n@property (nullable, nonatomic, copy) void (^actionBlock)(id);\n\n@end\n\nNS_ASSUME_NONNULL_END\n\n```\n该段代码使用了`NS_ASSUME_NONNULL_BEGIN`,`NS_ASSUME_NONNULL_END` \n\n两个宏中间包含的属性,参数值,返回值,默认是 `nonnull` 类型.\n\n如果想要某个属性,参数值或者返回值为可选类型,则单独在该属性,参数值,或者返回值前单独标明`nullable`.\n\n###### Code\n\n```\n#ifdef __cplusplus\n#define YY_EXTERN_C_BEGIN  extern \"C\" {\n#define YY_EXTERN_C_END  }\n#else\n#define YY_EXTERN_C_BEGIN\n#define YY_EXTERN_C_END\n#endif\n```\n\n###### 功能\n\n在C++环境中有定义 `__cplusplus` 这个宏,如果在C++环境中, `YY_EXTERN_C_BEGIN`和 `YY_EXTERN_C_END`中间的代码,编译器用C语言的编译格式来编译.因为 C++ 为了实现函数重载会把函数名和参数等联合起来合成一个中介的函数名，如果 C 函数也被这样编译会出问题.\n\n###### Code\n```\n#ifndef YY_SWAP // swap two value\n#define YY_SWAP(_a_, _b_)  do { __typeof__(_a_) _tmp_ = (_a_); (_a_) = (_b_); (_b_) = _tmp_; } while (0)\n#endif\n```\n###### 功能\n\n交换两个值\n\n###### Code\n```\n#ifndef YYSYNTH_DUMMY_CLASS\n#define YYSYNTH_DUMMY_CLASS(_name_) \\\n@interface YYSYNTH_DUMMY_CLASS_ ## _name_ : NSObject @end \\\n@implementation YYSYNTH_DUMMY_CLASS_ ## _name_ @end\n#endif\n```\n\n###### 功能\n如果条件成立,执行断言.\n\n###### Code\n```\n#ifndef YYSYNTH_DUMMY_CLASS\n#define YYSYNTH_DUMMY_CLASS(_name_) \\\n@interface YYSYNTH_DUMMY_CLASS_ ## _name_ : NSObject @end \\\n@implementation YYSYNTH_DUMMY_CLASS_ ## _name_ @end\n#endif\n```\n\n###### 功能\n\n在ios开发过程中，有时候会用到第三方的静态库(.a文件)，OC没有为每个函数（或者方法）定义链接符号，它只为每个类创建链接符号。这样当在一个静态库中使用类别来扩展已有类的时候，链接器不知道如何把类原有的方法和类别中的方法整合起来，就会导致你调用类别中的方法时，会出现selector not recognized的错误，从而导致app闪退。使用这段宏定义他可以虚拟新建一个与名字category 相同.h.m 让编译器 编译通过。即可解决上面的问题。\n\n###### Code\n```\n#ifndef YYSYNTH_DYNAMIC_PROPERTY_OBJECT\n#define YYSYNTH_DYNAMIC_PROPERTY_OBJECT(_getter_, _setter_, _association_, _type_) \\\n- (void)_setter_ : (_type_)object { \\\n    [self willChangeValueForKey:@#_getter_]; \\\n    objc_setAssociatedObject(self, _cmd, object, OBJC_ASSOCIATION_ ## _association_); \\\n    [self didChangeValueForKey:@#_getter_]; \\\n} \\\n- (_type_)_getter_ { \\\n    return objc_getAssociatedObject(self, @selector(_setter_:)); \\\n}\n#endif\n```\n\n###### 功能\n使用runtime,合成类别中定义的属性的`Setter` 和 `Getter`方法.\n\n###### Code\n```\n#ifndef weakify\n    #if DEBUG\n        #if __has_feature(objc_arc)\n        #define weakify(object) autoreleasepool{} __weak __typeof__(object) weak##_##object = object;\n        #else\n        #define weakify(object) autoreleasepool{} __block __typeof__(object) block##_##object = object;\n        #endif\n    #else\n        #if __has_feature(objc_arc)\n        #define weakify(object) try{} @finally{} {} __weak __typeof__(object) weak##_##object = object;\n        #else\n        #define weakify(object) try{} @finally{} {} __block __typeof__(object) block##_##object = object;\n        #endif\n    #endif\n#endif\n\n#ifndef strongify\n    #if DEBUG\n        #if __has_feature(objc_arc)\n        #define strongify(object) autoreleasepool{} __typeof__(object) object = weak##_##object;\n        #else\n        #define strongify(object) autoreleasepool{} __typeof__(object) object = block##_##object;\n        #endif\n    #else\n        #if __has_feature(objc_arc)\n        #define strongify(object) try{} @finally{} __typeof__(object) object = weak##_##object;\n        #else\n        #define strongify(object) try{} @finally{} __typeof__(object) object = block##_##object;\n        #endif\n    #endif\n#endif\n```\n\n###### 功能\n生成一个若引用或者强引用.\n\nExample:\n```\n    @weakify(self)\n    [self doSomething^{\n        @strongify(self)\n        if (!self) return;\n        ...\n    }];\n```\n\n###### Code\n```\nstatic inline void YYBenchmark(void (^block)(void), void (^complete)(double ms)) {\n    // <sys/time.h> version\n    struct timeval t0, t1;\n    gettimeofday(&t0, NULL);\n    block();\n    gettimeofday(&t1, NULL);\n    double ms = (double)(t1.tv_sec - t0.tv_sec) * 1e3 + (double)(t1.tv_usec - t0.tv_usec) * 1e-3;\n    complete(ms);\n}\n```\n\n###### 功能\n\n这个函数还是挺实用的,可以用来计算block内代码的执行时间,通过该函数来测试写的代码执行效率.\n\n返回值为毫秒,double类型.\n```\n/**\n Profile time cost.\n @param block     code to benchmark\n @param complete  code time cost (millisecond)\n \n Usage:\n    YYBenchmark(^{\n        // code\n    }, ^(double ms) {\n        NSLog(\"time cost: %.2f ms\",ms);\n    });\n \n */\n ```\n\n###### Code\n```\nstatic inline NSDate *_YYCompileTime(const char *data, const char *time) {\n    NSString *timeStr = [NSString stringWithFormat:@\"%s %s\",data,time];\n    NSLocale *locale = [[NSLocale alloc] initWithLocaleIdentifier:@\"en_US\"];\n    NSDateFormatter *formatter = [[NSDateFormatter alloc] init];\n    [formatter setDateFormat:@\"MMM dd yyyy HH:mm:ss\"];\n    [formatter setLocale:locale];\n    return [formatter dateFromString:timeStr];\n}\n\n/**\n Get compile timestamp.\n @return A new date object set to the compile date and time.\n */\n#ifndef YYCompileTime\n// use macro to avoid compile warning when use pch file\n#define YYCompileTime() _YYCompileTime(__DATE__, __TIME__)\n#endif\n```\n\n###### 功能\n\n获取编译开始时间.格式为\"MMM dd yyyy HH:mm:ss\"\n\n###### Code\n```\n/**\n Submits a block for execution on a main queue and waits until the block completes.\n */\nstatic inline void dispatch_sync_on_main_queue(void (^block)(void)) {\n    if (pthread_main_np()) {\n        block();\n    } else {\n        dispatch_sync(dispatch_get_main_queue(), block);\n    }\n}\n```\n\n###### 功能\n\n提交blcok到主队列同步执行.下面提交block到主队列异步执行,使用起来还是蛮方便的.\n\n###### Code (NSArray + YYAdd)\n```\n/**\n Reverse the index of object in this array.\n Example: Before @[ @1, @2, @3 ], After @[ @3, @2, @1 ].\n */\n- (void)reverse;\n\n- (void)reverse {\n    NSUInteger count = self.count;\n    int mid = floor(count / 2.0);\n    for (NSUInteger i = 0; i < mid; i++) {\n        [self exchangeObjectAtIndex:i withObjectAtIndex:(count - (i + 1))];\n    }\n}\n```\n###### 功能\n\n数组翻转\n\n###### Code (NSDate + YYADD)\n```\n/**\n Create data from the file in main bundle (similar to [UIImage imageNamed:]).\n \n @param name The file name (in main bundle).\n \n @return A new data create from the file.\n */\n+ (nullable NSData *)dataNamed:(NSString *)name;\n```\n\n###### 功能\n\n返回main bundle 下指定文件的的二进制数据.\n\n###### Code (NSNumber + YYAdd)\n```\n/**\n Creates and returns an NSNumber object from a string.\n Valid format: @\"12\", @\"12.345\", @\" -0xFF\", @\" .23e99 \"...\n \n @param string  The string described an number.\n \n @return an NSNumber when parse succeed, or nil if an error occurs.\n */\n+ (nullable NSNumber *)numberWithString:(NSString *)string;\n```\n\n###### 功能\n\n将一个字符串对象解析为NSNumber类型对象,很实用.\n\n###### Code (NSObject+YYAdd)\n```\n+ (BOOL)swizzleInstanceMethod:(SEL)originalSel with:(SEL)newSel {\n    Method originalMethod = class_getInstanceMethod(self, originalSel);\n    Method newMethod = class_getInstanceMethod(self, newSel);\n    if (!originalMethod || !newMethod) return NO;\n    \n    class_addMethod(self,\n                    originalSel,\n                    class_getMethodImplementation(self, originalSel),\n                    method_getTypeEncoding(originalMethod));\n    class_addMethod(self,\n                    newSel,\n                    class_getMethodImplementation(self, newSel),\n                    method_getTypeEncoding(newMethod));\n    \n    method_exchangeImplementations(class_getInstanceMethod(self, originalSel),\n                                   class_getInstanceMethod(self, newSel));\n    return YES;\n}\n```\n\n###### 功能\nruntime 黑魔法,方法实现交换.\n\n###### Code\n```\n#pragma clang diagnostic push\n#pragma clang diagnostic ignored \"-相关命令\"\n    //需要操作的代码\n#pragma clang diagnostic pop\n```\n\n###### 功能\n\n消除编译器警告⚠️\n\n|相关命令      |含义          |\n|--------------|--------------|\n|\"-Wdeprecated-declarations\"|弃用的警告⚠️|\n|\"-Wincompatible-pointer-types\"|不兼容指针类型⚠️|\n|\"-Warc-retain-cycles\"|循环引用⚠️|\n|\"-Wunused-variable\"|未使用变量 ⚠️|\n|\"-Wcovered-switch-default\"|未使用default ⚠️|\n|...|...|\n\n\n###### Code (UIBarButtonItem+YYAdd)\n```\n@interface _YYUIBarButtonItemBlockTarget : NSObject\n\n@property (nonatomic, copy) void (^block)(id sender);\n\n- (id)initWithBlock:(void (^)(id sender))block;\n- (void)invoke:(id)sender;\n\n@end\n\n@implementation _YYUIBarButtonItemBlockTarget\n\n- (id)initWithBlock:(void (^)(id sender))block{\n    self = [super init];\n    if (self) {\n        _block = [block copy];\n    }\n    return self;\n}\n\n- (void)invoke:(id)sender {\n    if (self.block) self.block(sender);\n}\n\n@end\n\n\n@implementation UIBarButtonItem (YYAdd)\n\n- (void)setActionBlock:(void (^)(id sender))block {\n    _YYUIBarButtonItemBlockTarget *target = [[_YYUIBarButtonItemBlockTarget alloc] initWithBlock:block];\n    objc_setAssociatedObject(self, &block_key, target, OBJC_ASSOCIATION_RETAIN_NONATOMIC);\n    \n    [self setTarget:target];\n    [self setAction:@selector(invoke:)];\n}\n\n- (void (^)(id)) actionBlock {\n    _YYUIBarButtonItemBlockTarget *target = objc_getAssociatedObject(self, &block_key);\n    return target.block;\n}\n```\n\n###### 功能\n\n通过创建一个中间对象,让UIBarButtonItem的Target指向该对象,同时让self 调用该对象的方法.来达到点击事件调用block而无需再设置selector的目的.\n\n通过这种方式,`YYCategories`将多种类似点击控件,调用selector的方式,修改为block.\n\n> **注意** 使用block给控件添加点击事件后,就不能再给该控件添加selector,否则会引起冲突.\n\n###### Code  (UIColor+YYAdd)\n```\n#ifndef UIColorHex\n#define UIColorHex(_hex_)   [UIColor colorWithHexString:((__bridge NSString *)CFSTR(#_hex_))]\n#endif\n```\n###### 功能\n\n16进制颜色转换\nExample: UIColorHex(0xF0F), UIColorHex(66ccff), UIColorHex(#66CCFF88)\n支持的格式是如此之多, #RGB #RGBA #RRGGBB #RRGGBBAA 0xRGB ...\n\n###### Code  (UIImage+YYAdd)\n```\n/**\n Returns a new rotated image (relative to the center).\n \n @param radians   Rotated radians in counterclockwise.⟲\n \n @param fitSize   YES: new image's size is extend to fit all content.\n                  NO: image's size will not change, content may be clipped.\n */\n- (nullable UIImage *)imageByRotate:(CGFloat)radians fitSize:(BOOL)fitSize;\n```\n\n###### 功能\n\n图片翻转,超级实用\n...\n\n## 总结\n\n`YYCategories`中对`UIKit`, `Foundation`, `Quartz`中的常用类添加分类,里面还有好多实用的API来供我们项目开发使用,想要进一步了解并使用其中的API,可以参阅`YYCategories`中的头文件.\n\n## 参考资料\n\n[YYCategories](https://github.com/ibireme/YYCategories)\n[clang.llvm.org](http://clang.llvm.org/docs/UsersManual.html#diagnostics_pragmas)\n","source":"_posts/iOS/YYCategories-源码分析.md","raw":"---\ntitle:  YYCategories介绍 \ndate:  2018-02-09 18:44\ncategories:\n- iOS\ntags: \n- YYCategories \n---\n## 介绍\n功能丰富的 Category 类型工具库\n\n## 分析\n\n###### Code\n\n```\n#if __has_include(<YYCategories/YYCategories.h>)\n#import <YYCategories/YYCategoriesMacro.h>\n#import <YYCategories/NSObject+YYAdd.h>\n...\n#else\n#import \"YYCategoriesMacro.h\"\n#import \"NSObject+YYAdd.h\"\n...\n#endif\n```\n###### 功能\n\n这样做可以提高编译效率.如果指定文件路径,则搜索的更快一些.\\\n一般我们使用YYCategories导入的时候都是库文件,所以指定目录位置搜索更快一些\n\n```\n＃import < > 引用系统文件，它用于对系统自带的头文件的引用，编译器会在系统文件目录下去查找该文件.\n#import \" \"  用户自定义的文件用双引号引用，编译器首先会在用户目录下查找，然后到安装目录中查\n```\n\n---\n\n###### Code\n\n```\nFOUNDATION_EXPORT double YYCategoriesVersionNumber;\nFOUNDATION_EXPORT const unsigned char YYCategoriesVersionString[];\n```\n\n###### 功能\n\n例如比较两个字符串\n\n`FOUNDATION_EXPORT` 直接使用`stringInstance == MyFirstConstant`来比较,比较的是指针地址\\\n`define`使用`[stringInstance isEqualToString:MyFirstConstant]`\n比较字符串的每一个字符是否相等\\\n`FOUNDATION_EXPORT`效率更高\n\n```\n\nNS_ASSUME_NONNULL_BEGIN\n\n/**\n Provides extensions for `UIBarButtonItem`.\n */\n@interface UIBarButtonItem (YYAdd)\n\n/**\n The block that invoked when the item is selected. The objects captured by block\n will retained by the ButtonItem.\n \n @discussion This param is conflict with `target` and `action` property.\n Set this will set `target` and `action` property to some internal objects.\n */\n@property (nullable, nonatomic, copy) void (^actionBlock)(id);\n\n@end\n\nNS_ASSUME_NONNULL_END\n\n```\n该段代码使用了`NS_ASSUME_NONNULL_BEGIN`,`NS_ASSUME_NONNULL_END` \n\n两个宏中间包含的属性,参数值,返回值,默认是 `nonnull` 类型.\n\n如果想要某个属性,参数值或者返回值为可选类型,则单独在该属性,参数值,或者返回值前单独标明`nullable`.\n\n###### Code\n\n```\n#ifdef __cplusplus\n#define YY_EXTERN_C_BEGIN  extern \"C\" {\n#define YY_EXTERN_C_END  }\n#else\n#define YY_EXTERN_C_BEGIN\n#define YY_EXTERN_C_END\n#endif\n```\n\n###### 功能\n\n在C++环境中有定义 `__cplusplus` 这个宏,如果在C++环境中, `YY_EXTERN_C_BEGIN`和 `YY_EXTERN_C_END`中间的代码,编译器用C语言的编译格式来编译.因为 C++ 为了实现函数重载会把函数名和参数等联合起来合成一个中介的函数名，如果 C 函数也被这样编译会出问题.\n\n###### Code\n```\n#ifndef YY_SWAP // swap two value\n#define YY_SWAP(_a_, _b_)  do { __typeof__(_a_) _tmp_ = (_a_); (_a_) = (_b_); (_b_) = _tmp_; } while (0)\n#endif\n```\n###### 功能\n\n交换两个值\n\n###### Code\n```\n#ifndef YYSYNTH_DUMMY_CLASS\n#define YYSYNTH_DUMMY_CLASS(_name_) \\\n@interface YYSYNTH_DUMMY_CLASS_ ## _name_ : NSObject @end \\\n@implementation YYSYNTH_DUMMY_CLASS_ ## _name_ @end\n#endif\n```\n\n###### 功能\n如果条件成立,执行断言.\n\n###### Code\n```\n#ifndef YYSYNTH_DUMMY_CLASS\n#define YYSYNTH_DUMMY_CLASS(_name_) \\\n@interface YYSYNTH_DUMMY_CLASS_ ## _name_ : NSObject @end \\\n@implementation YYSYNTH_DUMMY_CLASS_ ## _name_ @end\n#endif\n```\n\n###### 功能\n\n在ios开发过程中，有时候会用到第三方的静态库(.a文件)，OC没有为每个函数（或者方法）定义链接符号，它只为每个类创建链接符号。这样当在一个静态库中使用类别来扩展已有类的时候，链接器不知道如何把类原有的方法和类别中的方法整合起来，就会导致你调用类别中的方法时，会出现selector not recognized的错误，从而导致app闪退。使用这段宏定义他可以虚拟新建一个与名字category 相同.h.m 让编译器 编译通过。即可解决上面的问题。\n\n###### Code\n```\n#ifndef YYSYNTH_DYNAMIC_PROPERTY_OBJECT\n#define YYSYNTH_DYNAMIC_PROPERTY_OBJECT(_getter_, _setter_, _association_, _type_) \\\n- (void)_setter_ : (_type_)object { \\\n    [self willChangeValueForKey:@#_getter_]; \\\n    objc_setAssociatedObject(self, _cmd, object, OBJC_ASSOCIATION_ ## _association_); \\\n    [self didChangeValueForKey:@#_getter_]; \\\n} \\\n- (_type_)_getter_ { \\\n    return objc_getAssociatedObject(self, @selector(_setter_:)); \\\n}\n#endif\n```\n\n###### 功能\n使用runtime,合成类别中定义的属性的`Setter` 和 `Getter`方法.\n\n###### Code\n```\n#ifndef weakify\n    #if DEBUG\n        #if __has_feature(objc_arc)\n        #define weakify(object) autoreleasepool{} __weak __typeof__(object) weak##_##object = object;\n        #else\n        #define weakify(object) autoreleasepool{} __block __typeof__(object) block##_##object = object;\n        #endif\n    #else\n        #if __has_feature(objc_arc)\n        #define weakify(object) try{} @finally{} {} __weak __typeof__(object) weak##_##object = object;\n        #else\n        #define weakify(object) try{} @finally{} {} __block __typeof__(object) block##_##object = object;\n        #endif\n    #endif\n#endif\n\n#ifndef strongify\n    #if DEBUG\n        #if __has_feature(objc_arc)\n        #define strongify(object) autoreleasepool{} __typeof__(object) object = weak##_##object;\n        #else\n        #define strongify(object) autoreleasepool{} __typeof__(object) object = block##_##object;\n        #endif\n    #else\n        #if __has_feature(objc_arc)\n        #define strongify(object) try{} @finally{} __typeof__(object) object = weak##_##object;\n        #else\n        #define strongify(object) try{} @finally{} __typeof__(object) object = block##_##object;\n        #endif\n    #endif\n#endif\n```\n\n###### 功能\n生成一个若引用或者强引用.\n\nExample:\n```\n    @weakify(self)\n    [self doSomething^{\n        @strongify(self)\n        if (!self) return;\n        ...\n    }];\n```\n\n###### Code\n```\nstatic inline void YYBenchmark(void (^block)(void), void (^complete)(double ms)) {\n    // <sys/time.h> version\n    struct timeval t0, t1;\n    gettimeofday(&t0, NULL);\n    block();\n    gettimeofday(&t1, NULL);\n    double ms = (double)(t1.tv_sec - t0.tv_sec) * 1e3 + (double)(t1.tv_usec - t0.tv_usec) * 1e-3;\n    complete(ms);\n}\n```\n\n###### 功能\n\n这个函数还是挺实用的,可以用来计算block内代码的执行时间,通过该函数来测试写的代码执行效率.\n\n返回值为毫秒,double类型.\n```\n/**\n Profile time cost.\n @param block     code to benchmark\n @param complete  code time cost (millisecond)\n \n Usage:\n    YYBenchmark(^{\n        // code\n    }, ^(double ms) {\n        NSLog(\"time cost: %.2f ms\",ms);\n    });\n \n */\n ```\n\n###### Code\n```\nstatic inline NSDate *_YYCompileTime(const char *data, const char *time) {\n    NSString *timeStr = [NSString stringWithFormat:@\"%s %s\",data,time];\n    NSLocale *locale = [[NSLocale alloc] initWithLocaleIdentifier:@\"en_US\"];\n    NSDateFormatter *formatter = [[NSDateFormatter alloc] init];\n    [formatter setDateFormat:@\"MMM dd yyyy HH:mm:ss\"];\n    [formatter setLocale:locale];\n    return [formatter dateFromString:timeStr];\n}\n\n/**\n Get compile timestamp.\n @return A new date object set to the compile date and time.\n */\n#ifndef YYCompileTime\n// use macro to avoid compile warning when use pch file\n#define YYCompileTime() _YYCompileTime(__DATE__, __TIME__)\n#endif\n```\n\n###### 功能\n\n获取编译开始时间.格式为\"MMM dd yyyy HH:mm:ss\"\n\n###### Code\n```\n/**\n Submits a block for execution on a main queue and waits until the block completes.\n */\nstatic inline void dispatch_sync_on_main_queue(void (^block)(void)) {\n    if (pthread_main_np()) {\n        block();\n    } else {\n        dispatch_sync(dispatch_get_main_queue(), block);\n    }\n}\n```\n\n###### 功能\n\n提交blcok到主队列同步执行.下面提交block到主队列异步执行,使用起来还是蛮方便的.\n\n###### Code (NSArray + YYAdd)\n```\n/**\n Reverse the index of object in this array.\n Example: Before @[ @1, @2, @3 ], After @[ @3, @2, @1 ].\n */\n- (void)reverse;\n\n- (void)reverse {\n    NSUInteger count = self.count;\n    int mid = floor(count / 2.0);\n    for (NSUInteger i = 0; i < mid; i++) {\n        [self exchangeObjectAtIndex:i withObjectAtIndex:(count - (i + 1))];\n    }\n}\n```\n###### 功能\n\n数组翻转\n\n###### Code (NSDate + YYADD)\n```\n/**\n Create data from the file in main bundle (similar to [UIImage imageNamed:]).\n \n @param name The file name (in main bundle).\n \n @return A new data create from the file.\n */\n+ (nullable NSData *)dataNamed:(NSString *)name;\n```\n\n###### 功能\n\n返回main bundle 下指定文件的的二进制数据.\n\n###### Code (NSNumber + YYAdd)\n```\n/**\n Creates and returns an NSNumber object from a string.\n Valid format: @\"12\", @\"12.345\", @\" -0xFF\", @\" .23e99 \"...\n \n @param string  The string described an number.\n \n @return an NSNumber when parse succeed, or nil if an error occurs.\n */\n+ (nullable NSNumber *)numberWithString:(NSString *)string;\n```\n\n###### 功能\n\n将一个字符串对象解析为NSNumber类型对象,很实用.\n\n###### Code (NSObject+YYAdd)\n```\n+ (BOOL)swizzleInstanceMethod:(SEL)originalSel with:(SEL)newSel {\n    Method originalMethod = class_getInstanceMethod(self, originalSel);\n    Method newMethod = class_getInstanceMethod(self, newSel);\n    if (!originalMethod || !newMethod) return NO;\n    \n    class_addMethod(self,\n                    originalSel,\n                    class_getMethodImplementation(self, originalSel),\n                    method_getTypeEncoding(originalMethod));\n    class_addMethod(self,\n                    newSel,\n                    class_getMethodImplementation(self, newSel),\n                    method_getTypeEncoding(newMethod));\n    \n    method_exchangeImplementations(class_getInstanceMethod(self, originalSel),\n                                   class_getInstanceMethod(self, newSel));\n    return YES;\n}\n```\n\n###### 功能\nruntime 黑魔法,方法实现交换.\n\n###### Code\n```\n#pragma clang diagnostic push\n#pragma clang diagnostic ignored \"-相关命令\"\n    //需要操作的代码\n#pragma clang diagnostic pop\n```\n\n###### 功能\n\n消除编译器警告⚠️\n\n|相关命令      |含义          |\n|--------------|--------------|\n|\"-Wdeprecated-declarations\"|弃用的警告⚠️|\n|\"-Wincompatible-pointer-types\"|不兼容指针类型⚠️|\n|\"-Warc-retain-cycles\"|循环引用⚠️|\n|\"-Wunused-variable\"|未使用变量 ⚠️|\n|\"-Wcovered-switch-default\"|未使用default ⚠️|\n|...|...|\n\n\n###### Code (UIBarButtonItem+YYAdd)\n```\n@interface _YYUIBarButtonItemBlockTarget : NSObject\n\n@property (nonatomic, copy) void (^block)(id sender);\n\n- (id)initWithBlock:(void (^)(id sender))block;\n- (void)invoke:(id)sender;\n\n@end\n\n@implementation _YYUIBarButtonItemBlockTarget\n\n- (id)initWithBlock:(void (^)(id sender))block{\n    self = [super init];\n    if (self) {\n        _block = [block copy];\n    }\n    return self;\n}\n\n- (void)invoke:(id)sender {\n    if (self.block) self.block(sender);\n}\n\n@end\n\n\n@implementation UIBarButtonItem (YYAdd)\n\n- (void)setActionBlock:(void (^)(id sender))block {\n    _YYUIBarButtonItemBlockTarget *target = [[_YYUIBarButtonItemBlockTarget alloc] initWithBlock:block];\n    objc_setAssociatedObject(self, &block_key, target, OBJC_ASSOCIATION_RETAIN_NONATOMIC);\n    \n    [self setTarget:target];\n    [self setAction:@selector(invoke:)];\n}\n\n- (void (^)(id)) actionBlock {\n    _YYUIBarButtonItemBlockTarget *target = objc_getAssociatedObject(self, &block_key);\n    return target.block;\n}\n```\n\n###### 功能\n\n通过创建一个中间对象,让UIBarButtonItem的Target指向该对象,同时让self 调用该对象的方法.来达到点击事件调用block而无需再设置selector的目的.\n\n通过这种方式,`YYCategories`将多种类似点击控件,调用selector的方式,修改为block.\n\n> **注意** 使用block给控件添加点击事件后,就不能再给该控件添加selector,否则会引起冲突.\n\n###### Code  (UIColor+YYAdd)\n```\n#ifndef UIColorHex\n#define UIColorHex(_hex_)   [UIColor colorWithHexString:((__bridge NSString *)CFSTR(#_hex_))]\n#endif\n```\n###### 功能\n\n16进制颜色转换\nExample: UIColorHex(0xF0F), UIColorHex(66ccff), UIColorHex(#66CCFF88)\n支持的格式是如此之多, #RGB #RGBA #RRGGBB #RRGGBBAA 0xRGB ...\n\n###### Code  (UIImage+YYAdd)\n```\n/**\n Returns a new rotated image (relative to the center).\n \n @param radians   Rotated radians in counterclockwise.⟲\n \n @param fitSize   YES: new image's size is extend to fit all content.\n                  NO: image's size will not change, content may be clipped.\n */\n- (nullable UIImage *)imageByRotate:(CGFloat)radians fitSize:(BOOL)fitSize;\n```\n\n###### 功能\n\n图片翻转,超级实用\n...\n\n## 总结\n\n`YYCategories`中对`UIKit`, `Foundation`, `Quartz`中的常用类添加分类,里面还有好多实用的API来供我们项目开发使用,想要进一步了解并使用其中的API,可以参阅`YYCategories`中的头文件.\n\n## 参考资料\n\n[YYCategories](https://github.com/ibireme/YYCategories)\n[clang.llvm.org](http://clang.llvm.org/docs/UsersManual.html#diagnostics_pragmas)\n","slug":"iOS/YYCategories-源码分析","published":1,"updated":"2020-09-27T10:41:27.378Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgq6gnx9002kt29kh268asu1","content":"<h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><p>功能丰富的 Category 类型工具库</p>\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><h6 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h6><pre><code class=\"hljs cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">if</span> __has_include(<span class=\"hljs-meta-string\">&lt;YYCategories/YYCategories.h&gt;)</span></span>\n<span class=\"hljs-meta\">#import <span class=\"hljs-meta-string\">&lt;YYCategories/YYCategoriesMacro.h&gt;</span></span>\n<span class=\"hljs-meta\">#import <span class=\"hljs-meta-string\">&lt;YYCategories/NSObject+YYAdd.h&gt;</span></span>\n...\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">else</span></span>\n<span class=\"hljs-meta\">#import <span class=\"hljs-meta-string\">&quot;YYCategoriesMacro.h&quot;</span></span>\n<span class=\"hljs-meta\">#import <span class=\"hljs-meta-string\">&quot;NSObject+YYAdd.h&quot;</span></span>\n...\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">endif</span></span></code></pre>\n<h6 id=\"功能\"><a href=\"#功能\" class=\"headerlink\" title=\"功能\"></a>功能</h6><p>这样做可以提高编译效率.如果指定文件路径,则搜索的更快一些.<br>一般我们使用YYCategories导入的时候都是库文件,所以指定目录位置搜索更快一些</p>\n<pre><code class=\"hljs xl\">＃<span class=\"hljs-keyword\">import</span> &lt; &gt; 引用系统文件，它用于对系统自带的头文件的引用，编译器会在系统文件目录下去查找该文件.\n#<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">&quot; &quot;</span>  用户自定义的文件用双引号引用，编译器首先会在用户目录下查找，然后到安装目录中查</code></pre>\n\n<hr>\n<h6 id=\"Code-1\"><a href=\"#Code-1\" class=\"headerlink\" title=\"Code\"></a>Code</h6><pre><code class=\"hljs cpp\">FOUNDATION_EXPORT <span class=\"hljs-keyword\">double</span> YYCategoriesVersionNumber;\nFOUNDATION_EXPORT <span class=\"hljs-keyword\">const</span> <span class=\"hljs-keyword\">unsigned</span> <span class=\"hljs-keyword\">char</span> YYCategoriesVersionString[];</code></pre>\n\n<h6 id=\"功能-1\"><a href=\"#功能-1\" class=\"headerlink\" title=\"功能\"></a>功能</h6><p>例如比较两个字符串</p>\n<p><code>FOUNDATION_EXPORT</code> 直接使用<code>stringInstance == MyFirstConstant</code>来比较,比较的是指针地址<br><code>define</code>使用<code>[stringInstance isEqualToString:MyFirstConstant]</code><br>比较字符串的每一个字符是否相等<br><code>FOUNDATION_EXPORT</code>效率更高</p>\n<pre><code class=\"hljs objectivec\">\n<span class=\"hljs-built_in\">NS_ASSUME_NONNULL_BEGIN</span>\n\n<span class=\"hljs-comment\">/**</span>\n<span class=\"hljs-comment\"> Provides extensions for `UIBarButtonItem`.</span>\n<span class=\"hljs-comment\"> */</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">@interface</span> <span class=\"hljs-title\">UIBarButtonItem</span> (<span class=\"hljs-title\">YYAdd</span>)</span>\n\n<span class=\"hljs-comment\">/**</span>\n<span class=\"hljs-comment\"> The block that invoked when the item is selected. The objects captured by block</span>\n<span class=\"hljs-comment\"> will retained by the ButtonItem.</span>\n<span class=\"hljs-comment\"> </span>\n<span class=\"hljs-comment\"> @discussion This param is conflict with `target` and `action` property.</span>\n<span class=\"hljs-comment\"> Set this will set `target` and `action` property to some internal objects.</span>\n<span class=\"hljs-comment\"> */</span>\n<span class=\"hljs-keyword\">@property</span> (<span class=\"hljs-keyword\">nullable</span>, <span class=\"hljs-keyword\">nonatomic</span>, <span class=\"hljs-keyword\">copy</span>) <span class=\"hljs-keyword\">void</span> (^actionBlock)(<span class=\"hljs-keyword\">id</span>);\n\n<span class=\"hljs-keyword\">@end</span>\n\n<span class=\"hljs-built_in\">NS_ASSUME_NONNULL_END</span>\n</code></pre>\n<p>该段代码使用了<code>NS_ASSUME_NONNULL_BEGIN</code>,<code>NS_ASSUME_NONNULL_END</code> </p>\n<p>两个宏中间包含的属性,参数值,返回值,默认是 <code>nonnull</code> 类型.</p>\n<p>如果想要某个属性,参数值或者返回值为可选类型,则单独在该属性,参数值,或者返回值前单独标明<code>nullable</code>.</p>\n<h6 id=\"Code-2\"><a href=\"#Code-2\" class=\"headerlink\" title=\"Code\"></a>Code</h6><pre><code class=\"hljs cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">ifdef</span> __cplusplus</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> YY_EXTERN_C_BEGIN  extern <span class=\"hljs-meta-string\">&quot;C&quot;</span> &#123;</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> YY_EXTERN_C_END  &#125;</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">else</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> YY_EXTERN_C_BEGIN</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> YY_EXTERN_C_END</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">endif</span></span></code></pre>\n\n<h6 id=\"功能-2\"><a href=\"#功能-2\" class=\"headerlink\" title=\"功能\"></a>功能</h6><p>在C++环境中有定义 <code>__cplusplus</code> 这个宏,如果在C++环境中, <code>YY_EXTERN_C_BEGIN</code>和 <code>YY_EXTERN_C_END</code>中间的代码,编译器用C语言的编译格式来编译.因为 C++ 为了实现函数重载会把函数名和参数等联合起来合成一个中介的函数名，如果 C 函数也被这样编译会出问题.</p>\n<h6 id=\"Code-3\"><a href=\"#Code-3\" class=\"headerlink\" title=\"Code\"></a>Code</h6><pre><code class=\"hljs reasonml\">#ifndef YY_SWAP <span class=\"hljs-comment\">// swap two value</span>\n#define <span class=\"hljs-constructor\">YY_SWAP(<span class=\"hljs-params\">_a_</span>, <span class=\"hljs-params\">_b_</span>)</span>  <span class=\"hljs-keyword\">do</span> &#123; <span class=\"hljs-constructor\">__typeof__(<span class=\"hljs-params\">_a_</span>)</span> _tmp_ = (_a_); (_a_) = (_b_); (_b_) = _tmp_; &#125; <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">0</span>)\n#endif</code></pre>\n<h6 id=\"功能-3\"><a href=\"#功能-3\" class=\"headerlink\" title=\"功能\"></a>功能</h6><p>交换两个值</p>\n<h6 id=\"Code-4\"><a href=\"#Code-4\" class=\"headerlink\" title=\"Code\"></a>Code</h6><pre><code class=\"hljs angelscript\">#ifndef YYSYNTH_DUMMY_CLASS\n#define YYSYNTH_DUMMY_CLASS(_name_) \\\n@<span class=\"hljs-keyword\">interface</span> <span class=\"hljs-symbol\">YYSYNTH_DUMMY_CLASS_</span> ## <span class=\"hljs-symbol\">_name_</span> : <span class=\"hljs-symbol\">NSObject</span> @<span class=\"hljs-symbol\">end</span> \\\n@<span class=\"hljs-symbol\">implementation</span> <span class=\"hljs-symbol\">YYSYNTH_DUMMY_CLASS_</span> ## <span class=\"hljs-symbol\">_name_</span> @<span class=\"hljs-symbol\">end</span>\n#<span class=\"hljs-symbol\">endif</span></code></pre>\n\n<h6 id=\"功能-4\"><a href=\"#功能-4\" class=\"headerlink\" title=\"功能\"></a>功能</h6><p>如果条件成立,执行断言.</p>\n<h6 id=\"Code-5\"><a href=\"#Code-5\" class=\"headerlink\" title=\"Code\"></a>Code</h6><pre><code class=\"hljs angelscript\">#ifndef YYSYNTH_DUMMY_CLASS\n#define YYSYNTH_DUMMY_CLASS(_name_) \\\n@<span class=\"hljs-keyword\">interface</span> <span class=\"hljs-symbol\">YYSYNTH_DUMMY_CLASS_</span> ## <span class=\"hljs-symbol\">_name_</span> : <span class=\"hljs-symbol\">NSObject</span> @<span class=\"hljs-symbol\">end</span> \\\n@<span class=\"hljs-symbol\">implementation</span> <span class=\"hljs-symbol\">YYSYNTH_DUMMY_CLASS_</span> ## <span class=\"hljs-symbol\">_name_</span> @<span class=\"hljs-symbol\">end</span>\n#<span class=\"hljs-symbol\">endif</span></code></pre>\n\n<h6 id=\"功能-5\"><a href=\"#功能-5\" class=\"headerlink\" title=\"功能\"></a>功能</h6><p>在ios开发过程中，有时候会用到第三方的静态库(.a文件)，OC没有为每个函数（或者方法）定义链接符号，它只为每个类创建链接符号。这样当在一个静态库中使用类别来扩展已有类的时候，链接器不知道如何把类原有的方法和类别中的方法整合起来，就会导致你调用类别中的方法时，会出现selector not recognized的错误，从而导致app闪退。使用这段宏定义他可以虚拟新建一个与名字category 相同.h.m 让编译器 编译通过。即可解决上面的问题。</p>\n<h6 id=\"Code-6\"><a href=\"#Code-6\" class=\"headerlink\" title=\"Code\"></a>Code</h6><pre><code class=\"hljs less\"><span class=\"hljs-selector-id\">#ifndef</span> <span class=\"hljs-selector-tag\">YYSYNTH_DYNAMIC_PROPERTY_OBJECT</span>\n<span class=\"hljs-selector-id\">#define</span> <span class=\"hljs-selector-tag\">YYSYNTH_DYNAMIC_PROPERTY_OBJECT</span>(_getter_, _setter_, _association_, _type_) \\\n<span class=\"hljs-selector-tag\">-</span> (void)<span class=\"hljs-selector-tag\">_setter_</span> : (_type_)<span class=\"hljs-selector-tag\">object</span> &#123; \\\n    <span class=\"hljs-selector-attr\">[self willChangeValueForKey:@#_getter_]</span>; \\\n    <span class=\"hljs-selector-tag\">objc_setAssociatedObject</span>(self, _cmd, object, OBJC_ASSOCIATION_ ## _association_); \\\n    <span class=\"hljs-selector-attr\">[self didChangeValueForKey:@#_getter_]</span>; \\\n&#125; \\\n<span class=\"hljs-selector-tag\">-</span> (_type_)<span class=\"hljs-selector-tag\">_getter_</span> &#123; \\\n    <span class=\"hljs-selector-tag\">return</span> <span class=\"hljs-selector-tag\">objc_getAssociatedObject</span>(self, <span class=\"hljs-variable\">@selector</span>(<span class=\"hljs-attribute\">_setter_</span>:)); \\\n&#125;\n<span class=\"hljs-selector-id\">#endif</span></code></pre>\n\n<h6 id=\"功能-6\"><a href=\"#功能-6\" class=\"headerlink\" title=\"功能\"></a>功能</h6><p>使用runtime,合成类别中定义的属性的<code>Setter</code> 和 <code>Getter</code>方法.</p>\n<h6 id=\"Code-7\"><a href=\"#Code-7\" class=\"headerlink\" title=\"Code\"></a>Code</h6><pre><code class=\"hljs clean\">#ifndef weakify\n    #<span class=\"hljs-keyword\">if</span> DEBUG\n        #<span class=\"hljs-keyword\">if</span> __has_feature(objc_arc)\n        #define weakify(object) autoreleasepool&#123;&#125; __weak __typeof__(object) weak##_##object = object;\n        #else\n        #define weakify(object) autoreleasepool&#123;&#125; __block __typeof__(object) block##_##object = object;\n        #endif\n    #else\n        #<span class=\"hljs-keyword\">if</span> __has_feature(objc_arc)\n        #define weakify(object) try&#123;&#125; @finally&#123;&#125; &#123;&#125; __weak __typeof__(object) weak##_##object = object;\n        #else\n        #define weakify(object) try&#123;&#125; @finally&#123;&#125; &#123;&#125; __block __typeof__(object) block##_##object = object;\n        #endif\n    #endif\n#endif\n\n#ifndef strongify\n    #<span class=\"hljs-keyword\">if</span> DEBUG\n        #<span class=\"hljs-keyword\">if</span> __has_feature(objc_arc)\n        #define strongify(object) autoreleasepool&#123;&#125; __typeof__(object) object = weak##_##object;\n        #else\n        #define strongify(object) autoreleasepool&#123;&#125; __typeof__(object) object = block##_##object;\n        #endif\n    #else\n        #<span class=\"hljs-keyword\">if</span> __has_feature(objc_arc)\n        #define strongify(object) try&#123;&#125; @finally&#123;&#125; __typeof__(object) object = weak##_##object;\n        #else\n        #define strongify(object) try&#123;&#125; @finally&#123;&#125; __typeof__(object) object = block##_##object;\n        #endif\n    #endif\n#endif</code></pre>\n\n<h6 id=\"功能-7\"><a href=\"#功能-7\" class=\"headerlink\" title=\"功能\"></a>功能</h6><p>生成一个若引用或者强引用.</p>\n<p>Example:</p>\n<pre><code class=\"hljs elixir\"><span class=\"hljs-variable\">@weakify</span>(<span class=\"hljs-keyword\">self</span>)\n[<span class=\"hljs-keyword\">self</span> doSomething^&#123;\n    <span class=\"hljs-variable\">@strongify</span>(<span class=\"hljs-keyword\">self</span>)\n    if (!<span class=\"hljs-keyword\">self</span>) <span class=\"hljs-keyword\">return</span>;\n    ...\n&#125;];</code></pre>\n\n<h6 id=\"Code-8\"><a href=\"#Code-8\" class=\"headerlink\" title=\"Code\"></a>Code</h6><pre><code class=\"hljs cpp\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">inline</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">YYBenchmark</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">void</span> (^block)(<span class=\"hljs-keyword\">void</span>), <span class=\"hljs-keyword\">void</span> (^complete)(<span class=\"hljs-keyword\">double</span> ms))</span> </span>&#123;\n    <span class=\"hljs-comment\">// &lt;sys/time.h&gt; version</span>\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">timeval</span> <span class=\"hljs-title\">t0</span>, <span class=\"hljs-title\">t1</span>;</span>\n    gettimeofday(&amp;t0, <span class=\"hljs-literal\">NULL</span>);\n    block();\n    gettimeofday(&amp;t1, <span class=\"hljs-literal\">NULL</span>);\n    <span class=\"hljs-keyword\">double</span> ms = (<span class=\"hljs-keyword\">double</span>)(t1.tv_sec - t0.tv_sec) * <span class=\"hljs-number\">1e3</span> + (<span class=\"hljs-keyword\">double</span>)(t1.tv_usec - t0.tv_usec) * <span class=\"hljs-number\">1e-3</span>;\n    complete(ms);\n&#125;</code></pre>\n\n<h6 id=\"功能-8\"><a href=\"#功能-8\" class=\"headerlink\" title=\"功能\"></a>功能</h6><p>这个函数还是挺实用的,可以用来计算block内代码的执行时间,通过该函数来测试写的代码执行效率.</p>\n<p>返回值为毫秒,double类型.</p>\n<pre><code class=\"hljs excel\">/**\n Profile <span class=\"hljs-built_in\">time</span> cost.\n @param block     <span class=\"hljs-built_in\">code</span> to benchmark\n @param complete  <span class=\"hljs-built_in\">code</span> <span class=\"hljs-built_in\">time</span> cost (millisecond)\n \n Usa<span class=\"hljs-symbol\">ge:</span>\n    YYBenchmark(^&#123;\n        // <span class=\"hljs-built_in\">code</span>\n    &#125;, ^(double ms) &#123;\n        NSLog(<span class=\"hljs-string\">&quot;time cost: %.2f ms&quot;</span>,ms);\n    &#125;);\n \n */</code></pre>\n\n<h6 id=\"Code-9\"><a href=\"#Code-9\" class=\"headerlink\" title=\"Code\"></a>Code</h6><pre><code class=\"hljs objectivec\"><span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">inline</span> <span class=\"hljs-built_in\">NSDate</span> *_YYCompileTime(<span class=\"hljs-keyword\">const</span> <span class=\"hljs-keyword\">char</span> *data, <span class=\"hljs-keyword\">const</span> <span class=\"hljs-keyword\">char</span> *time) &#123;\n    <span class=\"hljs-built_in\">NSString</span> *timeStr = [<span class=\"hljs-built_in\">NSString</span> stringWithFormat:<span class=\"hljs-string\">@&quot;%s %s&quot;</span>,data,time];\n    <span class=\"hljs-built_in\">NSLocale</span> *locale = [[<span class=\"hljs-built_in\">NSLocale</span> alloc] initWithLocaleIdentifier:<span class=\"hljs-string\">@&quot;en_US&quot;</span>];\n    <span class=\"hljs-built_in\">NSDateFormatter</span> *formatter = [[<span class=\"hljs-built_in\">NSDateFormatter</span> alloc] init];\n    [formatter setDateFormat:<span class=\"hljs-string\">@&quot;MMM dd yyyy HH:mm:ss&quot;</span>];\n    [formatter setLocale:locale];\n    <span class=\"hljs-keyword\">return</span> [formatter dateFromString:timeStr];\n&#125;\n\n<span class=\"hljs-comment\">/**</span>\n<span class=\"hljs-comment\"> Get compile timestamp.</span>\n<span class=\"hljs-comment\"> @return A new date object set to the compile date and time.</span>\n<span class=\"hljs-comment\"> */</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">ifndef</span> YYCompileTime</span>\n<span class=\"hljs-comment\">// use macro to avoid compile warning when use pch file</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> YYCompileTime() _YYCompileTime(__DATE__, __TIME__)</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">endif</span></span></code></pre>\n\n<h6 id=\"功能-9\"><a href=\"#功能-9\" class=\"headerlink\" title=\"功能\"></a>功能</h6><p>获取编译开始时间.格式为”MMM dd yyyy HH:mm:ss”</p>\n<h6 id=\"Code-10\"><a href=\"#Code-10\" class=\"headerlink\" title=\"Code\"></a>Code</h6><pre><code class=\"hljs cpp\"><span class=\"hljs-comment\">/**</span>\n<span class=\"hljs-comment\"> Submits a block for execution on a main queue and waits until the block completes.</span>\n<span class=\"hljs-comment\"> */</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">inline</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">dispatch_sync_on_main_queue</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">void</span> (^block)(<span class=\"hljs-keyword\">void</span>))</span> </span>&#123;\n    <span class=\"hljs-keyword\">if</span> (pthread_main_np()) &#123;\n        block();\n    &#125; <span class=\"hljs-keyword\">else</span> &#123;\n        dispatch_sync(dispatch_get_main_queue(), block);\n    &#125;\n&#125;</code></pre>\n\n<h6 id=\"功能-10\"><a href=\"#功能-10\" class=\"headerlink\" title=\"功能\"></a>功能</h6><p>提交blcok到主队列同步执行.下面提交block到主队列异步执行,使用起来还是蛮方便的.</p>\n<h6 id=\"Code-NSArray-YYAdd\"><a href=\"#Code-NSArray-YYAdd\" class=\"headerlink\" title=\"Code (NSArray + YYAdd)\"></a>Code (NSArray + YYAdd)</h6><pre><code class=\"hljs axapta\"><span class=\"hljs-comment\">/**</span>\n<span class=\"hljs-comment\"> Reverse the index of object in this array.</span>\n<span class=\"hljs-comment\"> Example: Before @[ @1, @2, @3 ], After @[ @3, @2, @1 ].</span>\n<span class=\"hljs-comment\"> */</span>\n- (<span class=\"hljs-keyword\">void</span>)<span class=\"hljs-keyword\">reverse</span>;\n\n- (<span class=\"hljs-keyword\">void</span>)<span class=\"hljs-keyword\">reverse</span> &#123;\n    NSUInteger <span class=\"hljs-keyword\">count</span> = self.<span class=\"hljs-keyword\">count</span>;\n    <span class=\"hljs-keyword\">int</span> mid = floor(<span class=\"hljs-keyword\">count</span> / <span class=\"hljs-number\">2.0</span>);\n    <span class=\"hljs-keyword\">for</span> (NSUInteger i = <span class=\"hljs-number\">0</span>; i &lt; mid; i++) &#123;\n        [self exchangeObjectAtIndex:i withObjectAtIndex:(<span class=\"hljs-keyword\">count</span> - (i + <span class=\"hljs-number\">1</span>))];\n    &#125;\n&#125;</code></pre>\n<h6 id=\"功能-11\"><a href=\"#功能-11\" class=\"headerlink\" title=\"功能\"></a>功能</h6><p>数组翻转</p>\n<h6 id=\"Code-NSDate-YYADD\"><a href=\"#Code-NSDate-YYADD\" class=\"headerlink\" title=\"Code (NSDate + YYADD)\"></a>Code (NSDate + YYADD)</h6><pre><code class=\"hljs applescript\">/**\n Create data <span class=\"hljs-keyword\">from</span> <span class=\"hljs-keyword\">the</span> <span class=\"hljs-built_in\">file</span> <span class=\"hljs-keyword\">in</span> main bundle (similar <span class=\"hljs-keyword\">to</span> [UIImage imageNamed:]).\n \n @param <span class=\"hljs-built_in\">name</span> The <span class=\"hljs-built_in\">file</span> <span class=\"hljs-built_in\">name</span> (<span class=\"hljs-keyword\">in</span> main bundle).\n \n @<span class=\"hljs-literal\">return</span> A new data create <span class=\"hljs-keyword\">from</span> <span class=\"hljs-keyword\">the</span> <span class=\"hljs-built_in\">file</span>.\n */\n+ (nullable NSData *)dataNamed:(NSString *)<span class=\"hljs-built_in\">name</span>;</code></pre>\n\n<h6 id=\"功能-12\"><a href=\"#功能-12\" class=\"headerlink\" title=\"功能\"></a>功能</h6><p>返回main bundle 下指定文件的的二进制数据.</p>\n<h6 id=\"Code-NSNumber-YYAdd\"><a href=\"#Code-NSNumber-YYAdd\" class=\"headerlink\" title=\"Code (NSNumber + YYAdd)\"></a>Code (NSNumber + YYAdd)</h6><pre><code class=\"hljs nim\">/**\n <span class=\"hljs-type\">Creates</span> <span class=\"hljs-keyword\">and</span> returns an <span class=\"hljs-type\">NSNumber</span> <span class=\"hljs-keyword\">object</span> <span class=\"hljs-keyword\">from</span> a <span class=\"hljs-built_in\">string</span>.\n <span class=\"hljs-type\">Valid</span> format: @<span class=\"hljs-string\">&quot;12&quot;</span>, @<span class=\"hljs-string\">&quot;12.345&quot;</span>, @<span class=\"hljs-string\">&quot; -0xFF&quot;</span>, @<span class=\"hljs-string\">&quot; .23e99 &quot;</span>...\n \n @param <span class=\"hljs-built_in\">string</span>  <span class=\"hljs-type\">The</span> <span class=\"hljs-built_in\">string</span> described an number.\n \n @<span class=\"hljs-keyword\">return</span> an <span class=\"hljs-type\">NSNumber</span> <span class=\"hljs-keyword\">when</span> parse succeed, <span class=\"hljs-keyword\">or</span> <span class=\"hljs-keyword\">nil</span> <span class=\"hljs-keyword\">if</span> an error occurs.\n */\n+ (nullable <span class=\"hljs-type\">NSNumber</span> *)numberWithString:(<span class=\"hljs-type\">NSString</span> *)<span class=\"hljs-built_in\">string</span>;</code></pre>\n\n<h6 id=\"功能-13\"><a href=\"#功能-13\" class=\"headerlink\" title=\"功能\"></a>功能</h6><p>将一个字符串对象解析为NSNumber类型对象,很实用.</p>\n<h6 id=\"Code-NSObject-YYAdd\"><a href=\"#Code-NSObject-YYAdd\" class=\"headerlink\" title=\"Code (NSObject+YYAdd)\"></a>Code (NSObject+YYAdd)</h6><pre><code class=\"hljs haxe\">+ (BOOL)swizzleInstanceMethod:<span class=\"hljs-type\"></span>(SEL)originalSel with:<span class=\"hljs-type\"></span>(SEL)<span class=\"hljs-keyword\">new</span><span class=\"hljs-type\">Sel</span> &#123;\n    Method originalMethod = class_getInstanceMethod(self, originalSel);\n    Method <span class=\"hljs-keyword\">new</span><span class=\"hljs-type\">Method</span> = class_getInstanceMethod(self, <span class=\"hljs-keyword\">new</span><span class=\"hljs-type\">Sel</span>);\n    <span class=\"hljs-keyword\">if</span> (!originalMethod || !<span class=\"hljs-keyword\">new</span><span class=\"hljs-type\">Method</span>) <span class=\"hljs-keyword\">return</span> NO;\n    \n    class_addMethod(self,\n                    originalSel,\n                    class_getMethodImplementation(self, originalSel),\n                    method_getTypeEncoding(originalMethod));\n    class_addMethod(self,\n                    <span class=\"hljs-keyword\">new</span><span class=\"hljs-type\">Sel</span>,\n                    class_getMethodImplementation(self, <span class=\"hljs-keyword\">new</span><span class=\"hljs-type\">Sel</span>),\n                    method_getTypeEncoding(<span class=\"hljs-keyword\">new</span><span class=\"hljs-type\">Method</span>));\n    \n    method_exchangeImplementations(class_getInstanceMethod(self, originalSel),\n                                   class_getInstanceMethod(self, <span class=\"hljs-keyword\">new</span><span class=\"hljs-type\">Sel</span>));\n    <span class=\"hljs-keyword\">return</span> YES;\n&#125;</code></pre>\n\n<h6 id=\"功能-14\"><a href=\"#功能-14\" class=\"headerlink\" title=\"功能\"></a>功能</h6><p>runtime 黑魔法,方法实现交换.</p>\n<h6 id=\"Code-11\"><a href=\"#Code-11\" class=\"headerlink\" title=\"Code\"></a>Code</h6><pre><code class=\"hljs cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">pragma</span> clang diagnostic push</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">pragma</span> clang diagnostic ignored <span class=\"hljs-meta-string\">&quot;-相关命令&quot;</span></span>\n    <span class=\"hljs-comment\">//需要操作的代码</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">pragma</span> clang diagnostic pop</span></code></pre>\n\n<h6 id=\"功能-15\"><a href=\"#功能-15\" class=\"headerlink\" title=\"功能\"></a>功能</h6><p>消除编译器警告⚠️</p>\n<table>\n<thead>\n<tr>\n<th>相关命令</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>“-Wdeprecated-declarations”</td>\n<td>弃用的警告⚠️</td>\n</tr>\n<tr>\n<td>“-Wincompatible-pointer-types”</td>\n<td>不兼容指针类型⚠️</td>\n</tr>\n<tr>\n<td>“-Warc-retain-cycles”</td>\n<td>循环引用⚠️</td>\n</tr>\n<tr>\n<td>“-Wunused-variable”</td>\n<td>未使用变量 ⚠️</td>\n</tr>\n<tr>\n<td>“-Wcovered-switch-default”</td>\n<td>未使用default ⚠️</td>\n</tr>\n<tr>\n<td>…</td>\n<td>…</td>\n</tr>\n</tbody></table>\n<h6 id=\"Code-UIBarButtonItem-YYAdd\"><a href=\"#Code-UIBarButtonItem-YYAdd\" class=\"headerlink\" title=\"Code (UIBarButtonItem+YYAdd)\"></a>Code (UIBarButtonItem+YYAdd)</h6><pre><code class=\"hljs objectivec\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">@interface</span> <span class=\"hljs-title\">_YYUIBarButtonItemBlockTarget</span> : <span class=\"hljs-title\">NSObject</span></span>\n\n<span class=\"hljs-keyword\">@property</span> (<span class=\"hljs-keyword\">nonatomic</span>, <span class=\"hljs-keyword\">copy</span>) <span class=\"hljs-keyword\">void</span> (^block)(<span class=\"hljs-keyword\">id</span> sender);\n\n- (<span class=\"hljs-keyword\">id</span>)initWithBlock:(<span class=\"hljs-keyword\">void</span> (^)(<span class=\"hljs-keyword\">id</span> sender))block;\n- (<span class=\"hljs-keyword\">void</span>)invoke:(<span class=\"hljs-keyword\">id</span>)sender;\n\n<span class=\"hljs-keyword\">@end</span>\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">@implementation</span> <span class=\"hljs-title\">_YYUIBarButtonItemBlockTarget</span></span>\n\n- (<span class=\"hljs-keyword\">id</span>)initWithBlock:(<span class=\"hljs-keyword\">void</span> (^)(<span class=\"hljs-keyword\">id</span> sender))block&#123;\n    <span class=\"hljs-keyword\">self</span> = [<span class=\"hljs-keyword\">super</span> init];\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">self</span>) &#123;\n        _block = [block <span class=\"hljs-keyword\">copy</span>];\n    &#125;\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">self</span>;\n&#125;\n\n- (<span class=\"hljs-keyword\">void</span>)invoke:(<span class=\"hljs-keyword\">id</span>)sender &#123;\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">self</span>.block) <span class=\"hljs-keyword\">self</span>.block(sender);\n&#125;\n\n<span class=\"hljs-keyword\">@end</span>\n\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">@implementation</span> <span class=\"hljs-title\">UIBarButtonItem</span> (<span class=\"hljs-title\">YYAdd</span>)</span>\n\n- (<span class=\"hljs-keyword\">void</span>)setActionBlock:(<span class=\"hljs-keyword\">void</span> (^)(<span class=\"hljs-keyword\">id</span> sender))block &#123;\n    _YYUIBarButtonItemBlockTarget *target = [[_YYUIBarButtonItemBlockTarget alloc] initWithBlock:block];\n    objc_setAssociatedObject(<span class=\"hljs-keyword\">self</span>, &amp;block_key, target, OBJC_ASSOCIATION_RETAIN_NONATOMIC);\n    \n    [<span class=\"hljs-keyword\">self</span> setTarget:target];\n    [<span class=\"hljs-keyword\">self</span> setAction:<span class=\"hljs-keyword\">@selector</span>(invoke:)];\n&#125;\n\n- (<span class=\"hljs-keyword\">void</span> (^)(<span class=\"hljs-keyword\">id</span>)) actionBlock &#123;\n    _YYUIBarButtonItemBlockTarget *target = objc_getAssociatedObject(<span class=\"hljs-keyword\">self</span>, &amp;block_key);\n    <span class=\"hljs-keyword\">return</span> target.block;\n&#125;</code></pre>\n\n<h6 id=\"功能-16\"><a href=\"#功能-16\" class=\"headerlink\" title=\"功能\"></a>功能</h6><p>通过创建一个中间对象,让UIBarButtonItem的Target指向该对象,同时让self 调用该对象的方法.来达到点击事件调用block而无需再设置selector的目的.</p>\n<p>通过这种方式,<code>YYCategories</code>将多种类似点击控件,调用selector的方式,修改为block.</p>\n<blockquote>\n<p><strong>注意</strong> 使用block给控件添加点击事件后,就不能再给该控件添加selector,否则会引起冲突.</p>\n</blockquote>\n<h6 id=\"Code-UIColor-YYAdd\"><a href=\"#Code-UIColor-YYAdd\" class=\"headerlink\" title=\"Code  (UIColor+YYAdd)\"></a>Code  (UIColor+YYAdd)</h6><pre><code class=\"hljs cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">ifndef</span> UIColorHex</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> UIColorHex(_hex_)   [UIColor colorWithHexString:((__bridge NSString *)CFSTR(#_hex_))]</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">endif</span></span></code></pre>\n<h6 id=\"功能-17\"><a href=\"#功能-17\" class=\"headerlink\" title=\"功能\"></a>功能</h6><p>16进制颜色转换<br>Example: UIColorHex(0xF0F), UIColorHex(66ccff), UIColorHex(#66CCFF88)<br>支持的格式是如此之多, #RGB #RGBA #RRGGBB #RRGGBBAA 0xRGB …</p>\n<h6 id=\"Code-UIImage-YYAdd\"><a href=\"#Code-UIImage-YYAdd\" class=\"headerlink\" title=\"Code  (UIImage+YYAdd)\"></a>Code  (UIImage+YYAdd)</h6><pre><code class=\"hljs objectivec\"><span class=\"hljs-comment\">/**</span>\n<span class=\"hljs-comment\"> Returns a new rotated image (relative to the center).</span>\n<span class=\"hljs-comment\"> </span>\n<span class=\"hljs-comment\"> @param radians   Rotated radians in counterclockwise.⟲</span>\n<span class=\"hljs-comment\"> </span>\n<span class=\"hljs-comment\"> @param fitSize   YES: new image&#x27;s size is extend to fit all content.</span>\n<span class=\"hljs-comment\">                  NO: image&#x27;s size will not change, content may be clipped.</span>\n<span class=\"hljs-comment\"> */</span>\n- (<span class=\"hljs-keyword\">nullable</span> <span class=\"hljs-built_in\">UIImage</span> *)imageByRotate:(<span class=\"hljs-built_in\">CGFloat</span>)radians fitSize:(<span class=\"hljs-built_in\">BOOL</span>)fitSize;</code></pre>\n\n<h6 id=\"功能-18\"><a href=\"#功能-18\" class=\"headerlink\" title=\"功能\"></a>功能</h6><p>图片翻转,超级实用<br>…</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p><code>YYCategories</code>中对<code>UIKit</code>, <code>Foundation</code>, <code>Quartz</code>中的常用类添加分类,里面还有好多实用的API来供我们项目开发使用,想要进一步了解并使用其中的API,可以参阅<code>YYCategories</code>中的头文件.</p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p><a href=\"https://github.com/ibireme/YYCategories\">YYCategories</a><br><a href=\"http://clang.llvm.org/docs/UsersManual.html#diagnostics_pragmas\">clang.llvm.org</a></p>\n","site":{"data":{"fluid_static_prefix":{"internal_js":"/js","internal_css":"/css","internal_img":"/img","iconfont":"//at.alicdn.com/t/font_1736178_kmeydafke9r.css","anchor":"https://cdn.staticfile.org/anchor-js/4.2.2/","github_markdown":"https://cdn.staticfile.org/github-markdown-css/4.0.0/","jquery":"https://cdn.staticfile.org/jquery/3.4.1/","bootstrap":"https://cdn.staticfile.org/twitter-bootstrap/4.4.1/","highlightjs":"https://cdn.staticfile.org/highlight.js/10.0.0/","prismjs":"https://cdn.staticfile.org/prism/1.21.0/","tocbot":"https://cdn.staticfile.org/tocbot/4.11.1/","typed":"https://cdn.staticfile.org/typed.js/2.0.11/","fancybox":"https://cdn.staticfile.org/fancybox/3.5.7/","mathjax":"https://cdn.staticfile.org/mathjax/3.0.5/es5/","katex":"https://cdn.staticfile.org/KaTeX/0.11.1/","aplayer":"https://cdn.staticfile.org/aplayer/1.10.1/","busuanzi":"https://busuanzi.ibruce.info/busuanzi/2.3/","clipboard":"https://cdn.staticfile.org/clipboard.js/2.0.6/","mermaid":"https://cdn.staticfile.org/mermaid/8.5.0/","valine":"https://cdn.staticfile.org/valine/1.4.14/","gitalk":"https://cdn.staticfile.org/gitalk/1.6.2/","blueimp_md5":"https://cdn.staticfile.org/blueimp-md5/2.13.0/","disqusjs":"https://cdn.jsdelivr.net/npm/disqusjs@1.0/dist/","hint":"/lib/hint/"},"fluid_config":{"favicon":"/img/favicon.png","apple_touch_icon":"/img/favicon.png","title_join_string":" - ","force_https":false,"code":{"copy_btn":true,"highlight":{"enable":true,"lib":"highlightjs","highlightjs":{"style":"Github Gist","bg_color":false},"prismjs":{"style":"default","preprocess":true}}},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"_","loop":false},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"right","visible":"hover","icon":""},"mouse_click":{"enable":false,"style":"values"}},"dark_mode":{"enable":true,"default":"auto"},"color":{"body_bg_color":"#eee","body_bg_color_dark":"#181c27","navbar_bg_color":"#2f4154","navbar_bg_color_dark":"#1f3144","navbar_text_color":"#fff","navbar_text_color_dark":"#d0d0d0","text_color":"#3c4858","text_color_dark":"#c4c6c9","sec_text_color":"#718096","sec_text_color_dark":"#a7a9ad","post_text_color":"#2c3e50","post_text_color_dark":"#c4c6c9","post_heading_color":"#1a202c","post_heading_color_dark":"#c4c6c9","post_link_color":"#0366d6","post_link_color_dark":"#1589e9","link_hover_color":"#30a9de","link_hover_color_dark":"#30a9de","link_hover_bg_color":"#f8f9fa","link_hover_bg_color_dark":"#364151","board_color":"#fff","board_color_dark":"#252d38"},"font":{"font_size":"16px","font_family":null,"code_font_size":"85%"},"custom_js":null,"custom_css":null,"custom_html":"","web_analytics":{"enable":false,"baidu":null,"google":null,"gtag":null,"tencent":{"sid":null,"cid":null},"woyaola":null,"cnzz":null,"leancloud":{"app_id":null,"app_key":null,"server_url":null}},"lazyload":{"enable":true,"onlypost":false},"daovoice":{"enable":false,"appid":""},"aplayer":{"enable":false,"autoplay":false,"loop":"all","order":"random","theme":"#b7daff","songs":[{"name":"name","artist":"artist","url":"/songs/test.mp3","cover":"/img/cover.jpg"},{"name":"name","artist":"artist","url":"https://...url.mp3","cover":"https://...cover.jpg"}]},"version":{"check":false},"navbar":{"blog_title":"吃面多放葱","ground_glass":{"enable":false,"px":3,"alpha":0.7},"menu":[{"key":"home","link":"/","icon":"iconfont icon-home-fill"},{"key":"category","link":"/categories/","icon":"iconfont icon-category-fill"},{"key":"tag","link":"/tags/","icon":"iconfont icon-tags-fill"},{"key":"about","link":"/about/","icon":"iconfont icon-user-fill"}]},"search":{"enable":true,"path":"/local-search.xml","generate_path":"/local-search.xml","field":"post","content":true},"scroll_down_arrow":{"enable":true,"banner_height_limit":90,"scroll_after_turning_page":true},"banner_parallax":true,"footer":{"statistics":{"enable":false,"source":"busuanzi","pv_format":"总访问量 {} 次","uv_format":"总访客数 {} 人"},"beian":{"enable":false,"icp_text":"京ICP证123456号","police_text":"京公网安备12345678号","police_code":12345678,"police_icon":"/img/police_beian.png"}},"scroll_top_arrow":{"enable":true},"index":{"banner_img":"/img/default.png","banner_img_height":100,"banner_mask_alpha":0.3,"post_default_img":"","slogan":{"enable":true,"text":"像蚂蚁一样工作，像蝴蝶一样生活"},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"category":true,"tag":true}},"page":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3},"post":{"banner_img":"/img/default.png","banner_img_height":70,"banner_mask_alpha":0.3,"meta":{"author":{"enable":false},"date":{"enable":true,"format":"LL a"},"wordcount":{"enable":true,"format":"{} 字"},"min2read":{"enable":true,"format":"{} 分钟","words":100},"views":{"enable":false,"source":"busuanzi","format":"{} 次"}},"updated":{"enable":false,"content":"本文最后更新于：","relative":false},"toc":{"enable":true,"headingSelector":"h1,h2,h3,h4,h5,h6","collapseDepth":0},"copyright":{"enable":true,"content":"本博客所有文章除特别声明外，均采用 <a href=\"https://creativecommons.org/licenses/by-sa/4.0/deed.zh\" rel=\"nofollow noopener\">CC BY-SA 4.0 协议</a> ，转载请注明出处！"},"prev_next":{"enable":true},"custom":{"enable":false,"content":"<img src=\"https://octodex.github.com/images/jetpacktocat.png\" class=\"rounded mx-auto d-block mt-5\" style=\"width:150px; height:150px;\">"},"image_zoom":{"enable":true},"footnote":{"enable":true,"header":""},"math":{"enable":false,"specific":false,"engine":"mathjax"},"mermaid":{"enable":false,"specific":false,"options":{"theme":"default"}},"comments":{"enable":false,"type":"disqus"}},"utterances":{"repo":null,"issue_term":"pathname","label":"utterances","theme":"github-light","theme_dark":"github-dark","crossorigin":"anonymous"},"disqus":{"shortname":null,"disqusjs":false,"apikey":null},"gitalk":{"clientID":null,"clientSecret":null,"repo":null,"owner":null,"admin":["name"],"id":"location.pathname","language":"zh-CN","labels":["Gitalk"],"perPage":10,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true},"valine":{"appid":null,"appkey":null,"placeholder":"说点什么","path":"window.location.pathname","avatar":"retro","meta":["nick","mail","link"],"pageSize":10,"lang":"zh-CN","highlight":false,"recordIP":false,"serverURLs":null},"changyan":{"appid":"","appkey":""},"livere":{"uid":""},"remark42":{"host":"https://remark.haoyizebo.com","site_id":"haoyizebo","max_shown_comments":10,"locale":"zh"},"archive":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null},"category":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"post_limit":10,"order_by":"-length","collapse_depth":0},"tag":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null,"tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"avatar":"/img/avatar.png","name":"蔺国防","introduce":"移动应用开发者，历史文学爱好者","icons":[{"class":"iconfont icon-github-fill","link":"https://github.com","tip":"GitHub"},{"class":"iconfont icon-douban-fill","link":"https://douban.com","tip":"豆瓣"},{"class":"iconfont icon-wechat-fill","qrcode":"/img/favicon.png"}]},"page404":{"banner_img":"/img/default.png","banner_img_height":85,"banner_mask_alpha":0.3,"subtitle":"Page not found"},"links":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"items":[{"title":"Fluid Docs","intro":"主题使用指南","link":"https://hexo.fluid-dev.com/docs/","image":"/img/favicon.png"},{"title":"Fluid Repo","intro":"主题 GitHub 仓库","link":"https://github.com/fluid-dev/hexo-theme-fluid","image":"/img/favicon.png"},{"title":"Fluid Example","intro":"主题操作示例","link":"https://hexo.fluid-dev.com/docs/example/","image":"/img/favicon.png"}]}}}},"excerpt":"","more":"<h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><p>功能丰富的 Category 类型工具库</p>\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><h6 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h6><pre><code class=\"hljs cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">if</span> __has_include(<span class=\"hljs-meta-string\">&lt;YYCategories/YYCategories.h&gt;)</span></span>\n<span class=\"hljs-meta\">#import <span class=\"hljs-meta-string\">&lt;YYCategories/YYCategoriesMacro.h&gt;</span></span>\n<span class=\"hljs-meta\">#import <span class=\"hljs-meta-string\">&lt;YYCategories/NSObject+YYAdd.h&gt;</span></span>\n...\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">else</span></span>\n<span class=\"hljs-meta\">#import <span class=\"hljs-meta-string\">&quot;YYCategoriesMacro.h&quot;</span></span>\n<span class=\"hljs-meta\">#import <span class=\"hljs-meta-string\">&quot;NSObject+YYAdd.h&quot;</span></span>\n...\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">endif</span></span></code></pre>\n<h6 id=\"功能\"><a href=\"#功能\" class=\"headerlink\" title=\"功能\"></a>功能</h6><p>这样做可以提高编译效率.如果指定文件路径,则搜索的更快一些.<br>一般我们使用YYCategories导入的时候都是库文件,所以指定目录位置搜索更快一些</p>\n<pre><code class=\"hljs xl\">＃<span class=\"hljs-keyword\">import</span> &lt; &gt; 引用系统文件，它用于对系统自带的头文件的引用，编译器会在系统文件目录下去查找该文件.\n#<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">&quot; &quot;</span>  用户自定义的文件用双引号引用，编译器首先会在用户目录下查找，然后到安装目录中查</code></pre>\n\n<hr>\n<h6 id=\"Code-1\"><a href=\"#Code-1\" class=\"headerlink\" title=\"Code\"></a>Code</h6><pre><code class=\"hljs cpp\">FOUNDATION_EXPORT <span class=\"hljs-keyword\">double</span> YYCategoriesVersionNumber;\nFOUNDATION_EXPORT <span class=\"hljs-keyword\">const</span> <span class=\"hljs-keyword\">unsigned</span> <span class=\"hljs-keyword\">char</span> YYCategoriesVersionString[];</code></pre>\n\n<h6 id=\"功能-1\"><a href=\"#功能-1\" class=\"headerlink\" title=\"功能\"></a>功能</h6><p>例如比较两个字符串</p>\n<p><code>FOUNDATION_EXPORT</code> 直接使用<code>stringInstance == MyFirstConstant</code>来比较,比较的是指针地址<br><code>define</code>使用<code>[stringInstance isEqualToString:MyFirstConstant]</code><br>比较字符串的每一个字符是否相等<br><code>FOUNDATION_EXPORT</code>效率更高</p>\n<pre><code class=\"hljs objectivec\">\n<span class=\"hljs-built_in\">NS_ASSUME_NONNULL_BEGIN</span>\n\n<span class=\"hljs-comment\">/**</span>\n<span class=\"hljs-comment\"> Provides extensions for `UIBarButtonItem`.</span>\n<span class=\"hljs-comment\"> */</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">@interface</span> <span class=\"hljs-title\">UIBarButtonItem</span> (<span class=\"hljs-title\">YYAdd</span>)</span>\n\n<span class=\"hljs-comment\">/**</span>\n<span class=\"hljs-comment\"> The block that invoked when the item is selected. The objects captured by block</span>\n<span class=\"hljs-comment\"> will retained by the ButtonItem.</span>\n<span class=\"hljs-comment\"> </span>\n<span class=\"hljs-comment\"> @discussion This param is conflict with `target` and `action` property.</span>\n<span class=\"hljs-comment\"> Set this will set `target` and `action` property to some internal objects.</span>\n<span class=\"hljs-comment\"> */</span>\n<span class=\"hljs-keyword\">@property</span> (<span class=\"hljs-keyword\">nullable</span>, <span class=\"hljs-keyword\">nonatomic</span>, <span class=\"hljs-keyword\">copy</span>) <span class=\"hljs-keyword\">void</span> (^actionBlock)(<span class=\"hljs-keyword\">id</span>);\n\n<span class=\"hljs-keyword\">@end</span>\n\n<span class=\"hljs-built_in\">NS_ASSUME_NONNULL_END</span>\n</code></pre>\n<p>该段代码使用了<code>NS_ASSUME_NONNULL_BEGIN</code>,<code>NS_ASSUME_NONNULL_END</code> </p>\n<p>两个宏中间包含的属性,参数值,返回值,默认是 <code>nonnull</code> 类型.</p>\n<p>如果想要某个属性,参数值或者返回值为可选类型,则单独在该属性,参数值,或者返回值前单独标明<code>nullable</code>.</p>\n<h6 id=\"Code-2\"><a href=\"#Code-2\" class=\"headerlink\" title=\"Code\"></a>Code</h6><pre><code class=\"hljs cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">ifdef</span> __cplusplus</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> YY_EXTERN_C_BEGIN  extern <span class=\"hljs-meta-string\">&quot;C&quot;</span> &#123;</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> YY_EXTERN_C_END  &#125;</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">else</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> YY_EXTERN_C_BEGIN</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> YY_EXTERN_C_END</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">endif</span></span></code></pre>\n\n<h6 id=\"功能-2\"><a href=\"#功能-2\" class=\"headerlink\" title=\"功能\"></a>功能</h6><p>在C++环境中有定义 <code>__cplusplus</code> 这个宏,如果在C++环境中, <code>YY_EXTERN_C_BEGIN</code>和 <code>YY_EXTERN_C_END</code>中间的代码,编译器用C语言的编译格式来编译.因为 C++ 为了实现函数重载会把函数名和参数等联合起来合成一个中介的函数名，如果 C 函数也被这样编译会出问题.</p>\n<h6 id=\"Code-3\"><a href=\"#Code-3\" class=\"headerlink\" title=\"Code\"></a>Code</h6><pre><code class=\"hljs reasonml\">#ifndef YY_SWAP <span class=\"hljs-comment\">// swap two value</span>\n#define <span class=\"hljs-constructor\">YY_SWAP(<span class=\"hljs-params\">_a_</span>, <span class=\"hljs-params\">_b_</span>)</span>  <span class=\"hljs-keyword\">do</span> &#123; <span class=\"hljs-constructor\">__typeof__(<span class=\"hljs-params\">_a_</span>)</span> _tmp_ = (_a_); (_a_) = (_b_); (_b_) = _tmp_; &#125; <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">0</span>)\n#endif</code></pre>\n<h6 id=\"功能-3\"><a href=\"#功能-3\" class=\"headerlink\" title=\"功能\"></a>功能</h6><p>交换两个值</p>\n<h6 id=\"Code-4\"><a href=\"#Code-4\" class=\"headerlink\" title=\"Code\"></a>Code</h6><pre><code class=\"hljs angelscript\">#ifndef YYSYNTH_DUMMY_CLASS\n#define YYSYNTH_DUMMY_CLASS(_name_) \\\n@<span class=\"hljs-keyword\">interface</span> <span class=\"hljs-symbol\">YYSYNTH_DUMMY_CLASS_</span> ## <span class=\"hljs-symbol\">_name_</span> : <span class=\"hljs-symbol\">NSObject</span> @<span class=\"hljs-symbol\">end</span> \\\n@<span class=\"hljs-symbol\">implementation</span> <span class=\"hljs-symbol\">YYSYNTH_DUMMY_CLASS_</span> ## <span class=\"hljs-symbol\">_name_</span> @<span class=\"hljs-symbol\">end</span>\n#<span class=\"hljs-symbol\">endif</span></code></pre>\n\n<h6 id=\"功能-4\"><a href=\"#功能-4\" class=\"headerlink\" title=\"功能\"></a>功能</h6><p>如果条件成立,执行断言.</p>\n<h6 id=\"Code-5\"><a href=\"#Code-5\" class=\"headerlink\" title=\"Code\"></a>Code</h6><pre><code class=\"hljs angelscript\">#ifndef YYSYNTH_DUMMY_CLASS\n#define YYSYNTH_DUMMY_CLASS(_name_) \\\n@<span class=\"hljs-keyword\">interface</span> <span class=\"hljs-symbol\">YYSYNTH_DUMMY_CLASS_</span> ## <span class=\"hljs-symbol\">_name_</span> : <span class=\"hljs-symbol\">NSObject</span> @<span class=\"hljs-symbol\">end</span> \\\n@<span class=\"hljs-symbol\">implementation</span> <span class=\"hljs-symbol\">YYSYNTH_DUMMY_CLASS_</span> ## <span class=\"hljs-symbol\">_name_</span> @<span class=\"hljs-symbol\">end</span>\n#<span class=\"hljs-symbol\">endif</span></code></pre>\n\n<h6 id=\"功能-5\"><a href=\"#功能-5\" class=\"headerlink\" title=\"功能\"></a>功能</h6><p>在ios开发过程中，有时候会用到第三方的静态库(.a文件)，OC没有为每个函数（或者方法）定义链接符号，它只为每个类创建链接符号。这样当在一个静态库中使用类别来扩展已有类的时候，链接器不知道如何把类原有的方法和类别中的方法整合起来，就会导致你调用类别中的方法时，会出现selector not recognized的错误，从而导致app闪退。使用这段宏定义他可以虚拟新建一个与名字category 相同.h.m 让编译器 编译通过。即可解决上面的问题。</p>\n<h6 id=\"Code-6\"><a href=\"#Code-6\" class=\"headerlink\" title=\"Code\"></a>Code</h6><pre><code class=\"hljs less\"><span class=\"hljs-selector-id\">#ifndef</span> <span class=\"hljs-selector-tag\">YYSYNTH_DYNAMIC_PROPERTY_OBJECT</span>\n<span class=\"hljs-selector-id\">#define</span> <span class=\"hljs-selector-tag\">YYSYNTH_DYNAMIC_PROPERTY_OBJECT</span>(_getter_, _setter_, _association_, _type_) \\\n<span class=\"hljs-selector-tag\">-</span> (void)<span class=\"hljs-selector-tag\">_setter_</span> : (_type_)<span class=\"hljs-selector-tag\">object</span> &#123; \\\n    <span class=\"hljs-selector-attr\">[self willChangeValueForKey:@#_getter_]</span>; \\\n    <span class=\"hljs-selector-tag\">objc_setAssociatedObject</span>(self, _cmd, object, OBJC_ASSOCIATION_ ## _association_); \\\n    <span class=\"hljs-selector-attr\">[self didChangeValueForKey:@#_getter_]</span>; \\\n&#125; \\\n<span class=\"hljs-selector-tag\">-</span> (_type_)<span class=\"hljs-selector-tag\">_getter_</span> &#123; \\\n    <span class=\"hljs-selector-tag\">return</span> <span class=\"hljs-selector-tag\">objc_getAssociatedObject</span>(self, <span class=\"hljs-variable\">@selector</span>(<span class=\"hljs-attribute\">_setter_</span>:)); \\\n&#125;\n<span class=\"hljs-selector-id\">#endif</span></code></pre>\n\n<h6 id=\"功能-6\"><a href=\"#功能-6\" class=\"headerlink\" title=\"功能\"></a>功能</h6><p>使用runtime,合成类别中定义的属性的<code>Setter</code> 和 <code>Getter</code>方法.</p>\n<h6 id=\"Code-7\"><a href=\"#Code-7\" class=\"headerlink\" title=\"Code\"></a>Code</h6><pre><code class=\"hljs clean\">#ifndef weakify\n    #<span class=\"hljs-keyword\">if</span> DEBUG\n        #<span class=\"hljs-keyword\">if</span> __has_feature(objc_arc)\n        #define weakify(object) autoreleasepool&#123;&#125; __weak __typeof__(object) weak##_##object = object;\n        #else\n        #define weakify(object) autoreleasepool&#123;&#125; __block __typeof__(object) block##_##object = object;\n        #endif\n    #else\n        #<span class=\"hljs-keyword\">if</span> __has_feature(objc_arc)\n        #define weakify(object) try&#123;&#125; @finally&#123;&#125; &#123;&#125; __weak __typeof__(object) weak##_##object = object;\n        #else\n        #define weakify(object) try&#123;&#125; @finally&#123;&#125; &#123;&#125; __block __typeof__(object) block##_##object = object;\n        #endif\n    #endif\n#endif\n\n#ifndef strongify\n    #<span class=\"hljs-keyword\">if</span> DEBUG\n        #<span class=\"hljs-keyword\">if</span> __has_feature(objc_arc)\n        #define strongify(object) autoreleasepool&#123;&#125; __typeof__(object) object = weak##_##object;\n        #else\n        #define strongify(object) autoreleasepool&#123;&#125; __typeof__(object) object = block##_##object;\n        #endif\n    #else\n        #<span class=\"hljs-keyword\">if</span> __has_feature(objc_arc)\n        #define strongify(object) try&#123;&#125; @finally&#123;&#125; __typeof__(object) object = weak##_##object;\n        #else\n        #define strongify(object) try&#123;&#125; @finally&#123;&#125; __typeof__(object) object = block##_##object;\n        #endif\n    #endif\n#endif</code></pre>\n\n<h6 id=\"功能-7\"><a href=\"#功能-7\" class=\"headerlink\" title=\"功能\"></a>功能</h6><p>生成一个若引用或者强引用.</p>\n<p>Example:</p>\n<pre><code class=\"hljs elixir\"><span class=\"hljs-variable\">@weakify</span>(<span class=\"hljs-keyword\">self</span>)\n[<span class=\"hljs-keyword\">self</span> doSomething^&#123;\n    <span class=\"hljs-variable\">@strongify</span>(<span class=\"hljs-keyword\">self</span>)\n    if (!<span class=\"hljs-keyword\">self</span>) <span class=\"hljs-keyword\">return</span>;\n    ...\n&#125;];</code></pre>\n\n<h6 id=\"Code-8\"><a href=\"#Code-8\" class=\"headerlink\" title=\"Code\"></a>Code</h6><pre><code class=\"hljs cpp\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">inline</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">YYBenchmark</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">void</span> (^block)(<span class=\"hljs-keyword\">void</span>), <span class=\"hljs-keyword\">void</span> (^complete)(<span class=\"hljs-keyword\">double</span> ms))</span> </span>&#123;\n    <span class=\"hljs-comment\">// &lt;sys/time.h&gt; version</span>\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">timeval</span> <span class=\"hljs-title\">t0</span>, <span class=\"hljs-title\">t1</span>;</span>\n    gettimeofday(&amp;t0, <span class=\"hljs-literal\">NULL</span>);\n    block();\n    gettimeofday(&amp;t1, <span class=\"hljs-literal\">NULL</span>);\n    <span class=\"hljs-keyword\">double</span> ms = (<span class=\"hljs-keyword\">double</span>)(t1.tv_sec - t0.tv_sec) * <span class=\"hljs-number\">1e3</span> + (<span class=\"hljs-keyword\">double</span>)(t1.tv_usec - t0.tv_usec) * <span class=\"hljs-number\">1e-3</span>;\n    complete(ms);\n&#125;</code></pre>\n\n<h6 id=\"功能-8\"><a href=\"#功能-8\" class=\"headerlink\" title=\"功能\"></a>功能</h6><p>这个函数还是挺实用的,可以用来计算block内代码的执行时间,通过该函数来测试写的代码执行效率.</p>\n<p>返回值为毫秒,double类型.</p>\n<pre><code class=\"hljs excel\">/**\n Profile <span class=\"hljs-built_in\">time</span> cost.\n @param block     <span class=\"hljs-built_in\">code</span> to benchmark\n @param complete  <span class=\"hljs-built_in\">code</span> <span class=\"hljs-built_in\">time</span> cost (millisecond)\n \n Usa<span class=\"hljs-symbol\">ge:</span>\n    YYBenchmark(^&#123;\n        // <span class=\"hljs-built_in\">code</span>\n    &#125;, ^(double ms) &#123;\n        NSLog(<span class=\"hljs-string\">&quot;time cost: %.2f ms&quot;</span>,ms);\n    &#125;);\n \n */</code></pre>\n\n<h6 id=\"Code-9\"><a href=\"#Code-9\" class=\"headerlink\" title=\"Code\"></a>Code</h6><pre><code class=\"hljs objectivec\"><span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">inline</span> <span class=\"hljs-built_in\">NSDate</span> *_YYCompileTime(<span class=\"hljs-keyword\">const</span> <span class=\"hljs-keyword\">char</span> *data, <span class=\"hljs-keyword\">const</span> <span class=\"hljs-keyword\">char</span> *time) &#123;\n    <span class=\"hljs-built_in\">NSString</span> *timeStr = [<span class=\"hljs-built_in\">NSString</span> stringWithFormat:<span class=\"hljs-string\">@&quot;%s %s&quot;</span>,data,time];\n    <span class=\"hljs-built_in\">NSLocale</span> *locale = [[<span class=\"hljs-built_in\">NSLocale</span> alloc] initWithLocaleIdentifier:<span class=\"hljs-string\">@&quot;en_US&quot;</span>];\n    <span class=\"hljs-built_in\">NSDateFormatter</span> *formatter = [[<span class=\"hljs-built_in\">NSDateFormatter</span> alloc] init];\n    [formatter setDateFormat:<span class=\"hljs-string\">@&quot;MMM dd yyyy HH:mm:ss&quot;</span>];\n    [formatter setLocale:locale];\n    <span class=\"hljs-keyword\">return</span> [formatter dateFromString:timeStr];\n&#125;\n\n<span class=\"hljs-comment\">/**</span>\n<span class=\"hljs-comment\"> Get compile timestamp.</span>\n<span class=\"hljs-comment\"> @return A new date object set to the compile date and time.</span>\n<span class=\"hljs-comment\"> */</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">ifndef</span> YYCompileTime</span>\n<span class=\"hljs-comment\">// use macro to avoid compile warning when use pch file</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> YYCompileTime() _YYCompileTime(__DATE__, __TIME__)</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">endif</span></span></code></pre>\n\n<h6 id=\"功能-9\"><a href=\"#功能-9\" class=\"headerlink\" title=\"功能\"></a>功能</h6><p>获取编译开始时间.格式为”MMM dd yyyy HH:mm:ss”</p>\n<h6 id=\"Code-10\"><a href=\"#Code-10\" class=\"headerlink\" title=\"Code\"></a>Code</h6><pre><code class=\"hljs cpp\"><span class=\"hljs-comment\">/**</span>\n<span class=\"hljs-comment\"> Submits a block for execution on a main queue and waits until the block completes.</span>\n<span class=\"hljs-comment\"> */</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">inline</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">dispatch_sync_on_main_queue</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">void</span> (^block)(<span class=\"hljs-keyword\">void</span>))</span> </span>&#123;\n    <span class=\"hljs-keyword\">if</span> (pthread_main_np()) &#123;\n        block();\n    &#125; <span class=\"hljs-keyword\">else</span> &#123;\n        dispatch_sync(dispatch_get_main_queue(), block);\n    &#125;\n&#125;</code></pre>\n\n<h6 id=\"功能-10\"><a href=\"#功能-10\" class=\"headerlink\" title=\"功能\"></a>功能</h6><p>提交blcok到主队列同步执行.下面提交block到主队列异步执行,使用起来还是蛮方便的.</p>\n<h6 id=\"Code-NSArray-YYAdd\"><a href=\"#Code-NSArray-YYAdd\" class=\"headerlink\" title=\"Code (NSArray + YYAdd)\"></a>Code (NSArray + YYAdd)</h6><pre><code class=\"hljs axapta\"><span class=\"hljs-comment\">/**</span>\n<span class=\"hljs-comment\"> Reverse the index of object in this array.</span>\n<span class=\"hljs-comment\"> Example: Before @[ @1, @2, @3 ], After @[ @3, @2, @1 ].</span>\n<span class=\"hljs-comment\"> */</span>\n- (<span class=\"hljs-keyword\">void</span>)<span class=\"hljs-keyword\">reverse</span>;\n\n- (<span class=\"hljs-keyword\">void</span>)<span class=\"hljs-keyword\">reverse</span> &#123;\n    NSUInteger <span class=\"hljs-keyword\">count</span> = self.<span class=\"hljs-keyword\">count</span>;\n    <span class=\"hljs-keyword\">int</span> mid = floor(<span class=\"hljs-keyword\">count</span> / <span class=\"hljs-number\">2.0</span>);\n    <span class=\"hljs-keyword\">for</span> (NSUInteger i = <span class=\"hljs-number\">0</span>; i &lt; mid; i++) &#123;\n        [self exchangeObjectAtIndex:i withObjectAtIndex:(<span class=\"hljs-keyword\">count</span> - (i + <span class=\"hljs-number\">1</span>))];\n    &#125;\n&#125;</code></pre>\n<h6 id=\"功能-11\"><a href=\"#功能-11\" class=\"headerlink\" title=\"功能\"></a>功能</h6><p>数组翻转</p>\n<h6 id=\"Code-NSDate-YYADD\"><a href=\"#Code-NSDate-YYADD\" class=\"headerlink\" title=\"Code (NSDate + YYADD)\"></a>Code (NSDate + YYADD)</h6><pre><code class=\"hljs applescript\">/**\n Create data <span class=\"hljs-keyword\">from</span> <span class=\"hljs-keyword\">the</span> <span class=\"hljs-built_in\">file</span> <span class=\"hljs-keyword\">in</span> main bundle (similar <span class=\"hljs-keyword\">to</span> [UIImage imageNamed:]).\n \n @param <span class=\"hljs-built_in\">name</span> The <span class=\"hljs-built_in\">file</span> <span class=\"hljs-built_in\">name</span> (<span class=\"hljs-keyword\">in</span> main bundle).\n \n @<span class=\"hljs-literal\">return</span> A new data create <span class=\"hljs-keyword\">from</span> <span class=\"hljs-keyword\">the</span> <span class=\"hljs-built_in\">file</span>.\n */\n+ (nullable NSData *)dataNamed:(NSString *)<span class=\"hljs-built_in\">name</span>;</code></pre>\n\n<h6 id=\"功能-12\"><a href=\"#功能-12\" class=\"headerlink\" title=\"功能\"></a>功能</h6><p>返回main bundle 下指定文件的的二进制数据.</p>\n<h6 id=\"Code-NSNumber-YYAdd\"><a href=\"#Code-NSNumber-YYAdd\" class=\"headerlink\" title=\"Code (NSNumber + YYAdd)\"></a>Code (NSNumber + YYAdd)</h6><pre><code class=\"hljs nim\">/**\n <span class=\"hljs-type\">Creates</span> <span class=\"hljs-keyword\">and</span> returns an <span class=\"hljs-type\">NSNumber</span> <span class=\"hljs-keyword\">object</span> <span class=\"hljs-keyword\">from</span> a <span class=\"hljs-built_in\">string</span>.\n <span class=\"hljs-type\">Valid</span> format: @<span class=\"hljs-string\">&quot;12&quot;</span>, @<span class=\"hljs-string\">&quot;12.345&quot;</span>, @<span class=\"hljs-string\">&quot; -0xFF&quot;</span>, @<span class=\"hljs-string\">&quot; .23e99 &quot;</span>...\n \n @param <span class=\"hljs-built_in\">string</span>  <span class=\"hljs-type\">The</span> <span class=\"hljs-built_in\">string</span> described an number.\n \n @<span class=\"hljs-keyword\">return</span> an <span class=\"hljs-type\">NSNumber</span> <span class=\"hljs-keyword\">when</span> parse succeed, <span class=\"hljs-keyword\">or</span> <span class=\"hljs-keyword\">nil</span> <span class=\"hljs-keyword\">if</span> an error occurs.\n */\n+ (nullable <span class=\"hljs-type\">NSNumber</span> *)numberWithString:(<span class=\"hljs-type\">NSString</span> *)<span class=\"hljs-built_in\">string</span>;</code></pre>\n\n<h6 id=\"功能-13\"><a href=\"#功能-13\" class=\"headerlink\" title=\"功能\"></a>功能</h6><p>将一个字符串对象解析为NSNumber类型对象,很实用.</p>\n<h6 id=\"Code-NSObject-YYAdd\"><a href=\"#Code-NSObject-YYAdd\" class=\"headerlink\" title=\"Code (NSObject+YYAdd)\"></a>Code (NSObject+YYAdd)</h6><pre><code class=\"hljs haxe\">+ (BOOL)swizzleInstanceMethod:<span class=\"hljs-type\"></span>(SEL)originalSel with:<span class=\"hljs-type\"></span>(SEL)<span class=\"hljs-keyword\">new</span><span class=\"hljs-type\">Sel</span> &#123;\n    Method originalMethod = class_getInstanceMethod(self, originalSel);\n    Method <span class=\"hljs-keyword\">new</span><span class=\"hljs-type\">Method</span> = class_getInstanceMethod(self, <span class=\"hljs-keyword\">new</span><span class=\"hljs-type\">Sel</span>);\n    <span class=\"hljs-keyword\">if</span> (!originalMethod || !<span class=\"hljs-keyword\">new</span><span class=\"hljs-type\">Method</span>) <span class=\"hljs-keyword\">return</span> NO;\n    \n    class_addMethod(self,\n                    originalSel,\n                    class_getMethodImplementation(self, originalSel),\n                    method_getTypeEncoding(originalMethod));\n    class_addMethod(self,\n                    <span class=\"hljs-keyword\">new</span><span class=\"hljs-type\">Sel</span>,\n                    class_getMethodImplementation(self, <span class=\"hljs-keyword\">new</span><span class=\"hljs-type\">Sel</span>),\n                    method_getTypeEncoding(<span class=\"hljs-keyword\">new</span><span class=\"hljs-type\">Method</span>));\n    \n    method_exchangeImplementations(class_getInstanceMethod(self, originalSel),\n                                   class_getInstanceMethod(self, <span class=\"hljs-keyword\">new</span><span class=\"hljs-type\">Sel</span>));\n    <span class=\"hljs-keyword\">return</span> YES;\n&#125;</code></pre>\n\n<h6 id=\"功能-14\"><a href=\"#功能-14\" class=\"headerlink\" title=\"功能\"></a>功能</h6><p>runtime 黑魔法,方法实现交换.</p>\n<h6 id=\"Code-11\"><a href=\"#Code-11\" class=\"headerlink\" title=\"Code\"></a>Code</h6><pre><code class=\"hljs cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">pragma</span> clang diagnostic push</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">pragma</span> clang diagnostic ignored <span class=\"hljs-meta-string\">&quot;-相关命令&quot;</span></span>\n    <span class=\"hljs-comment\">//需要操作的代码</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">pragma</span> clang diagnostic pop</span></code></pre>\n\n<h6 id=\"功能-15\"><a href=\"#功能-15\" class=\"headerlink\" title=\"功能\"></a>功能</h6><p>消除编译器警告⚠️</p>\n<table>\n<thead>\n<tr>\n<th>相关命令</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>“-Wdeprecated-declarations”</td>\n<td>弃用的警告⚠️</td>\n</tr>\n<tr>\n<td>“-Wincompatible-pointer-types”</td>\n<td>不兼容指针类型⚠️</td>\n</tr>\n<tr>\n<td>“-Warc-retain-cycles”</td>\n<td>循环引用⚠️</td>\n</tr>\n<tr>\n<td>“-Wunused-variable”</td>\n<td>未使用变量 ⚠️</td>\n</tr>\n<tr>\n<td>“-Wcovered-switch-default”</td>\n<td>未使用default ⚠️</td>\n</tr>\n<tr>\n<td>…</td>\n<td>…</td>\n</tr>\n</tbody></table>\n<h6 id=\"Code-UIBarButtonItem-YYAdd\"><a href=\"#Code-UIBarButtonItem-YYAdd\" class=\"headerlink\" title=\"Code (UIBarButtonItem+YYAdd)\"></a>Code (UIBarButtonItem+YYAdd)</h6><pre><code class=\"hljs objectivec\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">@interface</span> <span class=\"hljs-title\">_YYUIBarButtonItemBlockTarget</span> : <span class=\"hljs-title\">NSObject</span></span>\n\n<span class=\"hljs-keyword\">@property</span> (<span class=\"hljs-keyword\">nonatomic</span>, <span class=\"hljs-keyword\">copy</span>) <span class=\"hljs-keyword\">void</span> (^block)(<span class=\"hljs-keyword\">id</span> sender);\n\n- (<span class=\"hljs-keyword\">id</span>)initWithBlock:(<span class=\"hljs-keyword\">void</span> (^)(<span class=\"hljs-keyword\">id</span> sender))block;\n- (<span class=\"hljs-keyword\">void</span>)invoke:(<span class=\"hljs-keyword\">id</span>)sender;\n\n<span class=\"hljs-keyword\">@end</span>\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">@implementation</span> <span class=\"hljs-title\">_YYUIBarButtonItemBlockTarget</span></span>\n\n- (<span class=\"hljs-keyword\">id</span>)initWithBlock:(<span class=\"hljs-keyword\">void</span> (^)(<span class=\"hljs-keyword\">id</span> sender))block&#123;\n    <span class=\"hljs-keyword\">self</span> = [<span class=\"hljs-keyword\">super</span> init];\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">self</span>) &#123;\n        _block = [block <span class=\"hljs-keyword\">copy</span>];\n    &#125;\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">self</span>;\n&#125;\n\n- (<span class=\"hljs-keyword\">void</span>)invoke:(<span class=\"hljs-keyword\">id</span>)sender &#123;\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">self</span>.block) <span class=\"hljs-keyword\">self</span>.block(sender);\n&#125;\n\n<span class=\"hljs-keyword\">@end</span>\n\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">@implementation</span> <span class=\"hljs-title\">UIBarButtonItem</span> (<span class=\"hljs-title\">YYAdd</span>)</span>\n\n- (<span class=\"hljs-keyword\">void</span>)setActionBlock:(<span class=\"hljs-keyword\">void</span> (^)(<span class=\"hljs-keyword\">id</span> sender))block &#123;\n    _YYUIBarButtonItemBlockTarget *target = [[_YYUIBarButtonItemBlockTarget alloc] initWithBlock:block];\n    objc_setAssociatedObject(<span class=\"hljs-keyword\">self</span>, &amp;block_key, target, OBJC_ASSOCIATION_RETAIN_NONATOMIC);\n    \n    [<span class=\"hljs-keyword\">self</span> setTarget:target];\n    [<span class=\"hljs-keyword\">self</span> setAction:<span class=\"hljs-keyword\">@selector</span>(invoke:)];\n&#125;\n\n- (<span class=\"hljs-keyword\">void</span> (^)(<span class=\"hljs-keyword\">id</span>)) actionBlock &#123;\n    _YYUIBarButtonItemBlockTarget *target = objc_getAssociatedObject(<span class=\"hljs-keyword\">self</span>, &amp;block_key);\n    <span class=\"hljs-keyword\">return</span> target.block;\n&#125;</code></pre>\n\n<h6 id=\"功能-16\"><a href=\"#功能-16\" class=\"headerlink\" title=\"功能\"></a>功能</h6><p>通过创建一个中间对象,让UIBarButtonItem的Target指向该对象,同时让self 调用该对象的方法.来达到点击事件调用block而无需再设置selector的目的.</p>\n<p>通过这种方式,<code>YYCategories</code>将多种类似点击控件,调用selector的方式,修改为block.</p>\n<blockquote>\n<p><strong>注意</strong> 使用block给控件添加点击事件后,就不能再给该控件添加selector,否则会引起冲突.</p>\n</blockquote>\n<h6 id=\"Code-UIColor-YYAdd\"><a href=\"#Code-UIColor-YYAdd\" class=\"headerlink\" title=\"Code  (UIColor+YYAdd)\"></a>Code  (UIColor+YYAdd)</h6><pre><code class=\"hljs cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">ifndef</span> UIColorHex</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> UIColorHex(_hex_)   [UIColor colorWithHexString:((__bridge NSString *)CFSTR(#_hex_))]</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">endif</span></span></code></pre>\n<h6 id=\"功能-17\"><a href=\"#功能-17\" class=\"headerlink\" title=\"功能\"></a>功能</h6><p>16进制颜色转换<br>Example: UIColorHex(0xF0F), UIColorHex(66ccff), UIColorHex(#66CCFF88)<br>支持的格式是如此之多, #RGB #RGBA #RRGGBB #RRGGBBAA 0xRGB …</p>\n<h6 id=\"Code-UIImage-YYAdd\"><a href=\"#Code-UIImage-YYAdd\" class=\"headerlink\" title=\"Code  (UIImage+YYAdd)\"></a>Code  (UIImage+YYAdd)</h6><pre><code class=\"hljs objectivec\"><span class=\"hljs-comment\">/**</span>\n<span class=\"hljs-comment\"> Returns a new rotated image (relative to the center).</span>\n<span class=\"hljs-comment\"> </span>\n<span class=\"hljs-comment\"> @param radians   Rotated radians in counterclockwise.⟲</span>\n<span class=\"hljs-comment\"> </span>\n<span class=\"hljs-comment\"> @param fitSize   YES: new image&#x27;s size is extend to fit all content.</span>\n<span class=\"hljs-comment\">                  NO: image&#x27;s size will not change, content may be clipped.</span>\n<span class=\"hljs-comment\"> */</span>\n- (<span class=\"hljs-keyword\">nullable</span> <span class=\"hljs-built_in\">UIImage</span> *)imageByRotate:(<span class=\"hljs-built_in\">CGFloat</span>)radians fitSize:(<span class=\"hljs-built_in\">BOOL</span>)fitSize;</code></pre>\n\n<h6 id=\"功能-18\"><a href=\"#功能-18\" class=\"headerlink\" title=\"功能\"></a>功能</h6><p>图片翻转,超级实用<br>…</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p><code>YYCategories</code>中对<code>UIKit</code>, <code>Foundation</code>, <code>Quartz</code>中的常用类添加分类,里面还有好多实用的API来供我们项目开发使用,想要进一步了解并使用其中的API,可以参阅<code>YYCategories</code>中的头文件.</p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p><a href=\"https://github.com/ibireme/YYCategories\">YYCategories</a><br><a href=\"http://clang.llvm.org/docs/UsersManual.html#diagnostics_pragmas\">clang.llvm.org</a></p>\n"},{"title":"iOS包瘦身","_content":"\n![屏幕快照 2019-04-23 下午1.21.40.png](https://upload-images.jianshu.io/upload_images/3340896-480c6ee28376273f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n","source":"_posts/iOS/iOS-App包瘦身方案.md","raw":"\n---\ntitle:  iOS包瘦身 \ncategories:\n- iOS\ntags: \n- 应用瘦身 \n---\n\n![屏幕快照 2019-04-23 下午1.21.40.png](https://upload-images.jianshu.io/upload_images/3340896-480c6ee28376273f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n","slug":"iOS/iOS-App包瘦身方案","published":1,"date":"2020-09-23T10:25:59.000Z","updated":"2020-09-24T09:57:34.801Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgq6gnxa002ot29kepcafosj","content":"<p><img src=\"https://upload-images.jianshu.io/upload_images/3340896-480c6ee28376273f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"屏幕快照 2019-04-23 下午1.21.40.png\"></p>\n","site":{"data":{"fluid_static_prefix":{"internal_js":"/js","internal_css":"/css","internal_img":"/img","iconfont":"//at.alicdn.com/t/font_1736178_kmeydafke9r.css","anchor":"https://cdn.staticfile.org/anchor-js/4.2.2/","github_markdown":"https://cdn.staticfile.org/github-markdown-css/4.0.0/","jquery":"https://cdn.staticfile.org/jquery/3.4.1/","bootstrap":"https://cdn.staticfile.org/twitter-bootstrap/4.4.1/","highlightjs":"https://cdn.staticfile.org/highlight.js/10.0.0/","prismjs":"https://cdn.staticfile.org/prism/1.21.0/","tocbot":"https://cdn.staticfile.org/tocbot/4.11.1/","typed":"https://cdn.staticfile.org/typed.js/2.0.11/","fancybox":"https://cdn.staticfile.org/fancybox/3.5.7/","mathjax":"https://cdn.staticfile.org/mathjax/3.0.5/es5/","katex":"https://cdn.staticfile.org/KaTeX/0.11.1/","aplayer":"https://cdn.staticfile.org/aplayer/1.10.1/","busuanzi":"https://busuanzi.ibruce.info/busuanzi/2.3/","clipboard":"https://cdn.staticfile.org/clipboard.js/2.0.6/","mermaid":"https://cdn.staticfile.org/mermaid/8.5.0/","valine":"https://cdn.staticfile.org/valine/1.4.14/","gitalk":"https://cdn.staticfile.org/gitalk/1.6.2/","blueimp_md5":"https://cdn.staticfile.org/blueimp-md5/2.13.0/","disqusjs":"https://cdn.jsdelivr.net/npm/disqusjs@1.0/dist/","hint":"/lib/hint/"},"fluid_config":{"favicon":"/img/favicon.png","apple_touch_icon":"/img/favicon.png","title_join_string":" - ","force_https":false,"code":{"copy_btn":true,"highlight":{"enable":true,"lib":"highlightjs","highlightjs":{"style":"Github Gist","bg_color":false},"prismjs":{"style":"default","preprocess":true}}},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"_","loop":false},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"right","visible":"hover","icon":""},"mouse_click":{"enable":false,"style":"values"}},"dark_mode":{"enable":true,"default":"auto"},"color":{"body_bg_color":"#eee","body_bg_color_dark":"#181c27","navbar_bg_color":"#2f4154","navbar_bg_color_dark":"#1f3144","navbar_text_color":"#fff","navbar_text_color_dark":"#d0d0d0","text_color":"#3c4858","text_color_dark":"#c4c6c9","sec_text_color":"#718096","sec_text_color_dark":"#a7a9ad","post_text_color":"#2c3e50","post_text_color_dark":"#c4c6c9","post_heading_color":"#1a202c","post_heading_color_dark":"#c4c6c9","post_link_color":"#0366d6","post_link_color_dark":"#1589e9","link_hover_color":"#30a9de","link_hover_color_dark":"#30a9de","link_hover_bg_color":"#f8f9fa","link_hover_bg_color_dark":"#364151","board_color":"#fff","board_color_dark":"#252d38"},"font":{"font_size":"16px","font_family":null,"code_font_size":"85%"},"custom_js":null,"custom_css":null,"custom_html":"","web_analytics":{"enable":false,"baidu":null,"google":null,"gtag":null,"tencent":{"sid":null,"cid":null},"woyaola":null,"cnzz":null,"leancloud":{"app_id":null,"app_key":null,"server_url":null}},"lazyload":{"enable":true,"onlypost":false},"daovoice":{"enable":false,"appid":""},"aplayer":{"enable":false,"autoplay":false,"loop":"all","order":"random","theme":"#b7daff","songs":[{"name":"name","artist":"artist","url":"/songs/test.mp3","cover":"/img/cover.jpg"},{"name":"name","artist":"artist","url":"https://...url.mp3","cover":"https://...cover.jpg"}]},"version":{"check":false},"navbar":{"blog_title":"吃面多放葱","ground_glass":{"enable":false,"px":3,"alpha":0.7},"menu":[{"key":"home","link":"/","icon":"iconfont icon-home-fill"},{"key":"category","link":"/categories/","icon":"iconfont icon-category-fill"},{"key":"tag","link":"/tags/","icon":"iconfont icon-tags-fill"},{"key":"about","link":"/about/","icon":"iconfont icon-user-fill"}]},"search":{"enable":true,"path":"/local-search.xml","generate_path":"/local-search.xml","field":"post","content":true},"scroll_down_arrow":{"enable":true,"banner_height_limit":90,"scroll_after_turning_page":true},"banner_parallax":true,"footer":{"statistics":{"enable":false,"source":"busuanzi","pv_format":"总访问量 {} 次","uv_format":"总访客数 {} 人"},"beian":{"enable":false,"icp_text":"京ICP证123456号","police_text":"京公网安备12345678号","police_code":12345678,"police_icon":"/img/police_beian.png"}},"scroll_top_arrow":{"enable":true},"index":{"banner_img":"/img/default.png","banner_img_height":100,"banner_mask_alpha":0.3,"post_default_img":"","slogan":{"enable":true,"text":"像蚂蚁一样工作，像蝴蝶一样生活"},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"category":true,"tag":true}},"page":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3},"post":{"banner_img":"/img/default.png","banner_img_height":70,"banner_mask_alpha":0.3,"meta":{"author":{"enable":false},"date":{"enable":true,"format":"LL a"},"wordcount":{"enable":true,"format":"{} 字"},"min2read":{"enable":true,"format":"{} 分钟","words":100},"views":{"enable":false,"source":"busuanzi","format":"{} 次"}},"updated":{"enable":false,"content":"本文最后更新于：","relative":false},"toc":{"enable":true,"headingSelector":"h1,h2,h3,h4,h5,h6","collapseDepth":0},"copyright":{"enable":true,"content":"本博客所有文章除特别声明外，均采用 <a href=\"https://creativecommons.org/licenses/by-sa/4.0/deed.zh\" rel=\"nofollow noopener\">CC BY-SA 4.0 协议</a> ，转载请注明出处！"},"prev_next":{"enable":true},"custom":{"enable":false,"content":"<img src=\"https://octodex.github.com/images/jetpacktocat.png\" class=\"rounded mx-auto d-block mt-5\" style=\"width:150px; height:150px;\">"},"image_zoom":{"enable":true},"footnote":{"enable":true,"header":""},"math":{"enable":false,"specific":false,"engine":"mathjax"},"mermaid":{"enable":false,"specific":false,"options":{"theme":"default"}},"comments":{"enable":false,"type":"disqus"}},"utterances":{"repo":null,"issue_term":"pathname","label":"utterances","theme":"github-light","theme_dark":"github-dark","crossorigin":"anonymous"},"disqus":{"shortname":null,"disqusjs":false,"apikey":null},"gitalk":{"clientID":null,"clientSecret":null,"repo":null,"owner":null,"admin":["name"],"id":"location.pathname","language":"zh-CN","labels":["Gitalk"],"perPage":10,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true},"valine":{"appid":null,"appkey":null,"placeholder":"说点什么","path":"window.location.pathname","avatar":"retro","meta":["nick","mail","link"],"pageSize":10,"lang":"zh-CN","highlight":false,"recordIP":false,"serverURLs":null},"changyan":{"appid":"","appkey":""},"livere":{"uid":""},"remark42":{"host":"https://remark.haoyizebo.com","site_id":"haoyizebo","max_shown_comments":10,"locale":"zh"},"archive":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null},"category":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"post_limit":10,"order_by":"-length","collapse_depth":0},"tag":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null,"tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"avatar":"/img/avatar.png","name":"蔺国防","introduce":"移动应用开发者，历史文学爱好者","icons":[{"class":"iconfont icon-github-fill","link":"https://github.com","tip":"GitHub"},{"class":"iconfont icon-douban-fill","link":"https://douban.com","tip":"豆瓣"},{"class":"iconfont icon-wechat-fill","qrcode":"/img/favicon.png"}]},"page404":{"banner_img":"/img/default.png","banner_img_height":85,"banner_mask_alpha":0.3,"subtitle":"Page not found"},"links":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"items":[{"title":"Fluid Docs","intro":"主题使用指南","link":"https://hexo.fluid-dev.com/docs/","image":"/img/favicon.png"},{"title":"Fluid Repo","intro":"主题 GitHub 仓库","link":"https://github.com/fluid-dev/hexo-theme-fluid","image":"/img/favicon.png"},{"title":"Fluid Example","intro":"主题操作示例","link":"https://hexo.fluid-dev.com/docs/example/","image":"/img/favicon.png"}]}}}},"excerpt":"","more":"<p><img src=\"https://upload-images.jianshu.io/upload_images/3340896-480c6ee28376273f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"屏幕快照 2019-04-23 下午1.21.40.png\"></p>\n"},{"title":"Router","date":"2017-11-26T15:12:00.000Z","_content":"\n##  需求描述\n通过scheme跳转到应用指定页面\n\n## 实现逻辑\n-  定义URL，通过其获取控制器名和控制器属性参数\n- 通过控制器名创建对应控制器\n- 给控制器属性赋值\n- 跳转到相应控制器\n\n### [项目Demo](https://github.com/913868456/GFRouter) \n\n## 具体实现\n\n1. 定义URL规则\n\n scheme :// host /控制器名?属性名=属性值&属性名=属性值\n\n该方式符合标准的URL定义规范，同时也方便以后扩展\n\n通过控制器名称获取控制器，需要用到runtime，所以需要先导入<objc/runtime.h> 头文件\n\n```\n//通过URL获取控制器\n+ (UIViewController *)getControllerFromURL:(NSURL *)URL{\n    \n    if (URL.path.length > 1) {\n        \n        NSString *subPath = [URL.path substringFromIndex:1];\n        UIViewController *vc = [GFRouter getControllerFromClassName:subPath];\n        return vc;\n    }else{\n        \n        return nil;\n    }\n}\n\n//通过类名获取控制器\n+ (UIViewController *)getControllerFromClassName:(NSString *)controllerName{\n    \n    const char * name = [controllerName cStringUsingEncoding:NSASCIIStringEncoding];\n    \n    // 从一个类名返回一个类\n    Class newClass = objc_getClass(name);\n    // 创建对象\n    if (newClass == nil) return nil;\n    return [[newClass alloc] init];\n}\n\n```\n\n获取控制器属性参数 paraDic\n\n```\n\n+ (NSMutableDictionary *)getParaWith:(NSURL *)URL{\n    \n    NSMutableDictionary *properties = [NSMutableDictionary dictionary];\n    // Extract Params From Query.\n    NSArray<NSURLQueryItem *> *queryItems = [[NSURLComponents alloc] initWithURL:URL resolvingAgainstBaseURL:false].queryItems;\n    \n    for (NSURLQueryItem *item in queryItems) {\n       properties[item.name] = item.value;\n    }\n    \n    return properties;\n}\n\n```\n2. 控制器属性赋值，使用 KVC \n>  使用 KVC 赋值的时候，需要判断将要赋值的属性是否在控制器中存在\n\n```\n\n//属性赋值\n+ (UIViewController *)setPropertyWith:(NSMutableDictionary *)paraDic and:(UIViewController *)controller{\n    \n    [paraDic enumerateKeysAndObjectsUsingBlock:^(id key, id obj, BOOL *stop) {\n        // 检测这个对象是否存在该属性\n        if ([GFRouter checkIsExistPropertyWithInstance:controller verifyPropertyName:key]) {\n            // 利用kvc赋值\n            [controller setValue:obj forKey:key];\n        }\n    }];\n    return controller;\n}\n\n+ (BOOL)checkIsExistPropertyWithInstance:(id)instance verifyPropertyName:(NSString *)verifyPropertyName\n{\n    unsigned int outCount, i;\n    \n    // 获取对象里的属性列表\n    objc_property_t * properties = class_copyPropertyList([instance class], &outCount);\n    \n    for (i = 0; i < outCount; i++) {\n        objc_property_t property =properties[i];\n        //  属性名转成字符串\n        NSString *propertyName = [[NSString alloc] initWithCString:property_getName(property) encoding:NSUTF8StringEncoding];\n        // 判断该属性是否存在\n        if ([propertyName isEqualToString:verifyPropertyName]) {\n            free(properties);\n            return YES;\n        }\n    }\n    free(properties);\n    \n    return NO;\n}\n\n```\n\n3. 获取当前控制器，推出目标控制器\n\n```\n//获取当前viewController\n+ (UIViewController *)getCurrentVC\n{\n    UIViewController *result = nil;\n    UIWindow * window = [[UIApplication sharedApplication] keyWindow];\n    //app默认windowLevel是UIWindowLevelNormal，如果不是，找到UIWindowLevelNormal的\n    if (window.windowLevel != UIWindowLevelNormal)\n    {\n        NSArray *windows = [[UIApplication sharedApplication] windows];\n        for(UIWindow * tmpWin in windows)\n        {\n            if (tmpWin.windowLevel == UIWindowLevelNormal)\n            {\n                window = tmpWin;\n                break;\n            }\n        }\n    }\n    id  nextResponder = nil;\n    UIViewController *appRootVC=window.rootViewController;\n    //    如果是present上来的appRootVC.presentedViewController 不为nil\n    if (appRootVC.presentedViewController) {\n        nextResponder = appRootVC.presentedViewController;\n    }else{\n        \n        //        NSLog(@\"===%@\",[window subviews]);\n        UIView *frontView = [[window subviews] objectAtIndex:0];\n        nextResponder = [frontView nextResponder];\n    }\n    \n    if ([nextResponder isKindOfClass:[UITabBarController class]]){\n        UITabBarController * tabbar = (UITabBarController *)nextResponder;\n        UINavigationController * nav = (UINavigationController *)tabbar.viewControllers[tabbar.selectedIndex];\n        //UINavigationController * nav = tabbar.selectedViewController ; 上下两种写法都行\n        result=nav.childViewControllers.lastObject;\n        \n    }else if ([nextResponder isKindOfClass:[UINavigationController class]]){\n        UIViewController * nav = (UIViewController *)nextResponder;\n        result = nav.childViewControllers.lastObject;\n    }else{\n        result = nextResponder;\n    }\n    return result;\n}\n\n//导航推出控制器\n+ (void)pushWith:(UIViewController *)controller{\n    \n    UINavigationController *nc = [GFRouter getCurrentVC].navigationController;\n    controller.hidesBottomBarWhenPushed = YES;\n    \n    if (nc) {\n        [nc pushViewController:controller animated:YES];\n    }\n}\n\n```\n\n## 拓展： \n\n通过上述方式，我们还可以往URL中拼上一些参数，来操作控制器的推出方式。\n\n比如 xxx://host:8080/控制器名?displayStyle=present\n\n```\n\n  //默认push推出控制器\n    if ([paraDic[@\"displayStyle\"] isEqualToString:@\"present\"]) {\n        [router presentWith:controller];\n    }else{\n        [router pushWith:controller];\n    }\n\n//模态推出控制器\n- (void)presentWith:(UIViewController *)controller{\n    \n    UIViewController *vc = [GFRouter getCurrentVC];\n    \n    if (vc.class != controller.class) {\n        [vc presentViewController:controller animated:YES completion:nil];\n    }\n```\n\n也可在控制器内部使用router,传入控制器名称和属性键值字典，然后像上述方式一样推出控制器。具体实现就不多说了，自己可以动手操作一下。\n\n\n","source":"_posts/iOS/iOS-Router.md","raw":"---\ntitle:  Router \ndate: 2017-11-26 23:12\ncategories:\n- iOS\ntags: \n- Router \n---\n\n##  需求描述\n通过scheme跳转到应用指定页面\n\n## 实现逻辑\n-  定义URL，通过其获取控制器名和控制器属性参数\n- 通过控制器名创建对应控制器\n- 给控制器属性赋值\n- 跳转到相应控制器\n\n### [项目Demo](https://github.com/913868456/GFRouter) \n\n## 具体实现\n\n1. 定义URL规则\n\n scheme :// host /控制器名?属性名=属性值&属性名=属性值\n\n该方式符合标准的URL定义规范，同时也方便以后扩展\n\n通过控制器名称获取控制器，需要用到runtime，所以需要先导入<objc/runtime.h> 头文件\n\n```\n//通过URL获取控制器\n+ (UIViewController *)getControllerFromURL:(NSURL *)URL{\n    \n    if (URL.path.length > 1) {\n        \n        NSString *subPath = [URL.path substringFromIndex:1];\n        UIViewController *vc = [GFRouter getControllerFromClassName:subPath];\n        return vc;\n    }else{\n        \n        return nil;\n    }\n}\n\n//通过类名获取控制器\n+ (UIViewController *)getControllerFromClassName:(NSString *)controllerName{\n    \n    const char * name = [controllerName cStringUsingEncoding:NSASCIIStringEncoding];\n    \n    // 从一个类名返回一个类\n    Class newClass = objc_getClass(name);\n    // 创建对象\n    if (newClass == nil) return nil;\n    return [[newClass alloc] init];\n}\n\n```\n\n获取控制器属性参数 paraDic\n\n```\n\n+ (NSMutableDictionary *)getParaWith:(NSURL *)URL{\n    \n    NSMutableDictionary *properties = [NSMutableDictionary dictionary];\n    // Extract Params From Query.\n    NSArray<NSURLQueryItem *> *queryItems = [[NSURLComponents alloc] initWithURL:URL resolvingAgainstBaseURL:false].queryItems;\n    \n    for (NSURLQueryItem *item in queryItems) {\n       properties[item.name] = item.value;\n    }\n    \n    return properties;\n}\n\n```\n2. 控制器属性赋值，使用 KVC \n>  使用 KVC 赋值的时候，需要判断将要赋值的属性是否在控制器中存在\n\n```\n\n//属性赋值\n+ (UIViewController *)setPropertyWith:(NSMutableDictionary *)paraDic and:(UIViewController *)controller{\n    \n    [paraDic enumerateKeysAndObjectsUsingBlock:^(id key, id obj, BOOL *stop) {\n        // 检测这个对象是否存在该属性\n        if ([GFRouter checkIsExistPropertyWithInstance:controller verifyPropertyName:key]) {\n            // 利用kvc赋值\n            [controller setValue:obj forKey:key];\n        }\n    }];\n    return controller;\n}\n\n+ (BOOL)checkIsExistPropertyWithInstance:(id)instance verifyPropertyName:(NSString *)verifyPropertyName\n{\n    unsigned int outCount, i;\n    \n    // 获取对象里的属性列表\n    objc_property_t * properties = class_copyPropertyList([instance class], &outCount);\n    \n    for (i = 0; i < outCount; i++) {\n        objc_property_t property =properties[i];\n        //  属性名转成字符串\n        NSString *propertyName = [[NSString alloc] initWithCString:property_getName(property) encoding:NSUTF8StringEncoding];\n        // 判断该属性是否存在\n        if ([propertyName isEqualToString:verifyPropertyName]) {\n            free(properties);\n            return YES;\n        }\n    }\n    free(properties);\n    \n    return NO;\n}\n\n```\n\n3. 获取当前控制器，推出目标控制器\n\n```\n//获取当前viewController\n+ (UIViewController *)getCurrentVC\n{\n    UIViewController *result = nil;\n    UIWindow * window = [[UIApplication sharedApplication] keyWindow];\n    //app默认windowLevel是UIWindowLevelNormal，如果不是，找到UIWindowLevelNormal的\n    if (window.windowLevel != UIWindowLevelNormal)\n    {\n        NSArray *windows = [[UIApplication sharedApplication] windows];\n        for(UIWindow * tmpWin in windows)\n        {\n            if (tmpWin.windowLevel == UIWindowLevelNormal)\n            {\n                window = tmpWin;\n                break;\n            }\n        }\n    }\n    id  nextResponder = nil;\n    UIViewController *appRootVC=window.rootViewController;\n    //    如果是present上来的appRootVC.presentedViewController 不为nil\n    if (appRootVC.presentedViewController) {\n        nextResponder = appRootVC.presentedViewController;\n    }else{\n        \n        //        NSLog(@\"===%@\",[window subviews]);\n        UIView *frontView = [[window subviews] objectAtIndex:0];\n        nextResponder = [frontView nextResponder];\n    }\n    \n    if ([nextResponder isKindOfClass:[UITabBarController class]]){\n        UITabBarController * tabbar = (UITabBarController *)nextResponder;\n        UINavigationController * nav = (UINavigationController *)tabbar.viewControllers[tabbar.selectedIndex];\n        //UINavigationController * nav = tabbar.selectedViewController ; 上下两种写法都行\n        result=nav.childViewControllers.lastObject;\n        \n    }else if ([nextResponder isKindOfClass:[UINavigationController class]]){\n        UIViewController * nav = (UIViewController *)nextResponder;\n        result = nav.childViewControllers.lastObject;\n    }else{\n        result = nextResponder;\n    }\n    return result;\n}\n\n//导航推出控制器\n+ (void)pushWith:(UIViewController *)controller{\n    \n    UINavigationController *nc = [GFRouter getCurrentVC].navigationController;\n    controller.hidesBottomBarWhenPushed = YES;\n    \n    if (nc) {\n        [nc pushViewController:controller animated:YES];\n    }\n}\n\n```\n\n## 拓展： \n\n通过上述方式，我们还可以往URL中拼上一些参数，来操作控制器的推出方式。\n\n比如 xxx://host:8080/控制器名?displayStyle=present\n\n```\n\n  //默认push推出控制器\n    if ([paraDic[@\"displayStyle\"] isEqualToString:@\"present\"]) {\n        [router presentWith:controller];\n    }else{\n        [router pushWith:controller];\n    }\n\n//模态推出控制器\n- (void)presentWith:(UIViewController *)controller{\n    \n    UIViewController *vc = [GFRouter getCurrentVC];\n    \n    if (vc.class != controller.class) {\n        [vc presentViewController:controller animated:YES completion:nil];\n    }\n```\n\n也可在控制器内部使用router,传入控制器名称和属性键值字典，然后像上述方式一样推出控制器。具体实现就不多说了，自己可以动手操作一下。\n\n\n","slug":"iOS/iOS-Router","published":1,"updated":"2020-09-27T11:10:42.413Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgq6gnxb002pt29k0xsdcvmm","content":"<h2 id=\"需求描述\"><a href=\"#需求描述\" class=\"headerlink\" title=\"需求描述\"></a>需求描述</h2><p>通过scheme跳转到应用指定页面</p>\n<h2 id=\"实现逻辑\"><a href=\"#实现逻辑\" class=\"headerlink\" title=\"实现逻辑\"></a>实现逻辑</h2><ul>\n<li>定义URL，通过其获取控制器名和控制器属性参数</li>\n<li>通过控制器名创建对应控制器</li>\n<li>给控制器属性赋值</li>\n<li>跳转到相应控制器</li>\n</ul>\n<h3 id=\"项目Demo\"><a href=\"#项目Demo\" class=\"headerlink\" title=\"项目Demo\"></a><a href=\"https://github.com/913868456/GFRouter\">项目Demo</a></h3><h2 id=\"具体实现\"><a href=\"#具体实现\" class=\"headerlink\" title=\"具体实现\"></a>具体实现</h2><ol>\n<li><p>定义URL规则</p>\n<p>scheme :// host /控制器名?属性名=属性值&amp;属性名=属性值</p>\n</li>\n</ol>\n<p>该方式符合标准的URL定义规范，同时也方便以后扩展</p>\n<p>通过控制器名称获取控制器，需要用到runtime，所以需要先导入&lt;objc/runtime.h&gt; 头文件</p>\n<pre><code class=\"hljs objectivec\"><span class=\"hljs-comment\">//通过URL获取控制器</span>\n+ (<span class=\"hljs-built_in\">UIViewController</span> *)getControllerFromURL:(<span class=\"hljs-built_in\">NSURL</span> *)URL&#123;\n    \n    <span class=\"hljs-keyword\">if</span> (URL.path.length &gt; <span class=\"hljs-number\">1</span>) &#123;\n        \n        <span class=\"hljs-built_in\">NSString</span> *subPath = [URL.path substringFromIndex:<span class=\"hljs-number\">1</span>];\n        <span class=\"hljs-built_in\">UIViewController</span> *vc = [GFRouter getControllerFromClassName:subPath];\n        <span class=\"hljs-keyword\">return</span> vc;\n    &#125;<span class=\"hljs-keyword\">else</span>&#123;\n        \n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">nil</span>;\n    &#125;\n&#125;\n\n<span class=\"hljs-comment\">//通过类名获取控制器</span>\n+ (<span class=\"hljs-built_in\">UIViewController</span> *)getControllerFromClassName:(<span class=\"hljs-built_in\">NSString</span> *)controllerName&#123;\n    \n    <span class=\"hljs-keyword\">const</span> <span class=\"hljs-keyword\">char</span> * name = [controllerName cStringUsingEncoding:<span class=\"hljs-built_in\">NSASCIIStringEncoding</span>];\n    \n    <span class=\"hljs-comment\">// 从一个类名返回一个类</span>\n    Class newClass = objc_getClass(name);\n    <span class=\"hljs-comment\">// 创建对象</span>\n    <span class=\"hljs-keyword\">if</span> (newClass == <span class=\"hljs-literal\">nil</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">nil</span>;\n    <span class=\"hljs-keyword\">return</span> [[newClass alloc] init];\n&#125;\n</code></pre>\n\n<p>获取控制器属性参数 paraDic</p>\n<pre><code class=\"hljs objectivec\">\n+ (<span class=\"hljs-built_in\">NSMutableDictionary</span> *)getParaWith:(<span class=\"hljs-built_in\">NSURL</span> *)URL&#123;\n    \n    <span class=\"hljs-built_in\">NSMutableDictionary</span> *properties = [<span class=\"hljs-built_in\">NSMutableDictionary</span> dictionary];\n    <span class=\"hljs-comment\">// Extract Params From Query.</span>\n    <span class=\"hljs-built_in\">NSArray</span>&lt;<span class=\"hljs-built_in\">NSURLQueryItem</span> *&gt; *queryItems = [[<span class=\"hljs-built_in\">NSURLComponents</span> alloc] initWithURL:URL resolvingAgainstBaseURL:<span class=\"hljs-literal\">false</span>].queryItems;\n    \n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-built_in\">NSURLQueryItem</span> *item <span class=\"hljs-keyword\">in</span> queryItems) &#123;\n       properties[item.name] = item.value;\n    &#125;\n    \n    <span class=\"hljs-keyword\">return</span> properties;\n&#125;\n</code></pre>\n<ol start=\"2\">\n<li>控制器属性赋值，使用 KVC <blockquote>\n<p> 使用 KVC 赋值的时候，需要判断将要赋值的属性是否在控制器中存在</p>\n</blockquote>\n</li>\n</ol>\n<pre><code class=\"hljs objectivec\">\n<span class=\"hljs-comment\">//属性赋值</span>\n+ (<span class=\"hljs-built_in\">UIViewController</span> *)setPropertyWith:(<span class=\"hljs-built_in\">NSMutableDictionary</span> *)paraDic and:(<span class=\"hljs-built_in\">UIViewController</span> *)controller&#123;\n    \n    [paraDic enumerateKeysAndObjectsUsingBlock:^(<span class=\"hljs-keyword\">id</span> key, <span class=\"hljs-keyword\">id</span> obj, <span class=\"hljs-built_in\">BOOL</span> *stop) &#123;\n        <span class=\"hljs-comment\">// 检测这个对象是否存在该属性</span>\n        <span class=\"hljs-keyword\">if</span> ([GFRouter checkIsExistPropertyWithInstance:controller verifyPropertyName:key]) &#123;\n            <span class=\"hljs-comment\">// 利用kvc赋值</span>\n            [controller setValue:obj forKey:key];\n        &#125;\n    &#125;];\n    <span class=\"hljs-keyword\">return</span> controller;\n&#125;\n\n+ (<span class=\"hljs-built_in\">BOOL</span>)checkIsExistPropertyWithInstance:(<span class=\"hljs-keyword\">id</span>)instance verifyPropertyName:(<span class=\"hljs-built_in\">NSString</span> *)verifyPropertyName\n&#123;\n    <span class=\"hljs-keyword\">unsigned</span> <span class=\"hljs-keyword\">int</span> outCount, i;\n    \n    <span class=\"hljs-comment\">// 获取对象里的属性列表</span>\n    objc_property_t * properties = class_copyPropertyList([instance <span class=\"hljs-keyword\">class</span>], &amp;outCount);\n    \n    <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; outCount; i++) &#123;\n        objc_property_t property =properties[i];\n        <span class=\"hljs-comment\">//  属性名转成字符串</span>\n        <span class=\"hljs-built_in\">NSString</span> *propertyName = [[<span class=\"hljs-built_in\">NSString</span> alloc] initWithCString:property_getName(property) encoding:<span class=\"hljs-built_in\">NSUTF8StringEncoding</span>];\n        <span class=\"hljs-comment\">// 判断该属性是否存在</span>\n        <span class=\"hljs-keyword\">if</span> ([propertyName isEqualToString:verifyPropertyName]) &#123;\n            free(properties);\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">YES</span>;\n        &#125;\n    &#125;\n    free(properties);\n    \n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">NO</span>;\n&#125;\n</code></pre>\n\n<ol start=\"3\">\n<li>获取当前控制器，推出目标控制器</li>\n</ol>\n<pre><code class=\"hljs objectivec\"><span class=\"hljs-comment\">//获取当前viewController</span>\n+ (<span class=\"hljs-built_in\">UIViewController</span> *)getCurrentVC\n&#123;\n    <span class=\"hljs-built_in\">UIViewController</span> *result = <span class=\"hljs-literal\">nil</span>;\n    <span class=\"hljs-built_in\">UIWindow</span> * window = [[<span class=\"hljs-built_in\">UIApplication</span> sharedApplication] keyWindow];\n    <span class=\"hljs-comment\">//app默认windowLevel是UIWindowLevelNormal，如果不是，找到UIWindowLevelNormal的</span>\n    <span class=\"hljs-keyword\">if</span> (window.windowLevel != <span class=\"hljs-built_in\">UIWindowLevelNormal</span>)\n    &#123;\n        <span class=\"hljs-built_in\">NSArray</span> *windows = [[<span class=\"hljs-built_in\">UIApplication</span> sharedApplication] windows];\n        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-built_in\">UIWindow</span> * tmpWin <span class=\"hljs-keyword\">in</span> windows)\n        &#123;\n            <span class=\"hljs-keyword\">if</span> (tmpWin.windowLevel == <span class=\"hljs-built_in\">UIWindowLevelNormal</span>)\n            &#123;\n                window = tmpWin;\n                <span class=\"hljs-keyword\">break</span>;\n            &#125;\n        &#125;\n    &#125;\n    <span class=\"hljs-keyword\">id</span>  nextResponder = <span class=\"hljs-literal\">nil</span>;\n    <span class=\"hljs-built_in\">UIViewController</span> *appRootVC=window.rootViewController;\n    <span class=\"hljs-comment\">//    如果是present上来的appRootVC.presentedViewController 不为nil</span>\n    <span class=\"hljs-keyword\">if</span> (appRootVC.presentedViewController) &#123;\n        nextResponder = appRootVC.presentedViewController;\n    &#125;<span class=\"hljs-keyword\">else</span>&#123;\n        \n        <span class=\"hljs-comment\">//        NSLog(@&quot;===%@&quot;,[window subviews]);</span>\n        <span class=\"hljs-built_in\">UIView</span> *frontView = [[window subviews] objectAtIndex:<span class=\"hljs-number\">0</span>];\n        nextResponder = [frontView nextResponder];\n    &#125;\n    \n    <span class=\"hljs-keyword\">if</span> ([nextResponder isKindOfClass:[<span class=\"hljs-built_in\">UITabBarController</span> <span class=\"hljs-keyword\">class</span>]])&#123;\n        <span class=\"hljs-built_in\">UITabBarController</span> * tabbar = (<span class=\"hljs-built_in\">UITabBarController</span> *)nextResponder;\n        <span class=\"hljs-built_in\">UINavigationController</span> * nav = (<span class=\"hljs-built_in\">UINavigationController</span> *)tabbar.viewControllers[tabbar.selectedIndex];\n        <span class=\"hljs-comment\">//UINavigationController * nav = tabbar.selectedViewController ; 上下两种写法都行</span>\n        result=nav.childViewControllers.lastObject;\n        \n    &#125;<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> ([nextResponder isKindOfClass:[<span class=\"hljs-built_in\">UINavigationController</span> <span class=\"hljs-keyword\">class</span>]])&#123;\n        <span class=\"hljs-built_in\">UIViewController</span> * nav = (<span class=\"hljs-built_in\">UIViewController</span> *)nextResponder;\n        result = nav.childViewControllers.lastObject;\n    &#125;<span class=\"hljs-keyword\">else</span>&#123;\n        result = nextResponder;\n    &#125;\n    <span class=\"hljs-keyword\">return</span> result;\n&#125;\n\n<span class=\"hljs-comment\">//导航推出控制器</span>\n+ (<span class=\"hljs-keyword\">void</span>)pushWith:(<span class=\"hljs-built_in\">UIViewController</span> *)controller&#123;\n    \n    <span class=\"hljs-built_in\">UINavigationController</span> *nc = [GFRouter getCurrentVC].navigationController;\n    controller.hidesBottomBarWhenPushed = <span class=\"hljs-literal\">YES</span>;\n    \n    <span class=\"hljs-keyword\">if</span> (nc) &#123;\n        [nc pushViewController:controller animated:<span class=\"hljs-literal\">YES</span>];\n    &#125;\n&#125;\n</code></pre>\n\n<h2 id=\"拓展：\"><a href=\"#拓展：\" class=\"headerlink\" title=\"拓展：\"></a>拓展：</h2><p>通过上述方式，我们还可以往URL中拼上一些参数，来操作控制器的推出方式。</p>\n<p>比如 xxx://host:8080/控制器名?displayStyle=present</p>\n<pre><code class=\"hljs groovy\">\n  <span class=\"hljs-comment\">//默认push推出控制器</span>\n    <span class=\"hljs-keyword\">if</span> ([paraDic[@<span class=\"hljs-string\">&quot;displayStyle&quot;</span>] <span class=\"hljs-attr\">isEqualToString:</span>@<span class=\"hljs-string\">&quot;present&quot;</span>]) &#123;\n        [router <span class=\"hljs-attr\">presentWith:</span>controller];\n    &#125;<span class=\"hljs-keyword\">else</span>&#123;\n        [router <span class=\"hljs-attr\">pushWith:</span>controller];\n    &#125;\n\n<span class=\"hljs-comment\">//模态推出控制器</span>\n- (<span class=\"hljs-keyword\">void</span>)<span class=\"hljs-attr\">presentWith:</span>(UIViewController *)controller&#123;\n    \n    UIViewController *vc = [GFRouter getCurrentVC];\n    \n    <span class=\"hljs-keyword\">if</span> (vc.<span class=\"hljs-keyword\">class</span> != controller.<span class=\"hljs-keyword\">class</span>) &#123;\n        [vc <span class=\"hljs-attr\">presentViewController:</span>controller <span class=\"hljs-attr\">animated:</span>YES <span class=\"hljs-attr\">completion:</span>nil];\n    &#125;</code></pre>\n\n<p>也可在控制器内部使用router,传入控制器名称和属性键值字典，然后像上述方式一样推出控制器。具体实现就不多说了，自己可以动手操作一下。</p>\n","site":{"data":{"fluid_static_prefix":{"internal_js":"/js","internal_css":"/css","internal_img":"/img","iconfont":"//at.alicdn.com/t/font_1736178_kmeydafke9r.css","anchor":"https://cdn.staticfile.org/anchor-js/4.2.2/","github_markdown":"https://cdn.staticfile.org/github-markdown-css/4.0.0/","jquery":"https://cdn.staticfile.org/jquery/3.4.1/","bootstrap":"https://cdn.staticfile.org/twitter-bootstrap/4.4.1/","highlightjs":"https://cdn.staticfile.org/highlight.js/10.0.0/","prismjs":"https://cdn.staticfile.org/prism/1.21.0/","tocbot":"https://cdn.staticfile.org/tocbot/4.11.1/","typed":"https://cdn.staticfile.org/typed.js/2.0.11/","fancybox":"https://cdn.staticfile.org/fancybox/3.5.7/","mathjax":"https://cdn.staticfile.org/mathjax/3.0.5/es5/","katex":"https://cdn.staticfile.org/KaTeX/0.11.1/","aplayer":"https://cdn.staticfile.org/aplayer/1.10.1/","busuanzi":"https://busuanzi.ibruce.info/busuanzi/2.3/","clipboard":"https://cdn.staticfile.org/clipboard.js/2.0.6/","mermaid":"https://cdn.staticfile.org/mermaid/8.5.0/","valine":"https://cdn.staticfile.org/valine/1.4.14/","gitalk":"https://cdn.staticfile.org/gitalk/1.6.2/","blueimp_md5":"https://cdn.staticfile.org/blueimp-md5/2.13.0/","disqusjs":"https://cdn.jsdelivr.net/npm/disqusjs@1.0/dist/","hint":"/lib/hint/"},"fluid_config":{"favicon":"/img/favicon.png","apple_touch_icon":"/img/favicon.png","title_join_string":" - ","force_https":false,"code":{"copy_btn":true,"highlight":{"enable":true,"lib":"highlightjs","highlightjs":{"style":"Github Gist","bg_color":false},"prismjs":{"style":"default","preprocess":true}}},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"_","loop":false},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"right","visible":"hover","icon":""},"mouse_click":{"enable":false,"style":"values"}},"dark_mode":{"enable":true,"default":"auto"},"color":{"body_bg_color":"#eee","body_bg_color_dark":"#181c27","navbar_bg_color":"#2f4154","navbar_bg_color_dark":"#1f3144","navbar_text_color":"#fff","navbar_text_color_dark":"#d0d0d0","text_color":"#3c4858","text_color_dark":"#c4c6c9","sec_text_color":"#718096","sec_text_color_dark":"#a7a9ad","post_text_color":"#2c3e50","post_text_color_dark":"#c4c6c9","post_heading_color":"#1a202c","post_heading_color_dark":"#c4c6c9","post_link_color":"#0366d6","post_link_color_dark":"#1589e9","link_hover_color":"#30a9de","link_hover_color_dark":"#30a9de","link_hover_bg_color":"#f8f9fa","link_hover_bg_color_dark":"#364151","board_color":"#fff","board_color_dark":"#252d38"},"font":{"font_size":"16px","font_family":null,"code_font_size":"85%"},"custom_js":null,"custom_css":null,"custom_html":"","web_analytics":{"enable":false,"baidu":null,"google":null,"gtag":null,"tencent":{"sid":null,"cid":null},"woyaola":null,"cnzz":null,"leancloud":{"app_id":null,"app_key":null,"server_url":null}},"lazyload":{"enable":true,"onlypost":false},"daovoice":{"enable":false,"appid":""},"aplayer":{"enable":false,"autoplay":false,"loop":"all","order":"random","theme":"#b7daff","songs":[{"name":"name","artist":"artist","url":"/songs/test.mp3","cover":"/img/cover.jpg"},{"name":"name","artist":"artist","url":"https://...url.mp3","cover":"https://...cover.jpg"}]},"version":{"check":false},"navbar":{"blog_title":"吃面多放葱","ground_glass":{"enable":false,"px":3,"alpha":0.7},"menu":[{"key":"home","link":"/","icon":"iconfont icon-home-fill"},{"key":"category","link":"/categories/","icon":"iconfont icon-category-fill"},{"key":"tag","link":"/tags/","icon":"iconfont icon-tags-fill"},{"key":"about","link":"/about/","icon":"iconfont icon-user-fill"}]},"search":{"enable":true,"path":"/local-search.xml","generate_path":"/local-search.xml","field":"post","content":true},"scroll_down_arrow":{"enable":true,"banner_height_limit":90,"scroll_after_turning_page":true},"banner_parallax":true,"footer":{"statistics":{"enable":false,"source":"busuanzi","pv_format":"总访问量 {} 次","uv_format":"总访客数 {} 人"},"beian":{"enable":false,"icp_text":"京ICP证123456号","police_text":"京公网安备12345678号","police_code":12345678,"police_icon":"/img/police_beian.png"}},"scroll_top_arrow":{"enable":true},"index":{"banner_img":"/img/default.png","banner_img_height":100,"banner_mask_alpha":0.3,"post_default_img":"","slogan":{"enable":true,"text":"像蚂蚁一样工作，像蝴蝶一样生活"},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"category":true,"tag":true}},"page":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3},"post":{"banner_img":"/img/default.png","banner_img_height":70,"banner_mask_alpha":0.3,"meta":{"author":{"enable":false},"date":{"enable":true,"format":"LL a"},"wordcount":{"enable":true,"format":"{} 字"},"min2read":{"enable":true,"format":"{} 分钟","words":100},"views":{"enable":false,"source":"busuanzi","format":"{} 次"}},"updated":{"enable":false,"content":"本文最后更新于：","relative":false},"toc":{"enable":true,"headingSelector":"h1,h2,h3,h4,h5,h6","collapseDepth":0},"copyright":{"enable":true,"content":"本博客所有文章除特别声明外，均采用 <a href=\"https://creativecommons.org/licenses/by-sa/4.0/deed.zh\" rel=\"nofollow noopener\">CC BY-SA 4.0 协议</a> ，转载请注明出处！"},"prev_next":{"enable":true},"custom":{"enable":false,"content":"<img src=\"https://octodex.github.com/images/jetpacktocat.png\" class=\"rounded mx-auto d-block mt-5\" style=\"width:150px; height:150px;\">"},"image_zoom":{"enable":true},"footnote":{"enable":true,"header":""},"math":{"enable":false,"specific":false,"engine":"mathjax"},"mermaid":{"enable":false,"specific":false,"options":{"theme":"default"}},"comments":{"enable":false,"type":"disqus"}},"utterances":{"repo":null,"issue_term":"pathname","label":"utterances","theme":"github-light","theme_dark":"github-dark","crossorigin":"anonymous"},"disqus":{"shortname":null,"disqusjs":false,"apikey":null},"gitalk":{"clientID":null,"clientSecret":null,"repo":null,"owner":null,"admin":["name"],"id":"location.pathname","language":"zh-CN","labels":["Gitalk"],"perPage":10,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true},"valine":{"appid":null,"appkey":null,"placeholder":"说点什么","path":"window.location.pathname","avatar":"retro","meta":["nick","mail","link"],"pageSize":10,"lang":"zh-CN","highlight":false,"recordIP":false,"serverURLs":null},"changyan":{"appid":"","appkey":""},"livere":{"uid":""},"remark42":{"host":"https://remark.haoyizebo.com","site_id":"haoyizebo","max_shown_comments":10,"locale":"zh"},"archive":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null},"category":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"post_limit":10,"order_by":"-length","collapse_depth":0},"tag":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null,"tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"avatar":"/img/avatar.png","name":"蔺国防","introduce":"移动应用开发者，历史文学爱好者","icons":[{"class":"iconfont icon-github-fill","link":"https://github.com","tip":"GitHub"},{"class":"iconfont icon-douban-fill","link":"https://douban.com","tip":"豆瓣"},{"class":"iconfont icon-wechat-fill","qrcode":"/img/favicon.png"}]},"page404":{"banner_img":"/img/default.png","banner_img_height":85,"banner_mask_alpha":0.3,"subtitle":"Page not found"},"links":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"items":[{"title":"Fluid Docs","intro":"主题使用指南","link":"https://hexo.fluid-dev.com/docs/","image":"/img/favicon.png"},{"title":"Fluid Repo","intro":"主题 GitHub 仓库","link":"https://github.com/fluid-dev/hexo-theme-fluid","image":"/img/favicon.png"},{"title":"Fluid Example","intro":"主题操作示例","link":"https://hexo.fluid-dev.com/docs/example/","image":"/img/favicon.png"}]}}}},"excerpt":"","more":"<h2 id=\"需求描述\"><a href=\"#需求描述\" class=\"headerlink\" title=\"需求描述\"></a>需求描述</h2><p>通过scheme跳转到应用指定页面</p>\n<h2 id=\"实现逻辑\"><a href=\"#实现逻辑\" class=\"headerlink\" title=\"实现逻辑\"></a>实现逻辑</h2><ul>\n<li>定义URL，通过其获取控制器名和控制器属性参数</li>\n<li>通过控制器名创建对应控制器</li>\n<li>给控制器属性赋值</li>\n<li>跳转到相应控制器</li>\n</ul>\n<h3 id=\"项目Demo\"><a href=\"#项目Demo\" class=\"headerlink\" title=\"项目Demo\"></a><a href=\"https://github.com/913868456/GFRouter\">项目Demo</a></h3><h2 id=\"具体实现\"><a href=\"#具体实现\" class=\"headerlink\" title=\"具体实现\"></a>具体实现</h2><ol>\n<li><p>定义URL规则</p>\n<p>scheme :// host /控制器名?属性名=属性值&amp;属性名=属性值</p>\n</li>\n</ol>\n<p>该方式符合标准的URL定义规范，同时也方便以后扩展</p>\n<p>通过控制器名称获取控制器，需要用到runtime，所以需要先导入&lt;objc/runtime.h&gt; 头文件</p>\n<pre><code class=\"hljs objectivec\"><span class=\"hljs-comment\">//通过URL获取控制器</span>\n+ (<span class=\"hljs-built_in\">UIViewController</span> *)getControllerFromURL:(<span class=\"hljs-built_in\">NSURL</span> *)URL&#123;\n    \n    <span class=\"hljs-keyword\">if</span> (URL.path.length &gt; <span class=\"hljs-number\">1</span>) &#123;\n        \n        <span class=\"hljs-built_in\">NSString</span> *subPath = [URL.path substringFromIndex:<span class=\"hljs-number\">1</span>];\n        <span class=\"hljs-built_in\">UIViewController</span> *vc = [GFRouter getControllerFromClassName:subPath];\n        <span class=\"hljs-keyword\">return</span> vc;\n    &#125;<span class=\"hljs-keyword\">else</span>&#123;\n        \n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">nil</span>;\n    &#125;\n&#125;\n\n<span class=\"hljs-comment\">//通过类名获取控制器</span>\n+ (<span class=\"hljs-built_in\">UIViewController</span> *)getControllerFromClassName:(<span class=\"hljs-built_in\">NSString</span> *)controllerName&#123;\n    \n    <span class=\"hljs-keyword\">const</span> <span class=\"hljs-keyword\">char</span> * name = [controllerName cStringUsingEncoding:<span class=\"hljs-built_in\">NSASCIIStringEncoding</span>];\n    \n    <span class=\"hljs-comment\">// 从一个类名返回一个类</span>\n    Class newClass = objc_getClass(name);\n    <span class=\"hljs-comment\">// 创建对象</span>\n    <span class=\"hljs-keyword\">if</span> (newClass == <span class=\"hljs-literal\">nil</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">nil</span>;\n    <span class=\"hljs-keyword\">return</span> [[newClass alloc] init];\n&#125;\n</code></pre>\n\n<p>获取控制器属性参数 paraDic</p>\n<pre><code class=\"hljs objectivec\">\n+ (<span class=\"hljs-built_in\">NSMutableDictionary</span> *)getParaWith:(<span class=\"hljs-built_in\">NSURL</span> *)URL&#123;\n    \n    <span class=\"hljs-built_in\">NSMutableDictionary</span> *properties = [<span class=\"hljs-built_in\">NSMutableDictionary</span> dictionary];\n    <span class=\"hljs-comment\">// Extract Params From Query.</span>\n    <span class=\"hljs-built_in\">NSArray</span>&lt;<span class=\"hljs-built_in\">NSURLQueryItem</span> *&gt; *queryItems = [[<span class=\"hljs-built_in\">NSURLComponents</span> alloc] initWithURL:URL resolvingAgainstBaseURL:<span class=\"hljs-literal\">false</span>].queryItems;\n    \n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-built_in\">NSURLQueryItem</span> *item <span class=\"hljs-keyword\">in</span> queryItems) &#123;\n       properties[item.name] = item.value;\n    &#125;\n    \n    <span class=\"hljs-keyword\">return</span> properties;\n&#125;\n</code></pre>\n<ol start=\"2\">\n<li>控制器属性赋值，使用 KVC <blockquote>\n<p> 使用 KVC 赋值的时候，需要判断将要赋值的属性是否在控制器中存在</p>\n</blockquote>\n</li>\n</ol>\n<pre><code class=\"hljs objectivec\">\n<span class=\"hljs-comment\">//属性赋值</span>\n+ (<span class=\"hljs-built_in\">UIViewController</span> *)setPropertyWith:(<span class=\"hljs-built_in\">NSMutableDictionary</span> *)paraDic and:(<span class=\"hljs-built_in\">UIViewController</span> *)controller&#123;\n    \n    [paraDic enumerateKeysAndObjectsUsingBlock:^(<span class=\"hljs-keyword\">id</span> key, <span class=\"hljs-keyword\">id</span> obj, <span class=\"hljs-built_in\">BOOL</span> *stop) &#123;\n        <span class=\"hljs-comment\">// 检测这个对象是否存在该属性</span>\n        <span class=\"hljs-keyword\">if</span> ([GFRouter checkIsExistPropertyWithInstance:controller verifyPropertyName:key]) &#123;\n            <span class=\"hljs-comment\">// 利用kvc赋值</span>\n            [controller setValue:obj forKey:key];\n        &#125;\n    &#125;];\n    <span class=\"hljs-keyword\">return</span> controller;\n&#125;\n\n+ (<span class=\"hljs-built_in\">BOOL</span>)checkIsExistPropertyWithInstance:(<span class=\"hljs-keyword\">id</span>)instance verifyPropertyName:(<span class=\"hljs-built_in\">NSString</span> *)verifyPropertyName\n&#123;\n    <span class=\"hljs-keyword\">unsigned</span> <span class=\"hljs-keyword\">int</span> outCount, i;\n    \n    <span class=\"hljs-comment\">// 获取对象里的属性列表</span>\n    objc_property_t * properties = class_copyPropertyList([instance <span class=\"hljs-keyword\">class</span>], &amp;outCount);\n    \n    <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; outCount; i++) &#123;\n        objc_property_t property =properties[i];\n        <span class=\"hljs-comment\">//  属性名转成字符串</span>\n        <span class=\"hljs-built_in\">NSString</span> *propertyName = [[<span class=\"hljs-built_in\">NSString</span> alloc] initWithCString:property_getName(property) encoding:<span class=\"hljs-built_in\">NSUTF8StringEncoding</span>];\n        <span class=\"hljs-comment\">// 判断该属性是否存在</span>\n        <span class=\"hljs-keyword\">if</span> ([propertyName isEqualToString:verifyPropertyName]) &#123;\n            free(properties);\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">YES</span>;\n        &#125;\n    &#125;\n    free(properties);\n    \n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">NO</span>;\n&#125;\n</code></pre>\n\n<ol start=\"3\">\n<li>获取当前控制器，推出目标控制器</li>\n</ol>\n<pre><code class=\"hljs objectivec\"><span class=\"hljs-comment\">//获取当前viewController</span>\n+ (<span class=\"hljs-built_in\">UIViewController</span> *)getCurrentVC\n&#123;\n    <span class=\"hljs-built_in\">UIViewController</span> *result = <span class=\"hljs-literal\">nil</span>;\n    <span class=\"hljs-built_in\">UIWindow</span> * window = [[<span class=\"hljs-built_in\">UIApplication</span> sharedApplication] keyWindow];\n    <span class=\"hljs-comment\">//app默认windowLevel是UIWindowLevelNormal，如果不是，找到UIWindowLevelNormal的</span>\n    <span class=\"hljs-keyword\">if</span> (window.windowLevel != <span class=\"hljs-built_in\">UIWindowLevelNormal</span>)\n    &#123;\n        <span class=\"hljs-built_in\">NSArray</span> *windows = [[<span class=\"hljs-built_in\">UIApplication</span> sharedApplication] windows];\n        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-built_in\">UIWindow</span> * tmpWin <span class=\"hljs-keyword\">in</span> windows)\n        &#123;\n            <span class=\"hljs-keyword\">if</span> (tmpWin.windowLevel == <span class=\"hljs-built_in\">UIWindowLevelNormal</span>)\n            &#123;\n                window = tmpWin;\n                <span class=\"hljs-keyword\">break</span>;\n            &#125;\n        &#125;\n    &#125;\n    <span class=\"hljs-keyword\">id</span>  nextResponder = <span class=\"hljs-literal\">nil</span>;\n    <span class=\"hljs-built_in\">UIViewController</span> *appRootVC=window.rootViewController;\n    <span class=\"hljs-comment\">//    如果是present上来的appRootVC.presentedViewController 不为nil</span>\n    <span class=\"hljs-keyword\">if</span> (appRootVC.presentedViewController) &#123;\n        nextResponder = appRootVC.presentedViewController;\n    &#125;<span class=\"hljs-keyword\">else</span>&#123;\n        \n        <span class=\"hljs-comment\">//        NSLog(@&quot;===%@&quot;,[window subviews]);</span>\n        <span class=\"hljs-built_in\">UIView</span> *frontView = [[window subviews] objectAtIndex:<span class=\"hljs-number\">0</span>];\n        nextResponder = [frontView nextResponder];\n    &#125;\n    \n    <span class=\"hljs-keyword\">if</span> ([nextResponder isKindOfClass:[<span class=\"hljs-built_in\">UITabBarController</span> <span class=\"hljs-keyword\">class</span>]])&#123;\n        <span class=\"hljs-built_in\">UITabBarController</span> * tabbar = (<span class=\"hljs-built_in\">UITabBarController</span> *)nextResponder;\n        <span class=\"hljs-built_in\">UINavigationController</span> * nav = (<span class=\"hljs-built_in\">UINavigationController</span> *)tabbar.viewControllers[tabbar.selectedIndex];\n        <span class=\"hljs-comment\">//UINavigationController * nav = tabbar.selectedViewController ; 上下两种写法都行</span>\n        result=nav.childViewControllers.lastObject;\n        \n    &#125;<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> ([nextResponder isKindOfClass:[<span class=\"hljs-built_in\">UINavigationController</span> <span class=\"hljs-keyword\">class</span>]])&#123;\n        <span class=\"hljs-built_in\">UIViewController</span> * nav = (<span class=\"hljs-built_in\">UIViewController</span> *)nextResponder;\n        result = nav.childViewControllers.lastObject;\n    &#125;<span class=\"hljs-keyword\">else</span>&#123;\n        result = nextResponder;\n    &#125;\n    <span class=\"hljs-keyword\">return</span> result;\n&#125;\n\n<span class=\"hljs-comment\">//导航推出控制器</span>\n+ (<span class=\"hljs-keyword\">void</span>)pushWith:(<span class=\"hljs-built_in\">UIViewController</span> *)controller&#123;\n    \n    <span class=\"hljs-built_in\">UINavigationController</span> *nc = [GFRouter getCurrentVC].navigationController;\n    controller.hidesBottomBarWhenPushed = <span class=\"hljs-literal\">YES</span>;\n    \n    <span class=\"hljs-keyword\">if</span> (nc) &#123;\n        [nc pushViewController:controller animated:<span class=\"hljs-literal\">YES</span>];\n    &#125;\n&#125;\n</code></pre>\n\n<h2 id=\"拓展：\"><a href=\"#拓展：\" class=\"headerlink\" title=\"拓展：\"></a>拓展：</h2><p>通过上述方式，我们还可以往URL中拼上一些参数，来操作控制器的推出方式。</p>\n<p>比如 xxx://host:8080/控制器名?displayStyle=present</p>\n<pre><code class=\"hljs groovy\">\n  <span class=\"hljs-comment\">//默认push推出控制器</span>\n    <span class=\"hljs-keyword\">if</span> ([paraDic[@<span class=\"hljs-string\">&quot;displayStyle&quot;</span>] <span class=\"hljs-attr\">isEqualToString:</span>@<span class=\"hljs-string\">&quot;present&quot;</span>]) &#123;\n        [router <span class=\"hljs-attr\">presentWith:</span>controller];\n    &#125;<span class=\"hljs-keyword\">else</span>&#123;\n        [router <span class=\"hljs-attr\">pushWith:</span>controller];\n    &#125;\n\n<span class=\"hljs-comment\">//模态推出控制器</span>\n- (<span class=\"hljs-keyword\">void</span>)<span class=\"hljs-attr\">presentWith:</span>(UIViewController *)controller&#123;\n    \n    UIViewController *vc = [GFRouter getCurrentVC];\n    \n    <span class=\"hljs-keyword\">if</span> (vc.<span class=\"hljs-keyword\">class</span> != controller.<span class=\"hljs-keyword\">class</span>) &#123;\n        [vc <span class=\"hljs-attr\">presentViewController:</span>controller <span class=\"hljs-attr\">animated:</span>YES <span class=\"hljs-attr\">completion:</span>nil];\n    &#125;</code></pre>\n\n<p>也可在控制器内部使用router,传入控制器名称和属性键值字典，然后像上述方式一样推出控制器。具体实现就不多说了，自己可以动手操作一下。</p>\n"},{"title":"iOS编程指南","_content":"\n之前感觉网站上关于iOS编程知识内容不够权威和完整,所以一直从苹果官方文档上一点一点翻译,效率慢,占用时间多.所以就开始找官网翻译,目前已收集部分文档.前人栽树,后人乘凉.在此感谢所有优秀翻译者的分享.\n\n (链接:https://pan.baidu.com/s/1dCG8r0  密码:3dpn)\n里面包含\n- *核心动画编程指南* \n- *多线程编程指南* \n- *本地和远程推送编程指南*\n-  *ARC官方文档*\n- *iOS并发编程指南*\n","source":"_posts/iOS/iOS-编程指南-(部分官翻).md","raw":"---\ntitle: iOS编程指南 \ncategories:\n- iOS\ntags: \n- 编程指南 \n---\n\n之前感觉网站上关于iOS编程知识内容不够权威和完整,所以一直从苹果官方文档上一点一点翻译,效率慢,占用时间多.所以就开始找官网翻译,目前已收集部分文档.前人栽树,后人乘凉.在此感谢所有优秀翻译者的分享.\n\n (链接:https://pan.baidu.com/s/1dCG8r0  密码:3dpn)\n里面包含\n- *核心动画编程指南* \n- *多线程编程指南* \n- *本地和远程推送编程指南*\n-  *ARC官方文档*\n- *iOS并发编程指南*\n","slug":"iOS/iOS-编程指南-(部分官翻)","published":1,"date":"2020-09-23T10:25:59.000Z","updated":"2020-09-24T09:58:07.308Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgq6gnxd002tt29k8c5k0zr4","content":"<p>之前感觉网站上关于iOS编程知识内容不够权威和完整,所以一直从苹果官方文档上一点一点翻译,效率慢,占用时间多.所以就开始找官网翻译,目前已收集部分文档.前人栽树,后人乘凉.在此感谢所有优秀翻译者的分享.</p>\n<p> (链接:<a href=\"https://pan.baidu.com/s/1dCG8r0\">https://pan.baidu.com/s/1dCG8r0</a>  密码:3dpn)<br>里面包含</p>\n<ul>\n<li><em>核心动画编程指南</em> </li>\n<li><em>多线程编程指南</em> </li>\n<li><em>本地和远程推送编程指南</em></li>\n<li><em>ARC官方文档</em></li>\n<li><em>iOS并发编程指南</em></li>\n</ul>\n","site":{"data":{"fluid_static_prefix":{"internal_js":"/js","internal_css":"/css","internal_img":"/img","iconfont":"//at.alicdn.com/t/font_1736178_kmeydafke9r.css","anchor":"https://cdn.staticfile.org/anchor-js/4.2.2/","github_markdown":"https://cdn.staticfile.org/github-markdown-css/4.0.0/","jquery":"https://cdn.staticfile.org/jquery/3.4.1/","bootstrap":"https://cdn.staticfile.org/twitter-bootstrap/4.4.1/","highlightjs":"https://cdn.staticfile.org/highlight.js/10.0.0/","prismjs":"https://cdn.staticfile.org/prism/1.21.0/","tocbot":"https://cdn.staticfile.org/tocbot/4.11.1/","typed":"https://cdn.staticfile.org/typed.js/2.0.11/","fancybox":"https://cdn.staticfile.org/fancybox/3.5.7/","mathjax":"https://cdn.staticfile.org/mathjax/3.0.5/es5/","katex":"https://cdn.staticfile.org/KaTeX/0.11.1/","aplayer":"https://cdn.staticfile.org/aplayer/1.10.1/","busuanzi":"https://busuanzi.ibruce.info/busuanzi/2.3/","clipboard":"https://cdn.staticfile.org/clipboard.js/2.0.6/","mermaid":"https://cdn.staticfile.org/mermaid/8.5.0/","valine":"https://cdn.staticfile.org/valine/1.4.14/","gitalk":"https://cdn.staticfile.org/gitalk/1.6.2/","blueimp_md5":"https://cdn.staticfile.org/blueimp-md5/2.13.0/","disqusjs":"https://cdn.jsdelivr.net/npm/disqusjs@1.0/dist/","hint":"/lib/hint/"},"fluid_config":{"favicon":"/img/favicon.png","apple_touch_icon":"/img/favicon.png","title_join_string":" - ","force_https":false,"code":{"copy_btn":true,"highlight":{"enable":true,"lib":"highlightjs","highlightjs":{"style":"Github Gist","bg_color":false},"prismjs":{"style":"default","preprocess":true}}},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"_","loop":false},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"right","visible":"hover","icon":""},"mouse_click":{"enable":false,"style":"values"}},"dark_mode":{"enable":true,"default":"auto"},"color":{"body_bg_color":"#eee","body_bg_color_dark":"#181c27","navbar_bg_color":"#2f4154","navbar_bg_color_dark":"#1f3144","navbar_text_color":"#fff","navbar_text_color_dark":"#d0d0d0","text_color":"#3c4858","text_color_dark":"#c4c6c9","sec_text_color":"#718096","sec_text_color_dark":"#a7a9ad","post_text_color":"#2c3e50","post_text_color_dark":"#c4c6c9","post_heading_color":"#1a202c","post_heading_color_dark":"#c4c6c9","post_link_color":"#0366d6","post_link_color_dark":"#1589e9","link_hover_color":"#30a9de","link_hover_color_dark":"#30a9de","link_hover_bg_color":"#f8f9fa","link_hover_bg_color_dark":"#364151","board_color":"#fff","board_color_dark":"#252d38"},"font":{"font_size":"16px","font_family":null,"code_font_size":"85%"},"custom_js":null,"custom_css":null,"custom_html":"","web_analytics":{"enable":false,"baidu":null,"google":null,"gtag":null,"tencent":{"sid":null,"cid":null},"woyaola":null,"cnzz":null,"leancloud":{"app_id":null,"app_key":null,"server_url":null}},"lazyload":{"enable":true,"onlypost":false},"daovoice":{"enable":false,"appid":""},"aplayer":{"enable":false,"autoplay":false,"loop":"all","order":"random","theme":"#b7daff","songs":[{"name":"name","artist":"artist","url":"/songs/test.mp3","cover":"/img/cover.jpg"},{"name":"name","artist":"artist","url":"https://...url.mp3","cover":"https://...cover.jpg"}]},"version":{"check":false},"navbar":{"blog_title":"吃面多放葱","ground_glass":{"enable":false,"px":3,"alpha":0.7},"menu":[{"key":"home","link":"/","icon":"iconfont icon-home-fill"},{"key":"category","link":"/categories/","icon":"iconfont icon-category-fill"},{"key":"tag","link":"/tags/","icon":"iconfont icon-tags-fill"},{"key":"about","link":"/about/","icon":"iconfont icon-user-fill"}]},"search":{"enable":true,"path":"/local-search.xml","generate_path":"/local-search.xml","field":"post","content":true},"scroll_down_arrow":{"enable":true,"banner_height_limit":90,"scroll_after_turning_page":true},"banner_parallax":true,"footer":{"statistics":{"enable":false,"source":"busuanzi","pv_format":"总访问量 {} 次","uv_format":"总访客数 {} 人"},"beian":{"enable":false,"icp_text":"京ICP证123456号","police_text":"京公网安备12345678号","police_code":12345678,"police_icon":"/img/police_beian.png"}},"scroll_top_arrow":{"enable":true},"index":{"banner_img":"/img/default.png","banner_img_height":100,"banner_mask_alpha":0.3,"post_default_img":"","slogan":{"enable":true,"text":"像蚂蚁一样工作，像蝴蝶一样生活"},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"category":true,"tag":true}},"page":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3},"post":{"banner_img":"/img/default.png","banner_img_height":70,"banner_mask_alpha":0.3,"meta":{"author":{"enable":false},"date":{"enable":true,"format":"LL a"},"wordcount":{"enable":true,"format":"{} 字"},"min2read":{"enable":true,"format":"{} 分钟","words":100},"views":{"enable":false,"source":"busuanzi","format":"{} 次"}},"updated":{"enable":false,"content":"本文最后更新于：","relative":false},"toc":{"enable":true,"headingSelector":"h1,h2,h3,h4,h5,h6","collapseDepth":0},"copyright":{"enable":true,"content":"本博客所有文章除特别声明外，均采用 <a href=\"https://creativecommons.org/licenses/by-sa/4.0/deed.zh\" rel=\"nofollow noopener\">CC BY-SA 4.0 协议</a> ，转载请注明出处！"},"prev_next":{"enable":true},"custom":{"enable":false,"content":"<img src=\"https://octodex.github.com/images/jetpacktocat.png\" class=\"rounded mx-auto d-block mt-5\" style=\"width:150px; height:150px;\">"},"image_zoom":{"enable":true},"footnote":{"enable":true,"header":""},"math":{"enable":false,"specific":false,"engine":"mathjax"},"mermaid":{"enable":false,"specific":false,"options":{"theme":"default"}},"comments":{"enable":false,"type":"disqus"}},"utterances":{"repo":null,"issue_term":"pathname","label":"utterances","theme":"github-light","theme_dark":"github-dark","crossorigin":"anonymous"},"disqus":{"shortname":null,"disqusjs":false,"apikey":null},"gitalk":{"clientID":null,"clientSecret":null,"repo":null,"owner":null,"admin":["name"],"id":"location.pathname","language":"zh-CN","labels":["Gitalk"],"perPage":10,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true},"valine":{"appid":null,"appkey":null,"placeholder":"说点什么","path":"window.location.pathname","avatar":"retro","meta":["nick","mail","link"],"pageSize":10,"lang":"zh-CN","highlight":false,"recordIP":false,"serverURLs":null},"changyan":{"appid":"","appkey":""},"livere":{"uid":""},"remark42":{"host":"https://remark.haoyizebo.com","site_id":"haoyizebo","max_shown_comments":10,"locale":"zh"},"archive":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null},"category":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"post_limit":10,"order_by":"-length","collapse_depth":0},"tag":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null,"tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"avatar":"/img/avatar.png","name":"蔺国防","introduce":"移动应用开发者，历史文学爱好者","icons":[{"class":"iconfont icon-github-fill","link":"https://github.com","tip":"GitHub"},{"class":"iconfont icon-douban-fill","link":"https://douban.com","tip":"豆瓣"},{"class":"iconfont icon-wechat-fill","qrcode":"/img/favicon.png"}]},"page404":{"banner_img":"/img/default.png","banner_img_height":85,"banner_mask_alpha":0.3,"subtitle":"Page not found"},"links":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"items":[{"title":"Fluid Docs","intro":"主题使用指南","link":"https://hexo.fluid-dev.com/docs/","image":"/img/favicon.png"},{"title":"Fluid Repo","intro":"主题 GitHub 仓库","link":"https://github.com/fluid-dev/hexo-theme-fluid","image":"/img/favicon.png"},{"title":"Fluid Example","intro":"主题操作示例","link":"https://hexo.fluid-dev.com/docs/example/","image":"/img/favicon.png"}]}}}},"excerpt":"","more":"<p>之前感觉网站上关于iOS编程知识内容不够权威和完整,所以一直从苹果官方文档上一点一点翻译,效率慢,占用时间多.所以就开始找官网翻译,目前已收集部分文档.前人栽树,后人乘凉.在此感谢所有优秀翻译者的分享.</p>\n<p> (链接:<a href=\"https://pan.baidu.com/s/1dCG8r0\">https://pan.baidu.com/s/1dCG8r0</a>  密码:3dpn)<br>里面包含</p>\n<ul>\n<li><em>核心动画编程指南</em> </li>\n<li><em>多线程编程指南</em> </li>\n<li><em>本地和远程推送编程指南</em></li>\n<li><em>ARC官方文档</em></li>\n<li><em>iOS并发编程指南</em></li>\n</ul>\n"},{"title":"友盟三方登录","date":"2017-05-16T03:22:00.000Z","_content":"# API\n   - 绑定账号\n   -  解绑账号\n   - 校验UID\n   - 校验手机号\n\n---\n# 登录流程\n\n![登录流程.png](http://upload-images.jianshu.io/upload_images/3340896-3c9abdd048dbc676.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n---\n### 注意:\n- 友盟SDK需要及时更新,4.x,5.x版本可能无法获取到uid\n- QQ第三方登录需要向腾讯开发者平台申请QQ统一UID,然后通过腾讯给的接口请求UID;否则,iOS和Android获取的uid是不一样的\n- 微信第三方登录功能需要登录微信开发者中心,开通第三方登录授权 (付费功能)\n- 如果集成了友盟分享功能,集成第三方登录只需获取用户信息即可\n\n// 在需要进行获取登录信息的UIViewController中加入如下代码\n```\n#import <UMSocialCore/UMSocialCore.h>\n\n- (void)getUserInfoForPlatform:(UMSocialPlatformType)platformType\n{\n    [[UMSocialManager defaultManager] getUserInfoWithPlatform:platformType currentViewController:self completion:^(id result, NSError *error) {\n\n        UMSocialUserInfoResponse *resp = result;\n\n        // 第三方登录数据(为空表示平台未提供)\n        // 授权数据\n        NSLog(@\" uid: %@\", resp.uid);\n        NSLog(@\" openid: %@\", resp.openid);\n        NSLog(@\" accessToken: %@\", resp.accessToken);\n        NSLog(@\" refreshToken: %@\", resp.refreshToken);\n        NSLog(@\" expiration: %@\", resp.expiration);\n\n        // 用户数据\n        NSLog(@\" name: %@\", resp.name);\n        NSLog(@\" iconurl: %@\", resp.iconurl);\n        NSLog(@\" gender: %@\", resp.gender);\n\n        // 第三方平台SDK原始数据\n        NSLog(@\" originalResponse: %@\", resp.originalResponse);\n    }];\n}\n```\n","source":"_posts/iOS/iOS友盟第三方登录.md","raw":"\n---\ntitle:  友盟三方登录 \ndate:  2017-05-16 11:22\ncategories:\n- iOS\ntags: \n- 友盟 \n---\n# API\n   - 绑定账号\n   -  解绑账号\n   - 校验UID\n   - 校验手机号\n\n---\n# 登录流程\n\n![登录流程.png](http://upload-images.jianshu.io/upload_images/3340896-3c9abdd048dbc676.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n---\n### 注意:\n- 友盟SDK需要及时更新,4.x,5.x版本可能无法获取到uid\n- QQ第三方登录需要向腾讯开发者平台申请QQ统一UID,然后通过腾讯给的接口请求UID;否则,iOS和Android获取的uid是不一样的\n- 微信第三方登录功能需要登录微信开发者中心,开通第三方登录授权 (付费功能)\n- 如果集成了友盟分享功能,集成第三方登录只需获取用户信息即可\n\n// 在需要进行获取登录信息的UIViewController中加入如下代码\n```\n#import <UMSocialCore/UMSocialCore.h>\n\n- (void)getUserInfoForPlatform:(UMSocialPlatformType)platformType\n{\n    [[UMSocialManager defaultManager] getUserInfoWithPlatform:platformType currentViewController:self completion:^(id result, NSError *error) {\n\n        UMSocialUserInfoResponse *resp = result;\n\n        // 第三方登录数据(为空表示平台未提供)\n        // 授权数据\n        NSLog(@\" uid: %@\", resp.uid);\n        NSLog(@\" openid: %@\", resp.openid);\n        NSLog(@\" accessToken: %@\", resp.accessToken);\n        NSLog(@\" refreshToken: %@\", resp.refreshToken);\n        NSLog(@\" expiration: %@\", resp.expiration);\n\n        // 用户数据\n        NSLog(@\" name: %@\", resp.name);\n        NSLog(@\" iconurl: %@\", resp.iconurl);\n        NSLog(@\" gender: %@\", resp.gender);\n\n        // 第三方平台SDK原始数据\n        NSLog(@\" originalResponse: %@\", resp.originalResponse);\n    }];\n}\n```\n","slug":"iOS/iOS友盟第三方登录","published":1,"updated":"2020-09-27T10:45:11.469Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgq6gnxe002vt29k17ms2fai","content":"<h1 id=\"API\"><a href=\"#API\" class=\"headerlink\" title=\"API\"></a>API</h1><ul>\n<li>绑定账号</li>\n<li>解绑账号</li>\n<li>校验UID</li>\n<li>校验手机号</li>\n</ul>\n<hr>\n<h1 id=\"登录流程\"><a href=\"#登录流程\" class=\"headerlink\" title=\"登录流程\"></a>登录流程</h1><p><img src=\"http://upload-images.jianshu.io/upload_images/3340896-3c9abdd048dbc676.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"登录流程.png\"></p>\n<hr>\n<h3 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意:\"></a>注意:</h3><ul>\n<li>友盟SDK需要及时更新,4.x,5.x版本可能无法获取到uid</li>\n<li>QQ第三方登录需要向腾讯开发者平台申请QQ统一UID,然后通过腾讯给的接口请求UID;否则,iOS和Android获取的uid是不一样的</li>\n<li>微信第三方登录功能需要登录微信开发者中心,开通第三方登录授权 (付费功能)</li>\n<li>如果集成了友盟分享功能,集成第三方登录只需获取用户信息即可</li>\n</ul>\n<p>// 在需要进行获取登录信息的UIViewController中加入如下代码</p>\n<pre><code class=\"hljs reasonml\">#import &lt;UMSocialCore/<span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">UMSocialCore</span>.</span></span>h&gt;\n\n- (void)getUserInfoForPlatform:(UMSocialPlatformType)platformType\n&#123;\n    <span class=\"hljs-literal\">[[UMS<span class=\"hljs-identifier\">ocialManager</span> <span class=\"hljs-identifier\">defaultManager</span>]</span> getUserInfoWithPlatform:platformType currentViewController:self completion:^(id result, NSError *error) &#123;\n\n        UMSocialUserInfoResponse *resp = result;\n\n        <span class=\"hljs-comment\">// 第三方登录数据(为空表示平台未提供)</span>\n        <span class=\"hljs-comment\">// 授权数据</span>\n        <span class=\"hljs-constructor\">NSLog(@<span class=\"hljs-string\">&quot; uid: %@&quot;</span>, <span class=\"hljs-params\">resp</span>.<span class=\"hljs-params\">uid</span>)</span>;\n        <span class=\"hljs-constructor\">NSLog(@<span class=\"hljs-string\">&quot; openid: %@&quot;</span>, <span class=\"hljs-params\">resp</span>.<span class=\"hljs-params\">openid</span>)</span>;\n        <span class=\"hljs-constructor\">NSLog(@<span class=\"hljs-string\">&quot; accessToken: %@&quot;</span>, <span class=\"hljs-params\">resp</span>.<span class=\"hljs-params\">accessToken</span>)</span>;\n        <span class=\"hljs-constructor\">NSLog(@<span class=\"hljs-string\">&quot; refreshToken: %@&quot;</span>, <span class=\"hljs-params\">resp</span>.<span class=\"hljs-params\">refreshToken</span>)</span>;\n        <span class=\"hljs-constructor\">NSLog(@<span class=\"hljs-string\">&quot; expiration: %@&quot;</span>, <span class=\"hljs-params\">resp</span>.<span class=\"hljs-params\">expiration</span>)</span>;\n\n        <span class=\"hljs-comment\">// 用户数据</span>\n        <span class=\"hljs-constructor\">NSLog(@<span class=\"hljs-string\">&quot; name: %@&quot;</span>, <span class=\"hljs-params\">resp</span>.<span class=\"hljs-params\">name</span>)</span>;\n        <span class=\"hljs-constructor\">NSLog(@<span class=\"hljs-string\">&quot; iconurl: %@&quot;</span>, <span class=\"hljs-params\">resp</span>.<span class=\"hljs-params\">iconurl</span>)</span>;\n        <span class=\"hljs-constructor\">NSLog(@<span class=\"hljs-string\">&quot; gender: %@&quot;</span>, <span class=\"hljs-params\">resp</span>.<span class=\"hljs-params\">gender</span>)</span>;\n\n        <span class=\"hljs-comment\">// 第三方平台SDK原始数据</span>\n        <span class=\"hljs-constructor\">NSLog(@<span class=\"hljs-string\">&quot; originalResponse: %@&quot;</span>, <span class=\"hljs-params\">resp</span>.<span class=\"hljs-params\">originalResponse</span>)</span>;\n    &#125;];\n&#125;</code></pre>\n","site":{"data":{"fluid_static_prefix":{"internal_js":"/js","internal_css":"/css","internal_img":"/img","iconfont":"//at.alicdn.com/t/font_1736178_kmeydafke9r.css","anchor":"https://cdn.staticfile.org/anchor-js/4.2.2/","github_markdown":"https://cdn.staticfile.org/github-markdown-css/4.0.0/","jquery":"https://cdn.staticfile.org/jquery/3.4.1/","bootstrap":"https://cdn.staticfile.org/twitter-bootstrap/4.4.1/","highlightjs":"https://cdn.staticfile.org/highlight.js/10.0.0/","prismjs":"https://cdn.staticfile.org/prism/1.21.0/","tocbot":"https://cdn.staticfile.org/tocbot/4.11.1/","typed":"https://cdn.staticfile.org/typed.js/2.0.11/","fancybox":"https://cdn.staticfile.org/fancybox/3.5.7/","mathjax":"https://cdn.staticfile.org/mathjax/3.0.5/es5/","katex":"https://cdn.staticfile.org/KaTeX/0.11.1/","aplayer":"https://cdn.staticfile.org/aplayer/1.10.1/","busuanzi":"https://busuanzi.ibruce.info/busuanzi/2.3/","clipboard":"https://cdn.staticfile.org/clipboard.js/2.0.6/","mermaid":"https://cdn.staticfile.org/mermaid/8.5.0/","valine":"https://cdn.staticfile.org/valine/1.4.14/","gitalk":"https://cdn.staticfile.org/gitalk/1.6.2/","blueimp_md5":"https://cdn.staticfile.org/blueimp-md5/2.13.0/","disqusjs":"https://cdn.jsdelivr.net/npm/disqusjs@1.0/dist/","hint":"/lib/hint/"},"fluid_config":{"favicon":"/img/favicon.png","apple_touch_icon":"/img/favicon.png","title_join_string":" - ","force_https":false,"code":{"copy_btn":true,"highlight":{"enable":true,"lib":"highlightjs","highlightjs":{"style":"Github Gist","bg_color":false},"prismjs":{"style":"default","preprocess":true}}},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"_","loop":false},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"right","visible":"hover","icon":""},"mouse_click":{"enable":false,"style":"values"}},"dark_mode":{"enable":true,"default":"auto"},"color":{"body_bg_color":"#eee","body_bg_color_dark":"#181c27","navbar_bg_color":"#2f4154","navbar_bg_color_dark":"#1f3144","navbar_text_color":"#fff","navbar_text_color_dark":"#d0d0d0","text_color":"#3c4858","text_color_dark":"#c4c6c9","sec_text_color":"#718096","sec_text_color_dark":"#a7a9ad","post_text_color":"#2c3e50","post_text_color_dark":"#c4c6c9","post_heading_color":"#1a202c","post_heading_color_dark":"#c4c6c9","post_link_color":"#0366d6","post_link_color_dark":"#1589e9","link_hover_color":"#30a9de","link_hover_color_dark":"#30a9de","link_hover_bg_color":"#f8f9fa","link_hover_bg_color_dark":"#364151","board_color":"#fff","board_color_dark":"#252d38"},"font":{"font_size":"16px","font_family":null,"code_font_size":"85%"},"custom_js":null,"custom_css":null,"custom_html":"","web_analytics":{"enable":false,"baidu":null,"google":null,"gtag":null,"tencent":{"sid":null,"cid":null},"woyaola":null,"cnzz":null,"leancloud":{"app_id":null,"app_key":null,"server_url":null}},"lazyload":{"enable":true,"onlypost":false},"daovoice":{"enable":false,"appid":""},"aplayer":{"enable":false,"autoplay":false,"loop":"all","order":"random","theme":"#b7daff","songs":[{"name":"name","artist":"artist","url":"/songs/test.mp3","cover":"/img/cover.jpg"},{"name":"name","artist":"artist","url":"https://...url.mp3","cover":"https://...cover.jpg"}]},"version":{"check":false},"navbar":{"blog_title":"吃面多放葱","ground_glass":{"enable":false,"px":3,"alpha":0.7},"menu":[{"key":"home","link":"/","icon":"iconfont icon-home-fill"},{"key":"category","link":"/categories/","icon":"iconfont icon-category-fill"},{"key":"tag","link":"/tags/","icon":"iconfont icon-tags-fill"},{"key":"about","link":"/about/","icon":"iconfont icon-user-fill"}]},"search":{"enable":true,"path":"/local-search.xml","generate_path":"/local-search.xml","field":"post","content":true},"scroll_down_arrow":{"enable":true,"banner_height_limit":90,"scroll_after_turning_page":true},"banner_parallax":true,"footer":{"statistics":{"enable":false,"source":"busuanzi","pv_format":"总访问量 {} 次","uv_format":"总访客数 {} 人"},"beian":{"enable":false,"icp_text":"京ICP证123456号","police_text":"京公网安备12345678号","police_code":12345678,"police_icon":"/img/police_beian.png"}},"scroll_top_arrow":{"enable":true},"index":{"banner_img":"/img/default.png","banner_img_height":100,"banner_mask_alpha":0.3,"post_default_img":"","slogan":{"enable":true,"text":"像蚂蚁一样工作，像蝴蝶一样生活"},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"category":true,"tag":true}},"page":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3},"post":{"banner_img":"/img/default.png","banner_img_height":70,"banner_mask_alpha":0.3,"meta":{"author":{"enable":false},"date":{"enable":true,"format":"LL a"},"wordcount":{"enable":true,"format":"{} 字"},"min2read":{"enable":true,"format":"{} 分钟","words":100},"views":{"enable":false,"source":"busuanzi","format":"{} 次"}},"updated":{"enable":false,"content":"本文最后更新于：","relative":false},"toc":{"enable":true,"headingSelector":"h1,h2,h3,h4,h5,h6","collapseDepth":0},"copyright":{"enable":true,"content":"本博客所有文章除特别声明外，均采用 <a href=\"https://creativecommons.org/licenses/by-sa/4.0/deed.zh\" rel=\"nofollow noopener\">CC BY-SA 4.0 协议</a> ，转载请注明出处！"},"prev_next":{"enable":true},"custom":{"enable":false,"content":"<img src=\"https://octodex.github.com/images/jetpacktocat.png\" class=\"rounded mx-auto d-block mt-5\" style=\"width:150px; height:150px;\">"},"image_zoom":{"enable":true},"footnote":{"enable":true,"header":""},"math":{"enable":false,"specific":false,"engine":"mathjax"},"mermaid":{"enable":false,"specific":false,"options":{"theme":"default"}},"comments":{"enable":false,"type":"disqus"}},"utterances":{"repo":null,"issue_term":"pathname","label":"utterances","theme":"github-light","theme_dark":"github-dark","crossorigin":"anonymous"},"disqus":{"shortname":null,"disqusjs":false,"apikey":null},"gitalk":{"clientID":null,"clientSecret":null,"repo":null,"owner":null,"admin":["name"],"id":"location.pathname","language":"zh-CN","labels":["Gitalk"],"perPage":10,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true},"valine":{"appid":null,"appkey":null,"placeholder":"说点什么","path":"window.location.pathname","avatar":"retro","meta":["nick","mail","link"],"pageSize":10,"lang":"zh-CN","highlight":false,"recordIP":false,"serverURLs":null},"changyan":{"appid":"","appkey":""},"livere":{"uid":""},"remark42":{"host":"https://remark.haoyizebo.com","site_id":"haoyizebo","max_shown_comments":10,"locale":"zh"},"archive":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null},"category":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"post_limit":10,"order_by":"-length","collapse_depth":0},"tag":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null,"tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"avatar":"/img/avatar.png","name":"蔺国防","introduce":"移动应用开发者，历史文学爱好者","icons":[{"class":"iconfont icon-github-fill","link":"https://github.com","tip":"GitHub"},{"class":"iconfont icon-douban-fill","link":"https://douban.com","tip":"豆瓣"},{"class":"iconfont icon-wechat-fill","qrcode":"/img/favicon.png"}]},"page404":{"banner_img":"/img/default.png","banner_img_height":85,"banner_mask_alpha":0.3,"subtitle":"Page not found"},"links":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"items":[{"title":"Fluid Docs","intro":"主题使用指南","link":"https://hexo.fluid-dev.com/docs/","image":"/img/favicon.png"},{"title":"Fluid Repo","intro":"主题 GitHub 仓库","link":"https://github.com/fluid-dev/hexo-theme-fluid","image":"/img/favicon.png"},{"title":"Fluid Example","intro":"主题操作示例","link":"https://hexo.fluid-dev.com/docs/example/","image":"/img/favicon.png"}]}}}},"excerpt":"","more":"<h1 id=\"API\"><a href=\"#API\" class=\"headerlink\" title=\"API\"></a>API</h1><ul>\n<li>绑定账号</li>\n<li>解绑账号</li>\n<li>校验UID</li>\n<li>校验手机号</li>\n</ul>\n<hr>\n<h1 id=\"登录流程\"><a href=\"#登录流程\" class=\"headerlink\" title=\"登录流程\"></a>登录流程</h1><p><img src=\"http://upload-images.jianshu.io/upload_images/3340896-3c9abdd048dbc676.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"登录流程.png\"></p>\n<hr>\n<h3 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意:\"></a>注意:</h3><ul>\n<li>友盟SDK需要及时更新,4.x,5.x版本可能无法获取到uid</li>\n<li>QQ第三方登录需要向腾讯开发者平台申请QQ统一UID,然后通过腾讯给的接口请求UID;否则,iOS和Android获取的uid是不一样的</li>\n<li>微信第三方登录功能需要登录微信开发者中心,开通第三方登录授权 (付费功能)</li>\n<li>如果集成了友盟分享功能,集成第三方登录只需获取用户信息即可</li>\n</ul>\n<p>// 在需要进行获取登录信息的UIViewController中加入如下代码</p>\n<pre><code class=\"hljs reasonml\">#import &lt;UMSocialCore/<span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">UMSocialCore</span>.</span></span>h&gt;\n\n- (void)getUserInfoForPlatform:(UMSocialPlatformType)platformType\n&#123;\n    <span class=\"hljs-literal\">[[UMS<span class=\"hljs-identifier\">ocialManager</span> <span class=\"hljs-identifier\">defaultManager</span>]</span> getUserInfoWithPlatform:platformType currentViewController:self completion:^(id result, NSError *error) &#123;\n\n        UMSocialUserInfoResponse *resp = result;\n\n        <span class=\"hljs-comment\">// 第三方登录数据(为空表示平台未提供)</span>\n        <span class=\"hljs-comment\">// 授权数据</span>\n        <span class=\"hljs-constructor\">NSLog(@<span class=\"hljs-string\">&quot; uid: %@&quot;</span>, <span class=\"hljs-params\">resp</span>.<span class=\"hljs-params\">uid</span>)</span>;\n        <span class=\"hljs-constructor\">NSLog(@<span class=\"hljs-string\">&quot; openid: %@&quot;</span>, <span class=\"hljs-params\">resp</span>.<span class=\"hljs-params\">openid</span>)</span>;\n        <span class=\"hljs-constructor\">NSLog(@<span class=\"hljs-string\">&quot; accessToken: %@&quot;</span>, <span class=\"hljs-params\">resp</span>.<span class=\"hljs-params\">accessToken</span>)</span>;\n        <span class=\"hljs-constructor\">NSLog(@<span class=\"hljs-string\">&quot; refreshToken: %@&quot;</span>, <span class=\"hljs-params\">resp</span>.<span class=\"hljs-params\">refreshToken</span>)</span>;\n        <span class=\"hljs-constructor\">NSLog(@<span class=\"hljs-string\">&quot; expiration: %@&quot;</span>, <span class=\"hljs-params\">resp</span>.<span class=\"hljs-params\">expiration</span>)</span>;\n\n        <span class=\"hljs-comment\">// 用户数据</span>\n        <span class=\"hljs-constructor\">NSLog(@<span class=\"hljs-string\">&quot; name: %@&quot;</span>, <span class=\"hljs-params\">resp</span>.<span class=\"hljs-params\">name</span>)</span>;\n        <span class=\"hljs-constructor\">NSLog(@<span class=\"hljs-string\">&quot; iconurl: %@&quot;</span>, <span class=\"hljs-params\">resp</span>.<span class=\"hljs-params\">iconurl</span>)</span>;\n        <span class=\"hljs-constructor\">NSLog(@<span class=\"hljs-string\">&quot; gender: %@&quot;</span>, <span class=\"hljs-params\">resp</span>.<span class=\"hljs-params\">gender</span>)</span>;\n\n        <span class=\"hljs-comment\">// 第三方平台SDK原始数据</span>\n        <span class=\"hljs-constructor\">NSLog(@<span class=\"hljs-string\">&quot; originalResponse: %@&quot;</span>, <span class=\"hljs-params\">resp</span>.<span class=\"hljs-params\">originalResponse</span>)</span>;\n    &#125;];\n&#125;</code></pre>\n"},{"title":"自动打包Shell","date":"2017-03-17T05:02:00.000Z","_content":"\n##只打包ipa文件\n\n- 下载`build.sh`文件              [传送门](https://github.com/913868456/-)\n- 修改工程目录为你的项目   `projectPath=你的工程目录`\n-  配置编译模式                     `buildConfig=\"Debug\"  ` 或 `buildConfig=\"Release\"`\n-  在终端下,定位到脚本目录,运行脚本   `sh build.sh`\n\n##打包ipa文件并且上传到fir.im\n- 下载`build_upTofir.sh`文件       [传送门](https://github.com/913868456/-)\n-  更改工程目录,配置编译模式(同上)\n-  配置fir.im Token  `fir p $Export_Path -T 你的fir Token`\n-  检测ruby版本 `ruby -v`  ruby版本需大于1.9.3, 不满足更新ruby\n-  安装fir.im插件  `gem install fir-cli`\n-  在终端下, 定位到脚本目录,运行脚本  `sh build_upTofir.sh`\n\n##**注意:** \n需要修改的参数:  ` projectPath`  `buildConfig` `$Export_Path -T`\n","source":"_posts/iOS/iOS自动打包Shell脚本文件.md","raw":"---\ntitle:  自动打包Shell \ndate:  2017-03-17 13:02\ncategories:\n- iOS\ntags: \n- Shell\n- 自动打包\n---\n\n##只打包ipa文件\n\n- 下载`build.sh`文件              [传送门](https://github.com/913868456/-)\n- 修改工程目录为你的项目   `projectPath=你的工程目录`\n-  配置编译模式                     `buildConfig=\"Debug\"  ` 或 `buildConfig=\"Release\"`\n-  在终端下,定位到脚本目录,运行脚本   `sh build.sh`\n\n##打包ipa文件并且上传到fir.im\n- 下载`build_upTofir.sh`文件       [传送门](https://github.com/913868456/-)\n-  更改工程目录,配置编译模式(同上)\n-  配置fir.im Token  `fir p $Export_Path -T 你的fir Token`\n-  检测ruby版本 `ruby -v`  ruby版本需大于1.9.3, 不满足更新ruby\n-  安装fir.im插件  `gem install fir-cli`\n-  在终端下, 定位到脚本目录,运行脚本  `sh build_upTofir.sh`\n\n##**注意:** \n需要修改的参数:  ` projectPath`  `buildConfig` `$Export_Path -T`\n","slug":"iOS/iOS自动打包Shell脚本文件","published":1,"updated":"2020-09-27T10:46:21.163Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgq6gnxf002zt29kcf98asz1","content":"<p>##只打包ipa文件</p>\n<ul>\n<li>下载<code>build.sh</code>文件              <a href=\"https://github.com/913868456/-\">传送门</a></li>\n<li>修改工程目录为你的项目   <code>projectPath=你的工程目录</code></li>\n<li>配置编译模式                     <code>buildConfig=&quot;Debug&quot;  </code> 或 <code>buildConfig=&quot;Release&quot;</code></li>\n<li>在终端下,定位到脚本目录,运行脚本   <code>sh build.sh</code></li>\n</ul>\n<p>##打包ipa文件并且上传到fir.im</p>\n<ul>\n<li>下载<code>build_upTofir.sh</code>文件       <a href=\"https://github.com/913868456/-\">传送门</a></li>\n<li>更改工程目录,配置编译模式(同上)</li>\n<li>配置fir.im Token  <code>fir p $Export_Path -T 你的fir Token</code></li>\n<li>检测ruby版本 <code>ruby -v</code>  ruby版本需大于1.9.3, 不满足更新ruby</li>\n<li>安装fir.im插件  <code>gem install fir-cli</code></li>\n<li>在终端下, 定位到脚本目录,运行脚本  <code>sh build_upTofir.sh</code></li>\n</ul>\n<p>##<strong>注意:</strong><br>需要修改的参数:  <code> projectPath</code>  <code>buildConfig</code> <code>$Export_Path -T</code></p>\n","site":{"data":{"fluid_static_prefix":{"internal_js":"/js","internal_css":"/css","internal_img":"/img","iconfont":"//at.alicdn.com/t/font_1736178_kmeydafke9r.css","anchor":"https://cdn.staticfile.org/anchor-js/4.2.2/","github_markdown":"https://cdn.staticfile.org/github-markdown-css/4.0.0/","jquery":"https://cdn.staticfile.org/jquery/3.4.1/","bootstrap":"https://cdn.staticfile.org/twitter-bootstrap/4.4.1/","highlightjs":"https://cdn.staticfile.org/highlight.js/10.0.0/","prismjs":"https://cdn.staticfile.org/prism/1.21.0/","tocbot":"https://cdn.staticfile.org/tocbot/4.11.1/","typed":"https://cdn.staticfile.org/typed.js/2.0.11/","fancybox":"https://cdn.staticfile.org/fancybox/3.5.7/","mathjax":"https://cdn.staticfile.org/mathjax/3.0.5/es5/","katex":"https://cdn.staticfile.org/KaTeX/0.11.1/","aplayer":"https://cdn.staticfile.org/aplayer/1.10.1/","busuanzi":"https://busuanzi.ibruce.info/busuanzi/2.3/","clipboard":"https://cdn.staticfile.org/clipboard.js/2.0.6/","mermaid":"https://cdn.staticfile.org/mermaid/8.5.0/","valine":"https://cdn.staticfile.org/valine/1.4.14/","gitalk":"https://cdn.staticfile.org/gitalk/1.6.2/","blueimp_md5":"https://cdn.staticfile.org/blueimp-md5/2.13.0/","disqusjs":"https://cdn.jsdelivr.net/npm/disqusjs@1.0/dist/","hint":"/lib/hint/"},"fluid_config":{"favicon":"/img/favicon.png","apple_touch_icon":"/img/favicon.png","title_join_string":" - ","force_https":false,"code":{"copy_btn":true,"highlight":{"enable":true,"lib":"highlightjs","highlightjs":{"style":"Github Gist","bg_color":false},"prismjs":{"style":"default","preprocess":true}}},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"_","loop":false},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"right","visible":"hover","icon":""},"mouse_click":{"enable":false,"style":"values"}},"dark_mode":{"enable":true,"default":"auto"},"color":{"body_bg_color":"#eee","body_bg_color_dark":"#181c27","navbar_bg_color":"#2f4154","navbar_bg_color_dark":"#1f3144","navbar_text_color":"#fff","navbar_text_color_dark":"#d0d0d0","text_color":"#3c4858","text_color_dark":"#c4c6c9","sec_text_color":"#718096","sec_text_color_dark":"#a7a9ad","post_text_color":"#2c3e50","post_text_color_dark":"#c4c6c9","post_heading_color":"#1a202c","post_heading_color_dark":"#c4c6c9","post_link_color":"#0366d6","post_link_color_dark":"#1589e9","link_hover_color":"#30a9de","link_hover_color_dark":"#30a9de","link_hover_bg_color":"#f8f9fa","link_hover_bg_color_dark":"#364151","board_color":"#fff","board_color_dark":"#252d38"},"font":{"font_size":"16px","font_family":null,"code_font_size":"85%"},"custom_js":null,"custom_css":null,"custom_html":"","web_analytics":{"enable":false,"baidu":null,"google":null,"gtag":null,"tencent":{"sid":null,"cid":null},"woyaola":null,"cnzz":null,"leancloud":{"app_id":null,"app_key":null,"server_url":null}},"lazyload":{"enable":true,"onlypost":false},"daovoice":{"enable":false,"appid":""},"aplayer":{"enable":false,"autoplay":false,"loop":"all","order":"random","theme":"#b7daff","songs":[{"name":"name","artist":"artist","url":"/songs/test.mp3","cover":"/img/cover.jpg"},{"name":"name","artist":"artist","url":"https://...url.mp3","cover":"https://...cover.jpg"}]},"version":{"check":false},"navbar":{"blog_title":"吃面多放葱","ground_glass":{"enable":false,"px":3,"alpha":0.7},"menu":[{"key":"home","link":"/","icon":"iconfont icon-home-fill"},{"key":"category","link":"/categories/","icon":"iconfont icon-category-fill"},{"key":"tag","link":"/tags/","icon":"iconfont icon-tags-fill"},{"key":"about","link":"/about/","icon":"iconfont icon-user-fill"}]},"search":{"enable":true,"path":"/local-search.xml","generate_path":"/local-search.xml","field":"post","content":true},"scroll_down_arrow":{"enable":true,"banner_height_limit":90,"scroll_after_turning_page":true},"banner_parallax":true,"footer":{"statistics":{"enable":false,"source":"busuanzi","pv_format":"总访问量 {} 次","uv_format":"总访客数 {} 人"},"beian":{"enable":false,"icp_text":"京ICP证123456号","police_text":"京公网安备12345678号","police_code":12345678,"police_icon":"/img/police_beian.png"}},"scroll_top_arrow":{"enable":true},"index":{"banner_img":"/img/default.png","banner_img_height":100,"banner_mask_alpha":0.3,"post_default_img":"","slogan":{"enable":true,"text":"像蚂蚁一样工作，像蝴蝶一样生活"},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"category":true,"tag":true}},"page":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3},"post":{"banner_img":"/img/default.png","banner_img_height":70,"banner_mask_alpha":0.3,"meta":{"author":{"enable":false},"date":{"enable":true,"format":"LL a"},"wordcount":{"enable":true,"format":"{} 字"},"min2read":{"enable":true,"format":"{} 分钟","words":100},"views":{"enable":false,"source":"busuanzi","format":"{} 次"}},"updated":{"enable":false,"content":"本文最后更新于：","relative":false},"toc":{"enable":true,"headingSelector":"h1,h2,h3,h4,h5,h6","collapseDepth":0},"copyright":{"enable":true,"content":"本博客所有文章除特别声明外，均采用 <a href=\"https://creativecommons.org/licenses/by-sa/4.0/deed.zh\" rel=\"nofollow noopener\">CC BY-SA 4.0 协议</a> ，转载请注明出处！"},"prev_next":{"enable":true},"custom":{"enable":false,"content":"<img src=\"https://octodex.github.com/images/jetpacktocat.png\" class=\"rounded mx-auto d-block mt-5\" style=\"width:150px; height:150px;\">"},"image_zoom":{"enable":true},"footnote":{"enable":true,"header":""},"math":{"enable":false,"specific":false,"engine":"mathjax"},"mermaid":{"enable":false,"specific":false,"options":{"theme":"default"}},"comments":{"enable":false,"type":"disqus"}},"utterances":{"repo":null,"issue_term":"pathname","label":"utterances","theme":"github-light","theme_dark":"github-dark","crossorigin":"anonymous"},"disqus":{"shortname":null,"disqusjs":false,"apikey":null},"gitalk":{"clientID":null,"clientSecret":null,"repo":null,"owner":null,"admin":["name"],"id":"location.pathname","language":"zh-CN","labels":["Gitalk"],"perPage":10,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true},"valine":{"appid":null,"appkey":null,"placeholder":"说点什么","path":"window.location.pathname","avatar":"retro","meta":["nick","mail","link"],"pageSize":10,"lang":"zh-CN","highlight":false,"recordIP":false,"serverURLs":null},"changyan":{"appid":"","appkey":""},"livere":{"uid":""},"remark42":{"host":"https://remark.haoyizebo.com","site_id":"haoyizebo","max_shown_comments":10,"locale":"zh"},"archive":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null},"category":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"post_limit":10,"order_by":"-length","collapse_depth":0},"tag":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null,"tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"avatar":"/img/avatar.png","name":"蔺国防","introduce":"移动应用开发者，历史文学爱好者","icons":[{"class":"iconfont icon-github-fill","link":"https://github.com","tip":"GitHub"},{"class":"iconfont icon-douban-fill","link":"https://douban.com","tip":"豆瓣"},{"class":"iconfont icon-wechat-fill","qrcode":"/img/favicon.png"}]},"page404":{"banner_img":"/img/default.png","banner_img_height":85,"banner_mask_alpha":0.3,"subtitle":"Page not found"},"links":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"items":[{"title":"Fluid Docs","intro":"主题使用指南","link":"https://hexo.fluid-dev.com/docs/","image":"/img/favicon.png"},{"title":"Fluid Repo","intro":"主题 GitHub 仓库","link":"https://github.com/fluid-dev/hexo-theme-fluid","image":"/img/favicon.png"},{"title":"Fluid Example","intro":"主题操作示例","link":"https://hexo.fluid-dev.com/docs/example/","image":"/img/favicon.png"}]}}}},"excerpt":"","more":"<p>##只打包ipa文件</p>\n<ul>\n<li>下载<code>build.sh</code>文件              <a href=\"https://github.com/913868456/-\">传送门</a></li>\n<li>修改工程目录为你的项目   <code>projectPath=你的工程目录</code></li>\n<li>配置编译模式                     <code>buildConfig=&quot;Debug&quot;  </code> 或 <code>buildConfig=&quot;Release&quot;</code></li>\n<li>在终端下,定位到脚本目录,运行脚本   <code>sh build.sh</code></li>\n</ul>\n<p>##打包ipa文件并且上传到fir.im</p>\n<ul>\n<li>下载<code>build_upTofir.sh</code>文件       <a href=\"https://github.com/913868456/-\">传送门</a></li>\n<li>更改工程目录,配置编译模式(同上)</li>\n<li>配置fir.im Token  <code>fir p $Export_Path -T 你的fir Token</code></li>\n<li>检测ruby版本 <code>ruby -v</code>  ruby版本需大于1.9.3, 不满足更新ruby</li>\n<li>安装fir.im插件  <code>gem install fir-cli</code></li>\n<li>在终端下, 定位到脚本目录,运行脚本  <code>sh build_upTofir.sh</code></li>\n</ul>\n<p>##<strong>注意:</strong><br>需要修改的参数:  <code> projectPath</code>  <code>buildConfig</code> <code>$Export_Path -T</code></p>\n"},{"title":"Xcode Debug 问题","date":"2017-03-16T02:43:00.000Z","_content":"\n在调试程序时，很多开发者喜欢用输出 log 的方式对代码的运行进行追踪，帮助理解。Swift 编译器并不会帮我们将 print 或者 debugPrint 删去，在最终 app 中它们会把内容输出到终端，造成性能的损失。我们当然可以在发布时用查找的方式将所有这些log 输出语句删除或者注释掉，但是更好的方法是通过添加条件编译来将这些语句排除在 Release 版本外。在 Xcode 的 Build Setting 中，在 Other Swift flags 的 Debug 栏中加入 -D DEBUG 即可加入一个编译标识。\n![](https://onevcat.com/assets/images/2016/debug-flag.png)\n之后我们就可以通过将` print` 或者 `debugPrint `包装一下：\n```\n     fuc Dlog (item : Any, file : String = #file, lineNum : Int = #line){\n        #if DEBUG \n            let fileName = (file as NSString).lastPathComponent \n            print (\"fileName:\\(fileName)\\n lineNum:\\(lineNum)\\n \\(item)\")\n        #endif\n     }\n```\n\n这样，在 Release 版本中，dPrint 将会是一个空方法，所有对这个方法的调用都会被编译器剔除掉。需要注意的是，在这种封装下，如果你传入的 items 是一个表达式而不是直接的变量的话，这个表达式还是会被先执行求值的。如果这对性能也产生了可测的影响的话，我们最好用 @autoclosure 修饰参数来重新包装 print。这可以将求值运行推迟到方法内部，这样在 Release 时这个求值也会被一并去掉：\n\n```\n      func Dlog(@autoclosure item: () -> Any, file : String = #file, lineNum : Int = #line) {\n          #if DEBUG\n               let fileName = (file as NSString).lastPathComponent \n               print (\"fileName:\\(fileName)\\n lineNum:\\(lineNum)\\n \\(item)\")\n          #endif\n      }\n\n      Dlog(resultFromHeavyWork())\n      // Release 版本中 resultFromHeavyWork() 不会被执行\n```\n##参考\n   [Swift 性能探索和优化分析](https://onevcat.com/2016/02/swift-performance/)\n","source":"_posts/iOS/swift如何设置Debug模式下的打印输出.md","raw":"---\ntitle:  Xcode Debug 问题\ndate: 2017-03-16 10:43\ncategories:\n- iOS\ntags: \n- Xcode \n---\n\n在调试程序时，很多开发者喜欢用输出 log 的方式对代码的运行进行追踪，帮助理解。Swift 编译器并不会帮我们将 print 或者 debugPrint 删去，在最终 app 中它们会把内容输出到终端，造成性能的损失。我们当然可以在发布时用查找的方式将所有这些log 输出语句删除或者注释掉，但是更好的方法是通过添加条件编译来将这些语句排除在 Release 版本外。在 Xcode 的 Build Setting 中，在 Other Swift flags 的 Debug 栏中加入 -D DEBUG 即可加入一个编译标识。\n![](https://onevcat.com/assets/images/2016/debug-flag.png)\n之后我们就可以通过将` print` 或者 `debugPrint `包装一下：\n```\n     fuc Dlog (item : Any, file : String = #file, lineNum : Int = #line){\n        #if DEBUG \n            let fileName = (file as NSString).lastPathComponent \n            print (\"fileName:\\(fileName)\\n lineNum:\\(lineNum)\\n \\(item)\")\n        #endif\n     }\n```\n\n这样，在 Release 版本中，dPrint 将会是一个空方法，所有对这个方法的调用都会被编译器剔除掉。需要注意的是，在这种封装下，如果你传入的 items 是一个表达式而不是直接的变量的话，这个表达式还是会被先执行求值的。如果这对性能也产生了可测的影响的话，我们最好用 @autoclosure 修饰参数来重新包装 print。这可以将求值运行推迟到方法内部，这样在 Release 时这个求值也会被一并去掉：\n\n```\n      func Dlog(@autoclosure item: () -> Any, file : String = #file, lineNum : Int = #line) {\n          #if DEBUG\n               let fileName = (file as NSString).lastPathComponent \n               print (\"fileName:\\(fileName)\\n lineNum:\\(lineNum)\\n \\(item)\")\n          #endif\n      }\n\n      Dlog(resultFromHeavyWork())\n      // Release 版本中 resultFromHeavyWork() 不会被执行\n```\n##参考\n   [Swift 性能探索和优化分析](https://onevcat.com/2016/02/swift-performance/)\n","slug":"iOS/swift如何设置Debug模式下的打印输出","published":1,"updated":"2020-09-27T11:03:03.116Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgq6gnxg0032t29k87gsa1bl","content":"<p>在调试程序时，很多开发者喜欢用输出 log 的方式对代码的运行进行追踪，帮助理解。Swift 编译器并不会帮我们将 print 或者 debugPrint 删去，在最终 app 中它们会把内容输出到终端，造成性能的损失。我们当然可以在发布时用查找的方式将所有这些log 输出语句删除或者注释掉，但是更好的方法是通过添加条件编译来将这些语句排除在 Release 版本外。在 Xcode 的 Build Setting 中，在 Other Swift flags 的 Debug 栏中加入 -D DEBUG 即可加入一个编译标识。<br><img src=\"https://onevcat.com/assets/images/2016/debug-flag.png\"><br>之后我们就可以通过将<code> print</code> 或者 <code>debugPrint </code>包装一下：</p>\n<pre><code class=\"hljs applescript\">fuc Dlog (<span class=\"hljs-built_in\">item</span> : Any, <span class=\"hljs-built_in\">file</span> : String = <span class=\"hljs-comment\">#file, lineNum : Int = #line)&#123;</span>\n   <span class=\"hljs-comment\">#if DEBUG </span>\n       let fileName = (<span class=\"hljs-built_in\">file</span> <span class=\"hljs-keyword\">as</span> NSString).lastPathComponent \n       print (<span class=\"hljs-string\">&quot;fileName:\\(fileName)\\n lineNum:\\(lineNum)\\n \\(item)&quot;</span>)\n   <span class=\"hljs-comment\">#endif</span>\n&#125;</code></pre>\n\n<p>这样，在 Release 版本中，dPrint 将会是一个空方法，所有对这个方法的调用都会被编译器剔除掉。需要注意的是，在这种封装下，如果你传入的 items 是一个表达式而不是直接的变量的话，这个表达式还是会被先执行求值的。如果这对性能也产生了可测的影响的话，我们最好用 @autoclosure 修饰参数来重新包装 print。这可以将求值运行推迟到方法内部，这样在 Release 时这个求值也会被一并去掉：</p>\n<pre><code class=\"hljs livescript\">func Dlog<span class=\"hljs-function\"><span class=\"hljs-params\">(@autoclosure item: () -&gt; Any, file : <span class=\"hljs-built_in\">String</span> = #file, lineNum : Int = #line)</span> &#123;</span>\n<span class=\"hljs-function\">    #<span class=\"hljs-title\">if</span> <span class=\"hljs-title\">DEBUG</span></span>\n<span class=\"hljs-function\">         <span class=\"hljs-title\">let</span> <span class=\"hljs-title\">fileName</span> = <span class=\"hljs-params\">(file <span class=\"hljs-keyword\">as</span> NSString)</span>.<span class=\"hljs-title\">lastPathComponent</span> </span>\n<span class=\"hljs-function\">         <span class=\"hljs-title\">print</span> <span class=\"hljs-params\">(<span class=\"hljs-string\">&quot;fileName:\\(fileName)\\n lineNum:\\(lineNum)\\n \\(item)&quot;</span>)</span></span>\n<span class=\"hljs-function\">    #<span class=\"hljs-title\">endif</span></span>\n<span class=\"hljs-function\">&#125;</span>\n<span class=\"hljs-function\"></span>\n<span class=\"hljs-function\"><span class=\"hljs-title\">Dlog</span><span class=\"hljs-params\">(resultFromHeavyWork())</span></span>\n<span class=\"hljs-function\">// <span class=\"hljs-title\">Release</span> 版本中 <span class=\"hljs-title\">resultFromHeavyWork</span><span class=\"hljs-params\">()</span> 不会被执行</span></code></pre>\n<p>##参考<br>   <a href=\"https://onevcat.com/2016/02/swift-performance/\">Swift 性能探索和优化分析</a></p>\n","site":{"data":{"fluid_static_prefix":{"internal_js":"/js","internal_css":"/css","internal_img":"/img","iconfont":"//at.alicdn.com/t/font_1736178_kmeydafke9r.css","anchor":"https://cdn.staticfile.org/anchor-js/4.2.2/","github_markdown":"https://cdn.staticfile.org/github-markdown-css/4.0.0/","jquery":"https://cdn.staticfile.org/jquery/3.4.1/","bootstrap":"https://cdn.staticfile.org/twitter-bootstrap/4.4.1/","highlightjs":"https://cdn.staticfile.org/highlight.js/10.0.0/","prismjs":"https://cdn.staticfile.org/prism/1.21.0/","tocbot":"https://cdn.staticfile.org/tocbot/4.11.1/","typed":"https://cdn.staticfile.org/typed.js/2.0.11/","fancybox":"https://cdn.staticfile.org/fancybox/3.5.7/","mathjax":"https://cdn.staticfile.org/mathjax/3.0.5/es5/","katex":"https://cdn.staticfile.org/KaTeX/0.11.1/","aplayer":"https://cdn.staticfile.org/aplayer/1.10.1/","busuanzi":"https://busuanzi.ibruce.info/busuanzi/2.3/","clipboard":"https://cdn.staticfile.org/clipboard.js/2.0.6/","mermaid":"https://cdn.staticfile.org/mermaid/8.5.0/","valine":"https://cdn.staticfile.org/valine/1.4.14/","gitalk":"https://cdn.staticfile.org/gitalk/1.6.2/","blueimp_md5":"https://cdn.staticfile.org/blueimp-md5/2.13.0/","disqusjs":"https://cdn.jsdelivr.net/npm/disqusjs@1.0/dist/","hint":"/lib/hint/"},"fluid_config":{"favicon":"/img/favicon.png","apple_touch_icon":"/img/favicon.png","title_join_string":" - ","force_https":false,"code":{"copy_btn":true,"highlight":{"enable":true,"lib":"highlightjs","highlightjs":{"style":"Github Gist","bg_color":false},"prismjs":{"style":"default","preprocess":true}}},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"_","loop":false},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"right","visible":"hover","icon":""},"mouse_click":{"enable":false,"style":"values"}},"dark_mode":{"enable":true,"default":"auto"},"color":{"body_bg_color":"#eee","body_bg_color_dark":"#181c27","navbar_bg_color":"#2f4154","navbar_bg_color_dark":"#1f3144","navbar_text_color":"#fff","navbar_text_color_dark":"#d0d0d0","text_color":"#3c4858","text_color_dark":"#c4c6c9","sec_text_color":"#718096","sec_text_color_dark":"#a7a9ad","post_text_color":"#2c3e50","post_text_color_dark":"#c4c6c9","post_heading_color":"#1a202c","post_heading_color_dark":"#c4c6c9","post_link_color":"#0366d6","post_link_color_dark":"#1589e9","link_hover_color":"#30a9de","link_hover_color_dark":"#30a9de","link_hover_bg_color":"#f8f9fa","link_hover_bg_color_dark":"#364151","board_color":"#fff","board_color_dark":"#252d38"},"font":{"font_size":"16px","font_family":null,"code_font_size":"85%"},"custom_js":null,"custom_css":null,"custom_html":"","web_analytics":{"enable":false,"baidu":null,"google":null,"gtag":null,"tencent":{"sid":null,"cid":null},"woyaola":null,"cnzz":null,"leancloud":{"app_id":null,"app_key":null,"server_url":null}},"lazyload":{"enable":true,"onlypost":false},"daovoice":{"enable":false,"appid":""},"aplayer":{"enable":false,"autoplay":false,"loop":"all","order":"random","theme":"#b7daff","songs":[{"name":"name","artist":"artist","url":"/songs/test.mp3","cover":"/img/cover.jpg"},{"name":"name","artist":"artist","url":"https://...url.mp3","cover":"https://...cover.jpg"}]},"version":{"check":false},"navbar":{"blog_title":"吃面多放葱","ground_glass":{"enable":false,"px":3,"alpha":0.7},"menu":[{"key":"home","link":"/","icon":"iconfont icon-home-fill"},{"key":"category","link":"/categories/","icon":"iconfont icon-category-fill"},{"key":"tag","link":"/tags/","icon":"iconfont icon-tags-fill"},{"key":"about","link":"/about/","icon":"iconfont icon-user-fill"}]},"search":{"enable":true,"path":"/local-search.xml","generate_path":"/local-search.xml","field":"post","content":true},"scroll_down_arrow":{"enable":true,"banner_height_limit":90,"scroll_after_turning_page":true},"banner_parallax":true,"footer":{"statistics":{"enable":false,"source":"busuanzi","pv_format":"总访问量 {} 次","uv_format":"总访客数 {} 人"},"beian":{"enable":false,"icp_text":"京ICP证123456号","police_text":"京公网安备12345678号","police_code":12345678,"police_icon":"/img/police_beian.png"}},"scroll_top_arrow":{"enable":true},"index":{"banner_img":"/img/default.png","banner_img_height":100,"banner_mask_alpha":0.3,"post_default_img":"","slogan":{"enable":true,"text":"像蚂蚁一样工作，像蝴蝶一样生活"},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"category":true,"tag":true}},"page":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3},"post":{"banner_img":"/img/default.png","banner_img_height":70,"banner_mask_alpha":0.3,"meta":{"author":{"enable":false},"date":{"enable":true,"format":"LL a"},"wordcount":{"enable":true,"format":"{} 字"},"min2read":{"enable":true,"format":"{} 分钟","words":100},"views":{"enable":false,"source":"busuanzi","format":"{} 次"}},"updated":{"enable":false,"content":"本文最后更新于：","relative":false},"toc":{"enable":true,"headingSelector":"h1,h2,h3,h4,h5,h6","collapseDepth":0},"copyright":{"enable":true,"content":"本博客所有文章除特别声明外，均采用 <a href=\"https://creativecommons.org/licenses/by-sa/4.0/deed.zh\" rel=\"nofollow noopener\">CC BY-SA 4.0 协议</a> ，转载请注明出处！"},"prev_next":{"enable":true},"custom":{"enable":false,"content":"<img src=\"https://octodex.github.com/images/jetpacktocat.png\" class=\"rounded mx-auto d-block mt-5\" style=\"width:150px; height:150px;\">"},"image_zoom":{"enable":true},"footnote":{"enable":true,"header":""},"math":{"enable":false,"specific":false,"engine":"mathjax"},"mermaid":{"enable":false,"specific":false,"options":{"theme":"default"}},"comments":{"enable":false,"type":"disqus"}},"utterances":{"repo":null,"issue_term":"pathname","label":"utterances","theme":"github-light","theme_dark":"github-dark","crossorigin":"anonymous"},"disqus":{"shortname":null,"disqusjs":false,"apikey":null},"gitalk":{"clientID":null,"clientSecret":null,"repo":null,"owner":null,"admin":["name"],"id":"location.pathname","language":"zh-CN","labels":["Gitalk"],"perPage":10,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true},"valine":{"appid":null,"appkey":null,"placeholder":"说点什么","path":"window.location.pathname","avatar":"retro","meta":["nick","mail","link"],"pageSize":10,"lang":"zh-CN","highlight":false,"recordIP":false,"serverURLs":null},"changyan":{"appid":"","appkey":""},"livere":{"uid":""},"remark42":{"host":"https://remark.haoyizebo.com","site_id":"haoyizebo","max_shown_comments":10,"locale":"zh"},"archive":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null},"category":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"post_limit":10,"order_by":"-length","collapse_depth":0},"tag":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null,"tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"avatar":"/img/avatar.png","name":"蔺国防","introduce":"移动应用开发者，历史文学爱好者","icons":[{"class":"iconfont icon-github-fill","link":"https://github.com","tip":"GitHub"},{"class":"iconfont icon-douban-fill","link":"https://douban.com","tip":"豆瓣"},{"class":"iconfont icon-wechat-fill","qrcode":"/img/favicon.png"}]},"page404":{"banner_img":"/img/default.png","banner_img_height":85,"banner_mask_alpha":0.3,"subtitle":"Page not found"},"links":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"items":[{"title":"Fluid Docs","intro":"主题使用指南","link":"https://hexo.fluid-dev.com/docs/","image":"/img/favicon.png"},{"title":"Fluid Repo","intro":"主题 GitHub 仓库","link":"https://github.com/fluid-dev/hexo-theme-fluid","image":"/img/favicon.png"},{"title":"Fluid Example","intro":"主题操作示例","link":"https://hexo.fluid-dev.com/docs/example/","image":"/img/favicon.png"}]}}}},"excerpt":"","more":"<p>在调试程序时，很多开发者喜欢用输出 log 的方式对代码的运行进行追踪，帮助理解。Swift 编译器并不会帮我们将 print 或者 debugPrint 删去，在最终 app 中它们会把内容输出到终端，造成性能的损失。我们当然可以在发布时用查找的方式将所有这些log 输出语句删除或者注释掉，但是更好的方法是通过添加条件编译来将这些语句排除在 Release 版本外。在 Xcode 的 Build Setting 中，在 Other Swift flags 的 Debug 栏中加入 -D DEBUG 即可加入一个编译标识。<br><img src=\"https://onevcat.com/assets/images/2016/debug-flag.png\"><br>之后我们就可以通过将<code> print</code> 或者 <code>debugPrint </code>包装一下：</p>\n<pre><code class=\"hljs applescript\">fuc Dlog (<span class=\"hljs-built_in\">item</span> : Any, <span class=\"hljs-built_in\">file</span> : String = <span class=\"hljs-comment\">#file, lineNum : Int = #line)&#123;</span>\n   <span class=\"hljs-comment\">#if DEBUG </span>\n       let fileName = (<span class=\"hljs-built_in\">file</span> <span class=\"hljs-keyword\">as</span> NSString).lastPathComponent \n       print (<span class=\"hljs-string\">&quot;fileName:\\(fileName)\\n lineNum:\\(lineNum)\\n \\(item)&quot;</span>)\n   <span class=\"hljs-comment\">#endif</span>\n&#125;</code></pre>\n\n<p>这样，在 Release 版本中，dPrint 将会是一个空方法，所有对这个方法的调用都会被编译器剔除掉。需要注意的是，在这种封装下，如果你传入的 items 是一个表达式而不是直接的变量的话，这个表达式还是会被先执行求值的。如果这对性能也产生了可测的影响的话，我们最好用 @autoclosure 修饰参数来重新包装 print。这可以将求值运行推迟到方法内部，这样在 Release 时这个求值也会被一并去掉：</p>\n<pre><code class=\"hljs livescript\">func Dlog<span class=\"hljs-function\"><span class=\"hljs-params\">(@autoclosure item: () -&gt; Any, file : <span class=\"hljs-built_in\">String</span> = #file, lineNum : Int = #line)</span> &#123;</span>\n<span class=\"hljs-function\">    #<span class=\"hljs-title\">if</span> <span class=\"hljs-title\">DEBUG</span></span>\n<span class=\"hljs-function\">         <span class=\"hljs-title\">let</span> <span class=\"hljs-title\">fileName</span> = <span class=\"hljs-params\">(file <span class=\"hljs-keyword\">as</span> NSString)</span>.<span class=\"hljs-title\">lastPathComponent</span> </span>\n<span class=\"hljs-function\">         <span class=\"hljs-title\">print</span> <span class=\"hljs-params\">(<span class=\"hljs-string\">&quot;fileName:\\(fileName)\\n lineNum:\\(lineNum)\\n \\(item)&quot;</span>)</span></span>\n<span class=\"hljs-function\">    #<span class=\"hljs-title\">endif</span></span>\n<span class=\"hljs-function\">&#125;</span>\n<span class=\"hljs-function\"></span>\n<span class=\"hljs-function\"><span class=\"hljs-title\">Dlog</span><span class=\"hljs-params\">(resultFromHeavyWork())</span></span>\n<span class=\"hljs-function\">// <span class=\"hljs-title\">Release</span> 版本中 <span class=\"hljs-title\">resultFromHeavyWork</span><span class=\"hljs-params\">()</span> 不会被执行</span></code></pre>\n<p>##参考<br>   <a href=\"https://onevcat.com/2016/02/swift-performance/\">Swift 性能探索和优化分析</a></p>\n"},{"title":"算法","date":"2018-01-05T14:12:00.000Z","_content":"\n#### 算法\n**常用算法**\n\n  |                   | 对称加密算法  |非对称加密算法      |散列算法          |\n  |  ----            |    ---                 | ----                          |      ----             |\n  | 常用算法    |   DES、 3DES、 AES        |     RSA 、DSA、 ECC   |    MD5 、  SHA   、 HMAC |\n  |优点 | 算法公开、计算量小、加密速度快、加密效率高 |与对称加密比较,安全性更好,秘钥管理方便 |      常用于验证消息完整性      |\n  | 缺点           | 秘钥容易泄露,秘钥管理负担过重 |加密和解密花费时间长、速度慢，只适合对少量数据进行加密|    |\n  |  应用          |保存用户手机号、身份证信息等信息|一般用于签名和认证|校验文件下载正确性,存储用户敏感信息,如密码.卡号等不可解密信息|\n\n#### 其他\n从GitHub上和各大博客平台查阅相关资料，比较了一下，感觉GitHub上[CocoaSecurity](https://github.com/kelp404/CocoaSecurity)对各算法总结的比较全面，里面包含了AES、SHA、MD5、HMAC各种算法的加密解密和计算。能够满足项目中的需求,另外在Demo中我还参考了[ideawu](https://github.com/ideawu)的[RSA](https://github.com/ideawu/Objective-C-RSA)的使用，便于我们对RSA的理解和认识。[reejosamuel/RSA](https://github.com/reejosamuel/RSA)也不错，里面包含了RSA公钥和私钥的生成，保存和加密解密等方法，很详细，很实用，推荐使用。\n> 注意： CocoaSecurity 使用的时候可能会缺少 Base64 文件，将Demo中的Base64文件添加进去就行了。\n\n#### 代码\n[OCDemo](https://github.com/913868456/OCDemo) 下的 Encryption Demo有AES RSA SHA MD5 HMAC使用示例。如果对您有用的话，麻烦给个Star.\n\n## 参考资料\n[kelp404/CocoaSecurity](https://github.com/kelp404/CocoaSecurity)\n[reejosamuel/RSA](https://github.com/reejosamuel/RSA)\n[ideawu/Objective-C-RSA](https://github.com/ideawu/Objective-C-RSA)\n[常用加密算法解析](https://www.jianshu.com/p/8a55423f2742)\n","source":"_posts/iOS/常用算法.md","raw":"---\ntitle:  算法\ndate: 2018-01-05 22:12\ncategories:\n- iOS\ntags: \n- 算法\n---\n\n#### 算法\n**常用算法**\n\n  |                   | 对称加密算法  |非对称加密算法      |散列算法          |\n  |  ----            |    ---                 | ----                          |      ----             |\n  | 常用算法    |   DES、 3DES、 AES        |     RSA 、DSA、 ECC   |    MD5 、  SHA   、 HMAC |\n  |优点 | 算法公开、计算量小、加密速度快、加密效率高 |与对称加密比较,安全性更好,秘钥管理方便 |      常用于验证消息完整性      |\n  | 缺点           | 秘钥容易泄露,秘钥管理负担过重 |加密和解密花费时间长、速度慢，只适合对少量数据进行加密|    |\n  |  应用          |保存用户手机号、身份证信息等信息|一般用于签名和认证|校验文件下载正确性,存储用户敏感信息,如密码.卡号等不可解密信息|\n\n#### 其他\n从GitHub上和各大博客平台查阅相关资料，比较了一下，感觉GitHub上[CocoaSecurity](https://github.com/kelp404/CocoaSecurity)对各算法总结的比较全面，里面包含了AES、SHA、MD5、HMAC各种算法的加密解密和计算。能够满足项目中的需求,另外在Demo中我还参考了[ideawu](https://github.com/ideawu)的[RSA](https://github.com/ideawu/Objective-C-RSA)的使用，便于我们对RSA的理解和认识。[reejosamuel/RSA](https://github.com/reejosamuel/RSA)也不错，里面包含了RSA公钥和私钥的生成，保存和加密解密等方法，很详细，很实用，推荐使用。\n> 注意： CocoaSecurity 使用的时候可能会缺少 Base64 文件，将Demo中的Base64文件添加进去就行了。\n\n#### 代码\n[OCDemo](https://github.com/913868456/OCDemo) 下的 Encryption Demo有AES RSA SHA MD5 HMAC使用示例。如果对您有用的话，麻烦给个Star.\n\n## 参考资料\n[kelp404/CocoaSecurity](https://github.com/kelp404/CocoaSecurity)\n[reejosamuel/RSA](https://github.com/reejosamuel/RSA)\n[ideawu/Objective-C-RSA](https://github.com/ideawu/Objective-C-RSA)\n[常用加密算法解析](https://www.jianshu.com/p/8a55423f2742)\n","slug":"iOS/常用算法","published":1,"updated":"2020-09-27T11:15:52.262Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgq6gnxh0036t29k4u1n8e8s","content":"<h4 id=\"算法\"><a href=\"#算法\" class=\"headerlink\" title=\"算法\"></a>算法</h4><p><strong>常用算法</strong></p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>对称加密算法</th>\n<th>非对称加密算法</th>\n<th>散列算法</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>常用算法</td>\n<td>DES、 3DES、 AES</td>\n<td>RSA 、DSA、 ECC</td>\n<td>MD5 、  SHA   、 HMAC</td>\n</tr>\n<tr>\n<td>优点</td>\n<td>算法公开、计算量小、加密速度快、加密效率高</td>\n<td>与对称加密比较,安全性更好,秘钥管理方便</td>\n<td>常用于验证消息完整性</td>\n</tr>\n<tr>\n<td>缺点</td>\n<td>秘钥容易泄露,秘钥管理负担过重</td>\n<td>加密和解密花费时间长、速度慢，只适合对少量数据进行加密</td>\n<td></td>\n</tr>\n<tr>\n<td>应用</td>\n<td>保存用户手机号、身份证信息等信息</td>\n<td>一般用于签名和认证</td>\n<td>校验文件下载正确性,存储用户敏感信息,如密码.卡号等不可解密信息</td>\n</tr>\n</tbody></table>\n<h4 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h4><p>从GitHub上和各大博客平台查阅相关资料，比较了一下，感觉GitHub上<a href=\"https://github.com/kelp404/CocoaSecurity\">CocoaSecurity</a>对各算法总结的比较全面，里面包含了AES、SHA、MD5、HMAC各种算法的加密解密和计算。能够满足项目中的需求,另外在Demo中我还参考了<a href=\"https://github.com/ideawu\">ideawu</a>的<a href=\"https://github.com/ideawu/Objective-C-RSA\">RSA</a>的使用，便于我们对RSA的理解和认识。<a href=\"https://github.com/reejosamuel/RSA\">reejosamuel/RSA</a>也不错，里面包含了RSA公钥和私钥的生成，保存和加密解密等方法，很详细，很实用，推荐使用。</p>\n<blockquote>\n<p>注意： CocoaSecurity 使用的时候可能会缺少 Base64 文件，将Demo中的Base64文件添加进去就行了。</p>\n</blockquote>\n<h4 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h4><p><a href=\"https://github.com/913868456/OCDemo\">OCDemo</a> 下的 Encryption Demo有AES RSA SHA MD5 HMAC使用示例。如果对您有用的话，麻烦给个Star.</p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p><a href=\"https://github.com/kelp404/CocoaSecurity\">kelp404/CocoaSecurity</a><br><a href=\"https://github.com/reejosamuel/RSA\">reejosamuel/RSA</a><br><a href=\"https://github.com/ideawu/Objective-C-RSA\">ideawu/Objective-C-RSA</a><br><a href=\"https://www.jianshu.com/p/8a55423f2742\">常用加密算法解析</a></p>\n","site":{"data":{"fluid_static_prefix":{"internal_js":"/js","internal_css":"/css","internal_img":"/img","iconfont":"//at.alicdn.com/t/font_1736178_kmeydafke9r.css","anchor":"https://cdn.staticfile.org/anchor-js/4.2.2/","github_markdown":"https://cdn.staticfile.org/github-markdown-css/4.0.0/","jquery":"https://cdn.staticfile.org/jquery/3.4.1/","bootstrap":"https://cdn.staticfile.org/twitter-bootstrap/4.4.1/","highlightjs":"https://cdn.staticfile.org/highlight.js/10.0.0/","prismjs":"https://cdn.staticfile.org/prism/1.21.0/","tocbot":"https://cdn.staticfile.org/tocbot/4.11.1/","typed":"https://cdn.staticfile.org/typed.js/2.0.11/","fancybox":"https://cdn.staticfile.org/fancybox/3.5.7/","mathjax":"https://cdn.staticfile.org/mathjax/3.0.5/es5/","katex":"https://cdn.staticfile.org/KaTeX/0.11.1/","aplayer":"https://cdn.staticfile.org/aplayer/1.10.1/","busuanzi":"https://busuanzi.ibruce.info/busuanzi/2.3/","clipboard":"https://cdn.staticfile.org/clipboard.js/2.0.6/","mermaid":"https://cdn.staticfile.org/mermaid/8.5.0/","valine":"https://cdn.staticfile.org/valine/1.4.14/","gitalk":"https://cdn.staticfile.org/gitalk/1.6.2/","blueimp_md5":"https://cdn.staticfile.org/blueimp-md5/2.13.0/","disqusjs":"https://cdn.jsdelivr.net/npm/disqusjs@1.0/dist/","hint":"/lib/hint/"},"fluid_config":{"favicon":"/img/favicon.png","apple_touch_icon":"/img/favicon.png","title_join_string":" - ","force_https":false,"code":{"copy_btn":true,"highlight":{"enable":true,"lib":"highlightjs","highlightjs":{"style":"Github Gist","bg_color":false},"prismjs":{"style":"default","preprocess":true}}},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"_","loop":false},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"right","visible":"hover","icon":""},"mouse_click":{"enable":false,"style":"values"}},"dark_mode":{"enable":true,"default":"auto"},"color":{"body_bg_color":"#eee","body_bg_color_dark":"#181c27","navbar_bg_color":"#2f4154","navbar_bg_color_dark":"#1f3144","navbar_text_color":"#fff","navbar_text_color_dark":"#d0d0d0","text_color":"#3c4858","text_color_dark":"#c4c6c9","sec_text_color":"#718096","sec_text_color_dark":"#a7a9ad","post_text_color":"#2c3e50","post_text_color_dark":"#c4c6c9","post_heading_color":"#1a202c","post_heading_color_dark":"#c4c6c9","post_link_color":"#0366d6","post_link_color_dark":"#1589e9","link_hover_color":"#30a9de","link_hover_color_dark":"#30a9de","link_hover_bg_color":"#f8f9fa","link_hover_bg_color_dark":"#364151","board_color":"#fff","board_color_dark":"#252d38"},"font":{"font_size":"16px","font_family":null,"code_font_size":"85%"},"custom_js":null,"custom_css":null,"custom_html":"","web_analytics":{"enable":false,"baidu":null,"google":null,"gtag":null,"tencent":{"sid":null,"cid":null},"woyaola":null,"cnzz":null,"leancloud":{"app_id":null,"app_key":null,"server_url":null}},"lazyload":{"enable":true,"onlypost":false},"daovoice":{"enable":false,"appid":""},"aplayer":{"enable":false,"autoplay":false,"loop":"all","order":"random","theme":"#b7daff","songs":[{"name":"name","artist":"artist","url":"/songs/test.mp3","cover":"/img/cover.jpg"},{"name":"name","artist":"artist","url":"https://...url.mp3","cover":"https://...cover.jpg"}]},"version":{"check":false},"navbar":{"blog_title":"吃面多放葱","ground_glass":{"enable":false,"px":3,"alpha":0.7},"menu":[{"key":"home","link":"/","icon":"iconfont icon-home-fill"},{"key":"category","link":"/categories/","icon":"iconfont icon-category-fill"},{"key":"tag","link":"/tags/","icon":"iconfont icon-tags-fill"},{"key":"about","link":"/about/","icon":"iconfont icon-user-fill"}]},"search":{"enable":true,"path":"/local-search.xml","generate_path":"/local-search.xml","field":"post","content":true},"scroll_down_arrow":{"enable":true,"banner_height_limit":90,"scroll_after_turning_page":true},"banner_parallax":true,"footer":{"statistics":{"enable":false,"source":"busuanzi","pv_format":"总访问量 {} 次","uv_format":"总访客数 {} 人"},"beian":{"enable":false,"icp_text":"京ICP证123456号","police_text":"京公网安备12345678号","police_code":12345678,"police_icon":"/img/police_beian.png"}},"scroll_top_arrow":{"enable":true},"index":{"banner_img":"/img/default.png","banner_img_height":100,"banner_mask_alpha":0.3,"post_default_img":"","slogan":{"enable":true,"text":"像蚂蚁一样工作，像蝴蝶一样生活"},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"category":true,"tag":true}},"page":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3},"post":{"banner_img":"/img/default.png","banner_img_height":70,"banner_mask_alpha":0.3,"meta":{"author":{"enable":false},"date":{"enable":true,"format":"LL a"},"wordcount":{"enable":true,"format":"{} 字"},"min2read":{"enable":true,"format":"{} 分钟","words":100},"views":{"enable":false,"source":"busuanzi","format":"{} 次"}},"updated":{"enable":false,"content":"本文最后更新于：","relative":false},"toc":{"enable":true,"headingSelector":"h1,h2,h3,h4,h5,h6","collapseDepth":0},"copyright":{"enable":true,"content":"本博客所有文章除特别声明外，均采用 <a href=\"https://creativecommons.org/licenses/by-sa/4.0/deed.zh\" rel=\"nofollow noopener\">CC BY-SA 4.0 协议</a> ，转载请注明出处！"},"prev_next":{"enable":true},"custom":{"enable":false,"content":"<img src=\"https://octodex.github.com/images/jetpacktocat.png\" class=\"rounded mx-auto d-block mt-5\" style=\"width:150px; height:150px;\">"},"image_zoom":{"enable":true},"footnote":{"enable":true,"header":""},"math":{"enable":false,"specific":false,"engine":"mathjax"},"mermaid":{"enable":false,"specific":false,"options":{"theme":"default"}},"comments":{"enable":false,"type":"disqus"}},"utterances":{"repo":null,"issue_term":"pathname","label":"utterances","theme":"github-light","theme_dark":"github-dark","crossorigin":"anonymous"},"disqus":{"shortname":null,"disqusjs":false,"apikey":null},"gitalk":{"clientID":null,"clientSecret":null,"repo":null,"owner":null,"admin":["name"],"id":"location.pathname","language":"zh-CN","labels":["Gitalk"],"perPage":10,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true},"valine":{"appid":null,"appkey":null,"placeholder":"说点什么","path":"window.location.pathname","avatar":"retro","meta":["nick","mail","link"],"pageSize":10,"lang":"zh-CN","highlight":false,"recordIP":false,"serverURLs":null},"changyan":{"appid":"","appkey":""},"livere":{"uid":""},"remark42":{"host":"https://remark.haoyizebo.com","site_id":"haoyizebo","max_shown_comments":10,"locale":"zh"},"archive":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null},"category":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"post_limit":10,"order_by":"-length","collapse_depth":0},"tag":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null,"tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"avatar":"/img/avatar.png","name":"蔺国防","introduce":"移动应用开发者，历史文学爱好者","icons":[{"class":"iconfont icon-github-fill","link":"https://github.com","tip":"GitHub"},{"class":"iconfont icon-douban-fill","link":"https://douban.com","tip":"豆瓣"},{"class":"iconfont icon-wechat-fill","qrcode":"/img/favicon.png"}]},"page404":{"banner_img":"/img/default.png","banner_img_height":85,"banner_mask_alpha":0.3,"subtitle":"Page not found"},"links":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"items":[{"title":"Fluid Docs","intro":"主题使用指南","link":"https://hexo.fluid-dev.com/docs/","image":"/img/favicon.png"},{"title":"Fluid Repo","intro":"主题 GitHub 仓库","link":"https://github.com/fluid-dev/hexo-theme-fluid","image":"/img/favicon.png"},{"title":"Fluid Example","intro":"主题操作示例","link":"https://hexo.fluid-dev.com/docs/example/","image":"/img/favicon.png"}]}}}},"excerpt":"","more":"<h4 id=\"算法\"><a href=\"#算法\" class=\"headerlink\" title=\"算法\"></a>算法</h4><p><strong>常用算法</strong></p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>对称加密算法</th>\n<th>非对称加密算法</th>\n<th>散列算法</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>常用算法</td>\n<td>DES、 3DES、 AES</td>\n<td>RSA 、DSA、 ECC</td>\n<td>MD5 、  SHA   、 HMAC</td>\n</tr>\n<tr>\n<td>优点</td>\n<td>算法公开、计算量小、加密速度快、加密效率高</td>\n<td>与对称加密比较,安全性更好,秘钥管理方便</td>\n<td>常用于验证消息完整性</td>\n</tr>\n<tr>\n<td>缺点</td>\n<td>秘钥容易泄露,秘钥管理负担过重</td>\n<td>加密和解密花费时间长、速度慢，只适合对少量数据进行加密</td>\n<td></td>\n</tr>\n<tr>\n<td>应用</td>\n<td>保存用户手机号、身份证信息等信息</td>\n<td>一般用于签名和认证</td>\n<td>校验文件下载正确性,存储用户敏感信息,如密码.卡号等不可解密信息</td>\n</tr>\n</tbody></table>\n<h4 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h4><p>从GitHub上和各大博客平台查阅相关资料，比较了一下，感觉GitHub上<a href=\"https://github.com/kelp404/CocoaSecurity\">CocoaSecurity</a>对各算法总结的比较全面，里面包含了AES、SHA、MD5、HMAC各种算法的加密解密和计算。能够满足项目中的需求,另外在Demo中我还参考了<a href=\"https://github.com/ideawu\">ideawu</a>的<a href=\"https://github.com/ideawu/Objective-C-RSA\">RSA</a>的使用，便于我们对RSA的理解和认识。<a href=\"https://github.com/reejosamuel/RSA\">reejosamuel/RSA</a>也不错，里面包含了RSA公钥和私钥的生成，保存和加密解密等方法，很详细，很实用，推荐使用。</p>\n<blockquote>\n<p>注意： CocoaSecurity 使用的时候可能会缺少 Base64 文件，将Demo中的Base64文件添加进去就行了。</p>\n</blockquote>\n<h4 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h4><p><a href=\"https://github.com/913868456/OCDemo\">OCDemo</a> 下的 Encryption Demo有AES RSA SHA MD5 HMAC使用示例。如果对您有用的话，麻烦给个Star.</p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p><a href=\"https://github.com/kelp404/CocoaSecurity\">kelp404/CocoaSecurity</a><br><a href=\"https://github.com/reejosamuel/RSA\">reejosamuel/RSA</a><br><a href=\"https://github.com/ideawu/Objective-C-RSA\">ideawu/Objective-C-RSA</a><br><a href=\"https://www.jianshu.com/p/8a55423f2742\">常用加密算法解析</a></p>\n"},{"title":"Carthage安装","date":"2019-05-22T14:39:00.000Z","_content":"\n###  Homebrew 更新\n```\nbrew update\n\n# brew 有时候更新会没有反应,以下是解决方案\n# 进入 brew 的仓库根目录\ncd \"$(brew --repo)\"\n# 修改为中科大的源\ngit remote set-url origin https://mirrors.ustc.edu.cn/brew.git\ncd \"$(brew --repo)/Library/Taps/homebrew/homebrew-cask\"\ngit remote set-url origin https://mirrors.ustc.edu.cn/homebrew-cask.git\ncd \"$(brew --repo)/Library/Taps/homebrew/homebrew-core\"\ngit remote set-url origin https://mirrors.ustc.edu.cn/homebrew-core.git\nbrew update -v\n```\n### Carthage 更新\n```\nbrew upgrade carthage\n```\n### 创建Cartfile文件\n```\ncd 项目根目录\ntouch Cartfile\n```\n### cartfile添加指定库\n```\ngithub \"SVProgressHUD/SVProgressHUD\" ~> 1.0\n```\n### 更新\n```\ncarthage update --platform iOS \n```\n### 添加framwork\n点击\"项目名称\"-> \"target\" -> \"Gerneral\"，在最底部找到\"Linked Frameworks and Libraries\"。\n### 添加run script\n点击\"项目名称\"-> \"target\" -> \"Build Phases', 点击 \"+\"-> \"New Run Script Phase\".\n脚本内容\n```\n/usr/local/bin/carthage copy-frameworks\n```\n编辑 \"Input Files\"路径\n```\n$(SRCROOT)/Carthage/Build/iOS/Kingfisher.framework\n```\n编辑\"Output Files\"路径\n```\n$(BUILT_PRODUCTS_DIR)/$(FRAMEWORKS_FOLDER_PATH)/Kingfisher.framework\n```\n\nDone!\n\n\n## 参考资料\n[HomeBrew 修改镜像源解决慢的问题](https://crowall.com/topic/412)\n","source":"_posts/工具/Carthage-安装.md","raw":"\n---\ntitle: Carthage安装\ndate:  2019-05-22 22:39\ncategories:\n- 工具\ntags:\n- 依赖管理\n---\n\n###  Homebrew 更新\n```\nbrew update\n\n# brew 有时候更新会没有反应,以下是解决方案\n# 进入 brew 的仓库根目录\ncd \"$(brew --repo)\"\n# 修改为中科大的源\ngit remote set-url origin https://mirrors.ustc.edu.cn/brew.git\ncd \"$(brew --repo)/Library/Taps/homebrew/homebrew-cask\"\ngit remote set-url origin https://mirrors.ustc.edu.cn/homebrew-cask.git\ncd \"$(brew --repo)/Library/Taps/homebrew/homebrew-core\"\ngit remote set-url origin https://mirrors.ustc.edu.cn/homebrew-core.git\nbrew update -v\n```\n### Carthage 更新\n```\nbrew upgrade carthage\n```\n### 创建Cartfile文件\n```\ncd 项目根目录\ntouch Cartfile\n```\n### cartfile添加指定库\n```\ngithub \"SVProgressHUD/SVProgressHUD\" ~> 1.0\n```\n### 更新\n```\ncarthage update --platform iOS \n```\n### 添加framwork\n点击\"项目名称\"-> \"target\" -> \"Gerneral\"，在最底部找到\"Linked Frameworks and Libraries\"。\n### 添加run script\n点击\"项目名称\"-> \"target\" -> \"Build Phases', 点击 \"+\"-> \"New Run Script Phase\".\n脚本内容\n```\n/usr/local/bin/carthage copy-frameworks\n```\n编辑 \"Input Files\"路径\n```\n$(SRCROOT)/Carthage/Build/iOS/Kingfisher.framework\n```\n编辑\"Output Files\"路径\n```\n$(BUILT_PRODUCTS_DIR)/$(FRAMEWORKS_FOLDER_PATH)/Kingfisher.framework\n```\n\nDone!\n\n\n## 参考资料\n[HomeBrew 修改镜像源解决慢的问题](https://crowall.com/topic/412)\n","slug":"工具/Carthage-安装","published":1,"updated":"2020-09-27T10:25:27.750Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgq6gnxh0038t29ke7hsdpbw","content":"<h3 id=\"Homebrew-更新\"><a href=\"#Homebrew-更新\" class=\"headerlink\" title=\"Homebrew 更新\"></a>Homebrew 更新</h3><pre><code class=\"hljs dsconfig\"><span class=\"hljs-string\">brew </span><span class=\"hljs-string\">update</span>\n<span class=\"hljs-string\"></span>\n<span class=\"hljs-string\">#</span> <span class=\"hljs-string\">brew </span>有时候更新会没有反应,以下是解决方案\n<span class=\"hljs-comment\"># 进入 brew 的仓库根目录</span>\n<span class=\"hljs-string\">cd </span><span class=\"hljs-string\">&quot;$(brew --repo)&quot;</span>\n<span class=\"hljs-comment\"># 修改为中科大的源</span>\n<span class=\"hljs-string\">git </span><span class=\"hljs-string\">remote </span><span class=\"hljs-built_in\">set-url</span> <span class=\"hljs-string\">origin </span><span class=\"hljs-string\">https:</span>//<span class=\"hljs-string\">mirrors.</span><span class=\"hljs-string\">ustc.</span><span class=\"hljs-string\">edu.</span><span class=\"hljs-string\">cn/</span><span class=\"hljs-string\">brew.</span><span class=\"hljs-string\">git</span>\n<span class=\"hljs-string\">cd </span><span class=\"hljs-string\">&quot;$(brew --repo)/Library/Taps/homebrew/homebrew-cask&quot;</span>\n<span class=\"hljs-string\">git </span><span class=\"hljs-string\">remote </span><span class=\"hljs-built_in\">set-url</span> <span class=\"hljs-string\">origin </span><span class=\"hljs-string\">https:</span>//<span class=\"hljs-string\">mirrors.</span><span class=\"hljs-string\">ustc.</span><span class=\"hljs-string\">edu.</span><span class=\"hljs-string\">cn/</span><span class=\"hljs-string\">homebrew-cask.</span><span class=\"hljs-string\">git</span>\n<span class=\"hljs-string\">cd </span><span class=\"hljs-string\">&quot;$(brew --repo)/Library/Taps/homebrew/homebrew-core&quot;</span>\n<span class=\"hljs-string\">git </span><span class=\"hljs-string\">remote </span><span class=\"hljs-built_in\">set-url</span> <span class=\"hljs-string\">origin </span><span class=\"hljs-string\">https:</span>//<span class=\"hljs-string\">mirrors.</span><span class=\"hljs-string\">ustc.</span><span class=\"hljs-string\">edu.</span><span class=\"hljs-string\">cn/</span><span class=\"hljs-string\">homebrew-core.</span><span class=\"hljs-string\">git</span>\n<span class=\"hljs-string\">brew </span><span class=\"hljs-string\">update </span>-v</code></pre>\n<h3 id=\"Carthage-更新\"><a href=\"#Carthage-更新\" class=\"headerlink\" title=\"Carthage 更新\"></a>Carthage 更新</h3><pre><code class=\"hljs routeros\">brew<span class=\"hljs-built_in\"> upgrade </span>carthage</code></pre>\n<h3 id=\"创建Cartfile文件\"><a href=\"#创建Cartfile文件\" class=\"headerlink\" title=\"创建Cartfile文件\"></a>创建Cartfile文件</h3><pre><code class=\"hljs properties\"><span class=\"hljs-attr\">cd</span> <span class=\"hljs-string\">项目根目录</span>\n<span class=\"hljs-attr\">touch</span> <span class=\"hljs-string\">Cartfile</span></code></pre>\n<h3 id=\"cartfile添加指定库\"><a href=\"#cartfile添加指定库\" class=\"headerlink\" title=\"cartfile添加指定库\"></a>cartfile添加指定库</h3><pre><code class=\"hljs apache\"><span class=\"hljs-attribute\">github</span> <span class=\"hljs-string\">&quot;SVProgressHUD/SVProgressHUD&quot;</span> ~&gt; <span class=\"hljs-number\">1</span>.<span class=\"hljs-number\">0</span></code></pre>\n<h3 id=\"更新\"><a href=\"#更新\" class=\"headerlink\" title=\"更新\"></a>更新</h3><pre><code class=\"hljs pgsql\">carthage <span class=\"hljs-keyword\">update</span> <span class=\"hljs-comment\">--platform iOS </span></code></pre>\n<h3 id=\"添加framwork\"><a href=\"#添加framwork\" class=\"headerlink\" title=\"添加framwork\"></a>添加framwork</h3><p>点击”项目名称”-&gt; “target” -&gt; “Gerneral”，在最底部找到”Linked Frameworks and Libraries”。</p>\n<h3 id=\"添加run-script\"><a href=\"#添加run-script\" class=\"headerlink\" title=\"添加run script\"></a>添加run script</h3><p>点击”项目名称”-&gt; “target” -&gt; “Build Phases’, 点击 “+”-&gt; “New Run Script Phase”.<br>脚本内容</p>\n<pre><code class=\"hljs gradle\"><span class=\"hljs-regexp\">/usr/</span>local<span class=\"hljs-regexp\">/bin/</span>carthage <span class=\"hljs-keyword\">copy</span>-frameworks</code></pre>\n<p>编辑 “Input Files”路径</p>\n<pre><code class=\"hljs awk\">$(SRCROOT)<span class=\"hljs-regexp\">/Carthage/</span>Build<span class=\"hljs-regexp\">/iOS/</span>Kingfisher.framework</code></pre>\n<p>编辑”Output Files”路径</p>\n<pre><code class=\"hljs reasonml\"><span class=\"hljs-constructor\">$(BUILT_PRODUCTS_DIR)</span>/<span class=\"hljs-constructor\">$(FRAMEWORKS_FOLDER_PATH)</span>/<span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">Kingfisher</span>.</span></span>framework</code></pre>\n\n<p>Done!</p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p><a href=\"https://crowall.com/topic/412\">HomeBrew 修改镜像源解决慢的问题</a></p>\n","site":{"data":{"fluid_static_prefix":{"internal_js":"/js","internal_css":"/css","internal_img":"/img","iconfont":"//at.alicdn.com/t/font_1736178_kmeydafke9r.css","anchor":"https://cdn.staticfile.org/anchor-js/4.2.2/","github_markdown":"https://cdn.staticfile.org/github-markdown-css/4.0.0/","jquery":"https://cdn.staticfile.org/jquery/3.4.1/","bootstrap":"https://cdn.staticfile.org/twitter-bootstrap/4.4.1/","highlightjs":"https://cdn.staticfile.org/highlight.js/10.0.0/","prismjs":"https://cdn.staticfile.org/prism/1.21.0/","tocbot":"https://cdn.staticfile.org/tocbot/4.11.1/","typed":"https://cdn.staticfile.org/typed.js/2.0.11/","fancybox":"https://cdn.staticfile.org/fancybox/3.5.7/","mathjax":"https://cdn.staticfile.org/mathjax/3.0.5/es5/","katex":"https://cdn.staticfile.org/KaTeX/0.11.1/","aplayer":"https://cdn.staticfile.org/aplayer/1.10.1/","busuanzi":"https://busuanzi.ibruce.info/busuanzi/2.3/","clipboard":"https://cdn.staticfile.org/clipboard.js/2.0.6/","mermaid":"https://cdn.staticfile.org/mermaid/8.5.0/","valine":"https://cdn.staticfile.org/valine/1.4.14/","gitalk":"https://cdn.staticfile.org/gitalk/1.6.2/","blueimp_md5":"https://cdn.staticfile.org/blueimp-md5/2.13.0/","disqusjs":"https://cdn.jsdelivr.net/npm/disqusjs@1.0/dist/","hint":"/lib/hint/"},"fluid_config":{"favicon":"/img/favicon.png","apple_touch_icon":"/img/favicon.png","title_join_string":" - ","force_https":false,"code":{"copy_btn":true,"highlight":{"enable":true,"lib":"highlightjs","highlightjs":{"style":"Github Gist","bg_color":false},"prismjs":{"style":"default","preprocess":true}}},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"_","loop":false},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"right","visible":"hover","icon":""},"mouse_click":{"enable":false,"style":"values"}},"dark_mode":{"enable":true,"default":"auto"},"color":{"body_bg_color":"#eee","body_bg_color_dark":"#181c27","navbar_bg_color":"#2f4154","navbar_bg_color_dark":"#1f3144","navbar_text_color":"#fff","navbar_text_color_dark":"#d0d0d0","text_color":"#3c4858","text_color_dark":"#c4c6c9","sec_text_color":"#718096","sec_text_color_dark":"#a7a9ad","post_text_color":"#2c3e50","post_text_color_dark":"#c4c6c9","post_heading_color":"#1a202c","post_heading_color_dark":"#c4c6c9","post_link_color":"#0366d6","post_link_color_dark":"#1589e9","link_hover_color":"#30a9de","link_hover_color_dark":"#30a9de","link_hover_bg_color":"#f8f9fa","link_hover_bg_color_dark":"#364151","board_color":"#fff","board_color_dark":"#252d38"},"font":{"font_size":"16px","font_family":null,"code_font_size":"85%"},"custom_js":null,"custom_css":null,"custom_html":"","web_analytics":{"enable":false,"baidu":null,"google":null,"gtag":null,"tencent":{"sid":null,"cid":null},"woyaola":null,"cnzz":null,"leancloud":{"app_id":null,"app_key":null,"server_url":null}},"lazyload":{"enable":true,"onlypost":false},"daovoice":{"enable":false,"appid":""},"aplayer":{"enable":false,"autoplay":false,"loop":"all","order":"random","theme":"#b7daff","songs":[{"name":"name","artist":"artist","url":"/songs/test.mp3","cover":"/img/cover.jpg"},{"name":"name","artist":"artist","url":"https://...url.mp3","cover":"https://...cover.jpg"}]},"version":{"check":false},"navbar":{"blog_title":"吃面多放葱","ground_glass":{"enable":false,"px":3,"alpha":0.7},"menu":[{"key":"home","link":"/","icon":"iconfont icon-home-fill"},{"key":"category","link":"/categories/","icon":"iconfont icon-category-fill"},{"key":"tag","link":"/tags/","icon":"iconfont icon-tags-fill"},{"key":"about","link":"/about/","icon":"iconfont icon-user-fill"}]},"search":{"enable":true,"path":"/local-search.xml","generate_path":"/local-search.xml","field":"post","content":true},"scroll_down_arrow":{"enable":true,"banner_height_limit":90,"scroll_after_turning_page":true},"banner_parallax":true,"footer":{"statistics":{"enable":false,"source":"busuanzi","pv_format":"总访问量 {} 次","uv_format":"总访客数 {} 人"},"beian":{"enable":false,"icp_text":"京ICP证123456号","police_text":"京公网安备12345678号","police_code":12345678,"police_icon":"/img/police_beian.png"}},"scroll_top_arrow":{"enable":true},"index":{"banner_img":"/img/default.png","banner_img_height":100,"banner_mask_alpha":0.3,"post_default_img":"","slogan":{"enable":true,"text":"像蚂蚁一样工作，像蝴蝶一样生活"},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"category":true,"tag":true}},"page":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3},"post":{"banner_img":"/img/default.png","banner_img_height":70,"banner_mask_alpha":0.3,"meta":{"author":{"enable":false},"date":{"enable":true,"format":"LL a"},"wordcount":{"enable":true,"format":"{} 字"},"min2read":{"enable":true,"format":"{} 分钟","words":100},"views":{"enable":false,"source":"busuanzi","format":"{} 次"}},"updated":{"enable":false,"content":"本文最后更新于：","relative":false},"toc":{"enable":true,"headingSelector":"h1,h2,h3,h4,h5,h6","collapseDepth":0},"copyright":{"enable":true,"content":"本博客所有文章除特别声明外，均采用 <a href=\"https://creativecommons.org/licenses/by-sa/4.0/deed.zh\" rel=\"nofollow noopener\">CC BY-SA 4.0 协议</a> ，转载请注明出处！"},"prev_next":{"enable":true},"custom":{"enable":false,"content":"<img src=\"https://octodex.github.com/images/jetpacktocat.png\" class=\"rounded mx-auto d-block mt-5\" style=\"width:150px; height:150px;\">"},"image_zoom":{"enable":true},"footnote":{"enable":true,"header":""},"math":{"enable":false,"specific":false,"engine":"mathjax"},"mermaid":{"enable":false,"specific":false,"options":{"theme":"default"}},"comments":{"enable":false,"type":"disqus"}},"utterances":{"repo":null,"issue_term":"pathname","label":"utterances","theme":"github-light","theme_dark":"github-dark","crossorigin":"anonymous"},"disqus":{"shortname":null,"disqusjs":false,"apikey":null},"gitalk":{"clientID":null,"clientSecret":null,"repo":null,"owner":null,"admin":["name"],"id":"location.pathname","language":"zh-CN","labels":["Gitalk"],"perPage":10,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true},"valine":{"appid":null,"appkey":null,"placeholder":"说点什么","path":"window.location.pathname","avatar":"retro","meta":["nick","mail","link"],"pageSize":10,"lang":"zh-CN","highlight":false,"recordIP":false,"serverURLs":null},"changyan":{"appid":"","appkey":""},"livere":{"uid":""},"remark42":{"host":"https://remark.haoyizebo.com","site_id":"haoyizebo","max_shown_comments":10,"locale":"zh"},"archive":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null},"category":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"post_limit":10,"order_by":"-length","collapse_depth":0},"tag":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null,"tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"avatar":"/img/avatar.png","name":"蔺国防","introduce":"移动应用开发者，历史文学爱好者","icons":[{"class":"iconfont icon-github-fill","link":"https://github.com","tip":"GitHub"},{"class":"iconfont icon-douban-fill","link":"https://douban.com","tip":"豆瓣"},{"class":"iconfont icon-wechat-fill","qrcode":"/img/favicon.png"}]},"page404":{"banner_img":"/img/default.png","banner_img_height":85,"banner_mask_alpha":0.3,"subtitle":"Page not found"},"links":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"items":[{"title":"Fluid Docs","intro":"主题使用指南","link":"https://hexo.fluid-dev.com/docs/","image":"/img/favicon.png"},{"title":"Fluid Repo","intro":"主题 GitHub 仓库","link":"https://github.com/fluid-dev/hexo-theme-fluid","image":"/img/favicon.png"},{"title":"Fluid Example","intro":"主题操作示例","link":"https://hexo.fluid-dev.com/docs/example/","image":"/img/favicon.png"}]}}}},"excerpt":"","more":"<h3 id=\"Homebrew-更新\"><a href=\"#Homebrew-更新\" class=\"headerlink\" title=\"Homebrew 更新\"></a>Homebrew 更新</h3><pre><code class=\"hljs dsconfig\"><span class=\"hljs-string\">brew </span><span class=\"hljs-string\">update</span>\n<span class=\"hljs-string\"></span>\n<span class=\"hljs-string\">#</span> <span class=\"hljs-string\">brew </span>有时候更新会没有反应,以下是解决方案\n<span class=\"hljs-comment\"># 进入 brew 的仓库根目录</span>\n<span class=\"hljs-string\">cd </span><span class=\"hljs-string\">&quot;$(brew --repo)&quot;</span>\n<span class=\"hljs-comment\"># 修改为中科大的源</span>\n<span class=\"hljs-string\">git </span><span class=\"hljs-string\">remote </span><span class=\"hljs-built_in\">set-url</span> <span class=\"hljs-string\">origin </span><span class=\"hljs-string\">https:</span>//<span class=\"hljs-string\">mirrors.</span><span class=\"hljs-string\">ustc.</span><span class=\"hljs-string\">edu.</span><span class=\"hljs-string\">cn/</span><span class=\"hljs-string\">brew.</span><span class=\"hljs-string\">git</span>\n<span class=\"hljs-string\">cd </span><span class=\"hljs-string\">&quot;$(brew --repo)/Library/Taps/homebrew/homebrew-cask&quot;</span>\n<span class=\"hljs-string\">git </span><span class=\"hljs-string\">remote </span><span class=\"hljs-built_in\">set-url</span> <span class=\"hljs-string\">origin </span><span class=\"hljs-string\">https:</span>//<span class=\"hljs-string\">mirrors.</span><span class=\"hljs-string\">ustc.</span><span class=\"hljs-string\">edu.</span><span class=\"hljs-string\">cn/</span><span class=\"hljs-string\">homebrew-cask.</span><span class=\"hljs-string\">git</span>\n<span class=\"hljs-string\">cd </span><span class=\"hljs-string\">&quot;$(brew --repo)/Library/Taps/homebrew/homebrew-core&quot;</span>\n<span class=\"hljs-string\">git </span><span class=\"hljs-string\">remote </span><span class=\"hljs-built_in\">set-url</span> <span class=\"hljs-string\">origin </span><span class=\"hljs-string\">https:</span>//<span class=\"hljs-string\">mirrors.</span><span class=\"hljs-string\">ustc.</span><span class=\"hljs-string\">edu.</span><span class=\"hljs-string\">cn/</span><span class=\"hljs-string\">homebrew-core.</span><span class=\"hljs-string\">git</span>\n<span class=\"hljs-string\">brew </span><span class=\"hljs-string\">update </span>-v</code></pre>\n<h3 id=\"Carthage-更新\"><a href=\"#Carthage-更新\" class=\"headerlink\" title=\"Carthage 更新\"></a>Carthage 更新</h3><pre><code class=\"hljs routeros\">brew<span class=\"hljs-built_in\"> upgrade </span>carthage</code></pre>\n<h3 id=\"创建Cartfile文件\"><a href=\"#创建Cartfile文件\" class=\"headerlink\" title=\"创建Cartfile文件\"></a>创建Cartfile文件</h3><pre><code class=\"hljs properties\"><span class=\"hljs-attr\">cd</span> <span class=\"hljs-string\">项目根目录</span>\n<span class=\"hljs-attr\">touch</span> <span class=\"hljs-string\">Cartfile</span></code></pre>\n<h3 id=\"cartfile添加指定库\"><a href=\"#cartfile添加指定库\" class=\"headerlink\" title=\"cartfile添加指定库\"></a>cartfile添加指定库</h3><pre><code class=\"hljs apache\"><span class=\"hljs-attribute\">github</span> <span class=\"hljs-string\">&quot;SVProgressHUD/SVProgressHUD&quot;</span> ~&gt; <span class=\"hljs-number\">1</span>.<span class=\"hljs-number\">0</span></code></pre>\n<h3 id=\"更新\"><a href=\"#更新\" class=\"headerlink\" title=\"更新\"></a>更新</h3><pre><code class=\"hljs pgsql\">carthage <span class=\"hljs-keyword\">update</span> <span class=\"hljs-comment\">--platform iOS </span></code></pre>\n<h3 id=\"添加framwork\"><a href=\"#添加framwork\" class=\"headerlink\" title=\"添加framwork\"></a>添加framwork</h3><p>点击”项目名称”-&gt; “target” -&gt; “Gerneral”，在最底部找到”Linked Frameworks and Libraries”。</p>\n<h3 id=\"添加run-script\"><a href=\"#添加run-script\" class=\"headerlink\" title=\"添加run script\"></a>添加run script</h3><p>点击”项目名称”-&gt; “target” -&gt; “Build Phases’, 点击 “+”-&gt; “New Run Script Phase”.<br>脚本内容</p>\n<pre><code class=\"hljs gradle\"><span class=\"hljs-regexp\">/usr/</span>local<span class=\"hljs-regexp\">/bin/</span>carthage <span class=\"hljs-keyword\">copy</span>-frameworks</code></pre>\n<p>编辑 “Input Files”路径</p>\n<pre><code class=\"hljs awk\">$(SRCROOT)<span class=\"hljs-regexp\">/Carthage/</span>Build<span class=\"hljs-regexp\">/iOS/</span>Kingfisher.framework</code></pre>\n<p>编辑”Output Files”路径</p>\n<pre><code class=\"hljs reasonml\"><span class=\"hljs-constructor\">$(BUILT_PRODUCTS_DIR)</span>/<span class=\"hljs-constructor\">$(FRAMEWORKS_FOLDER_PATH)</span>/<span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">Kingfisher</span>.</span></span>framework</code></pre>\n\n<p>Done!</p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p><a href=\"https://crowall.com/topic/412\">HomeBrew 修改镜像源解决慢的问题</a></p>\n"},{"title":"Cocoapods","date":"2017-05-18T14:39:00.000Z","_content":"\n### 使用CocoaPods\n\n#### 安装CocoaPods \n打开命令行\n```\n// OSX 10.11后安装CocoaPods命令\nsudo gem install -n /usr/local/bin cocoapods -v 1.9.0\n```\n#### 项目使用CocoaPods\n- 生成Podfile，进入.xcodeproj文件所在目录\n```\npod init\n```\n\n- Podfile\n\n```\nplatform :ios, '8.0'\n\ntarget 'AppName' do\n\nend \n\n```\n\n- 引入不同的库，并指定版本\n\n```\npod 'X', '~> 1.1'\n\n```\n\n- 引入非CocoaPods公共Git仓库中的库，并可以指定具体的commit, branch 或者 tag, 编译版本\n\n```\npod 'Y', :git => 'https://github.com/NSHipster/Y.git', :commit => 'b4dc0ffee'\npod 'LookinServer', :configurations => ['Debug']\n\n```\n- 引入私有库   \n\n```\n//添加私有库地址到本地的cocopods中\n$ pod repo add REPO_NAME SOURCE_URL\n\n//Podfile文件中添加私有库源\nsource 'URL_TO_REPOSITORY'\n\n```\n\n- 安装所需要的库\n\n```\npod install \n```\nCocoapods 会你用递归分析所有需求，最后序列化为Podfile.lock（建议将 podfile.lock和.xcworkspace 纳入Git版本管理中，该文件记录这Pod里面相关库的历史安装版本）\n\n比如，如果两个库都需要使用AFNetworking，CocoaPods 会确定一个同时能被这两库使用的版本，然后将同一个安装版本链接到两个不同的库中。\n\nCocoaPods 会创建一个新的包含之前安装好的静态库 Xcode 项目，然后将它们链接成一个新的 libPods.a target。你原有的项目将会依赖这个新的静态库。一个 xcworkspace 文件会被创建，从此之后，你应该只打开这个 xcworkspace 文件来进行开发。\n\n- 升级指定库\n\n```\npod update 'C'\n```\n- 升级私有库\n\n```\npod repo update REPO_NAME\n```\n\n- 尝试使用Cocoapod\n\n```\npod try 'D'\n```\n\n### 建立自己的CocoaPods \n\n#### 规范\n.podspec文件作为 CocoaPods 的一个独立单元，包含了名称，版本，许可证，和源码文件等所有信息。\n\n以下是Alamofire的podspec文件内容\n\n```\nPod::Spec.new do |s|\n  s.name = 'Alamofire'\n  s.version = '5.3.0'\n  s.license = 'MIT'\n  s.summary = 'Elegant HTTP Networking in Swift'\n  s.homepage = 'https://github.com/Alamofire/Alamofire'\n  s.authors = { 'Alamofire Software Foundation' => 'info@alamofire.org' }\n  s.source = { :git => 'https://github.com/Alamofire/Alamofire.git', :tag => s.version }\n  s.documentation_url = 'https://alamofire.github.io/Alamofire/'\n\n  s.ios.deployment_target = '10.0'\n  s.osx.deployment_target = '10.12'\n  s.tvos.deployment_target = '10.0'\n  s.watchos.deployment_target = '3.0'\n\n  s.swift_versions = ['5.1', '5.2', '5.3']\n\n  s.source_files = 'Source/*.swift'\n\n  s.frameworks = 'CFNetwork'\nend\n\n\n```\n\n一旦把这个.podspec发布到公共数据库中，任何想使用它的开发者，只需要在 Podfile 中加入如下声明即可：\n\n```\npod 'Alamofire', '~> 5.0'\n\n```\n.podspec文件也可以作为管理内部代码的利器：\n```\npod 'Z', :path => 'path/to/directory/with/podspec'\n```\n\n#### 发布CocoaPods\n\nCocoaPods 0.33 中加入了Trunk服务。\n\n要想使用 Trunk 服务，首先你需要注册自己的电脑。这很简单，只要你指明你的邮箱地址（spec 文件中的）和名称即可。\n\n```\n$ pod trunk register mattt@nshipster.com \"Mattt Thompson\"\n```\n至此，你就可以通过以下命令来方便地发布和升级你的 Pod！\n\n```\n$ pod trunk push NAME.podspec\n\n```\n\n### 参考资料\n[CocoaPods](https://guides.cocoapods.org/)\n\n[NSHipster](https://nshipster.cn/cocoapods/)","source":"_posts/工具/CocoaPods.md","raw":"---\ntitle: Cocoapods\ndate:  2017-5-18 22:39\ncategories:\n- 工具\ntags:\n- 依赖管理\n---\n\n### 使用CocoaPods\n\n#### 安装CocoaPods \n打开命令行\n```\n// OSX 10.11后安装CocoaPods命令\nsudo gem install -n /usr/local/bin cocoapods -v 1.9.0\n```\n#### 项目使用CocoaPods\n- 生成Podfile，进入.xcodeproj文件所在目录\n```\npod init\n```\n\n- Podfile\n\n```\nplatform :ios, '8.0'\n\ntarget 'AppName' do\n\nend \n\n```\n\n- 引入不同的库，并指定版本\n\n```\npod 'X', '~> 1.1'\n\n```\n\n- 引入非CocoaPods公共Git仓库中的库，并可以指定具体的commit, branch 或者 tag, 编译版本\n\n```\npod 'Y', :git => 'https://github.com/NSHipster/Y.git', :commit => 'b4dc0ffee'\npod 'LookinServer', :configurations => ['Debug']\n\n```\n- 引入私有库   \n\n```\n//添加私有库地址到本地的cocopods中\n$ pod repo add REPO_NAME SOURCE_URL\n\n//Podfile文件中添加私有库源\nsource 'URL_TO_REPOSITORY'\n\n```\n\n- 安装所需要的库\n\n```\npod install \n```\nCocoapods 会你用递归分析所有需求，最后序列化为Podfile.lock（建议将 podfile.lock和.xcworkspace 纳入Git版本管理中，该文件记录这Pod里面相关库的历史安装版本）\n\n比如，如果两个库都需要使用AFNetworking，CocoaPods 会确定一个同时能被这两库使用的版本，然后将同一个安装版本链接到两个不同的库中。\n\nCocoaPods 会创建一个新的包含之前安装好的静态库 Xcode 项目，然后将它们链接成一个新的 libPods.a target。你原有的项目将会依赖这个新的静态库。一个 xcworkspace 文件会被创建，从此之后，你应该只打开这个 xcworkspace 文件来进行开发。\n\n- 升级指定库\n\n```\npod update 'C'\n```\n- 升级私有库\n\n```\npod repo update REPO_NAME\n```\n\n- 尝试使用Cocoapod\n\n```\npod try 'D'\n```\n\n### 建立自己的CocoaPods \n\n#### 规范\n.podspec文件作为 CocoaPods 的一个独立单元，包含了名称，版本，许可证，和源码文件等所有信息。\n\n以下是Alamofire的podspec文件内容\n\n```\nPod::Spec.new do |s|\n  s.name = 'Alamofire'\n  s.version = '5.3.0'\n  s.license = 'MIT'\n  s.summary = 'Elegant HTTP Networking in Swift'\n  s.homepage = 'https://github.com/Alamofire/Alamofire'\n  s.authors = { 'Alamofire Software Foundation' => 'info@alamofire.org' }\n  s.source = { :git => 'https://github.com/Alamofire/Alamofire.git', :tag => s.version }\n  s.documentation_url = 'https://alamofire.github.io/Alamofire/'\n\n  s.ios.deployment_target = '10.0'\n  s.osx.deployment_target = '10.12'\n  s.tvos.deployment_target = '10.0'\n  s.watchos.deployment_target = '3.0'\n\n  s.swift_versions = ['5.1', '5.2', '5.3']\n\n  s.source_files = 'Source/*.swift'\n\n  s.frameworks = 'CFNetwork'\nend\n\n\n```\n\n一旦把这个.podspec发布到公共数据库中，任何想使用它的开发者，只需要在 Podfile 中加入如下声明即可：\n\n```\npod 'Alamofire', '~> 5.0'\n\n```\n.podspec文件也可以作为管理内部代码的利器：\n```\npod 'Z', :path => 'path/to/directory/with/podspec'\n```\n\n#### 发布CocoaPods\n\nCocoaPods 0.33 中加入了Trunk服务。\n\n要想使用 Trunk 服务，首先你需要注册自己的电脑。这很简单，只要你指明你的邮箱地址（spec 文件中的）和名称即可。\n\n```\n$ pod trunk register mattt@nshipster.com \"Mattt Thompson\"\n```\n至此，你就可以通过以下命令来方便地发布和升级你的 Pod！\n\n```\n$ pod trunk push NAME.podspec\n\n```\n\n### 参考资料\n[CocoaPods](https://guides.cocoapods.org/)\n\n[NSHipster](https://nshipster.cn/cocoapods/)","slug":"工具/CocoaPods","published":1,"updated":"2020-10-26T06:44:23.112Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgq6gnxi003ct29khag63m6q","content":"<h3 id=\"使用CocoaPods\"><a href=\"#使用CocoaPods\" class=\"headerlink\" title=\"使用CocoaPods\"></a>使用CocoaPods</h3><h4 id=\"安装CocoaPods\"><a href=\"#安装CocoaPods\" class=\"headerlink\" title=\"安装CocoaPods\"></a>安装CocoaPods</h4><p>打开命令行</p>\n<pre><code class=\"hljs awk\"><span class=\"hljs-regexp\">//</span> OSX <span class=\"hljs-number\">10.11</span>后安装CocoaPods命令\nsudo gem install -n <span class=\"hljs-regexp\">/usr/</span>local/bin cocoapods -v <span class=\"hljs-number\">1.9</span>.<span class=\"hljs-number\">0</span></code></pre>\n<h4 id=\"项目使用CocoaPods\"><a href=\"#项目使用CocoaPods\" class=\"headerlink\" title=\"项目使用CocoaPods\"></a>项目使用CocoaPods</h4><ul>\n<li><p>生成Podfile，进入.xcodeproj文件所在目录</p>\n<pre><code class=\"hljs csharp\">pod <span class=\"hljs-keyword\">init</span></code></pre>\n</li>\n<li><p>Podfile</p>\n</li>\n</ul>\n<pre><code class=\"hljs delphi\"><span class=\"hljs-keyword\">platform</span> :ios, <span class=\"hljs-string\">&#x27;8.0&#x27;</span>\n\ntarget <span class=\"hljs-string\">&#x27;AppName&#x27;</span> <span class=\"hljs-keyword\">do</span>\n\n<span class=\"hljs-keyword\">end</span> \n</code></pre>\n\n<ul>\n<li>引入不同的库，并指定版本</li>\n</ul>\n<pre><code class=\"hljs nginx\"><span class=\"hljs-attribute\">pod</span> <span class=\"hljs-string\">&#x27;X&#x27;</span>, <span class=\"hljs-string\">&#x27;~&gt; 1.1&#x27;</span>\n</code></pre>\n\n<ul>\n<li>引入非CocoaPods公共Git仓库中的库，并可以指定具体的commit, branch 或者 tag, 编译版本</li>\n</ul>\n<pre><code class=\"hljs arcade\">pod <span class=\"hljs-string\">&#x27;Y&#x27;</span>, :<span class=\"hljs-function\"><span class=\"hljs-params\">git</span> =&gt;</span> <span class=\"hljs-string\">&#x27;https://github.com/NSHipster/Y.git&#x27;</span>, :<span class=\"hljs-function\"><span class=\"hljs-params\">commit</span> =&gt;</span> <span class=\"hljs-string\">&#x27;b4dc0ffee&#x27;</span>\npod <span class=\"hljs-string\">&#x27;LookinServer&#x27;</span>, :<span class=\"hljs-function\"><span class=\"hljs-params\">configurations</span> =&gt;</span> [<span class=\"hljs-string\">&#x27;Debug&#x27;</span>]\n</code></pre>\n<ul>\n<li>引入私有库   </li>\n</ul>\n<pre><code class=\"hljs awk\"><span class=\"hljs-regexp\">//</span>添加私有库地址到本地的cocopods中\n$ pod repo add REPO_NAME SOURCE_URL\n\n<span class=\"hljs-regexp\">//</span>Podfile文件中添加私有库源\nsource <span class=\"hljs-string\">&#x27;URL_TO_REPOSITORY&#x27;</span>\n</code></pre>\n\n<ul>\n<li>安装所需要的库</li>\n</ul>\n<pre><code class=\"hljs cmake\">pod <span class=\"hljs-keyword\">install</span></code></pre>\n<p>Cocoapods 会你用递归分析所有需求，最后序列化为Podfile.lock（建议将 podfile.lock和.xcworkspace 纳入Git版本管理中，该文件记录这Pod里面相关库的历史安装版本）</p>\n<p>比如，如果两个库都需要使用AFNetworking，CocoaPods 会确定一个同时能被这两库使用的版本，然后将同一个安装版本链接到两个不同的库中。</p>\n<p>CocoaPods 会创建一个新的包含之前安装好的静态库 Xcode 项目，然后将它们链接成一个新的 libPods.a target。你原有的项目将会依赖这个新的静态库。一个 xcworkspace 文件会被创建，从此之后，你应该只打开这个 xcworkspace 文件来进行开发。</p>\n<ul>\n<li>升级指定库</li>\n</ul>\n<pre><code class=\"hljs nginx\"><span class=\"hljs-attribute\">pod</span> update <span class=\"hljs-string\">&#x27;C&#x27;</span></code></pre>\n<ul>\n<li>升级私有库</li>\n</ul>\n<pre><code class=\"hljs ebnf\"><span class=\"hljs-attribute\">pod repo update REPO_NAME</span></code></pre>\n\n<ul>\n<li>尝试使用Cocoapod</li>\n</ul>\n<pre><code class=\"hljs actionscript\">pod <span class=\"hljs-keyword\">try</span> <span class=\"hljs-string\">&#x27;D&#x27;</span></code></pre>\n\n<h3 id=\"建立自己的CocoaPods\"><a href=\"#建立自己的CocoaPods\" class=\"headerlink\" title=\"建立自己的CocoaPods\"></a>建立自己的CocoaPods</h3><h4 id=\"规范\"><a href=\"#规范\" class=\"headerlink\" title=\"规范\"></a>规范</h4><p>.podspec文件作为 CocoaPods 的一个独立单元，包含了名称，版本，许可证，和源码文件等所有信息。</p>\n<p>以下是Alamofire的podspec文件内容</p>\n<pre><code class=\"hljs pgsql\">Pod::Spec.<span class=\"hljs-built_in\">new</span> <span class=\"hljs-keyword\">do</span> |s|\n  s.name = <span class=\"hljs-string\">&#x27;Alamofire&#x27;</span>\n  s.version = <span class=\"hljs-string\">&#x27;5.3.0&#x27;</span>\n  s.license = <span class=\"hljs-string\">&#x27;MIT&#x27;</span>\n  s.<span class=\"hljs-keyword\">summary</span> = <span class=\"hljs-string\">&#x27;Elegant HTTP Networking in Swift&#x27;</span>\n  s.homepage = <span class=\"hljs-string\">&#x27;https://github.com/Alamofire/Alamofire&#x27;</span>\n  s.authors = &#123; <span class=\"hljs-string\">&#x27;Alamofire Software Foundation&#x27;</span> =&gt; <span class=\"hljs-string\">&#x27;info@alamofire.org&#x27;</span> &#125;\n  s.source = &#123; :git =&gt; <span class=\"hljs-string\">&#x27;https://github.com/Alamofire/Alamofire.git&#x27;</span>, :tag =&gt; s.<span class=\"hljs-keyword\">version</span> &#125;\n  s.documentation_url = <span class=\"hljs-string\">&#x27;https://alamofire.github.io/Alamofire/&#x27;</span>\n\n  s.ios.deployment_target = <span class=\"hljs-string\">&#x27;10.0&#x27;</span>\n  s.osx.deployment_target = <span class=\"hljs-string\">&#x27;10.12&#x27;</span>\n  s.tvos.deployment_target = <span class=\"hljs-string\">&#x27;10.0&#x27;</span>\n  s.watchos.deployment_target = <span class=\"hljs-string\">&#x27;3.0&#x27;</span>\n\n  s.swift_versions = [<span class=\"hljs-string\">&#x27;5.1&#x27;</span>, <span class=\"hljs-string\">&#x27;5.2&#x27;</span>, <span class=\"hljs-string\">&#x27;5.3&#x27;</span>]\n\n  s.source_files = <span class=\"hljs-string\">&#x27;Source/*.swift&#x27;</span>\n\n  s.frameworks = <span class=\"hljs-string\">&#x27;CFNetwork&#x27;</span>\n<span class=\"hljs-keyword\">end</span>\n\n</code></pre>\n\n<p>一旦把这个.podspec发布到公共数据库中，任何想使用它的开发者，只需要在 Podfile 中加入如下声明即可：</p>\n<pre><code class=\"hljs nginx\"><span class=\"hljs-attribute\">pod</span> <span class=\"hljs-string\">&#x27;Alamofire&#x27;</span>, <span class=\"hljs-string\">&#x27;~&gt; 5.0&#x27;</span>\n</code></pre>\n<p>.podspec文件也可以作为管理内部代码的利器：</p>\n<pre><code class=\"hljs arcade\">pod <span class=\"hljs-string\">&#x27;Z&#x27;</span>, :<span class=\"hljs-function\"><span class=\"hljs-params\">path</span> =&gt;</span> <span class=\"hljs-string\">&#x27;path/to/directory/with/podspec&#x27;</span></code></pre>\n\n<h4 id=\"发布CocoaPods\"><a href=\"#发布CocoaPods\" class=\"headerlink\" title=\"发布CocoaPods\"></a>发布CocoaPods</h4><p>CocoaPods 0.33 中加入了Trunk服务。</p>\n<p>要想使用 Trunk 服务，首先你需要注册自己的电脑。这很简单，只要你指明你的邮箱地址（spec 文件中的）和名称即可。</p>\n<pre><code class=\"hljs elixir\"><span class=\"hljs-variable\">$ </span>pod trunk register mattt<span class=\"hljs-variable\">@nshipster</span>.com <span class=\"hljs-string\">&quot;Mattt Thompson&quot;</span></code></pre>\n<p>至此，你就可以通过以下命令来方便地发布和升级你的 Pod！</p>\n<pre><code class=\"hljs reasonml\">$ pod trunk push <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">NAME</span>.</span></span>podspec\n</code></pre>\n\n<h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><p><a href=\"https://guides.cocoapods.org/\">CocoaPods</a></p>\n<p><a href=\"https://nshipster.cn/cocoapods/\">NSHipster</a></p>\n","site":{"data":{"fluid_static_prefix":{"internal_js":"/js","internal_css":"/css","internal_img":"/img","iconfont":"//at.alicdn.com/t/font_1736178_kmeydafke9r.css","anchor":"https://cdn.staticfile.org/anchor-js/4.2.2/","github_markdown":"https://cdn.staticfile.org/github-markdown-css/4.0.0/","jquery":"https://cdn.staticfile.org/jquery/3.4.1/","bootstrap":"https://cdn.staticfile.org/twitter-bootstrap/4.4.1/","highlightjs":"https://cdn.staticfile.org/highlight.js/10.0.0/","prismjs":"https://cdn.staticfile.org/prism/1.21.0/","tocbot":"https://cdn.staticfile.org/tocbot/4.11.1/","typed":"https://cdn.staticfile.org/typed.js/2.0.11/","fancybox":"https://cdn.staticfile.org/fancybox/3.5.7/","mathjax":"https://cdn.staticfile.org/mathjax/3.0.5/es5/","katex":"https://cdn.staticfile.org/KaTeX/0.11.1/","aplayer":"https://cdn.staticfile.org/aplayer/1.10.1/","busuanzi":"https://busuanzi.ibruce.info/busuanzi/2.3/","clipboard":"https://cdn.staticfile.org/clipboard.js/2.0.6/","mermaid":"https://cdn.staticfile.org/mermaid/8.5.0/","valine":"https://cdn.staticfile.org/valine/1.4.14/","gitalk":"https://cdn.staticfile.org/gitalk/1.6.2/","blueimp_md5":"https://cdn.staticfile.org/blueimp-md5/2.13.0/","disqusjs":"https://cdn.jsdelivr.net/npm/disqusjs@1.0/dist/","hint":"/lib/hint/"},"fluid_config":{"favicon":"/img/favicon.png","apple_touch_icon":"/img/favicon.png","title_join_string":" - ","force_https":false,"code":{"copy_btn":true,"highlight":{"enable":true,"lib":"highlightjs","highlightjs":{"style":"Github Gist","bg_color":false},"prismjs":{"style":"default","preprocess":true}}},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"_","loop":false},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"right","visible":"hover","icon":""},"mouse_click":{"enable":false,"style":"values"}},"dark_mode":{"enable":true,"default":"auto"},"color":{"body_bg_color":"#eee","body_bg_color_dark":"#181c27","navbar_bg_color":"#2f4154","navbar_bg_color_dark":"#1f3144","navbar_text_color":"#fff","navbar_text_color_dark":"#d0d0d0","text_color":"#3c4858","text_color_dark":"#c4c6c9","sec_text_color":"#718096","sec_text_color_dark":"#a7a9ad","post_text_color":"#2c3e50","post_text_color_dark":"#c4c6c9","post_heading_color":"#1a202c","post_heading_color_dark":"#c4c6c9","post_link_color":"#0366d6","post_link_color_dark":"#1589e9","link_hover_color":"#30a9de","link_hover_color_dark":"#30a9de","link_hover_bg_color":"#f8f9fa","link_hover_bg_color_dark":"#364151","board_color":"#fff","board_color_dark":"#252d38"},"font":{"font_size":"16px","font_family":null,"code_font_size":"85%"},"custom_js":null,"custom_css":null,"custom_html":"","web_analytics":{"enable":false,"baidu":null,"google":null,"gtag":null,"tencent":{"sid":null,"cid":null},"woyaola":null,"cnzz":null,"leancloud":{"app_id":null,"app_key":null,"server_url":null}},"lazyload":{"enable":true,"onlypost":false},"daovoice":{"enable":false,"appid":""},"aplayer":{"enable":false,"autoplay":false,"loop":"all","order":"random","theme":"#b7daff","songs":[{"name":"name","artist":"artist","url":"/songs/test.mp3","cover":"/img/cover.jpg"},{"name":"name","artist":"artist","url":"https://...url.mp3","cover":"https://...cover.jpg"}]},"version":{"check":false},"navbar":{"blog_title":"吃面多放葱","ground_glass":{"enable":false,"px":3,"alpha":0.7},"menu":[{"key":"home","link":"/","icon":"iconfont icon-home-fill"},{"key":"category","link":"/categories/","icon":"iconfont icon-category-fill"},{"key":"tag","link":"/tags/","icon":"iconfont icon-tags-fill"},{"key":"about","link":"/about/","icon":"iconfont icon-user-fill"}]},"search":{"enable":true,"path":"/local-search.xml","generate_path":"/local-search.xml","field":"post","content":true},"scroll_down_arrow":{"enable":true,"banner_height_limit":90,"scroll_after_turning_page":true},"banner_parallax":true,"footer":{"statistics":{"enable":false,"source":"busuanzi","pv_format":"总访问量 {} 次","uv_format":"总访客数 {} 人"},"beian":{"enable":false,"icp_text":"京ICP证123456号","police_text":"京公网安备12345678号","police_code":12345678,"police_icon":"/img/police_beian.png"}},"scroll_top_arrow":{"enable":true},"index":{"banner_img":"/img/default.png","banner_img_height":100,"banner_mask_alpha":0.3,"post_default_img":"","slogan":{"enable":true,"text":"像蚂蚁一样工作，像蝴蝶一样生活"},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"category":true,"tag":true}},"page":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3},"post":{"banner_img":"/img/default.png","banner_img_height":70,"banner_mask_alpha":0.3,"meta":{"author":{"enable":false},"date":{"enable":true,"format":"LL a"},"wordcount":{"enable":true,"format":"{} 字"},"min2read":{"enable":true,"format":"{} 分钟","words":100},"views":{"enable":false,"source":"busuanzi","format":"{} 次"}},"updated":{"enable":false,"content":"本文最后更新于：","relative":false},"toc":{"enable":true,"headingSelector":"h1,h2,h3,h4,h5,h6","collapseDepth":0},"copyright":{"enable":true,"content":"本博客所有文章除特别声明外，均采用 <a href=\"https://creativecommons.org/licenses/by-sa/4.0/deed.zh\" rel=\"nofollow noopener\">CC BY-SA 4.0 协议</a> ，转载请注明出处！"},"prev_next":{"enable":true},"custom":{"enable":false,"content":"<img src=\"https://octodex.github.com/images/jetpacktocat.png\" class=\"rounded mx-auto d-block mt-5\" style=\"width:150px; height:150px;\">"},"image_zoom":{"enable":true},"footnote":{"enable":true,"header":""},"math":{"enable":false,"specific":false,"engine":"mathjax"},"mermaid":{"enable":false,"specific":false,"options":{"theme":"default"}},"comments":{"enable":false,"type":"disqus"}},"utterances":{"repo":null,"issue_term":"pathname","label":"utterances","theme":"github-light","theme_dark":"github-dark","crossorigin":"anonymous"},"disqus":{"shortname":null,"disqusjs":false,"apikey":null},"gitalk":{"clientID":null,"clientSecret":null,"repo":null,"owner":null,"admin":["name"],"id":"location.pathname","language":"zh-CN","labels":["Gitalk"],"perPage":10,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true},"valine":{"appid":null,"appkey":null,"placeholder":"说点什么","path":"window.location.pathname","avatar":"retro","meta":["nick","mail","link"],"pageSize":10,"lang":"zh-CN","highlight":false,"recordIP":false,"serverURLs":null},"changyan":{"appid":"","appkey":""},"livere":{"uid":""},"remark42":{"host":"https://remark.haoyizebo.com","site_id":"haoyizebo","max_shown_comments":10,"locale":"zh"},"archive":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null},"category":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"post_limit":10,"order_by":"-length","collapse_depth":0},"tag":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null,"tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"avatar":"/img/avatar.png","name":"蔺国防","introduce":"移动应用开发者，历史文学爱好者","icons":[{"class":"iconfont icon-github-fill","link":"https://github.com","tip":"GitHub"},{"class":"iconfont icon-douban-fill","link":"https://douban.com","tip":"豆瓣"},{"class":"iconfont icon-wechat-fill","qrcode":"/img/favicon.png"}]},"page404":{"banner_img":"/img/default.png","banner_img_height":85,"banner_mask_alpha":0.3,"subtitle":"Page not found"},"links":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"items":[{"title":"Fluid Docs","intro":"主题使用指南","link":"https://hexo.fluid-dev.com/docs/","image":"/img/favicon.png"},{"title":"Fluid Repo","intro":"主题 GitHub 仓库","link":"https://github.com/fluid-dev/hexo-theme-fluid","image":"/img/favicon.png"},{"title":"Fluid Example","intro":"主题操作示例","link":"https://hexo.fluid-dev.com/docs/example/","image":"/img/favicon.png"}]}}}},"excerpt":"","more":"<h3 id=\"使用CocoaPods\"><a href=\"#使用CocoaPods\" class=\"headerlink\" title=\"使用CocoaPods\"></a>使用CocoaPods</h3><h4 id=\"安装CocoaPods\"><a href=\"#安装CocoaPods\" class=\"headerlink\" title=\"安装CocoaPods\"></a>安装CocoaPods</h4><p>打开命令行</p>\n<pre><code class=\"hljs awk\"><span class=\"hljs-regexp\">//</span> OSX <span class=\"hljs-number\">10.11</span>后安装CocoaPods命令\nsudo gem install -n <span class=\"hljs-regexp\">/usr/</span>local/bin cocoapods -v <span class=\"hljs-number\">1.9</span>.<span class=\"hljs-number\">0</span></code></pre>\n<h4 id=\"项目使用CocoaPods\"><a href=\"#项目使用CocoaPods\" class=\"headerlink\" title=\"项目使用CocoaPods\"></a>项目使用CocoaPods</h4><ul>\n<li><p>生成Podfile，进入.xcodeproj文件所在目录</p>\n<pre><code class=\"hljs csharp\">pod <span class=\"hljs-keyword\">init</span></code></pre>\n</li>\n<li><p>Podfile</p>\n</li>\n</ul>\n<pre><code class=\"hljs delphi\"><span class=\"hljs-keyword\">platform</span> :ios, <span class=\"hljs-string\">&#x27;8.0&#x27;</span>\n\ntarget <span class=\"hljs-string\">&#x27;AppName&#x27;</span> <span class=\"hljs-keyword\">do</span>\n\n<span class=\"hljs-keyword\">end</span> \n</code></pre>\n\n<ul>\n<li>引入不同的库，并指定版本</li>\n</ul>\n<pre><code class=\"hljs nginx\"><span class=\"hljs-attribute\">pod</span> <span class=\"hljs-string\">&#x27;X&#x27;</span>, <span class=\"hljs-string\">&#x27;~&gt; 1.1&#x27;</span>\n</code></pre>\n\n<ul>\n<li>引入非CocoaPods公共Git仓库中的库，并可以指定具体的commit, branch 或者 tag, 编译版本</li>\n</ul>\n<pre><code class=\"hljs arcade\">pod <span class=\"hljs-string\">&#x27;Y&#x27;</span>, :<span class=\"hljs-function\"><span class=\"hljs-params\">git</span> =&gt;</span> <span class=\"hljs-string\">&#x27;https://github.com/NSHipster/Y.git&#x27;</span>, :<span class=\"hljs-function\"><span class=\"hljs-params\">commit</span> =&gt;</span> <span class=\"hljs-string\">&#x27;b4dc0ffee&#x27;</span>\npod <span class=\"hljs-string\">&#x27;LookinServer&#x27;</span>, :<span class=\"hljs-function\"><span class=\"hljs-params\">configurations</span> =&gt;</span> [<span class=\"hljs-string\">&#x27;Debug&#x27;</span>]\n</code></pre>\n<ul>\n<li>引入私有库   </li>\n</ul>\n<pre><code class=\"hljs awk\"><span class=\"hljs-regexp\">//</span>添加私有库地址到本地的cocopods中\n$ pod repo add REPO_NAME SOURCE_URL\n\n<span class=\"hljs-regexp\">//</span>Podfile文件中添加私有库源\nsource <span class=\"hljs-string\">&#x27;URL_TO_REPOSITORY&#x27;</span>\n</code></pre>\n\n<ul>\n<li>安装所需要的库</li>\n</ul>\n<pre><code class=\"hljs cmake\">pod <span class=\"hljs-keyword\">install</span></code></pre>\n<p>Cocoapods 会你用递归分析所有需求，最后序列化为Podfile.lock（建议将 podfile.lock和.xcworkspace 纳入Git版本管理中，该文件记录这Pod里面相关库的历史安装版本）</p>\n<p>比如，如果两个库都需要使用AFNetworking，CocoaPods 会确定一个同时能被这两库使用的版本，然后将同一个安装版本链接到两个不同的库中。</p>\n<p>CocoaPods 会创建一个新的包含之前安装好的静态库 Xcode 项目，然后将它们链接成一个新的 libPods.a target。你原有的项目将会依赖这个新的静态库。一个 xcworkspace 文件会被创建，从此之后，你应该只打开这个 xcworkspace 文件来进行开发。</p>\n<ul>\n<li>升级指定库</li>\n</ul>\n<pre><code class=\"hljs nginx\"><span class=\"hljs-attribute\">pod</span> update <span class=\"hljs-string\">&#x27;C&#x27;</span></code></pre>\n<ul>\n<li>升级私有库</li>\n</ul>\n<pre><code class=\"hljs ebnf\"><span class=\"hljs-attribute\">pod repo update REPO_NAME</span></code></pre>\n\n<ul>\n<li>尝试使用Cocoapod</li>\n</ul>\n<pre><code class=\"hljs actionscript\">pod <span class=\"hljs-keyword\">try</span> <span class=\"hljs-string\">&#x27;D&#x27;</span></code></pre>\n\n<h3 id=\"建立自己的CocoaPods\"><a href=\"#建立自己的CocoaPods\" class=\"headerlink\" title=\"建立自己的CocoaPods\"></a>建立自己的CocoaPods</h3><h4 id=\"规范\"><a href=\"#规范\" class=\"headerlink\" title=\"规范\"></a>规范</h4><p>.podspec文件作为 CocoaPods 的一个独立单元，包含了名称，版本，许可证，和源码文件等所有信息。</p>\n<p>以下是Alamofire的podspec文件内容</p>\n<pre><code class=\"hljs pgsql\">Pod::Spec.<span class=\"hljs-built_in\">new</span> <span class=\"hljs-keyword\">do</span> |s|\n  s.name = <span class=\"hljs-string\">&#x27;Alamofire&#x27;</span>\n  s.version = <span class=\"hljs-string\">&#x27;5.3.0&#x27;</span>\n  s.license = <span class=\"hljs-string\">&#x27;MIT&#x27;</span>\n  s.<span class=\"hljs-keyword\">summary</span> = <span class=\"hljs-string\">&#x27;Elegant HTTP Networking in Swift&#x27;</span>\n  s.homepage = <span class=\"hljs-string\">&#x27;https://github.com/Alamofire/Alamofire&#x27;</span>\n  s.authors = &#123; <span class=\"hljs-string\">&#x27;Alamofire Software Foundation&#x27;</span> =&gt; <span class=\"hljs-string\">&#x27;info@alamofire.org&#x27;</span> &#125;\n  s.source = &#123; :git =&gt; <span class=\"hljs-string\">&#x27;https://github.com/Alamofire/Alamofire.git&#x27;</span>, :tag =&gt; s.<span class=\"hljs-keyword\">version</span> &#125;\n  s.documentation_url = <span class=\"hljs-string\">&#x27;https://alamofire.github.io/Alamofire/&#x27;</span>\n\n  s.ios.deployment_target = <span class=\"hljs-string\">&#x27;10.0&#x27;</span>\n  s.osx.deployment_target = <span class=\"hljs-string\">&#x27;10.12&#x27;</span>\n  s.tvos.deployment_target = <span class=\"hljs-string\">&#x27;10.0&#x27;</span>\n  s.watchos.deployment_target = <span class=\"hljs-string\">&#x27;3.0&#x27;</span>\n\n  s.swift_versions = [<span class=\"hljs-string\">&#x27;5.1&#x27;</span>, <span class=\"hljs-string\">&#x27;5.2&#x27;</span>, <span class=\"hljs-string\">&#x27;5.3&#x27;</span>]\n\n  s.source_files = <span class=\"hljs-string\">&#x27;Source/*.swift&#x27;</span>\n\n  s.frameworks = <span class=\"hljs-string\">&#x27;CFNetwork&#x27;</span>\n<span class=\"hljs-keyword\">end</span>\n\n</code></pre>\n\n<p>一旦把这个.podspec发布到公共数据库中，任何想使用它的开发者，只需要在 Podfile 中加入如下声明即可：</p>\n<pre><code class=\"hljs nginx\"><span class=\"hljs-attribute\">pod</span> <span class=\"hljs-string\">&#x27;Alamofire&#x27;</span>, <span class=\"hljs-string\">&#x27;~&gt; 5.0&#x27;</span>\n</code></pre>\n<p>.podspec文件也可以作为管理内部代码的利器：</p>\n<pre><code class=\"hljs arcade\">pod <span class=\"hljs-string\">&#x27;Z&#x27;</span>, :<span class=\"hljs-function\"><span class=\"hljs-params\">path</span> =&gt;</span> <span class=\"hljs-string\">&#x27;path/to/directory/with/podspec&#x27;</span></code></pre>\n\n<h4 id=\"发布CocoaPods\"><a href=\"#发布CocoaPods\" class=\"headerlink\" title=\"发布CocoaPods\"></a>发布CocoaPods</h4><p>CocoaPods 0.33 中加入了Trunk服务。</p>\n<p>要想使用 Trunk 服务，首先你需要注册自己的电脑。这很简单，只要你指明你的邮箱地址（spec 文件中的）和名称即可。</p>\n<pre><code class=\"hljs elixir\"><span class=\"hljs-variable\">$ </span>pod trunk register mattt<span class=\"hljs-variable\">@nshipster</span>.com <span class=\"hljs-string\">&quot;Mattt Thompson&quot;</span></code></pre>\n<p>至此，你就可以通过以下命令来方便地发布和升级你的 Pod！</p>\n<pre><code class=\"hljs reasonml\">$ pod trunk push <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">NAME</span>.</span></span>podspec\n</code></pre>\n\n<h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><p><a href=\"https://guides.cocoapods.org/\">CocoaPods</a></p>\n<p><a href=\"https://nshipster.cn/cocoapods/\">NSHipster</a></p>\n"},{"title":"Git 常用命令","date":"2018-08-28T04:35:00.000Z","_content":"\n\n#### Git 常用命令\n配置\n```\ngit config --global user.name \"你的名字\"\ngit config --global user.email \"邮箱\"\n\n```\n远程仓库操作\n```\ngit remote add origin \"仓库地址\" //链接远程仓库\n\ngit push -u origin master        //第一次将本地仓库推送到远程仓库\n\ngit branch -r                    //查看远程分支列表\n\ngit clone 仓库地址               //将远程仓库克隆到本地\n\ngit push origin master           //将本地库改动提交远程\n\ngit pull                         //更新本地库至远程库的最新改动\n\ngit push origin --delete 远程分支名  //删除远程分支\n```\nSSH Key 操作\n```\n$ ls -al ~/.ssh\n# Lists the files in your .ssh directory, if they exist\n\nssh -keygen -t rsa -C \"你的邮箱\"   //生成SSH key,保存路径为/root/.ssh\n```\n创建忽略文件\n```\ntouch .gitignore  //不需要服务端提交的内容可以写到忽略文件里\n```\n添加\n```\ngit init 将当前目录初始化为git仓库\ngit add 文件名 将文件添加到暂存区\ngit add -A   //将所有修改文件全部添加到缓存区\ngit commit -m \"描述\"  将暂存区提交到仓库\n```\n查询\n```\ngit status                //查询仓库状态\ngit diff 文件名           //比较文件差异\ngit log                   //查看仓库历史记录(详细)\ngit log --oneline         //查看仓库历史记录(单行)\ngit reflog                //查看所有版本的commitID  (本地分支Git记录不小心删除时,可以用此查看删除的Git记录)\n```\n撤销(回滚)\n```\ngit  checkout -- 文件名     //撤销工作区修改\ngit reset HEAD 文件名       //撤销暂存区的修改\ngit reset --hard 该版本ID   //回退到历史版本\ngit reset --hard HEAD^      //回退到上个版本\ngit reflog                  //回滚到未来\n```\n删除\n```\nrm filename                 //删除本地文件\ngit rm index.html --cached  //保证当前工作区中没有index.html,使用--cached表示只删除换缓存区中的内容\n```\n标签\n```\ngit tag 标签名           //为当前版本打标签\ngit tag 标签名 该版本ID  //为历史版本打标签\ngit tag                  //查看所有标签\ngit show  标签名         //查看某一标签\ngit tag -d 标签名        //删除某一标签\n```\n分支管理\n```\ngit branch dev           //创建分支\ngit checkout dev         //切换分支\ngit checkout -b dev      //创建并切换分支\ngit branch -d dev        //删除分支\ngit commit -a -m 'dev1'  //在分支上提交新的版本\ngit merge dev            //合并分支\ngit stash            //在分支开发过程中遇到问题,需要切换到其他分支,保留写好的内容再切换到主干\ngit stash apply          //再次切换分支后需要应用一下保留的内容\ngit stash drop           //丢弃保存的内容\ngit stash pop            //使用并丢掉\n```\n![git flow](https://upload-images.jianshu.io/upload_images/3340896-9aefe571129ba75d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n#### Git Submodule 管理项目子模块\n\n```\ngit clone <repository> --recursive                   //递归的方式克隆整个项目\n\ngit submodule add <repository> <path>                //添加子模块\n\ngit submodule init                                   //初始化子模块(远程仓库子模块添加或删除后,需要进行此操作)\n\ngit submodule update                                 //更新子模块\n\ngit submodule foreach git pull                      //拉取所有子模块\n\ngit rm moduleA                                      //删除子模块\n\n```\n#### git flow 命令\n\n```\nbrew install git-flow    //安装git-flow\n```\n![gitFlow命令.png](https://upload-images.jianshu.io/upload_images/3340896-c6377d2d53ee3e4d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n","source":"_posts/工具/Git-常用命令.md","raw":"---\ntitle: Git 常用命令\ndate:  2018-08-28 12:35\ncategories:\n- 工具\ntags:\n- Git\n---\n\n\n#### Git 常用命令\n配置\n```\ngit config --global user.name \"你的名字\"\ngit config --global user.email \"邮箱\"\n\n```\n远程仓库操作\n```\ngit remote add origin \"仓库地址\" //链接远程仓库\n\ngit push -u origin master        //第一次将本地仓库推送到远程仓库\n\ngit branch -r                    //查看远程分支列表\n\ngit clone 仓库地址               //将远程仓库克隆到本地\n\ngit push origin master           //将本地库改动提交远程\n\ngit pull                         //更新本地库至远程库的最新改动\n\ngit push origin --delete 远程分支名  //删除远程分支\n```\nSSH Key 操作\n```\n$ ls -al ~/.ssh\n# Lists the files in your .ssh directory, if they exist\n\nssh -keygen -t rsa -C \"你的邮箱\"   //生成SSH key,保存路径为/root/.ssh\n```\n创建忽略文件\n```\ntouch .gitignore  //不需要服务端提交的内容可以写到忽略文件里\n```\n添加\n```\ngit init 将当前目录初始化为git仓库\ngit add 文件名 将文件添加到暂存区\ngit add -A   //将所有修改文件全部添加到缓存区\ngit commit -m \"描述\"  将暂存区提交到仓库\n```\n查询\n```\ngit status                //查询仓库状态\ngit diff 文件名           //比较文件差异\ngit log                   //查看仓库历史记录(详细)\ngit log --oneline         //查看仓库历史记录(单行)\ngit reflog                //查看所有版本的commitID  (本地分支Git记录不小心删除时,可以用此查看删除的Git记录)\n```\n撤销(回滚)\n```\ngit  checkout -- 文件名     //撤销工作区修改\ngit reset HEAD 文件名       //撤销暂存区的修改\ngit reset --hard 该版本ID   //回退到历史版本\ngit reset --hard HEAD^      //回退到上个版本\ngit reflog                  //回滚到未来\n```\n删除\n```\nrm filename                 //删除本地文件\ngit rm index.html --cached  //保证当前工作区中没有index.html,使用--cached表示只删除换缓存区中的内容\n```\n标签\n```\ngit tag 标签名           //为当前版本打标签\ngit tag 标签名 该版本ID  //为历史版本打标签\ngit tag                  //查看所有标签\ngit show  标签名         //查看某一标签\ngit tag -d 标签名        //删除某一标签\n```\n分支管理\n```\ngit branch dev           //创建分支\ngit checkout dev         //切换分支\ngit checkout -b dev      //创建并切换分支\ngit branch -d dev        //删除分支\ngit commit -a -m 'dev1'  //在分支上提交新的版本\ngit merge dev            //合并分支\ngit stash            //在分支开发过程中遇到问题,需要切换到其他分支,保留写好的内容再切换到主干\ngit stash apply          //再次切换分支后需要应用一下保留的内容\ngit stash drop           //丢弃保存的内容\ngit stash pop            //使用并丢掉\n```\n![git flow](https://upload-images.jianshu.io/upload_images/3340896-9aefe571129ba75d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n#### Git Submodule 管理项目子模块\n\n```\ngit clone <repository> --recursive                   //递归的方式克隆整个项目\n\ngit submodule add <repository> <path>                //添加子模块\n\ngit submodule init                                   //初始化子模块(远程仓库子模块添加或删除后,需要进行此操作)\n\ngit submodule update                                 //更新子模块\n\ngit submodule foreach git pull                      //拉取所有子模块\n\ngit rm moduleA                                      //删除子模块\n\n```\n#### git flow 命令\n\n```\nbrew install git-flow    //安装git-flow\n```\n![gitFlow命令.png](https://upload-images.jianshu.io/upload_images/3340896-c6377d2d53ee3e4d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n","slug":"工具/Git-常用命令","published":1,"updated":"2020-09-27T10:33:27.223Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgq6gnxk003et29k3rmq5c6s","content":"<h4 id=\"Git-常用命令\"><a href=\"#Git-常用命令\" class=\"headerlink\" title=\"Git 常用命令\"></a>Git 常用命令</h4><p>配置</p>\n<pre><code class=\"hljs routeros\">git<span class=\"hljs-built_in\"> config </span>--global user.name <span class=\"hljs-string\">&quot;你的名字&quot;</span>\ngit<span class=\"hljs-built_in\"> config </span>--global user.email <span class=\"hljs-string\">&quot;邮箱&quot;</span>\n</code></pre>\n<p>远程仓库操作</p>\n<pre><code class=\"hljs awk\">git remote add origin <span class=\"hljs-string\">&quot;仓库地址&quot;</span> <span class=\"hljs-regexp\">//</span>链接远程仓库\n\ngit push -u origin master        <span class=\"hljs-regexp\">//</span>第一次将本地仓库推送到远程仓库\n\ngit branch -r                    <span class=\"hljs-regexp\">//</span>查看远程分支列表\n\ngit clone 仓库地址               <span class=\"hljs-regexp\">//</span>将远程仓库克隆到本地\n\ngit push origin master           <span class=\"hljs-regexp\">//</span>将本地库改动提交远程\n\ngit pull                         <span class=\"hljs-regexp\">//</span>更新本地库至远程库的最新改动\n\ngit push origin --<span class=\"hljs-keyword\">delete</span> 远程分支名  <span class=\"hljs-regexp\">//</span>删除远程分支</code></pre>\n<p>SSH Key 操作</p>\n<pre><code class=\"hljs awk\">$ ls -al ~/.ssh\n<span class=\"hljs-comment\"># Lists the files in your .ssh directory, if they exist</span>\n\nssh -keygen -t rsa -C <span class=\"hljs-string\">&quot;你的邮箱&quot;</span>   <span class=\"hljs-regexp\">//</span>生成SSH key,保存路径为<span class=\"hljs-regexp\">/root/</span>.ssh</code></pre>\n<p>创建忽略文件</p>\n<pre><code class=\"hljs awk\">touch .gitignore  <span class=\"hljs-regexp\">//</span>不需要服务端提交的内容可以写到忽略文件里</code></pre>\n<p>添加</p>\n<pre><code class=\"hljs csharp\">git <span class=\"hljs-keyword\">init</span> 将当前目录初始化为git仓库\ngit <span class=\"hljs-keyword\">add</span> 文件名 将文件添加到暂存区\ngit <span class=\"hljs-keyword\">add</span> -A   <span class=\"hljs-comment\">//将所有修改文件全部添加到缓存区</span>\ngit commit -m <span class=\"hljs-string\">&quot;描述&quot;</span>  将暂存区提交到仓库</code></pre>\n<p>查询</p>\n<pre><code class=\"hljs awk\">git status                <span class=\"hljs-regexp\">//</span>查询仓库状态\ngit diff 文件名           <span class=\"hljs-regexp\">//</span>比较文件差异\ngit log                   <span class=\"hljs-regexp\">//</span>查看仓库历史记录(详细)\ngit log --oneline         <span class=\"hljs-regexp\">//</span>查看仓库历史记录(单行)\ngit reflog                <span class=\"hljs-regexp\">//</span>查看所有版本的commitID  (本地分支Git记录不小心删除时,可以用此查看删除的Git记录)</code></pre>\n<p>撤销(回滚)</p>\n<pre><code class=\"hljs awk\">git  checkout -- 文件名     <span class=\"hljs-regexp\">//</span>撤销工作区修改\ngit reset HEAD 文件名       <span class=\"hljs-regexp\">//</span>撤销暂存区的修改\ngit reset --hard 该版本ID   <span class=\"hljs-regexp\">//</span>回退到历史版本\ngit reset --hard HEAD^      <span class=\"hljs-regexp\">//</span>回退到上个版本\ngit reflog                  <span class=\"hljs-regexp\">//</span>回滚到未来</code></pre>\n<p>删除</p>\n<pre><code class=\"hljs awk\">rm filename                 <span class=\"hljs-regexp\">//</span>删除本地文件\ngit rm index.html --cached  <span class=\"hljs-regexp\">//</span>保证当前工作区中没有index.html,使用--cached表示只删除换缓存区中的内容</code></pre>\n<p>标签</p>\n<pre><code class=\"hljs crmsh\">git <span class=\"hljs-keyword\">tag</span> <span class=\"hljs-title\">标签名           //为当前版本打标签</span>\n<span class=\"hljs-title\">git</span> <span class=\"hljs-keyword\">tag</span> <span class=\"hljs-title\">标签名 该版本ID</span>  //为历史版本打标签\ngit <span class=\"hljs-keyword\">tag</span>                  <span class=\"hljs-title\">//查看所有标签</span>\n<span class=\"hljs-title\">git</span> show  标签名         //查看某一标签\ngit <span class=\"hljs-keyword\">tag</span> <span class=\"hljs-title\">-d</span> 标签名        //删除某一标签</code></pre>\n<p>分支管理</p>\n<pre><code class=\"hljs awk\">git branch dev           <span class=\"hljs-regexp\">//</span>创建分支\ngit checkout dev         <span class=\"hljs-regexp\">//</span>切换分支\ngit checkout -b dev      <span class=\"hljs-regexp\">//</span>创建并切换分支\ngit branch -d dev        <span class=\"hljs-regexp\">//</span>删除分支\ngit commit -a -m <span class=\"hljs-string\">&#x27;dev1&#x27;</span>  <span class=\"hljs-regexp\">//</span>在分支上提交新的版本\ngit merge dev            <span class=\"hljs-regexp\">//</span>合并分支\ngit stash            <span class=\"hljs-regexp\">//</span>在分支开发过程中遇到问题,需要切换到其他分支,保留写好的内容再切换到主干\ngit stash apply          <span class=\"hljs-regexp\">//</span>再次切换分支后需要应用一下保留的内容\ngit stash drop           <span class=\"hljs-regexp\">//</span>丢弃保存的内容\ngit stash pop            <span class=\"hljs-regexp\">//</span>使用并丢掉</code></pre>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/3340896-9aefe571129ba75d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"git flow\"></p>\n<h4 id=\"Git-Submodule-管理项目子模块\"><a href=\"#Git-Submodule-管理项目子模块\" class=\"headerlink\" title=\"Git Submodule 管理项目子模块\"></a>Git Submodule 管理项目子模块</h4><pre><code class=\"hljs awk\">git clone &lt;repository&gt; --recursive                   <span class=\"hljs-regexp\">//</span>递归的方式克隆整个项目\n\ngit submodule add &lt;repository&gt; &lt;path&gt;                <span class=\"hljs-regexp\">//</span>添加子模块\n\ngit submodule init                                   <span class=\"hljs-regexp\">//</span>初始化子模块(远程仓库子模块添加或删除后,需要进行此操作)\n\ngit submodule update                                 <span class=\"hljs-regexp\">//</span>更新子模块\n\ngit submodule foreach git pull                      <span class=\"hljs-regexp\">//</span>拉取所有子模块\n\ngit rm moduleA                                      <span class=\"hljs-regexp\">//</span>删除子模块\n</code></pre>\n<h4 id=\"git-flow-命令\"><a href=\"#git-flow-命令\" class=\"headerlink\" title=\"git flow 命令\"></a>git flow 命令</h4><pre><code class=\"hljs awk\">brew install git-flow    <span class=\"hljs-regexp\">//</span>安装git-flow</code></pre>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/3340896-c6377d2d53ee3e4d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"gitFlow命令.png\"></p>\n","site":{"data":{"fluid_static_prefix":{"internal_js":"/js","internal_css":"/css","internal_img":"/img","iconfont":"//at.alicdn.com/t/font_1736178_kmeydafke9r.css","anchor":"https://cdn.staticfile.org/anchor-js/4.2.2/","github_markdown":"https://cdn.staticfile.org/github-markdown-css/4.0.0/","jquery":"https://cdn.staticfile.org/jquery/3.4.1/","bootstrap":"https://cdn.staticfile.org/twitter-bootstrap/4.4.1/","highlightjs":"https://cdn.staticfile.org/highlight.js/10.0.0/","prismjs":"https://cdn.staticfile.org/prism/1.21.0/","tocbot":"https://cdn.staticfile.org/tocbot/4.11.1/","typed":"https://cdn.staticfile.org/typed.js/2.0.11/","fancybox":"https://cdn.staticfile.org/fancybox/3.5.7/","mathjax":"https://cdn.staticfile.org/mathjax/3.0.5/es5/","katex":"https://cdn.staticfile.org/KaTeX/0.11.1/","aplayer":"https://cdn.staticfile.org/aplayer/1.10.1/","busuanzi":"https://busuanzi.ibruce.info/busuanzi/2.3/","clipboard":"https://cdn.staticfile.org/clipboard.js/2.0.6/","mermaid":"https://cdn.staticfile.org/mermaid/8.5.0/","valine":"https://cdn.staticfile.org/valine/1.4.14/","gitalk":"https://cdn.staticfile.org/gitalk/1.6.2/","blueimp_md5":"https://cdn.staticfile.org/blueimp-md5/2.13.0/","disqusjs":"https://cdn.jsdelivr.net/npm/disqusjs@1.0/dist/","hint":"/lib/hint/"},"fluid_config":{"favicon":"/img/favicon.png","apple_touch_icon":"/img/favicon.png","title_join_string":" - ","force_https":false,"code":{"copy_btn":true,"highlight":{"enable":true,"lib":"highlightjs","highlightjs":{"style":"Github Gist","bg_color":false},"prismjs":{"style":"default","preprocess":true}}},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"_","loop":false},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"right","visible":"hover","icon":""},"mouse_click":{"enable":false,"style":"values"}},"dark_mode":{"enable":true,"default":"auto"},"color":{"body_bg_color":"#eee","body_bg_color_dark":"#181c27","navbar_bg_color":"#2f4154","navbar_bg_color_dark":"#1f3144","navbar_text_color":"#fff","navbar_text_color_dark":"#d0d0d0","text_color":"#3c4858","text_color_dark":"#c4c6c9","sec_text_color":"#718096","sec_text_color_dark":"#a7a9ad","post_text_color":"#2c3e50","post_text_color_dark":"#c4c6c9","post_heading_color":"#1a202c","post_heading_color_dark":"#c4c6c9","post_link_color":"#0366d6","post_link_color_dark":"#1589e9","link_hover_color":"#30a9de","link_hover_color_dark":"#30a9de","link_hover_bg_color":"#f8f9fa","link_hover_bg_color_dark":"#364151","board_color":"#fff","board_color_dark":"#252d38"},"font":{"font_size":"16px","font_family":null,"code_font_size":"85%"},"custom_js":null,"custom_css":null,"custom_html":"","web_analytics":{"enable":false,"baidu":null,"google":null,"gtag":null,"tencent":{"sid":null,"cid":null},"woyaola":null,"cnzz":null,"leancloud":{"app_id":null,"app_key":null,"server_url":null}},"lazyload":{"enable":true,"onlypost":false},"daovoice":{"enable":false,"appid":""},"aplayer":{"enable":false,"autoplay":false,"loop":"all","order":"random","theme":"#b7daff","songs":[{"name":"name","artist":"artist","url":"/songs/test.mp3","cover":"/img/cover.jpg"},{"name":"name","artist":"artist","url":"https://...url.mp3","cover":"https://...cover.jpg"}]},"version":{"check":false},"navbar":{"blog_title":"吃面多放葱","ground_glass":{"enable":false,"px":3,"alpha":0.7},"menu":[{"key":"home","link":"/","icon":"iconfont icon-home-fill"},{"key":"category","link":"/categories/","icon":"iconfont icon-category-fill"},{"key":"tag","link":"/tags/","icon":"iconfont icon-tags-fill"},{"key":"about","link":"/about/","icon":"iconfont icon-user-fill"}]},"search":{"enable":true,"path":"/local-search.xml","generate_path":"/local-search.xml","field":"post","content":true},"scroll_down_arrow":{"enable":true,"banner_height_limit":90,"scroll_after_turning_page":true},"banner_parallax":true,"footer":{"statistics":{"enable":false,"source":"busuanzi","pv_format":"总访问量 {} 次","uv_format":"总访客数 {} 人"},"beian":{"enable":false,"icp_text":"京ICP证123456号","police_text":"京公网安备12345678号","police_code":12345678,"police_icon":"/img/police_beian.png"}},"scroll_top_arrow":{"enable":true},"index":{"banner_img":"/img/default.png","banner_img_height":100,"banner_mask_alpha":0.3,"post_default_img":"","slogan":{"enable":true,"text":"像蚂蚁一样工作，像蝴蝶一样生活"},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"category":true,"tag":true}},"page":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3},"post":{"banner_img":"/img/default.png","banner_img_height":70,"banner_mask_alpha":0.3,"meta":{"author":{"enable":false},"date":{"enable":true,"format":"LL a"},"wordcount":{"enable":true,"format":"{} 字"},"min2read":{"enable":true,"format":"{} 分钟","words":100},"views":{"enable":false,"source":"busuanzi","format":"{} 次"}},"updated":{"enable":false,"content":"本文最后更新于：","relative":false},"toc":{"enable":true,"headingSelector":"h1,h2,h3,h4,h5,h6","collapseDepth":0},"copyright":{"enable":true,"content":"本博客所有文章除特别声明外，均采用 <a href=\"https://creativecommons.org/licenses/by-sa/4.0/deed.zh\" rel=\"nofollow noopener\">CC BY-SA 4.0 协议</a> ，转载请注明出处！"},"prev_next":{"enable":true},"custom":{"enable":false,"content":"<img src=\"https://octodex.github.com/images/jetpacktocat.png\" class=\"rounded mx-auto d-block mt-5\" style=\"width:150px; height:150px;\">"},"image_zoom":{"enable":true},"footnote":{"enable":true,"header":""},"math":{"enable":false,"specific":false,"engine":"mathjax"},"mermaid":{"enable":false,"specific":false,"options":{"theme":"default"}},"comments":{"enable":false,"type":"disqus"}},"utterances":{"repo":null,"issue_term":"pathname","label":"utterances","theme":"github-light","theme_dark":"github-dark","crossorigin":"anonymous"},"disqus":{"shortname":null,"disqusjs":false,"apikey":null},"gitalk":{"clientID":null,"clientSecret":null,"repo":null,"owner":null,"admin":["name"],"id":"location.pathname","language":"zh-CN","labels":["Gitalk"],"perPage":10,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true},"valine":{"appid":null,"appkey":null,"placeholder":"说点什么","path":"window.location.pathname","avatar":"retro","meta":["nick","mail","link"],"pageSize":10,"lang":"zh-CN","highlight":false,"recordIP":false,"serverURLs":null},"changyan":{"appid":"","appkey":""},"livere":{"uid":""},"remark42":{"host":"https://remark.haoyizebo.com","site_id":"haoyizebo","max_shown_comments":10,"locale":"zh"},"archive":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null},"category":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"post_limit":10,"order_by":"-length","collapse_depth":0},"tag":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null,"tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"avatar":"/img/avatar.png","name":"蔺国防","introduce":"移动应用开发者，历史文学爱好者","icons":[{"class":"iconfont icon-github-fill","link":"https://github.com","tip":"GitHub"},{"class":"iconfont icon-douban-fill","link":"https://douban.com","tip":"豆瓣"},{"class":"iconfont icon-wechat-fill","qrcode":"/img/favicon.png"}]},"page404":{"banner_img":"/img/default.png","banner_img_height":85,"banner_mask_alpha":0.3,"subtitle":"Page not found"},"links":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"items":[{"title":"Fluid Docs","intro":"主题使用指南","link":"https://hexo.fluid-dev.com/docs/","image":"/img/favicon.png"},{"title":"Fluid Repo","intro":"主题 GitHub 仓库","link":"https://github.com/fluid-dev/hexo-theme-fluid","image":"/img/favicon.png"},{"title":"Fluid Example","intro":"主题操作示例","link":"https://hexo.fluid-dev.com/docs/example/","image":"/img/favicon.png"}]}}}},"excerpt":"","more":"<h4 id=\"Git-常用命令\"><a href=\"#Git-常用命令\" class=\"headerlink\" title=\"Git 常用命令\"></a>Git 常用命令</h4><p>配置</p>\n<pre><code class=\"hljs routeros\">git<span class=\"hljs-built_in\"> config </span>--global user.name <span class=\"hljs-string\">&quot;你的名字&quot;</span>\ngit<span class=\"hljs-built_in\"> config </span>--global user.email <span class=\"hljs-string\">&quot;邮箱&quot;</span>\n</code></pre>\n<p>远程仓库操作</p>\n<pre><code class=\"hljs awk\">git remote add origin <span class=\"hljs-string\">&quot;仓库地址&quot;</span> <span class=\"hljs-regexp\">//</span>链接远程仓库\n\ngit push -u origin master        <span class=\"hljs-regexp\">//</span>第一次将本地仓库推送到远程仓库\n\ngit branch -r                    <span class=\"hljs-regexp\">//</span>查看远程分支列表\n\ngit clone 仓库地址               <span class=\"hljs-regexp\">//</span>将远程仓库克隆到本地\n\ngit push origin master           <span class=\"hljs-regexp\">//</span>将本地库改动提交远程\n\ngit pull                         <span class=\"hljs-regexp\">//</span>更新本地库至远程库的最新改动\n\ngit push origin --<span class=\"hljs-keyword\">delete</span> 远程分支名  <span class=\"hljs-regexp\">//</span>删除远程分支</code></pre>\n<p>SSH Key 操作</p>\n<pre><code class=\"hljs awk\">$ ls -al ~/.ssh\n<span class=\"hljs-comment\"># Lists the files in your .ssh directory, if they exist</span>\n\nssh -keygen -t rsa -C <span class=\"hljs-string\">&quot;你的邮箱&quot;</span>   <span class=\"hljs-regexp\">//</span>生成SSH key,保存路径为<span class=\"hljs-regexp\">/root/</span>.ssh</code></pre>\n<p>创建忽略文件</p>\n<pre><code class=\"hljs awk\">touch .gitignore  <span class=\"hljs-regexp\">//</span>不需要服务端提交的内容可以写到忽略文件里</code></pre>\n<p>添加</p>\n<pre><code class=\"hljs csharp\">git <span class=\"hljs-keyword\">init</span> 将当前目录初始化为git仓库\ngit <span class=\"hljs-keyword\">add</span> 文件名 将文件添加到暂存区\ngit <span class=\"hljs-keyword\">add</span> -A   <span class=\"hljs-comment\">//将所有修改文件全部添加到缓存区</span>\ngit commit -m <span class=\"hljs-string\">&quot;描述&quot;</span>  将暂存区提交到仓库</code></pre>\n<p>查询</p>\n<pre><code class=\"hljs awk\">git status                <span class=\"hljs-regexp\">//</span>查询仓库状态\ngit diff 文件名           <span class=\"hljs-regexp\">//</span>比较文件差异\ngit log                   <span class=\"hljs-regexp\">//</span>查看仓库历史记录(详细)\ngit log --oneline         <span class=\"hljs-regexp\">//</span>查看仓库历史记录(单行)\ngit reflog                <span class=\"hljs-regexp\">//</span>查看所有版本的commitID  (本地分支Git记录不小心删除时,可以用此查看删除的Git记录)</code></pre>\n<p>撤销(回滚)</p>\n<pre><code class=\"hljs awk\">git  checkout -- 文件名     <span class=\"hljs-regexp\">//</span>撤销工作区修改\ngit reset HEAD 文件名       <span class=\"hljs-regexp\">//</span>撤销暂存区的修改\ngit reset --hard 该版本ID   <span class=\"hljs-regexp\">//</span>回退到历史版本\ngit reset --hard HEAD^      <span class=\"hljs-regexp\">//</span>回退到上个版本\ngit reflog                  <span class=\"hljs-regexp\">//</span>回滚到未来</code></pre>\n<p>删除</p>\n<pre><code class=\"hljs awk\">rm filename                 <span class=\"hljs-regexp\">//</span>删除本地文件\ngit rm index.html --cached  <span class=\"hljs-regexp\">//</span>保证当前工作区中没有index.html,使用--cached表示只删除换缓存区中的内容</code></pre>\n<p>标签</p>\n<pre><code class=\"hljs crmsh\">git <span class=\"hljs-keyword\">tag</span> <span class=\"hljs-title\">标签名           //为当前版本打标签</span>\n<span class=\"hljs-title\">git</span> <span class=\"hljs-keyword\">tag</span> <span class=\"hljs-title\">标签名 该版本ID</span>  //为历史版本打标签\ngit <span class=\"hljs-keyword\">tag</span>                  <span class=\"hljs-title\">//查看所有标签</span>\n<span class=\"hljs-title\">git</span> show  标签名         //查看某一标签\ngit <span class=\"hljs-keyword\">tag</span> <span class=\"hljs-title\">-d</span> 标签名        //删除某一标签</code></pre>\n<p>分支管理</p>\n<pre><code class=\"hljs awk\">git branch dev           <span class=\"hljs-regexp\">//</span>创建分支\ngit checkout dev         <span class=\"hljs-regexp\">//</span>切换分支\ngit checkout -b dev      <span class=\"hljs-regexp\">//</span>创建并切换分支\ngit branch -d dev        <span class=\"hljs-regexp\">//</span>删除分支\ngit commit -a -m <span class=\"hljs-string\">&#x27;dev1&#x27;</span>  <span class=\"hljs-regexp\">//</span>在分支上提交新的版本\ngit merge dev            <span class=\"hljs-regexp\">//</span>合并分支\ngit stash            <span class=\"hljs-regexp\">//</span>在分支开发过程中遇到问题,需要切换到其他分支,保留写好的内容再切换到主干\ngit stash apply          <span class=\"hljs-regexp\">//</span>再次切换分支后需要应用一下保留的内容\ngit stash drop           <span class=\"hljs-regexp\">//</span>丢弃保存的内容\ngit stash pop            <span class=\"hljs-regexp\">//</span>使用并丢掉</code></pre>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/3340896-9aefe571129ba75d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"git flow\"></p>\n<h4 id=\"Git-Submodule-管理项目子模块\"><a href=\"#Git-Submodule-管理项目子模块\" class=\"headerlink\" title=\"Git Submodule 管理项目子模块\"></a>Git Submodule 管理项目子模块</h4><pre><code class=\"hljs awk\">git clone &lt;repository&gt; --recursive                   <span class=\"hljs-regexp\">//</span>递归的方式克隆整个项目\n\ngit submodule add &lt;repository&gt; &lt;path&gt;                <span class=\"hljs-regexp\">//</span>添加子模块\n\ngit submodule init                                   <span class=\"hljs-regexp\">//</span>初始化子模块(远程仓库子模块添加或删除后,需要进行此操作)\n\ngit submodule update                                 <span class=\"hljs-regexp\">//</span>更新子模块\n\ngit submodule foreach git pull                      <span class=\"hljs-regexp\">//</span>拉取所有子模块\n\ngit rm moduleA                                      <span class=\"hljs-regexp\">//</span>删除子模块\n</code></pre>\n<h4 id=\"git-flow-命令\"><a href=\"#git-flow-命令\" class=\"headerlink\" title=\"git flow 命令\"></a>git flow 命令</h4><pre><code class=\"hljs awk\">brew install git-flow    <span class=\"hljs-regexp\">//</span>安装git-flow</code></pre>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/3340896-c6377d2d53ee3e4d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"gitFlow命令.png\"></p>\n"},{"title":"Git SSH认证","date":"2018-03-12T03:08:00.000Z","_content":"\n###### 许多 Git 服务器都使用 SSH 公钥进行认证。 为了向 Git 服务器提供 SSH 公钥，如果某系统用户尚未拥有密钥，必须事先为其生成一份。 这个过程在所有操作系统上都是相似的。\n\n1.  首先，你需要确认自己是否已经拥有密钥。 默认情况下，用户的 SSH 密钥存储在其 ` ~/.ssh` 目录下。 \n\n![文件目录](http://upload-images.jianshu.io/upload_images/3340896-1b010822f8d11e9e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n进入该目录并列出其中内容，你便可以快速确认自己是否已拥有密钥,进去以后是这个样子,说明已经拥护密钥,将 `id_rsa.pub`文件发送给git管理员,让管理员添加进去.\n![密钥文件](http://upload-images.jianshu.io/upload_images/3340896-44cfaed89c9a17a1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n如果没有找到,直接看步骤3\n\n2. 打开SouceTree 选择 `新建` -> `从URL克隆`\n\n![选择从URL克隆](http://upload-images.jianshu.io/upload_images/3340896-646609abed39b165.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n`源URL` 填写 `git`仓库地址, `目标路径` 选择本地仓库地址,如果仓库链接成功,底下会显示`git`仓库名称,选择 `克隆` ,ok,完成项目拷贝,可以开心地使用SourceTree了.\n![添加源路径,目标路径](http://upload-images.jianshu.io/upload_images/3340896-369777c21dcf1a2d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n3. 如果没有在目录下找到`id_rsa.pub`文件,进入终端,执行以下命令\n\n```\nssh-keygen -t rsa -C \"你的邮箱\"\n```\n显示结果\n```\n$ ssh-keygen -t rsa -C \"你的邮箱\"\nGenerating public/private rsa key pair.\nEnter file in which to save the key (/home/schacon/.ssh/id_rsa):\nCreated directory '/home/schacon/.ssh'.\nEnter passphrase (empty for no passphrase):\nEnter same passphrase again:\nYour identification has been saved in /home/schacon/.ssh/id_rsa.\nYour public key has been saved in /home/schacon/.ssh/id_rsa.pub.\nThe key fingerprint is:\nd0:82:24:8e:d7:f1:bb:9b:33:53:96:93:49:da:9b:e3 你的邮箱\n```\n首先 `ssh-keygen` 会确认密钥的存储位置（默认是 `.ssh/id_rsa`），点`回车键`,选择默认存储位置,然后它会要求你输入两次密钥口令。如果你不想在使用密钥时输入口令，将其留空即可。重新执行步骤1和2就ok了\n\n\n###### 想要了解更多Git相关内容,请参考\n[git-scm.com](https://git-scm.com/book/zh/v2/Git-%E5%9F%BA%E7%A1%80-%E8%8E%B7%E5%8F%96-Git-%E4%BB%93%E5%BA%93)\n\n\n\n\n","source":"_posts/工具/Git使用SSH-公钥认证.md","raw":"\n---\ntitle: Git SSH认证\ndate:  2018-03-12 11:08\ncategories:\n- 工具\ntags:\n-  SSH\n-  Git\n---\n\n###### 许多 Git 服务器都使用 SSH 公钥进行认证。 为了向 Git 服务器提供 SSH 公钥，如果某系统用户尚未拥有密钥，必须事先为其生成一份。 这个过程在所有操作系统上都是相似的。\n\n1.  首先，你需要确认自己是否已经拥有密钥。 默认情况下，用户的 SSH 密钥存储在其 ` ~/.ssh` 目录下。 \n\n![文件目录](http://upload-images.jianshu.io/upload_images/3340896-1b010822f8d11e9e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n进入该目录并列出其中内容，你便可以快速确认自己是否已拥有密钥,进去以后是这个样子,说明已经拥护密钥,将 `id_rsa.pub`文件发送给git管理员,让管理员添加进去.\n![密钥文件](http://upload-images.jianshu.io/upload_images/3340896-44cfaed89c9a17a1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n如果没有找到,直接看步骤3\n\n2. 打开SouceTree 选择 `新建` -> `从URL克隆`\n\n![选择从URL克隆](http://upload-images.jianshu.io/upload_images/3340896-646609abed39b165.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n`源URL` 填写 `git`仓库地址, `目标路径` 选择本地仓库地址,如果仓库链接成功,底下会显示`git`仓库名称,选择 `克隆` ,ok,完成项目拷贝,可以开心地使用SourceTree了.\n![添加源路径,目标路径](http://upload-images.jianshu.io/upload_images/3340896-369777c21dcf1a2d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n3. 如果没有在目录下找到`id_rsa.pub`文件,进入终端,执行以下命令\n\n```\nssh-keygen -t rsa -C \"你的邮箱\"\n```\n显示结果\n```\n$ ssh-keygen -t rsa -C \"你的邮箱\"\nGenerating public/private rsa key pair.\nEnter file in which to save the key (/home/schacon/.ssh/id_rsa):\nCreated directory '/home/schacon/.ssh'.\nEnter passphrase (empty for no passphrase):\nEnter same passphrase again:\nYour identification has been saved in /home/schacon/.ssh/id_rsa.\nYour public key has been saved in /home/schacon/.ssh/id_rsa.pub.\nThe key fingerprint is:\nd0:82:24:8e:d7:f1:bb:9b:33:53:96:93:49:da:9b:e3 你的邮箱\n```\n首先 `ssh-keygen` 会确认密钥的存储位置（默认是 `.ssh/id_rsa`），点`回车键`,选择默认存储位置,然后它会要求你输入两次密钥口令。如果你不想在使用密钥时输入口令，将其留空即可。重新执行步骤1和2就ok了\n\n\n###### 想要了解更多Git相关内容,请参考\n[git-scm.com](https://git-scm.com/book/zh/v2/Git-%E5%9F%BA%E7%A1%80-%E8%8E%B7%E5%8F%96-Git-%E4%BB%93%E5%BA%93)\n\n\n\n\n","slug":"工具/Git使用SSH-公钥认证","published":1,"updated":"2020-09-27T10:40:15.579Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgq6gnxl003gt29k1r0t0gi3","content":"<h6 id=\"许多-Git-服务器都使用-SSH-公钥进行认证。-为了向-Git-服务器提供-SSH-公钥，如果某系统用户尚未拥有密钥，必须事先为其生成一份。-这个过程在所有操作系统上都是相似的。\"><a href=\"#许多-Git-服务器都使用-SSH-公钥进行认证。-为了向-Git-服务器提供-SSH-公钥，如果某系统用户尚未拥有密钥，必须事先为其生成一份。-这个过程在所有操作系统上都是相似的。\" class=\"headerlink\" title=\"许多 Git 服务器都使用 SSH 公钥进行认证。 为了向 Git 服务器提供 SSH 公钥，如果某系统用户尚未拥有密钥，必须事先为其生成一份。 这个过程在所有操作系统上都是相似的。\"></a>许多 Git 服务器都使用 SSH 公钥进行认证。 为了向 Git 服务器提供 SSH 公钥，如果某系统用户尚未拥有密钥，必须事先为其生成一份。 这个过程在所有操作系统上都是相似的。</h6><ol>\n<li>首先，你需要确认自己是否已经拥有密钥。 默认情况下，用户的 SSH 密钥存储在其 <code> ~/.ssh</code> 目录下。 </li>\n</ol>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/3340896-1b010822f8d11e9e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"文件目录\"></p>\n<p>进入该目录并列出其中内容，你便可以快速确认自己是否已拥有密钥,进去以后是这个样子,说明已经拥护密钥,将 <code>id_rsa.pub</code>文件发送给git管理员,让管理员添加进去.<br><img src=\"http://upload-images.jianshu.io/upload_images/3340896-44cfaed89c9a17a1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"密钥文件\"><br>如果没有找到,直接看步骤3</p>\n<ol start=\"2\">\n<li>打开SouceTree 选择 <code>新建</code> -&gt; <code>从URL克隆</code></li>\n</ol>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/3340896-646609abed39b165.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"选择从URL克隆\"></p>\n<p><code>源URL</code> 填写 <code>git</code>仓库地址, <code>目标路径</code> 选择本地仓库地址,如果仓库链接成功,底下会显示<code>git</code>仓库名称,选择 <code>克隆</code> ,ok,完成项目拷贝,可以开心地使用SourceTree了.<br><img src=\"http://upload-images.jianshu.io/upload_images/3340896-369777c21dcf1a2d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"添加源路径,目标路径\"></p>\n<ol start=\"3\">\n<li>如果没有在目录下找到<code>id_rsa.pub</code>文件,进入终端,执行以下命令</li>\n</ol>\n<pre><code class=\"hljs excel\">ssh-keygen -<span class=\"hljs-built_in\">t</span> rsa -C <span class=\"hljs-string\">&quot;你的邮箱&quot;</span></code></pre>\n<p>显示结果</p>\n<pre><code class=\"hljs groovy\">$ ssh-keygen -t rsa -C <span class=\"hljs-string\">&quot;你的邮箱&quot;</span>\nGenerating <span class=\"hljs-keyword\">public</span>/<span class=\"hljs-keyword\">private</span> rsa key pair.\nEnter file <span class=\"hljs-keyword\">in</span> which to save the key (<span class=\"hljs-regexp\">/home/</span>schacon<span class=\"hljs-regexp\">/.ssh/</span>id_rsa):\nCreated directory <span class=\"hljs-string\">&#x27;/home/schacon/.ssh&#x27;</span>.\nEnter passphrase (empty <span class=\"hljs-keyword\">for</span> no passphrase):\nEnter same passphrase <span class=\"hljs-attr\">again:</span>\nYour identification has been saved <span class=\"hljs-keyword\">in</span> <span class=\"hljs-regexp\">/home/</span>schacon<span class=\"hljs-regexp\">/.ssh/</span>id_rsa.\nYour <span class=\"hljs-keyword\">public</span> key has been saved <span class=\"hljs-keyword\">in</span> <span class=\"hljs-regexp\">/home/</span>schacon<span class=\"hljs-regexp\">/.ssh/</span>id_rsa.pub.\nThe key fingerprint <span class=\"hljs-attr\">is:</span>\n<span class=\"hljs-attr\">d0:</span><span class=\"hljs-number\">82</span>:<span class=\"hljs-number\">24</span>:<span class=\"hljs-number\">8</span><span class=\"hljs-attr\">e:</span><span class=\"hljs-attr\">d7:</span><span class=\"hljs-attr\">f1:</span><span class=\"hljs-attr\">bb:</span><span class=\"hljs-number\">9</span><span class=\"hljs-attr\">b:</span><span class=\"hljs-number\">33</span>:<span class=\"hljs-number\">53</span>:<span class=\"hljs-number\">96</span>:<span class=\"hljs-number\">93</span>:<span class=\"hljs-number\">49</span>:<span class=\"hljs-attr\">da:</span><span class=\"hljs-number\">9</span><span class=\"hljs-attr\">b:</span>e3 你的邮箱</code></pre>\n<p>首先 <code>ssh-keygen</code> 会确认密钥的存储位置（默认是 <code>.ssh/id_rsa</code>），点<code>回车键</code>,选择默认存储位置,然后它会要求你输入两次密钥口令。如果你不想在使用密钥时输入口令，将其留空即可。重新执行步骤1和2就ok了</p>\n<h6 id=\"想要了解更多Git相关内容-请参考\"><a href=\"#想要了解更多Git相关内容-请参考\" class=\"headerlink\" title=\"想要了解更多Git相关内容,请参考\"></a>想要了解更多Git相关内容,请参考</h6><p><a href=\"https://git-scm.com/book/zh/v2/Git-%E5%9F%BA%E7%A1%80-%E8%8E%B7%E5%8F%96-Git-%E4%BB%93%E5%BA%93\">git-scm.com</a></p>\n","site":{"data":{"fluid_static_prefix":{"internal_js":"/js","internal_css":"/css","internal_img":"/img","iconfont":"//at.alicdn.com/t/font_1736178_kmeydafke9r.css","anchor":"https://cdn.staticfile.org/anchor-js/4.2.2/","github_markdown":"https://cdn.staticfile.org/github-markdown-css/4.0.0/","jquery":"https://cdn.staticfile.org/jquery/3.4.1/","bootstrap":"https://cdn.staticfile.org/twitter-bootstrap/4.4.1/","highlightjs":"https://cdn.staticfile.org/highlight.js/10.0.0/","prismjs":"https://cdn.staticfile.org/prism/1.21.0/","tocbot":"https://cdn.staticfile.org/tocbot/4.11.1/","typed":"https://cdn.staticfile.org/typed.js/2.0.11/","fancybox":"https://cdn.staticfile.org/fancybox/3.5.7/","mathjax":"https://cdn.staticfile.org/mathjax/3.0.5/es5/","katex":"https://cdn.staticfile.org/KaTeX/0.11.1/","aplayer":"https://cdn.staticfile.org/aplayer/1.10.1/","busuanzi":"https://busuanzi.ibruce.info/busuanzi/2.3/","clipboard":"https://cdn.staticfile.org/clipboard.js/2.0.6/","mermaid":"https://cdn.staticfile.org/mermaid/8.5.0/","valine":"https://cdn.staticfile.org/valine/1.4.14/","gitalk":"https://cdn.staticfile.org/gitalk/1.6.2/","blueimp_md5":"https://cdn.staticfile.org/blueimp-md5/2.13.0/","disqusjs":"https://cdn.jsdelivr.net/npm/disqusjs@1.0/dist/","hint":"/lib/hint/"},"fluid_config":{"favicon":"/img/favicon.png","apple_touch_icon":"/img/favicon.png","title_join_string":" - ","force_https":false,"code":{"copy_btn":true,"highlight":{"enable":true,"lib":"highlightjs","highlightjs":{"style":"Github Gist","bg_color":false},"prismjs":{"style":"default","preprocess":true}}},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"_","loop":false},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"right","visible":"hover","icon":""},"mouse_click":{"enable":false,"style":"values"}},"dark_mode":{"enable":true,"default":"auto"},"color":{"body_bg_color":"#eee","body_bg_color_dark":"#181c27","navbar_bg_color":"#2f4154","navbar_bg_color_dark":"#1f3144","navbar_text_color":"#fff","navbar_text_color_dark":"#d0d0d0","text_color":"#3c4858","text_color_dark":"#c4c6c9","sec_text_color":"#718096","sec_text_color_dark":"#a7a9ad","post_text_color":"#2c3e50","post_text_color_dark":"#c4c6c9","post_heading_color":"#1a202c","post_heading_color_dark":"#c4c6c9","post_link_color":"#0366d6","post_link_color_dark":"#1589e9","link_hover_color":"#30a9de","link_hover_color_dark":"#30a9de","link_hover_bg_color":"#f8f9fa","link_hover_bg_color_dark":"#364151","board_color":"#fff","board_color_dark":"#252d38"},"font":{"font_size":"16px","font_family":null,"code_font_size":"85%"},"custom_js":null,"custom_css":null,"custom_html":"","web_analytics":{"enable":false,"baidu":null,"google":null,"gtag":null,"tencent":{"sid":null,"cid":null},"woyaola":null,"cnzz":null,"leancloud":{"app_id":null,"app_key":null,"server_url":null}},"lazyload":{"enable":true,"onlypost":false},"daovoice":{"enable":false,"appid":""},"aplayer":{"enable":false,"autoplay":false,"loop":"all","order":"random","theme":"#b7daff","songs":[{"name":"name","artist":"artist","url":"/songs/test.mp3","cover":"/img/cover.jpg"},{"name":"name","artist":"artist","url":"https://...url.mp3","cover":"https://...cover.jpg"}]},"version":{"check":false},"navbar":{"blog_title":"吃面多放葱","ground_glass":{"enable":false,"px":3,"alpha":0.7},"menu":[{"key":"home","link":"/","icon":"iconfont icon-home-fill"},{"key":"category","link":"/categories/","icon":"iconfont icon-category-fill"},{"key":"tag","link":"/tags/","icon":"iconfont icon-tags-fill"},{"key":"about","link":"/about/","icon":"iconfont icon-user-fill"}]},"search":{"enable":true,"path":"/local-search.xml","generate_path":"/local-search.xml","field":"post","content":true},"scroll_down_arrow":{"enable":true,"banner_height_limit":90,"scroll_after_turning_page":true},"banner_parallax":true,"footer":{"statistics":{"enable":false,"source":"busuanzi","pv_format":"总访问量 {} 次","uv_format":"总访客数 {} 人"},"beian":{"enable":false,"icp_text":"京ICP证123456号","police_text":"京公网安备12345678号","police_code":12345678,"police_icon":"/img/police_beian.png"}},"scroll_top_arrow":{"enable":true},"index":{"banner_img":"/img/default.png","banner_img_height":100,"banner_mask_alpha":0.3,"post_default_img":"","slogan":{"enable":true,"text":"像蚂蚁一样工作，像蝴蝶一样生活"},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"category":true,"tag":true}},"page":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3},"post":{"banner_img":"/img/default.png","banner_img_height":70,"banner_mask_alpha":0.3,"meta":{"author":{"enable":false},"date":{"enable":true,"format":"LL a"},"wordcount":{"enable":true,"format":"{} 字"},"min2read":{"enable":true,"format":"{} 分钟","words":100},"views":{"enable":false,"source":"busuanzi","format":"{} 次"}},"updated":{"enable":false,"content":"本文最后更新于：","relative":false},"toc":{"enable":true,"headingSelector":"h1,h2,h3,h4,h5,h6","collapseDepth":0},"copyright":{"enable":true,"content":"本博客所有文章除特别声明外，均采用 <a href=\"https://creativecommons.org/licenses/by-sa/4.0/deed.zh\" rel=\"nofollow noopener\">CC BY-SA 4.0 协议</a> ，转载请注明出处！"},"prev_next":{"enable":true},"custom":{"enable":false,"content":"<img src=\"https://octodex.github.com/images/jetpacktocat.png\" class=\"rounded mx-auto d-block mt-5\" style=\"width:150px; height:150px;\">"},"image_zoom":{"enable":true},"footnote":{"enable":true,"header":""},"math":{"enable":false,"specific":false,"engine":"mathjax"},"mermaid":{"enable":false,"specific":false,"options":{"theme":"default"}},"comments":{"enable":false,"type":"disqus"}},"utterances":{"repo":null,"issue_term":"pathname","label":"utterances","theme":"github-light","theme_dark":"github-dark","crossorigin":"anonymous"},"disqus":{"shortname":null,"disqusjs":false,"apikey":null},"gitalk":{"clientID":null,"clientSecret":null,"repo":null,"owner":null,"admin":["name"],"id":"location.pathname","language":"zh-CN","labels":["Gitalk"],"perPage":10,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true},"valine":{"appid":null,"appkey":null,"placeholder":"说点什么","path":"window.location.pathname","avatar":"retro","meta":["nick","mail","link"],"pageSize":10,"lang":"zh-CN","highlight":false,"recordIP":false,"serverURLs":null},"changyan":{"appid":"","appkey":""},"livere":{"uid":""},"remark42":{"host":"https://remark.haoyizebo.com","site_id":"haoyizebo","max_shown_comments":10,"locale":"zh"},"archive":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null},"category":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"post_limit":10,"order_by":"-length","collapse_depth":0},"tag":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null,"tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"avatar":"/img/avatar.png","name":"蔺国防","introduce":"移动应用开发者，历史文学爱好者","icons":[{"class":"iconfont icon-github-fill","link":"https://github.com","tip":"GitHub"},{"class":"iconfont icon-douban-fill","link":"https://douban.com","tip":"豆瓣"},{"class":"iconfont icon-wechat-fill","qrcode":"/img/favicon.png"}]},"page404":{"banner_img":"/img/default.png","banner_img_height":85,"banner_mask_alpha":0.3,"subtitle":"Page not found"},"links":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"items":[{"title":"Fluid Docs","intro":"主题使用指南","link":"https://hexo.fluid-dev.com/docs/","image":"/img/favicon.png"},{"title":"Fluid Repo","intro":"主题 GitHub 仓库","link":"https://github.com/fluid-dev/hexo-theme-fluid","image":"/img/favicon.png"},{"title":"Fluid Example","intro":"主题操作示例","link":"https://hexo.fluid-dev.com/docs/example/","image":"/img/favicon.png"}]}}}},"excerpt":"","more":"<h6 id=\"许多-Git-服务器都使用-SSH-公钥进行认证。-为了向-Git-服务器提供-SSH-公钥，如果某系统用户尚未拥有密钥，必须事先为其生成一份。-这个过程在所有操作系统上都是相似的。\"><a href=\"#许多-Git-服务器都使用-SSH-公钥进行认证。-为了向-Git-服务器提供-SSH-公钥，如果某系统用户尚未拥有密钥，必须事先为其生成一份。-这个过程在所有操作系统上都是相似的。\" class=\"headerlink\" title=\"许多 Git 服务器都使用 SSH 公钥进行认证。 为了向 Git 服务器提供 SSH 公钥，如果某系统用户尚未拥有密钥，必须事先为其生成一份。 这个过程在所有操作系统上都是相似的。\"></a>许多 Git 服务器都使用 SSH 公钥进行认证。 为了向 Git 服务器提供 SSH 公钥，如果某系统用户尚未拥有密钥，必须事先为其生成一份。 这个过程在所有操作系统上都是相似的。</h6><ol>\n<li>首先，你需要确认自己是否已经拥有密钥。 默认情况下，用户的 SSH 密钥存储在其 <code> ~/.ssh</code> 目录下。 </li>\n</ol>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/3340896-1b010822f8d11e9e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"文件目录\"></p>\n<p>进入该目录并列出其中内容，你便可以快速确认自己是否已拥有密钥,进去以后是这个样子,说明已经拥护密钥,将 <code>id_rsa.pub</code>文件发送给git管理员,让管理员添加进去.<br><img src=\"http://upload-images.jianshu.io/upload_images/3340896-44cfaed89c9a17a1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"密钥文件\"><br>如果没有找到,直接看步骤3</p>\n<ol start=\"2\">\n<li>打开SouceTree 选择 <code>新建</code> -&gt; <code>从URL克隆</code></li>\n</ol>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/3340896-646609abed39b165.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"选择从URL克隆\"></p>\n<p><code>源URL</code> 填写 <code>git</code>仓库地址, <code>目标路径</code> 选择本地仓库地址,如果仓库链接成功,底下会显示<code>git</code>仓库名称,选择 <code>克隆</code> ,ok,完成项目拷贝,可以开心地使用SourceTree了.<br><img src=\"http://upload-images.jianshu.io/upload_images/3340896-369777c21dcf1a2d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"添加源路径,目标路径\"></p>\n<ol start=\"3\">\n<li>如果没有在目录下找到<code>id_rsa.pub</code>文件,进入终端,执行以下命令</li>\n</ol>\n<pre><code class=\"hljs excel\">ssh-keygen -<span class=\"hljs-built_in\">t</span> rsa -C <span class=\"hljs-string\">&quot;你的邮箱&quot;</span></code></pre>\n<p>显示结果</p>\n<pre><code class=\"hljs groovy\">$ ssh-keygen -t rsa -C <span class=\"hljs-string\">&quot;你的邮箱&quot;</span>\nGenerating <span class=\"hljs-keyword\">public</span>/<span class=\"hljs-keyword\">private</span> rsa key pair.\nEnter file <span class=\"hljs-keyword\">in</span> which to save the key (<span class=\"hljs-regexp\">/home/</span>schacon<span class=\"hljs-regexp\">/.ssh/</span>id_rsa):\nCreated directory <span class=\"hljs-string\">&#x27;/home/schacon/.ssh&#x27;</span>.\nEnter passphrase (empty <span class=\"hljs-keyword\">for</span> no passphrase):\nEnter same passphrase <span class=\"hljs-attr\">again:</span>\nYour identification has been saved <span class=\"hljs-keyword\">in</span> <span class=\"hljs-regexp\">/home/</span>schacon<span class=\"hljs-regexp\">/.ssh/</span>id_rsa.\nYour <span class=\"hljs-keyword\">public</span> key has been saved <span class=\"hljs-keyword\">in</span> <span class=\"hljs-regexp\">/home/</span>schacon<span class=\"hljs-regexp\">/.ssh/</span>id_rsa.pub.\nThe key fingerprint <span class=\"hljs-attr\">is:</span>\n<span class=\"hljs-attr\">d0:</span><span class=\"hljs-number\">82</span>:<span class=\"hljs-number\">24</span>:<span class=\"hljs-number\">8</span><span class=\"hljs-attr\">e:</span><span class=\"hljs-attr\">d7:</span><span class=\"hljs-attr\">f1:</span><span class=\"hljs-attr\">bb:</span><span class=\"hljs-number\">9</span><span class=\"hljs-attr\">b:</span><span class=\"hljs-number\">33</span>:<span class=\"hljs-number\">53</span>:<span class=\"hljs-number\">96</span>:<span class=\"hljs-number\">93</span>:<span class=\"hljs-number\">49</span>:<span class=\"hljs-attr\">da:</span><span class=\"hljs-number\">9</span><span class=\"hljs-attr\">b:</span>e3 你的邮箱</code></pre>\n<p>首先 <code>ssh-keygen</code> 会确认密钥的存储位置（默认是 <code>.ssh/id_rsa</code>），点<code>回车键</code>,选择默认存储位置,然后它会要求你输入两次密钥口令。如果你不想在使用密钥时输入口令，将其留空即可。重新执行步骤1和2就ok了</p>\n<h6 id=\"想要了解更多Git相关内容-请参考\"><a href=\"#想要了解更多Git相关内容-请参考\" class=\"headerlink\" title=\"想要了解更多Git相关内容,请参考\"></a>想要了解更多Git相关内容,请参考</h6><p><a href=\"https://git-scm.com/book/zh/v2/Git-%E5%9F%BA%E7%A1%80-%E8%8E%B7%E5%8F%96-Git-%E4%BB%93%E5%BA%93\">git-scm.com</a></p>\n"},{"title":"SVN 配置","date":"2017-03-16T03:17:00.000Z","_content":"\nSVN 配置\n\n1、创建SVN Repositroy\n打开终端 输入：svnadmin create /path/svn/pro\nsvn是目录，pros是版本库，输入完成即可看见生成文档\n2、配置svn用户权限。\n/path/svn/pro/conf/目录下存在3个文件：authz,passwd,svnserve.conf\n（1) 配置svnserve.conf\n将里面的\n＃anon-access = read\n＃auth-access = write\n＃password-db = passwd\n＃authz-db = authz\n四行前的＃号去掉，再将anon-access = read改为anon-access = none，这样禁止匿名访问\n**注意**:\n- 这句话必须使用，这样子才能显示Log的信息\n- 在＃号后是有空格的，去掉空格，上文字顶格,否则也有错误\n（2)  配置passwd\n里面存的是用户与密码，有示例，直接按照它的格式添加用户和密码就可以了\ntest1=123\ntest2=456\n（3)   配置authz\n[groups] 后面跟的是用户组设置，可以将你在passwd里设置的用户添加到不同的用户组里，那么之后，可以对不同用户组设置不同的权限，以免多用户设置麻烦，多个用户用,号分隔。可按它的示例做\n[groups]\ntestgroups=test1,test2\n\n之后，可以对不同的版本库进行权限设置，底下有一个示例，按它的写法写就可以了，如果需要对所有的版本库设置，利用[/]就可以了。如：\n[/]\n@testgroups=rw\n个人配置只需在[/]下面添加\n用户名=rw即可\n**PS**：用户组前要用@符号，如果是用户，直接写用户名就可以了。rw代表可读写，显然只读就是r了\n3、启动SVN服务\nsvnserve -d -r /path/svn  特别注意，路径一定是SVN的目录，不是其中一个版本库的目录，不然，能正常启动，就是访问有问题\n没有任何输出，则启动成功\n4.配置conrnerStone\n点击ConerStone左下角 如下图的“+”，添加SVN地址，\n需要填写的方格\nserver： IP地址 不包括Svn后面的其他路径 例如：主机IP 192.168.。。。\nRepisitory path:Ip后面的路径  例如：上文的Pro\nName：用户名\nPassword：密码\n5.让SVN支持.a文件的上传\n（1）打开终端：vi ~/.subversion/config 打开config文件\n（2）找到：\n\n#global-ignores = *.o *.lo *.la *.al .libs *.so *.so.[0-9]* *.a *.pyc *.pyo \n\n# *.rej *~ #*# .#* .*.swp .DS_Store\n\n这是svn默认的忽略列表，更改这个即可上传和下载被忽略的文件\n去掉开头第一行的#和#前面的空格，第一行global前面不能有空格。\n去掉第二行的#，空格不用管。\n删除上问红色的*.a，这样即可上传.a文件。\n\n#**Cornerstone Svn简单使用指南**\n\n一、安装并拷贝项目\n\n1.第一步：安装svn.\n2.第二步：第一个使用svn，找到“Check Out Working Copy”选项，选择并点击。\n目的：从服务器上拷贝一份全新的项目工程。\n3.第三步：可以正常使用了。。。\n\n二、在项目中使用\n\n1.查看日志\n找到“Log”选项，选择并点击。\n查看自己当前的版本是否是最新的，如果不是最新的版本，从第2步开始执行；\n如果自己当前的版本是最新的，从第3步开始执行；\n2.更新到最新版本\n当前程序员在打开工程项目之前，找到“Update to Latest Revision”选项，选择并点击。\n目的：保持当前程序员客户端的项目版本是最新的。\n3.编辑项目\n4.提交之前，再次点击“Update to Latest Revision”，保持项目是最新版本。\n5.更新最新版本后，如果有错误，冲突等情况，解决，直到没错误！\n6.提交项目，找到“Commit Changes”选项，选择并点击。\n目的：把当前编辑后的项目提交的服务器。\n三、\"lock\"和“unlock”的使用\n当我们正在编辑某个文件时，为了防止被其他人修改，可以在编辑之前，使该文件处于锁定状态，当我们编辑后，要提交的时候，再解锁。\n四、每次提交项目，都要写详细备注并署名。\n五、恢复到以前的版本，以前其他出错情况，请参考稍后的文档说明或上网搜索。 \nCornerstone的逻辑很清晰，界面打开后，左边栏上下分开，上面是working copies的列表，下面是REPOSITORIES的列表。常见的功能基本上跟windows一样，在上下文中可以得到。\n\n1、连接到HTTP server\n\nRESPOSITORIES栏上，标题栏的右手边有+和-，点击+号（如果第一次打开这个软件，这一步会自动跳出来），出现的对话框中，选择HTTP Server\n\nServer：http server的地址\nPort: 空着就可以\n\nRepository path: 填入http server的Repository地址。一般这个地址，开源项目host在你创建项目后都会给你地方拷贝。\n\n提示：在这个栏目下面，有一行最后形成的地址，你可以跟开源项目给你的路径看一下是否一致。\n\nNickName: 空着就可\nName: 填入登录的账户名称\nPassword: 填入登录的密码\n\n然后点击Add，就可以把这个Repository加入了。 \n\n2、Check out\n按照1做好自己的REPOSITORIES，选中一个的时候，左上角的Check Out就会高亮，点击该图标，就会出现一个路径选择的对话框。填好相应的地方后，就开始check out了。\n##**注意**：\n***第一次在check out没有完成之前，你选择的本地work space目录是不会出现在 working COPIES上的。***\n3、Commit delete file\n先把本地的文件删除，然后在cornerstone的working copies栏目中，找到相应的文件所在的位置，可以看到这个文件有个M标志，表示missing。在该文件上右键点击，上下文菜单中找到Delete，然后确认。刚才的M标识换成了D，表示Deleted。这个时候你就可以commit了。\n4、Relocate\n如果服务器上改了原始的某个目录的路径，那么在WORKING COPIES上，右键可以找到Relocate To，后面会跟上相应的目录，点击就可以重新定位。定位好后，相应的REPOSITORIES会自动更改。 \n\n##参考：\n\n  [conerStone的配置及使用说明](http://www.tuicool.com/articles/n6fyq2)\n[MAC下配置SVN](http://www.cnblogs.com/onlyfu/archive/2012/05/08/2489814.html)\nhttp://blog.csdn.net/wisdom605768292/article/details/19068601\n","source":"_posts/工具/MAC-svn-配置及cornerstone.md","raw":"\n---\ntitle: SVN 配置\ndate: 2017-03-16 11:17\ncategories:\n- 工具\ntags:\n-  SVN\n-  Mac\n---\n\nSVN 配置\n\n1、创建SVN Repositroy\n打开终端 输入：svnadmin create /path/svn/pro\nsvn是目录，pros是版本库，输入完成即可看见生成文档\n2、配置svn用户权限。\n/path/svn/pro/conf/目录下存在3个文件：authz,passwd,svnserve.conf\n（1) 配置svnserve.conf\n将里面的\n＃anon-access = read\n＃auth-access = write\n＃password-db = passwd\n＃authz-db = authz\n四行前的＃号去掉，再将anon-access = read改为anon-access = none，这样禁止匿名访问\n**注意**:\n- 这句话必须使用，这样子才能显示Log的信息\n- 在＃号后是有空格的，去掉空格，上文字顶格,否则也有错误\n（2)  配置passwd\n里面存的是用户与密码，有示例，直接按照它的格式添加用户和密码就可以了\ntest1=123\ntest2=456\n（3)   配置authz\n[groups] 后面跟的是用户组设置，可以将你在passwd里设置的用户添加到不同的用户组里，那么之后，可以对不同用户组设置不同的权限，以免多用户设置麻烦，多个用户用,号分隔。可按它的示例做\n[groups]\ntestgroups=test1,test2\n\n之后，可以对不同的版本库进行权限设置，底下有一个示例，按它的写法写就可以了，如果需要对所有的版本库设置，利用[/]就可以了。如：\n[/]\n@testgroups=rw\n个人配置只需在[/]下面添加\n用户名=rw即可\n**PS**：用户组前要用@符号，如果是用户，直接写用户名就可以了。rw代表可读写，显然只读就是r了\n3、启动SVN服务\nsvnserve -d -r /path/svn  特别注意，路径一定是SVN的目录，不是其中一个版本库的目录，不然，能正常启动，就是访问有问题\n没有任何输出，则启动成功\n4.配置conrnerStone\n点击ConerStone左下角 如下图的“+”，添加SVN地址，\n需要填写的方格\nserver： IP地址 不包括Svn后面的其他路径 例如：主机IP 192.168.。。。\nRepisitory path:Ip后面的路径  例如：上文的Pro\nName：用户名\nPassword：密码\n5.让SVN支持.a文件的上传\n（1）打开终端：vi ~/.subversion/config 打开config文件\n（2）找到：\n\n#global-ignores = *.o *.lo *.la *.al .libs *.so *.so.[0-9]* *.a *.pyc *.pyo \n\n# *.rej *~ #*# .#* .*.swp .DS_Store\n\n这是svn默认的忽略列表，更改这个即可上传和下载被忽略的文件\n去掉开头第一行的#和#前面的空格，第一行global前面不能有空格。\n去掉第二行的#，空格不用管。\n删除上问红色的*.a，这样即可上传.a文件。\n\n#**Cornerstone Svn简单使用指南**\n\n一、安装并拷贝项目\n\n1.第一步：安装svn.\n2.第二步：第一个使用svn，找到“Check Out Working Copy”选项，选择并点击。\n目的：从服务器上拷贝一份全新的项目工程。\n3.第三步：可以正常使用了。。。\n\n二、在项目中使用\n\n1.查看日志\n找到“Log”选项，选择并点击。\n查看自己当前的版本是否是最新的，如果不是最新的版本，从第2步开始执行；\n如果自己当前的版本是最新的，从第3步开始执行；\n2.更新到最新版本\n当前程序员在打开工程项目之前，找到“Update to Latest Revision”选项，选择并点击。\n目的：保持当前程序员客户端的项目版本是最新的。\n3.编辑项目\n4.提交之前，再次点击“Update to Latest Revision”，保持项目是最新版本。\n5.更新最新版本后，如果有错误，冲突等情况，解决，直到没错误！\n6.提交项目，找到“Commit Changes”选项，选择并点击。\n目的：把当前编辑后的项目提交的服务器。\n三、\"lock\"和“unlock”的使用\n当我们正在编辑某个文件时，为了防止被其他人修改，可以在编辑之前，使该文件处于锁定状态，当我们编辑后，要提交的时候，再解锁。\n四、每次提交项目，都要写详细备注并署名。\n五、恢复到以前的版本，以前其他出错情况，请参考稍后的文档说明或上网搜索。 \nCornerstone的逻辑很清晰，界面打开后，左边栏上下分开，上面是working copies的列表，下面是REPOSITORIES的列表。常见的功能基本上跟windows一样，在上下文中可以得到。\n\n1、连接到HTTP server\n\nRESPOSITORIES栏上，标题栏的右手边有+和-，点击+号（如果第一次打开这个软件，这一步会自动跳出来），出现的对话框中，选择HTTP Server\n\nServer：http server的地址\nPort: 空着就可以\n\nRepository path: 填入http server的Repository地址。一般这个地址，开源项目host在你创建项目后都会给你地方拷贝。\n\n提示：在这个栏目下面，有一行最后形成的地址，你可以跟开源项目给你的路径看一下是否一致。\n\nNickName: 空着就可\nName: 填入登录的账户名称\nPassword: 填入登录的密码\n\n然后点击Add，就可以把这个Repository加入了。 \n\n2、Check out\n按照1做好自己的REPOSITORIES，选中一个的时候，左上角的Check Out就会高亮，点击该图标，就会出现一个路径选择的对话框。填好相应的地方后，就开始check out了。\n##**注意**：\n***第一次在check out没有完成之前，你选择的本地work space目录是不会出现在 working COPIES上的。***\n3、Commit delete file\n先把本地的文件删除，然后在cornerstone的working copies栏目中，找到相应的文件所在的位置，可以看到这个文件有个M标志，表示missing。在该文件上右键点击，上下文菜单中找到Delete，然后确认。刚才的M标识换成了D，表示Deleted。这个时候你就可以commit了。\n4、Relocate\n如果服务器上改了原始的某个目录的路径，那么在WORKING COPIES上，右键可以找到Relocate To，后面会跟上相应的目录，点击就可以重新定位。定位好后，相应的REPOSITORIES会自动更改。 \n\n##参考：\n\n  [conerStone的配置及使用说明](http://www.tuicool.com/articles/n6fyq2)\n[MAC下配置SVN](http://www.cnblogs.com/onlyfu/archive/2012/05/08/2489814.html)\nhttp://blog.csdn.net/wisdom605768292/article/details/19068601\n","slug":"工具/MAC-svn-配置及cornerstone","published":1,"updated":"2020-09-27T11:05:40.540Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgq6gnxm003kt29k0wmh4oo4","content":"<p>SVN 配置</p>\n<p>1、创建SVN Repositroy<br>打开终端 输入：svnadmin create /path/svn/pro<br>svn是目录，pros是版本库，输入完成即可看见生成文档<br>2、配置svn用户权限。<br>/path/svn/pro/conf/目录下存在3个文件：authz,passwd,svnserve.conf<br>（1) 配置svnserve.conf<br>将里面的<br>＃anon-access = read<br>＃auth-access = write<br>＃password-db = passwd<br>＃authz-db = authz<br>四行前的＃号去掉，再将anon-access = read改为anon-access = none，这样禁止匿名访问<br><strong>注意</strong>:</p>\n<ul>\n<li>这句话必须使用，这样子才能显示Log的信息</li>\n<li>在＃号后是有空格的，去掉空格，上文字顶格,否则也有错误<br>（2)  配置passwd<br>里面存的是用户与密码，有示例，直接按照它的格式添加用户和密码就可以了<br>test1=123<br>test2=456<br>（3)   配置authz<br>[groups] 后面跟的是用户组设置，可以将你在passwd里设置的用户添加到不同的用户组里，那么之后，可以对不同用户组设置不同的权限，以免多用户设置麻烦，多个用户用,号分隔。可按它的示例做<br>[groups]<br>testgroups=test1,test2</li>\n</ul>\n<p>之后，可以对不同的版本库进行权限设置，底下有一个示例，按它的写法写就可以了，如果需要对所有的版本库设置，利用[/]就可以了。如：<br>[/]<br>@testgroups=rw<br>个人配置只需在[/]下面添加<br>用户名=rw即可<br><strong>PS</strong>：用户组前要用@符号，如果是用户，直接写用户名就可以了。rw代表可读写，显然只读就是r了<br>3、启动SVN服务<br>svnserve -d -r /path/svn  特别注意，路径一定是SVN的目录，不是其中一个版本库的目录，不然，能正常启动，就是访问有问题<br>没有任何输出，则启动成功<br>4.配置conrnerStone<br>点击ConerStone左下角 如下图的“+”，添加SVN地址，<br>需要填写的方格<br>server： IP地址 不包括Svn后面的其他路径 例如：主机IP 192.168.。。。<br>Repisitory path:Ip后面的路径  例如：上文的Pro<br>Name：用户名<br>Password：密码<br>5.让SVN支持.a文件的上传<br>（1）打开终端：vi ~/.subversion/config 打开config文件<br>（2）找到：</p>\n<p>#global-ignores = *.o <em>.lo *.la *.al .libs *.so *.so.[0-9]</em> *.a *.pyc *.pyo </p>\n<h1 id=\"rej-swp-DS-Store\"><a href=\"#rej-swp-DS-Store\" class=\"headerlink\" title=\".rej ~ ## .# .*.swp .DS_Store\"></a><em>.rej <em>~ #</em># .#</em> .*.swp .DS_Store</h1><p>这是svn默认的忽略列表，更改这个即可上传和下载被忽略的文件<br>去掉开头第一行的#和#前面的空格，第一行global前面不能有空格。<br>去掉第二行的#，空格不用管。<br>删除上问红色的*.a，这样即可上传.a文件。</p>\n<p>#<strong>Cornerstone Svn简单使用指南</strong></p>\n<p>一、安装并拷贝项目</p>\n<p>1.第一步：安装svn.<br>2.第二步：第一个使用svn，找到“Check Out Working Copy”选项，选择并点击。<br>目的：从服务器上拷贝一份全新的项目工程。<br>3.第三步：可以正常使用了。。。</p>\n<p>二、在项目中使用</p>\n<p>1.查看日志<br>找到“Log”选项，选择并点击。<br>查看自己当前的版本是否是最新的，如果不是最新的版本，从第2步开始执行；<br>如果自己当前的版本是最新的，从第3步开始执行；<br>2.更新到最新版本<br>当前程序员在打开工程项目之前，找到“Update to Latest Revision”选项，选择并点击。<br>目的：保持当前程序员客户端的项目版本是最新的。<br>3.编辑项目<br>4.提交之前，再次点击“Update to Latest Revision”，保持项目是最新版本。<br>5.更新最新版本后，如果有错误，冲突等情况，解决，直到没错误！<br>6.提交项目，找到“Commit Changes”选项，选择并点击。<br>目的：把当前编辑后的项目提交的服务器。<br>三、”lock”和“unlock”的使用<br>当我们正在编辑某个文件时，为了防止被其他人修改，可以在编辑之前，使该文件处于锁定状态，当我们编辑后，要提交的时候，再解锁。<br>四、每次提交项目，都要写详细备注并署名。<br>五、恢复到以前的版本，以前其他出错情况，请参考稍后的文档说明或上网搜索。<br>Cornerstone的逻辑很清晰，界面打开后，左边栏上下分开，上面是working copies的列表，下面是REPOSITORIES的列表。常见的功能基本上跟windows一样，在上下文中可以得到。</p>\n<p>1、连接到HTTP server</p>\n<p>RESPOSITORIES栏上，标题栏的右手边有+和-，点击+号（如果第一次打开这个软件，这一步会自动跳出来），出现的对话框中，选择HTTP Server</p>\n<p>Server：http server的地址<br>Port: 空着就可以</p>\n<p>Repository path: 填入http server的Repository地址。一般这个地址，开源项目host在你创建项目后都会给你地方拷贝。</p>\n<p>提示：在这个栏目下面，有一行最后形成的地址，你可以跟开源项目给你的路径看一下是否一致。</p>\n<p>NickName: 空着就可<br>Name: 填入登录的账户名称<br>Password: 填入登录的密码</p>\n<p>然后点击Add，就可以把这个Repository加入了。 </p>\n<p>2、Check out<br>按照1做好自己的REPOSITORIES，选中一个的时候，左上角的Check Out就会高亮，点击该图标，就会出现一个路径选择的对话框。填好相应的地方后，就开始check out了。<br>##<strong>注意</strong>：<br>**<em>第一次在check out没有完成之前，你选择的本地work space目录是不会出现在 working COPIES上的。**</em><br>3、Commit delete file<br>先把本地的文件删除，然后在cornerstone的working copies栏目中，找到相应的文件所在的位置，可以看到这个文件有个M标志，表示missing。在该文件上右键点击，上下文菜单中找到Delete，然后确认。刚才的M标识换成了D，表示Deleted。这个时候你就可以commit了。<br>4、Relocate<br>如果服务器上改了原始的某个目录的路径，那么在WORKING COPIES上，右键可以找到Relocate To，后面会跟上相应的目录，点击就可以重新定位。定位好后，相应的REPOSITORIES会自动更改。 </p>\n<p>##参考：</p>\n<p>  <a href=\"http://www.tuicool.com/articles/n6fyq2\">conerStone的配置及使用说明</a><br><a href=\"http://www.cnblogs.com/onlyfu/archive/2012/05/08/2489814.html\">MAC下配置SVN</a><br><a href=\"http://blog.csdn.net/wisdom605768292/article/details/19068601\">http://blog.csdn.net/wisdom605768292/article/details/19068601</a></p>\n","site":{"data":{"fluid_static_prefix":{"internal_js":"/js","internal_css":"/css","internal_img":"/img","iconfont":"//at.alicdn.com/t/font_1736178_kmeydafke9r.css","anchor":"https://cdn.staticfile.org/anchor-js/4.2.2/","github_markdown":"https://cdn.staticfile.org/github-markdown-css/4.0.0/","jquery":"https://cdn.staticfile.org/jquery/3.4.1/","bootstrap":"https://cdn.staticfile.org/twitter-bootstrap/4.4.1/","highlightjs":"https://cdn.staticfile.org/highlight.js/10.0.0/","prismjs":"https://cdn.staticfile.org/prism/1.21.0/","tocbot":"https://cdn.staticfile.org/tocbot/4.11.1/","typed":"https://cdn.staticfile.org/typed.js/2.0.11/","fancybox":"https://cdn.staticfile.org/fancybox/3.5.7/","mathjax":"https://cdn.staticfile.org/mathjax/3.0.5/es5/","katex":"https://cdn.staticfile.org/KaTeX/0.11.1/","aplayer":"https://cdn.staticfile.org/aplayer/1.10.1/","busuanzi":"https://busuanzi.ibruce.info/busuanzi/2.3/","clipboard":"https://cdn.staticfile.org/clipboard.js/2.0.6/","mermaid":"https://cdn.staticfile.org/mermaid/8.5.0/","valine":"https://cdn.staticfile.org/valine/1.4.14/","gitalk":"https://cdn.staticfile.org/gitalk/1.6.2/","blueimp_md5":"https://cdn.staticfile.org/blueimp-md5/2.13.0/","disqusjs":"https://cdn.jsdelivr.net/npm/disqusjs@1.0/dist/","hint":"/lib/hint/"},"fluid_config":{"favicon":"/img/favicon.png","apple_touch_icon":"/img/favicon.png","title_join_string":" - ","force_https":false,"code":{"copy_btn":true,"highlight":{"enable":true,"lib":"highlightjs","highlightjs":{"style":"Github Gist","bg_color":false},"prismjs":{"style":"default","preprocess":true}}},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"_","loop":false},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"right","visible":"hover","icon":""},"mouse_click":{"enable":false,"style":"values"}},"dark_mode":{"enable":true,"default":"auto"},"color":{"body_bg_color":"#eee","body_bg_color_dark":"#181c27","navbar_bg_color":"#2f4154","navbar_bg_color_dark":"#1f3144","navbar_text_color":"#fff","navbar_text_color_dark":"#d0d0d0","text_color":"#3c4858","text_color_dark":"#c4c6c9","sec_text_color":"#718096","sec_text_color_dark":"#a7a9ad","post_text_color":"#2c3e50","post_text_color_dark":"#c4c6c9","post_heading_color":"#1a202c","post_heading_color_dark":"#c4c6c9","post_link_color":"#0366d6","post_link_color_dark":"#1589e9","link_hover_color":"#30a9de","link_hover_color_dark":"#30a9de","link_hover_bg_color":"#f8f9fa","link_hover_bg_color_dark":"#364151","board_color":"#fff","board_color_dark":"#252d38"},"font":{"font_size":"16px","font_family":null,"code_font_size":"85%"},"custom_js":null,"custom_css":null,"custom_html":"","web_analytics":{"enable":false,"baidu":null,"google":null,"gtag":null,"tencent":{"sid":null,"cid":null},"woyaola":null,"cnzz":null,"leancloud":{"app_id":null,"app_key":null,"server_url":null}},"lazyload":{"enable":true,"onlypost":false},"daovoice":{"enable":false,"appid":""},"aplayer":{"enable":false,"autoplay":false,"loop":"all","order":"random","theme":"#b7daff","songs":[{"name":"name","artist":"artist","url":"/songs/test.mp3","cover":"/img/cover.jpg"},{"name":"name","artist":"artist","url":"https://...url.mp3","cover":"https://...cover.jpg"}]},"version":{"check":false},"navbar":{"blog_title":"吃面多放葱","ground_glass":{"enable":false,"px":3,"alpha":0.7},"menu":[{"key":"home","link":"/","icon":"iconfont icon-home-fill"},{"key":"category","link":"/categories/","icon":"iconfont icon-category-fill"},{"key":"tag","link":"/tags/","icon":"iconfont icon-tags-fill"},{"key":"about","link":"/about/","icon":"iconfont icon-user-fill"}]},"search":{"enable":true,"path":"/local-search.xml","generate_path":"/local-search.xml","field":"post","content":true},"scroll_down_arrow":{"enable":true,"banner_height_limit":90,"scroll_after_turning_page":true},"banner_parallax":true,"footer":{"statistics":{"enable":false,"source":"busuanzi","pv_format":"总访问量 {} 次","uv_format":"总访客数 {} 人"},"beian":{"enable":false,"icp_text":"京ICP证123456号","police_text":"京公网安备12345678号","police_code":12345678,"police_icon":"/img/police_beian.png"}},"scroll_top_arrow":{"enable":true},"index":{"banner_img":"/img/default.png","banner_img_height":100,"banner_mask_alpha":0.3,"post_default_img":"","slogan":{"enable":true,"text":"像蚂蚁一样工作，像蝴蝶一样生活"},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"category":true,"tag":true}},"page":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3},"post":{"banner_img":"/img/default.png","banner_img_height":70,"banner_mask_alpha":0.3,"meta":{"author":{"enable":false},"date":{"enable":true,"format":"LL a"},"wordcount":{"enable":true,"format":"{} 字"},"min2read":{"enable":true,"format":"{} 分钟","words":100},"views":{"enable":false,"source":"busuanzi","format":"{} 次"}},"updated":{"enable":false,"content":"本文最后更新于：","relative":false},"toc":{"enable":true,"headingSelector":"h1,h2,h3,h4,h5,h6","collapseDepth":0},"copyright":{"enable":true,"content":"本博客所有文章除特别声明外，均采用 <a href=\"https://creativecommons.org/licenses/by-sa/4.0/deed.zh\" rel=\"nofollow noopener\">CC BY-SA 4.0 协议</a> ，转载请注明出处！"},"prev_next":{"enable":true},"custom":{"enable":false,"content":"<img src=\"https://octodex.github.com/images/jetpacktocat.png\" class=\"rounded mx-auto d-block mt-5\" style=\"width:150px; height:150px;\">"},"image_zoom":{"enable":true},"footnote":{"enable":true,"header":""},"math":{"enable":false,"specific":false,"engine":"mathjax"},"mermaid":{"enable":false,"specific":false,"options":{"theme":"default"}},"comments":{"enable":false,"type":"disqus"}},"utterances":{"repo":null,"issue_term":"pathname","label":"utterances","theme":"github-light","theme_dark":"github-dark","crossorigin":"anonymous"},"disqus":{"shortname":null,"disqusjs":false,"apikey":null},"gitalk":{"clientID":null,"clientSecret":null,"repo":null,"owner":null,"admin":["name"],"id":"location.pathname","language":"zh-CN","labels":["Gitalk"],"perPage":10,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true},"valine":{"appid":null,"appkey":null,"placeholder":"说点什么","path":"window.location.pathname","avatar":"retro","meta":["nick","mail","link"],"pageSize":10,"lang":"zh-CN","highlight":false,"recordIP":false,"serverURLs":null},"changyan":{"appid":"","appkey":""},"livere":{"uid":""},"remark42":{"host":"https://remark.haoyizebo.com","site_id":"haoyizebo","max_shown_comments":10,"locale":"zh"},"archive":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null},"category":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"post_limit":10,"order_by":"-length","collapse_depth":0},"tag":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null,"tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"avatar":"/img/avatar.png","name":"蔺国防","introduce":"移动应用开发者，历史文学爱好者","icons":[{"class":"iconfont icon-github-fill","link":"https://github.com","tip":"GitHub"},{"class":"iconfont icon-douban-fill","link":"https://douban.com","tip":"豆瓣"},{"class":"iconfont icon-wechat-fill","qrcode":"/img/favicon.png"}]},"page404":{"banner_img":"/img/default.png","banner_img_height":85,"banner_mask_alpha":0.3,"subtitle":"Page not found"},"links":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"items":[{"title":"Fluid Docs","intro":"主题使用指南","link":"https://hexo.fluid-dev.com/docs/","image":"/img/favicon.png"},{"title":"Fluid Repo","intro":"主题 GitHub 仓库","link":"https://github.com/fluid-dev/hexo-theme-fluid","image":"/img/favicon.png"},{"title":"Fluid Example","intro":"主题操作示例","link":"https://hexo.fluid-dev.com/docs/example/","image":"/img/favicon.png"}]}}}},"excerpt":"","more":"<p>SVN 配置</p>\n<p>1、创建SVN Repositroy<br>打开终端 输入：svnadmin create /path/svn/pro<br>svn是目录，pros是版本库，输入完成即可看见生成文档<br>2、配置svn用户权限。<br>/path/svn/pro/conf/目录下存在3个文件：authz,passwd,svnserve.conf<br>（1) 配置svnserve.conf<br>将里面的<br>＃anon-access = read<br>＃auth-access = write<br>＃password-db = passwd<br>＃authz-db = authz<br>四行前的＃号去掉，再将anon-access = read改为anon-access = none，这样禁止匿名访问<br><strong>注意</strong>:</p>\n<ul>\n<li>这句话必须使用，这样子才能显示Log的信息</li>\n<li>在＃号后是有空格的，去掉空格，上文字顶格,否则也有错误<br>（2)  配置passwd<br>里面存的是用户与密码，有示例，直接按照它的格式添加用户和密码就可以了<br>test1=123<br>test2=456<br>（3)   配置authz<br>[groups] 后面跟的是用户组设置，可以将你在passwd里设置的用户添加到不同的用户组里，那么之后，可以对不同用户组设置不同的权限，以免多用户设置麻烦，多个用户用,号分隔。可按它的示例做<br>[groups]<br>testgroups=test1,test2</li>\n</ul>\n<p>之后，可以对不同的版本库进行权限设置，底下有一个示例，按它的写法写就可以了，如果需要对所有的版本库设置，利用[/]就可以了。如：<br>[/]<br>@testgroups=rw<br>个人配置只需在[/]下面添加<br>用户名=rw即可<br><strong>PS</strong>：用户组前要用@符号，如果是用户，直接写用户名就可以了。rw代表可读写，显然只读就是r了<br>3、启动SVN服务<br>svnserve -d -r /path/svn  特别注意，路径一定是SVN的目录，不是其中一个版本库的目录，不然，能正常启动，就是访问有问题<br>没有任何输出，则启动成功<br>4.配置conrnerStone<br>点击ConerStone左下角 如下图的“+”，添加SVN地址，<br>需要填写的方格<br>server： IP地址 不包括Svn后面的其他路径 例如：主机IP 192.168.。。。<br>Repisitory path:Ip后面的路径  例如：上文的Pro<br>Name：用户名<br>Password：密码<br>5.让SVN支持.a文件的上传<br>（1）打开终端：vi ~/.subversion/config 打开config文件<br>（2）找到：</p>\n<p>#global-ignores = *.o <em>.lo *.la *.al .libs *.so *.so.[0-9]</em> *.a *.pyc *.pyo </p>\n<h1 id=\"rej-swp-DS-Store\"><a href=\"#rej-swp-DS-Store\" class=\"headerlink\" title=\".rej ~ ## .# .*.swp .DS_Store\"></a><em>.rej <em>~ #</em># .#</em> .*.swp .DS_Store</h1><p>这是svn默认的忽略列表，更改这个即可上传和下载被忽略的文件<br>去掉开头第一行的#和#前面的空格，第一行global前面不能有空格。<br>去掉第二行的#，空格不用管。<br>删除上问红色的*.a，这样即可上传.a文件。</p>\n<p>#<strong>Cornerstone Svn简单使用指南</strong></p>\n<p>一、安装并拷贝项目</p>\n<p>1.第一步：安装svn.<br>2.第二步：第一个使用svn，找到“Check Out Working Copy”选项，选择并点击。<br>目的：从服务器上拷贝一份全新的项目工程。<br>3.第三步：可以正常使用了。。。</p>\n<p>二、在项目中使用</p>\n<p>1.查看日志<br>找到“Log”选项，选择并点击。<br>查看自己当前的版本是否是最新的，如果不是最新的版本，从第2步开始执行；<br>如果自己当前的版本是最新的，从第3步开始执行；<br>2.更新到最新版本<br>当前程序员在打开工程项目之前，找到“Update to Latest Revision”选项，选择并点击。<br>目的：保持当前程序员客户端的项目版本是最新的。<br>3.编辑项目<br>4.提交之前，再次点击“Update to Latest Revision”，保持项目是最新版本。<br>5.更新最新版本后，如果有错误，冲突等情况，解决，直到没错误！<br>6.提交项目，找到“Commit Changes”选项，选择并点击。<br>目的：把当前编辑后的项目提交的服务器。<br>三、”lock”和“unlock”的使用<br>当我们正在编辑某个文件时，为了防止被其他人修改，可以在编辑之前，使该文件处于锁定状态，当我们编辑后，要提交的时候，再解锁。<br>四、每次提交项目，都要写详细备注并署名。<br>五、恢复到以前的版本，以前其他出错情况，请参考稍后的文档说明或上网搜索。<br>Cornerstone的逻辑很清晰，界面打开后，左边栏上下分开，上面是working copies的列表，下面是REPOSITORIES的列表。常见的功能基本上跟windows一样，在上下文中可以得到。</p>\n<p>1、连接到HTTP server</p>\n<p>RESPOSITORIES栏上，标题栏的右手边有+和-，点击+号（如果第一次打开这个软件，这一步会自动跳出来），出现的对话框中，选择HTTP Server</p>\n<p>Server：http server的地址<br>Port: 空着就可以</p>\n<p>Repository path: 填入http server的Repository地址。一般这个地址，开源项目host在你创建项目后都会给你地方拷贝。</p>\n<p>提示：在这个栏目下面，有一行最后形成的地址，你可以跟开源项目给你的路径看一下是否一致。</p>\n<p>NickName: 空着就可<br>Name: 填入登录的账户名称<br>Password: 填入登录的密码</p>\n<p>然后点击Add，就可以把这个Repository加入了。 </p>\n<p>2、Check out<br>按照1做好自己的REPOSITORIES，选中一个的时候，左上角的Check Out就会高亮，点击该图标，就会出现一个路径选择的对话框。填好相应的地方后，就开始check out了。<br>##<strong>注意</strong>：<br>**<em>第一次在check out没有完成之前，你选择的本地work space目录是不会出现在 working COPIES上的。**</em><br>3、Commit delete file<br>先把本地的文件删除，然后在cornerstone的working copies栏目中，找到相应的文件所在的位置，可以看到这个文件有个M标志，表示missing。在该文件上右键点击，上下文菜单中找到Delete，然后确认。刚才的M标识换成了D，表示Deleted。这个时候你就可以commit了。<br>4、Relocate<br>如果服务器上改了原始的某个目录的路径，那么在WORKING COPIES上，右键可以找到Relocate To，后面会跟上相应的目录，点击就可以重新定位。定位好后，相应的REPOSITORIES会自动更改。 </p>\n<p>##参考：</p>\n<p>  <a href=\"http://www.tuicool.com/articles/n6fyq2\">conerStone的配置及使用说明</a><br><a href=\"http://www.cnblogs.com/onlyfu/archive/2012/05/08/2489814.html\">MAC下配置SVN</a><br><a href=\"http://blog.csdn.net/wisdom605768292/article/details/19068601\">http://blog.csdn.net/wisdom605768292/article/details/19068601</a></p>\n"},{"title":"MacOS系统更新CocoaPods失效问题","_content":"\n\n```\n //重装cocoapods\nsudo gem uninstall cocoapods  \nsudo gem install -n /usr/local/bin cocoapods\n```\n","source":"_posts/工具/MacOS-系统更新后-Cocoapods失效问题.md","raw":"\n---\ntitle:  MacOS系统更新CocoaPods失效问题\ncategories:\n- 工具\ntags:\n- CocoaPods\n---\n\n\n```\n //重装cocoapods\nsudo gem uninstall cocoapods  \nsudo gem install -n /usr/local/bin cocoapods\n```\n","slug":"工具/MacOS-系统更新后-Cocoapods失效问题","published":1,"date":"2020-09-23T10:25:59.000Z","updated":"2020-09-24T08:47:54.148Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgq6gnxn003lt29kb9pz57xa","content":"<pre><code class=\"hljs awk\"> <span class=\"hljs-regexp\">//</span>重装cocoapods\nsudo gem uninstall cocoapods  \nsudo gem install -n <span class=\"hljs-regexp\">/usr/</span>local/bin cocoapods</code></pre>\n","site":{"data":{"fluid_static_prefix":{"internal_js":"/js","internal_css":"/css","internal_img":"/img","iconfont":"//at.alicdn.com/t/font_1736178_kmeydafke9r.css","anchor":"https://cdn.staticfile.org/anchor-js/4.2.2/","github_markdown":"https://cdn.staticfile.org/github-markdown-css/4.0.0/","jquery":"https://cdn.staticfile.org/jquery/3.4.1/","bootstrap":"https://cdn.staticfile.org/twitter-bootstrap/4.4.1/","highlightjs":"https://cdn.staticfile.org/highlight.js/10.0.0/","prismjs":"https://cdn.staticfile.org/prism/1.21.0/","tocbot":"https://cdn.staticfile.org/tocbot/4.11.1/","typed":"https://cdn.staticfile.org/typed.js/2.0.11/","fancybox":"https://cdn.staticfile.org/fancybox/3.5.7/","mathjax":"https://cdn.staticfile.org/mathjax/3.0.5/es5/","katex":"https://cdn.staticfile.org/KaTeX/0.11.1/","aplayer":"https://cdn.staticfile.org/aplayer/1.10.1/","busuanzi":"https://busuanzi.ibruce.info/busuanzi/2.3/","clipboard":"https://cdn.staticfile.org/clipboard.js/2.0.6/","mermaid":"https://cdn.staticfile.org/mermaid/8.5.0/","valine":"https://cdn.staticfile.org/valine/1.4.14/","gitalk":"https://cdn.staticfile.org/gitalk/1.6.2/","blueimp_md5":"https://cdn.staticfile.org/blueimp-md5/2.13.0/","disqusjs":"https://cdn.jsdelivr.net/npm/disqusjs@1.0/dist/","hint":"/lib/hint/"},"fluid_config":{"favicon":"/img/favicon.png","apple_touch_icon":"/img/favicon.png","title_join_string":" - ","force_https":false,"code":{"copy_btn":true,"highlight":{"enable":true,"lib":"highlightjs","highlightjs":{"style":"Github Gist","bg_color":false},"prismjs":{"style":"default","preprocess":true}}},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"_","loop":false},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"right","visible":"hover","icon":""},"mouse_click":{"enable":false,"style":"values"}},"dark_mode":{"enable":true,"default":"auto"},"color":{"body_bg_color":"#eee","body_bg_color_dark":"#181c27","navbar_bg_color":"#2f4154","navbar_bg_color_dark":"#1f3144","navbar_text_color":"#fff","navbar_text_color_dark":"#d0d0d0","text_color":"#3c4858","text_color_dark":"#c4c6c9","sec_text_color":"#718096","sec_text_color_dark":"#a7a9ad","post_text_color":"#2c3e50","post_text_color_dark":"#c4c6c9","post_heading_color":"#1a202c","post_heading_color_dark":"#c4c6c9","post_link_color":"#0366d6","post_link_color_dark":"#1589e9","link_hover_color":"#30a9de","link_hover_color_dark":"#30a9de","link_hover_bg_color":"#f8f9fa","link_hover_bg_color_dark":"#364151","board_color":"#fff","board_color_dark":"#252d38"},"font":{"font_size":"16px","font_family":null,"code_font_size":"85%"},"custom_js":null,"custom_css":null,"custom_html":"","web_analytics":{"enable":false,"baidu":null,"google":null,"gtag":null,"tencent":{"sid":null,"cid":null},"woyaola":null,"cnzz":null,"leancloud":{"app_id":null,"app_key":null,"server_url":null}},"lazyload":{"enable":true,"onlypost":false},"daovoice":{"enable":false,"appid":""},"aplayer":{"enable":false,"autoplay":false,"loop":"all","order":"random","theme":"#b7daff","songs":[{"name":"name","artist":"artist","url":"/songs/test.mp3","cover":"/img/cover.jpg"},{"name":"name","artist":"artist","url":"https://...url.mp3","cover":"https://...cover.jpg"}]},"version":{"check":false},"navbar":{"blog_title":"吃面多放葱","ground_glass":{"enable":false,"px":3,"alpha":0.7},"menu":[{"key":"home","link":"/","icon":"iconfont icon-home-fill"},{"key":"category","link":"/categories/","icon":"iconfont icon-category-fill"},{"key":"tag","link":"/tags/","icon":"iconfont icon-tags-fill"},{"key":"about","link":"/about/","icon":"iconfont icon-user-fill"}]},"search":{"enable":true,"path":"/local-search.xml","generate_path":"/local-search.xml","field":"post","content":true},"scroll_down_arrow":{"enable":true,"banner_height_limit":90,"scroll_after_turning_page":true},"banner_parallax":true,"footer":{"statistics":{"enable":false,"source":"busuanzi","pv_format":"总访问量 {} 次","uv_format":"总访客数 {} 人"},"beian":{"enable":false,"icp_text":"京ICP证123456号","police_text":"京公网安备12345678号","police_code":12345678,"police_icon":"/img/police_beian.png"}},"scroll_top_arrow":{"enable":true},"index":{"banner_img":"/img/default.png","banner_img_height":100,"banner_mask_alpha":0.3,"post_default_img":"","slogan":{"enable":true,"text":"像蚂蚁一样工作，像蝴蝶一样生活"},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"category":true,"tag":true}},"page":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3},"post":{"banner_img":"/img/default.png","banner_img_height":70,"banner_mask_alpha":0.3,"meta":{"author":{"enable":false},"date":{"enable":true,"format":"LL a"},"wordcount":{"enable":true,"format":"{} 字"},"min2read":{"enable":true,"format":"{} 分钟","words":100},"views":{"enable":false,"source":"busuanzi","format":"{} 次"}},"updated":{"enable":false,"content":"本文最后更新于：","relative":false},"toc":{"enable":true,"headingSelector":"h1,h2,h3,h4,h5,h6","collapseDepth":0},"copyright":{"enable":true,"content":"本博客所有文章除特别声明外，均采用 <a href=\"https://creativecommons.org/licenses/by-sa/4.0/deed.zh\" rel=\"nofollow noopener\">CC BY-SA 4.0 协议</a> ，转载请注明出处！"},"prev_next":{"enable":true},"custom":{"enable":false,"content":"<img src=\"https://octodex.github.com/images/jetpacktocat.png\" class=\"rounded mx-auto d-block mt-5\" style=\"width:150px; height:150px;\">"},"image_zoom":{"enable":true},"footnote":{"enable":true,"header":""},"math":{"enable":false,"specific":false,"engine":"mathjax"},"mermaid":{"enable":false,"specific":false,"options":{"theme":"default"}},"comments":{"enable":false,"type":"disqus"}},"utterances":{"repo":null,"issue_term":"pathname","label":"utterances","theme":"github-light","theme_dark":"github-dark","crossorigin":"anonymous"},"disqus":{"shortname":null,"disqusjs":false,"apikey":null},"gitalk":{"clientID":null,"clientSecret":null,"repo":null,"owner":null,"admin":["name"],"id":"location.pathname","language":"zh-CN","labels":["Gitalk"],"perPage":10,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true},"valine":{"appid":null,"appkey":null,"placeholder":"说点什么","path":"window.location.pathname","avatar":"retro","meta":["nick","mail","link"],"pageSize":10,"lang":"zh-CN","highlight":false,"recordIP":false,"serverURLs":null},"changyan":{"appid":"","appkey":""},"livere":{"uid":""},"remark42":{"host":"https://remark.haoyizebo.com","site_id":"haoyizebo","max_shown_comments":10,"locale":"zh"},"archive":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null},"category":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"post_limit":10,"order_by":"-length","collapse_depth":0},"tag":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null,"tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"avatar":"/img/avatar.png","name":"蔺国防","introduce":"移动应用开发者，历史文学爱好者","icons":[{"class":"iconfont icon-github-fill","link":"https://github.com","tip":"GitHub"},{"class":"iconfont icon-douban-fill","link":"https://douban.com","tip":"豆瓣"},{"class":"iconfont icon-wechat-fill","qrcode":"/img/favicon.png"}]},"page404":{"banner_img":"/img/default.png","banner_img_height":85,"banner_mask_alpha":0.3,"subtitle":"Page not found"},"links":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"items":[{"title":"Fluid Docs","intro":"主题使用指南","link":"https://hexo.fluid-dev.com/docs/","image":"/img/favicon.png"},{"title":"Fluid Repo","intro":"主题 GitHub 仓库","link":"https://github.com/fluid-dev/hexo-theme-fluid","image":"/img/favicon.png"},{"title":"Fluid Example","intro":"主题操作示例","link":"https://hexo.fluid-dev.com/docs/example/","image":"/img/favicon.png"}]}}}},"excerpt":"","more":"<pre><code class=\"hljs awk\"> <span class=\"hljs-regexp\">//</span>重装cocoapods\nsudo gem uninstall cocoapods  \nsudo gem install -n <span class=\"hljs-regexp\">/usr/</span>local/bin cocoapods</code></pre>\n"},{"title":"fastlane自动打包上传","date":"2019-05-08T02:56:00.000Z","_content":"\n## Step 1\n```\n#安装fastlane\nsudo gem install -n /usr/local/bin fastlane\n```\n## Step 2 \n```\ncd 项目目录\nfastlane init\n```\n### Step 3\n根据自己的需要配置不同的选择项\n\n- 使用目的\n ![屏幕快照 2019-04-25 下午7.28.54.png](https://upload-images.jianshu.io/upload_images/3340896-58bf85526d9a4d31.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n- 输入appleID 和 密码\n![[图片上传中...(屏幕快照 2019-04-25 下午7.29.50.png-931c1f-1557283422808-0)]\n](https://upload-images.jianshu.io/upload_images/3340896-474c8e0de8d5364c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n- 输入6位验证码\n![屏幕快照 2019-04-25 下午7.29.50.png](https://upload-images.jianshu.io/upload_images/3340896-175c5718683cc2bb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n- 选择y\n![屏幕快照 2019-04-25 下午7.29.58.png](https://upload-images.jianshu.io/upload_images/3340896-c5f43217481f0bcf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n###  Step 4\n项目目录下生成fastlane文件目录\n ```\ncd fastlane\nvi Fastfile\n```\n将下面的文件内容拷贝进去,项目名称, `bundleId`, `profileName`, `workspace` ,`outputname`自己修改,\n`api_key`,`user_key`自己在蒲公英内测分发 --> api 查看自己应用的 apikey和 userkey\n```\ndefault_platform(:ios)\n\nplatform :ios do\n  desc \"Push a new release build to the App Store\"\n  lane :release do\n    build_app(workspace: \"xxx.xcworkspace\", scheme: \"xxx\")    # 修改为自己的项目名称\n    upload_to_app_store\n  end\n  lane :beta do\n  build_ios_app(\n  workspace: \"xxx.xcworkspace\",  # 替换成自己的项目名\n  configuration: \"Release\",\n  scheme: \"HotTravel\",\n  silent: true,\n  clean: true,\n  export_method: \"ad-hoc\",\n  export_options: {\n      provisioningProfiles: {\n          \"bundle ID\" => \"adhoc profile name\"   # 修改为自己的adhoc profile文件名及buildle ID\n       }\n  },\n  output_directory: \"./build\", \n  output_name: \"xxx.ipa\",     \n  sdk: \"iOS 12.2\"        # use SDK as the name or path of the base SDK when building the project.\n)\n  pgyer(api_key: \"xxxxxxxxxx\", user_key: \"xxxxxxxxxx\")   # 自己在蒲公英内测分发 --> api 查看自己应用的 apikey和 userkey\n  end\nend\n```\n\n##### 打包上传\n- 蒲公英 ad-hoc \n```\nfastlane add_plugin pgyer  //添加蒲公英插件\nfastlane init  //添加完一定要初始化,否则上传不会成功\n```\n⚠️ 注意\n添加完蒲公英插件一定要初始化,否则上传不会成功!\n添加完蒲公英插件一定要初始化,否则上传不会成功!\n添加完蒲公英插件一定要初始化,否则上传不会成功!\n\nad-hoc包\n```\nfastlane beta  //ad-hoc包自动分发到蒲公英\n```\n\n- Release \n```\nfastlane release\n\n```\n⚠️ 注意\n1.一定要有Xcode的证书或者p12文件,否则,打包成功后上传会失败!\n2.打发布包第一次的时候需要输入 apple App专用密码,登录设置 [Apple account manage]([https://appleid.apple.com/account/manage](https://appleid.apple.com/account/manage)\n)\n![屏幕快照 2019-08-06 下午4.08.45.png](https://upload-images.jianshu.io/upload_images/3340896-0bf9efb6bcd739a9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n## 参考资料\n[fastlane docs](https://docs.fastlane.tools/)\n[蒲公英文档中心](https://www.pgyer.com/doc/view/fastlane)\n\n","source":"_posts/工具/fastlane--自动打包上传.md","raw":"\n---\ntitle: fastlane自动打包上传\ndate:  2019-05-08 10:56\ncategories:\n- 工具\ntags:\n- fastlane\n---\n\n## Step 1\n```\n#安装fastlane\nsudo gem install -n /usr/local/bin fastlane\n```\n## Step 2 \n```\ncd 项目目录\nfastlane init\n```\n### Step 3\n根据自己的需要配置不同的选择项\n\n- 使用目的\n ![屏幕快照 2019-04-25 下午7.28.54.png](https://upload-images.jianshu.io/upload_images/3340896-58bf85526d9a4d31.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n- 输入appleID 和 密码\n![[图片上传中...(屏幕快照 2019-04-25 下午7.29.50.png-931c1f-1557283422808-0)]\n](https://upload-images.jianshu.io/upload_images/3340896-474c8e0de8d5364c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n- 输入6位验证码\n![屏幕快照 2019-04-25 下午7.29.50.png](https://upload-images.jianshu.io/upload_images/3340896-175c5718683cc2bb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n- 选择y\n![屏幕快照 2019-04-25 下午7.29.58.png](https://upload-images.jianshu.io/upload_images/3340896-c5f43217481f0bcf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n###  Step 4\n项目目录下生成fastlane文件目录\n ```\ncd fastlane\nvi Fastfile\n```\n将下面的文件内容拷贝进去,项目名称, `bundleId`, `profileName`, `workspace` ,`outputname`自己修改,\n`api_key`,`user_key`自己在蒲公英内测分发 --> api 查看自己应用的 apikey和 userkey\n```\ndefault_platform(:ios)\n\nplatform :ios do\n  desc \"Push a new release build to the App Store\"\n  lane :release do\n    build_app(workspace: \"xxx.xcworkspace\", scheme: \"xxx\")    # 修改为自己的项目名称\n    upload_to_app_store\n  end\n  lane :beta do\n  build_ios_app(\n  workspace: \"xxx.xcworkspace\",  # 替换成自己的项目名\n  configuration: \"Release\",\n  scheme: \"HotTravel\",\n  silent: true,\n  clean: true,\n  export_method: \"ad-hoc\",\n  export_options: {\n      provisioningProfiles: {\n          \"bundle ID\" => \"adhoc profile name\"   # 修改为自己的adhoc profile文件名及buildle ID\n       }\n  },\n  output_directory: \"./build\", \n  output_name: \"xxx.ipa\",     \n  sdk: \"iOS 12.2\"        # use SDK as the name or path of the base SDK when building the project.\n)\n  pgyer(api_key: \"xxxxxxxxxx\", user_key: \"xxxxxxxxxx\")   # 自己在蒲公英内测分发 --> api 查看自己应用的 apikey和 userkey\n  end\nend\n```\n\n##### 打包上传\n- 蒲公英 ad-hoc \n```\nfastlane add_plugin pgyer  //添加蒲公英插件\nfastlane init  //添加完一定要初始化,否则上传不会成功\n```\n⚠️ 注意\n添加完蒲公英插件一定要初始化,否则上传不会成功!\n添加完蒲公英插件一定要初始化,否则上传不会成功!\n添加完蒲公英插件一定要初始化,否则上传不会成功!\n\nad-hoc包\n```\nfastlane beta  //ad-hoc包自动分发到蒲公英\n```\n\n- Release \n```\nfastlane release\n\n```\n⚠️ 注意\n1.一定要有Xcode的证书或者p12文件,否则,打包成功后上传会失败!\n2.打发布包第一次的时候需要输入 apple App专用密码,登录设置 [Apple account manage]([https://appleid.apple.com/account/manage](https://appleid.apple.com/account/manage)\n)\n![屏幕快照 2019-08-06 下午4.08.45.png](https://upload-images.jianshu.io/upload_images/3340896-0bf9efb6bcd739a9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n## 参考资料\n[fastlane docs](https://docs.fastlane.tools/)\n[蒲公英文档中心](https://www.pgyer.com/doc/view/fastlane)\n\n","slug":"工具/fastlane--自动打包上传","published":1,"updated":"2020-09-27T10:26:58.916Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgq6gnxo003pt29kb0856m14","content":"<h2 id=\"Step-1\"><a href=\"#Step-1\" class=\"headerlink\" title=\"Step 1\"></a>Step 1</h2><pre><code class=\"hljs sql\"><span class=\"hljs-comment\">#安装fastlane</span>\nsudo gem <span class=\"hljs-keyword\">install</span> -n /usr/<span class=\"hljs-keyword\">local</span>/<span class=\"hljs-keyword\">bin</span> fastlane</code></pre>\n<h2 id=\"Step-2\"><a href=\"#Step-2\" class=\"headerlink\" title=\"Step 2\"></a>Step 2</h2><pre><code class=\"hljs properties\"><span class=\"hljs-attr\">cd</span> <span class=\"hljs-string\">项目目录</span>\n<span class=\"hljs-attr\">fastlane</span> <span class=\"hljs-string\">init</span></code></pre>\n<h3 id=\"Step-3\"><a href=\"#Step-3\" class=\"headerlink\" title=\"Step 3\"></a>Step 3</h3><p>根据自己的需要配置不同的选择项</p>\n<ul>\n<li><p>使用目的<br><img src=\"https://upload-images.jianshu.io/upload_images/3340896-58bf85526d9a4d31.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"屏幕快照 2019-04-25 下午7.28.54.png\"></p>\n</li>\n<li><p>输入appleID 和 密码<br><img src=\"https://upload-images.jianshu.io/upload_images/3340896-474c8e0de8d5364c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"[图片上传中...(屏幕快照 2019-04-25 下午7.29.50.png-931c1f-1557283422808-0)]\n\"></p>\n</li>\n<li><p>输入6位验证码<br><img src=\"https://upload-images.jianshu.io/upload_images/3340896-175c5718683cc2bb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"屏幕快照 2019-04-25 下午7.29.50.png\"></p>\n</li>\n<li><p>选择y<br><img src=\"https://upload-images.jianshu.io/upload_images/3340896-c5f43217481f0bcf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"屏幕快照 2019-04-25 下午7.29.58.png\"></p>\n</li>\n</ul>\n<h3 id=\"Step-4\"><a href=\"#Step-4\" class=\"headerlink\" title=\"Step 4\"></a>Step 4</h3><p>项目目录下生成fastlane文件目录<br> <pre><code class=\"hljs properties\"><span class=\"hljs-attr\">cd</span> <span class=\"hljs-string\">fastlane</span>\n<span class=\"hljs-attr\">vi</span> <span class=\"hljs-string\">Fastfile</span></code></pre><br>将下面的文件内容拷贝进去,项目名称, <code>bundleId</code>, <code>profileName</code>, <code>workspace</code> ,<code>outputname</code>自己修改,<br><code>api_key</code>,<code>user_key</code>自己在蒲公英内测分发 –&gt; api 查看自己应用的 apikey和 userkey</p>\n<pre><code class=\"hljs elixir\">default_platform(<span class=\"hljs-symbol\">:ios</span>)\n\nplatform <span class=\"hljs-symbol\">:ios</span> <span class=\"hljs-keyword\">do</span>\n  desc <span class=\"hljs-string\">&quot;Push a new release build to the App Store&quot;</span>\n  lane <span class=\"hljs-symbol\">:release</span> <span class=\"hljs-keyword\">do</span>\n    build_app(<span class=\"hljs-symbol\">workspace:</span> <span class=\"hljs-string\">&quot;xxx.xcworkspace&quot;</span>, <span class=\"hljs-symbol\">scheme:</span> <span class=\"hljs-string\">&quot;xxx&quot;</span>)    <span class=\"hljs-comment\"># 修改为自己的项目名称</span>\n    upload_to_app_store\n  <span class=\"hljs-keyword\">end</span>\n  lane <span class=\"hljs-symbol\">:beta</span> <span class=\"hljs-keyword\">do</span>\n  build_ios_app(\n  <span class=\"hljs-symbol\">workspace:</span> <span class=\"hljs-string\">&quot;xxx.xcworkspace&quot;</span>,  <span class=\"hljs-comment\"># 替换成自己的项目名</span>\n  <span class=\"hljs-symbol\">configuration:</span> <span class=\"hljs-string\">&quot;Release&quot;</span>,\n  <span class=\"hljs-symbol\">scheme:</span> <span class=\"hljs-string\">&quot;HotTravel&quot;</span>,\n  <span class=\"hljs-symbol\">silent:</span> <span class=\"hljs-keyword\">true</span>,\n  <span class=\"hljs-symbol\">clean:</span> <span class=\"hljs-keyword\">true</span>,\n  <span class=\"hljs-symbol\">export_method:</span> <span class=\"hljs-string\">&quot;ad-hoc&quot;</span>,\n  <span class=\"hljs-symbol\">export_options:</span> &#123;\n      <span class=\"hljs-symbol\">provisioningProfiles:</span> &#123;\n          <span class=\"hljs-string\">&quot;bundle ID&quot;</span> =&gt; <span class=\"hljs-string\">&quot;adhoc profile name&quot;</span>   <span class=\"hljs-comment\"># 修改为自己的adhoc profile文件名及buildle ID</span>\n       &#125;\n  &#125;,\n  <span class=\"hljs-symbol\">output_directory:</span> <span class=\"hljs-string\">&quot;./build&quot;</span>, \n  <span class=\"hljs-symbol\">output_name:</span> <span class=\"hljs-string\">&quot;xxx.ipa&quot;</span>,     \n  <span class=\"hljs-symbol\">sdk:</span> <span class=\"hljs-string\">&quot;iOS 12.2&quot;</span>        <span class=\"hljs-comment\"># use SDK as the name or path of the base SDK when building the project.</span>\n)\n  pgyer(<span class=\"hljs-symbol\">api_key:</span> <span class=\"hljs-string\">&quot;xxxxxxxxxx&quot;</span>, <span class=\"hljs-symbol\">user_key:</span> <span class=\"hljs-string\">&quot;xxxxxxxxxx&quot;</span>)   <span class=\"hljs-comment\"># 自己在蒲公英内测分发 --&gt; api 查看自己应用的 apikey和 userkey</span>\n  <span class=\"hljs-keyword\">end</span>\n<span class=\"hljs-keyword\">end</span></code></pre>\n\n<h5 id=\"打包上传\"><a href=\"#打包上传\" class=\"headerlink\" title=\"打包上传\"></a>打包上传</h5><ul>\n<li>蒲公英 ad-hoc <pre><code class=\"hljs awk\">fastlane add_plugin pgyer  <span class=\"hljs-regexp\">//</span>添加蒲公英插件\nfastlane init  <span class=\"hljs-regexp\">//</span>添加完一定要初始化,否则上传不会成功</code></pre>\n⚠️ 注意<br>添加完蒲公英插件一定要初始化,否则上传不会成功!<br>添加完蒲公英插件一定要初始化,否则上传不会成功!<br>添加完蒲公英插件一定要初始化,否则上传不会成功!</li>\n</ul>\n<p>ad-hoc包</p>\n<pre><code class=\"hljs awk\">fastlane beta  <span class=\"hljs-regexp\">//</span>ad-hoc包自动分发到蒲公英</code></pre>\n\n<ul>\n<li>Release <pre><code class=\"hljs arduino\">fastlane <span class=\"hljs-built_in\">release</span>\n</code></pre>\n⚠️ 注意</li>\n</ul>\n<p>1.一定要有Xcode的证书或者p12文件,否则,打包成功后上传会失败!<br>2.打发布包第一次的时候需要输入 apple App专用密码,登录设置 <a href=\"%5Bhttps://appleid.apple.com/account/manage%5D(https://appleid.apple.com/account/manage)\">Apple account manage</a><br><img src=\"https://upload-images.jianshu.io/upload_images/3340896-0bf9efb6bcd739a9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"屏幕快照 2019-08-06 下午4.08.45.png\"></p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p><a href=\"https://docs.fastlane.tools/\">fastlane docs</a><br><a href=\"https://www.pgyer.com/doc/view/fastlane\">蒲公英文档中心</a></p>\n","site":{"data":{"fluid_static_prefix":{"internal_js":"/js","internal_css":"/css","internal_img":"/img","iconfont":"//at.alicdn.com/t/font_1736178_kmeydafke9r.css","anchor":"https://cdn.staticfile.org/anchor-js/4.2.2/","github_markdown":"https://cdn.staticfile.org/github-markdown-css/4.0.0/","jquery":"https://cdn.staticfile.org/jquery/3.4.1/","bootstrap":"https://cdn.staticfile.org/twitter-bootstrap/4.4.1/","highlightjs":"https://cdn.staticfile.org/highlight.js/10.0.0/","prismjs":"https://cdn.staticfile.org/prism/1.21.0/","tocbot":"https://cdn.staticfile.org/tocbot/4.11.1/","typed":"https://cdn.staticfile.org/typed.js/2.0.11/","fancybox":"https://cdn.staticfile.org/fancybox/3.5.7/","mathjax":"https://cdn.staticfile.org/mathjax/3.0.5/es5/","katex":"https://cdn.staticfile.org/KaTeX/0.11.1/","aplayer":"https://cdn.staticfile.org/aplayer/1.10.1/","busuanzi":"https://busuanzi.ibruce.info/busuanzi/2.3/","clipboard":"https://cdn.staticfile.org/clipboard.js/2.0.6/","mermaid":"https://cdn.staticfile.org/mermaid/8.5.0/","valine":"https://cdn.staticfile.org/valine/1.4.14/","gitalk":"https://cdn.staticfile.org/gitalk/1.6.2/","blueimp_md5":"https://cdn.staticfile.org/blueimp-md5/2.13.0/","disqusjs":"https://cdn.jsdelivr.net/npm/disqusjs@1.0/dist/","hint":"/lib/hint/"},"fluid_config":{"favicon":"/img/favicon.png","apple_touch_icon":"/img/favicon.png","title_join_string":" - ","force_https":false,"code":{"copy_btn":true,"highlight":{"enable":true,"lib":"highlightjs","highlightjs":{"style":"Github Gist","bg_color":false},"prismjs":{"style":"default","preprocess":true}}},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"_","loop":false},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"right","visible":"hover","icon":""},"mouse_click":{"enable":false,"style":"values"}},"dark_mode":{"enable":true,"default":"auto"},"color":{"body_bg_color":"#eee","body_bg_color_dark":"#181c27","navbar_bg_color":"#2f4154","navbar_bg_color_dark":"#1f3144","navbar_text_color":"#fff","navbar_text_color_dark":"#d0d0d0","text_color":"#3c4858","text_color_dark":"#c4c6c9","sec_text_color":"#718096","sec_text_color_dark":"#a7a9ad","post_text_color":"#2c3e50","post_text_color_dark":"#c4c6c9","post_heading_color":"#1a202c","post_heading_color_dark":"#c4c6c9","post_link_color":"#0366d6","post_link_color_dark":"#1589e9","link_hover_color":"#30a9de","link_hover_color_dark":"#30a9de","link_hover_bg_color":"#f8f9fa","link_hover_bg_color_dark":"#364151","board_color":"#fff","board_color_dark":"#252d38"},"font":{"font_size":"16px","font_family":null,"code_font_size":"85%"},"custom_js":null,"custom_css":null,"custom_html":"","web_analytics":{"enable":false,"baidu":null,"google":null,"gtag":null,"tencent":{"sid":null,"cid":null},"woyaola":null,"cnzz":null,"leancloud":{"app_id":null,"app_key":null,"server_url":null}},"lazyload":{"enable":true,"onlypost":false},"daovoice":{"enable":false,"appid":""},"aplayer":{"enable":false,"autoplay":false,"loop":"all","order":"random","theme":"#b7daff","songs":[{"name":"name","artist":"artist","url":"/songs/test.mp3","cover":"/img/cover.jpg"},{"name":"name","artist":"artist","url":"https://...url.mp3","cover":"https://...cover.jpg"}]},"version":{"check":false},"navbar":{"blog_title":"吃面多放葱","ground_glass":{"enable":false,"px":3,"alpha":0.7},"menu":[{"key":"home","link":"/","icon":"iconfont icon-home-fill"},{"key":"category","link":"/categories/","icon":"iconfont icon-category-fill"},{"key":"tag","link":"/tags/","icon":"iconfont icon-tags-fill"},{"key":"about","link":"/about/","icon":"iconfont icon-user-fill"}]},"search":{"enable":true,"path":"/local-search.xml","generate_path":"/local-search.xml","field":"post","content":true},"scroll_down_arrow":{"enable":true,"banner_height_limit":90,"scroll_after_turning_page":true},"banner_parallax":true,"footer":{"statistics":{"enable":false,"source":"busuanzi","pv_format":"总访问量 {} 次","uv_format":"总访客数 {} 人"},"beian":{"enable":false,"icp_text":"京ICP证123456号","police_text":"京公网安备12345678号","police_code":12345678,"police_icon":"/img/police_beian.png"}},"scroll_top_arrow":{"enable":true},"index":{"banner_img":"/img/default.png","banner_img_height":100,"banner_mask_alpha":0.3,"post_default_img":"","slogan":{"enable":true,"text":"像蚂蚁一样工作，像蝴蝶一样生活"},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"category":true,"tag":true}},"page":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3},"post":{"banner_img":"/img/default.png","banner_img_height":70,"banner_mask_alpha":0.3,"meta":{"author":{"enable":false},"date":{"enable":true,"format":"LL a"},"wordcount":{"enable":true,"format":"{} 字"},"min2read":{"enable":true,"format":"{} 分钟","words":100},"views":{"enable":false,"source":"busuanzi","format":"{} 次"}},"updated":{"enable":false,"content":"本文最后更新于：","relative":false},"toc":{"enable":true,"headingSelector":"h1,h2,h3,h4,h5,h6","collapseDepth":0},"copyright":{"enable":true,"content":"本博客所有文章除特别声明外，均采用 <a href=\"https://creativecommons.org/licenses/by-sa/4.0/deed.zh\" rel=\"nofollow noopener\">CC BY-SA 4.0 协议</a> ，转载请注明出处！"},"prev_next":{"enable":true},"custom":{"enable":false,"content":"<img src=\"https://octodex.github.com/images/jetpacktocat.png\" class=\"rounded mx-auto d-block mt-5\" style=\"width:150px; height:150px;\">"},"image_zoom":{"enable":true},"footnote":{"enable":true,"header":""},"math":{"enable":false,"specific":false,"engine":"mathjax"},"mermaid":{"enable":false,"specific":false,"options":{"theme":"default"}},"comments":{"enable":false,"type":"disqus"}},"utterances":{"repo":null,"issue_term":"pathname","label":"utterances","theme":"github-light","theme_dark":"github-dark","crossorigin":"anonymous"},"disqus":{"shortname":null,"disqusjs":false,"apikey":null},"gitalk":{"clientID":null,"clientSecret":null,"repo":null,"owner":null,"admin":["name"],"id":"location.pathname","language":"zh-CN","labels":["Gitalk"],"perPage":10,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true},"valine":{"appid":null,"appkey":null,"placeholder":"说点什么","path":"window.location.pathname","avatar":"retro","meta":["nick","mail","link"],"pageSize":10,"lang":"zh-CN","highlight":false,"recordIP":false,"serverURLs":null},"changyan":{"appid":"","appkey":""},"livere":{"uid":""},"remark42":{"host":"https://remark.haoyizebo.com","site_id":"haoyizebo","max_shown_comments":10,"locale":"zh"},"archive":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null},"category":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"post_limit":10,"order_by":"-length","collapse_depth":0},"tag":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null,"tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"avatar":"/img/avatar.png","name":"蔺国防","introduce":"移动应用开发者，历史文学爱好者","icons":[{"class":"iconfont icon-github-fill","link":"https://github.com","tip":"GitHub"},{"class":"iconfont icon-douban-fill","link":"https://douban.com","tip":"豆瓣"},{"class":"iconfont icon-wechat-fill","qrcode":"/img/favicon.png"}]},"page404":{"banner_img":"/img/default.png","banner_img_height":85,"banner_mask_alpha":0.3,"subtitle":"Page not found"},"links":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"items":[{"title":"Fluid Docs","intro":"主题使用指南","link":"https://hexo.fluid-dev.com/docs/","image":"/img/favicon.png"},{"title":"Fluid Repo","intro":"主题 GitHub 仓库","link":"https://github.com/fluid-dev/hexo-theme-fluid","image":"/img/favicon.png"},{"title":"Fluid Example","intro":"主题操作示例","link":"https://hexo.fluid-dev.com/docs/example/","image":"/img/favicon.png"}]}}}},"excerpt":"","more":"<h2 id=\"Step-1\"><a href=\"#Step-1\" class=\"headerlink\" title=\"Step 1\"></a>Step 1</h2><pre><code class=\"hljs sql\"><span class=\"hljs-comment\">#安装fastlane</span>\nsudo gem <span class=\"hljs-keyword\">install</span> -n /usr/<span class=\"hljs-keyword\">local</span>/<span class=\"hljs-keyword\">bin</span> fastlane</code></pre>\n<h2 id=\"Step-2\"><a href=\"#Step-2\" class=\"headerlink\" title=\"Step 2\"></a>Step 2</h2><pre><code class=\"hljs properties\"><span class=\"hljs-attr\">cd</span> <span class=\"hljs-string\">项目目录</span>\n<span class=\"hljs-attr\">fastlane</span> <span class=\"hljs-string\">init</span></code></pre>\n<h3 id=\"Step-3\"><a href=\"#Step-3\" class=\"headerlink\" title=\"Step 3\"></a>Step 3</h3><p>根据自己的需要配置不同的选择项</p>\n<ul>\n<li><p>使用目的<br><img src=\"https://upload-images.jianshu.io/upload_images/3340896-58bf85526d9a4d31.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"屏幕快照 2019-04-25 下午7.28.54.png\"></p>\n</li>\n<li><p>输入appleID 和 密码<br><img src=\"https://upload-images.jianshu.io/upload_images/3340896-474c8e0de8d5364c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"[图片上传中...(屏幕快照 2019-04-25 下午7.29.50.png-931c1f-1557283422808-0)]\n\"></p>\n</li>\n<li><p>输入6位验证码<br><img src=\"https://upload-images.jianshu.io/upload_images/3340896-175c5718683cc2bb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"屏幕快照 2019-04-25 下午7.29.50.png\"></p>\n</li>\n<li><p>选择y<br><img src=\"https://upload-images.jianshu.io/upload_images/3340896-c5f43217481f0bcf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"屏幕快照 2019-04-25 下午7.29.58.png\"></p>\n</li>\n</ul>\n<h3 id=\"Step-4\"><a href=\"#Step-4\" class=\"headerlink\" title=\"Step 4\"></a>Step 4</h3><p>项目目录下生成fastlane文件目录<br> <pre><code class=\"hljs properties\"><span class=\"hljs-attr\">cd</span> <span class=\"hljs-string\">fastlane</span>\n<span class=\"hljs-attr\">vi</span> <span class=\"hljs-string\">Fastfile</span></code></pre><br>将下面的文件内容拷贝进去,项目名称, <code>bundleId</code>, <code>profileName</code>, <code>workspace</code> ,<code>outputname</code>自己修改,<br><code>api_key</code>,<code>user_key</code>自己在蒲公英内测分发 –&gt; api 查看自己应用的 apikey和 userkey</p>\n<pre><code class=\"hljs elixir\">default_platform(<span class=\"hljs-symbol\">:ios</span>)\n\nplatform <span class=\"hljs-symbol\">:ios</span> <span class=\"hljs-keyword\">do</span>\n  desc <span class=\"hljs-string\">&quot;Push a new release build to the App Store&quot;</span>\n  lane <span class=\"hljs-symbol\">:release</span> <span class=\"hljs-keyword\">do</span>\n    build_app(<span class=\"hljs-symbol\">workspace:</span> <span class=\"hljs-string\">&quot;xxx.xcworkspace&quot;</span>, <span class=\"hljs-symbol\">scheme:</span> <span class=\"hljs-string\">&quot;xxx&quot;</span>)    <span class=\"hljs-comment\"># 修改为自己的项目名称</span>\n    upload_to_app_store\n  <span class=\"hljs-keyword\">end</span>\n  lane <span class=\"hljs-symbol\">:beta</span> <span class=\"hljs-keyword\">do</span>\n  build_ios_app(\n  <span class=\"hljs-symbol\">workspace:</span> <span class=\"hljs-string\">&quot;xxx.xcworkspace&quot;</span>,  <span class=\"hljs-comment\"># 替换成自己的项目名</span>\n  <span class=\"hljs-symbol\">configuration:</span> <span class=\"hljs-string\">&quot;Release&quot;</span>,\n  <span class=\"hljs-symbol\">scheme:</span> <span class=\"hljs-string\">&quot;HotTravel&quot;</span>,\n  <span class=\"hljs-symbol\">silent:</span> <span class=\"hljs-keyword\">true</span>,\n  <span class=\"hljs-symbol\">clean:</span> <span class=\"hljs-keyword\">true</span>,\n  <span class=\"hljs-symbol\">export_method:</span> <span class=\"hljs-string\">&quot;ad-hoc&quot;</span>,\n  <span class=\"hljs-symbol\">export_options:</span> &#123;\n      <span class=\"hljs-symbol\">provisioningProfiles:</span> &#123;\n          <span class=\"hljs-string\">&quot;bundle ID&quot;</span> =&gt; <span class=\"hljs-string\">&quot;adhoc profile name&quot;</span>   <span class=\"hljs-comment\"># 修改为自己的adhoc profile文件名及buildle ID</span>\n       &#125;\n  &#125;,\n  <span class=\"hljs-symbol\">output_directory:</span> <span class=\"hljs-string\">&quot;./build&quot;</span>, \n  <span class=\"hljs-symbol\">output_name:</span> <span class=\"hljs-string\">&quot;xxx.ipa&quot;</span>,     \n  <span class=\"hljs-symbol\">sdk:</span> <span class=\"hljs-string\">&quot;iOS 12.2&quot;</span>        <span class=\"hljs-comment\"># use SDK as the name or path of the base SDK when building the project.</span>\n)\n  pgyer(<span class=\"hljs-symbol\">api_key:</span> <span class=\"hljs-string\">&quot;xxxxxxxxxx&quot;</span>, <span class=\"hljs-symbol\">user_key:</span> <span class=\"hljs-string\">&quot;xxxxxxxxxx&quot;</span>)   <span class=\"hljs-comment\"># 自己在蒲公英内测分发 --&gt; api 查看自己应用的 apikey和 userkey</span>\n  <span class=\"hljs-keyword\">end</span>\n<span class=\"hljs-keyword\">end</span></code></pre>\n\n<h5 id=\"打包上传\"><a href=\"#打包上传\" class=\"headerlink\" title=\"打包上传\"></a>打包上传</h5><ul>\n<li>蒲公英 ad-hoc <pre><code class=\"hljs awk\">fastlane add_plugin pgyer  <span class=\"hljs-regexp\">//</span>添加蒲公英插件\nfastlane init  <span class=\"hljs-regexp\">//</span>添加完一定要初始化,否则上传不会成功</code></pre>\n⚠️ 注意<br>添加完蒲公英插件一定要初始化,否则上传不会成功!<br>添加完蒲公英插件一定要初始化,否则上传不会成功!<br>添加完蒲公英插件一定要初始化,否则上传不会成功!</li>\n</ul>\n<p>ad-hoc包</p>\n<pre><code class=\"hljs awk\">fastlane beta  <span class=\"hljs-regexp\">//</span>ad-hoc包自动分发到蒲公英</code></pre>\n\n<ul>\n<li>Release <pre><code class=\"hljs arduino\">fastlane <span class=\"hljs-built_in\">release</span>\n</code></pre>\n⚠️ 注意</li>\n</ul>\n<p>1.一定要有Xcode的证书或者p12文件,否则,打包成功后上传会失败!<br>2.打发布包第一次的时候需要输入 apple App专用密码,登录设置 <a href=\"%5Bhttps://appleid.apple.com/account/manage%5D(https://appleid.apple.com/account/manage)\">Apple account manage</a><br><img src=\"https://upload-images.jianshu.io/upload_images/3340896-0bf9efb6bcd739a9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"屏幕快照 2019-08-06 下午4.08.45.png\"></p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p><a href=\"https://docs.fastlane.tools/\">fastlane docs</a><br><a href=\"https://www.pgyer.com/doc/view/fastlane\">蒲公英文档中心</a></p>\n"},{"title":"iOS 账号续费及证书更新流程","date":"2017-03-16T03:25:00.000Z","_content":"\n  #####  开发者账号会员快到期的时候,苹果会发送给开发者账号的注册邮箱一封邮件,提示用户账号快到期了,及时续费,一般是提前一个月提示用户续费.下面开始介绍续费流程;\n1.登录开发者账号后,网页上面会有账号过期黄色提示;点击renew your membership ;会跳到支付页面;个人开发者账号是688RMB/年;\n![](http://upload-images.jianshu.io/upload_images/3340896-c84af4890fcb7576.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n2.选择continue;\n![](http://upload-images.jianshu.io/upload_images/3340896-f211f9428c8d363f.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n3.购买详情,选择continue,然后点击购买\n \n![](http://upload-images.jianshu.io/upload_images/3340896-8cd11c2ff508d2f6.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n \n![](http://upload-images.jianshu.io/upload_images/3340896-071e0e01c3d430cc.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n4.使用visa 或者 万事达信用卡支付,填写好发票信息就ok了,需要纸质发票的选择纸质发票;购买完后,苹果会发邮件告诉你续费成功.然后就是接下来的更新证书流程了.\n![](http://upload-images.jianshu.io/upload_images/3340896-f65f7b4cc0565609.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n \n ###   续费后证书更新流程,首先得描述一下各个证书的定位，作用，这样在制作的时候心中有谱，对整个流程的把握也会准确一些\n1、开发者证书（分为开发和发布两种，类型为[iOS](http://lib.csdn.net/base/1) Development,ios Distribution），这个是最基础的，不论是真机调试，还是上传到appstore都是需要的，是一个基证书，用来证明自己开发者身份的；\n2、appID,这是每一个应用的独立标识，在设置项中可以配置该应用的权限，比如是否用到了PassBook,GameCenter,以及更常见的push服务，如果选中了push服务，那么就可以创建生成下面第3条所提到的推送证书，所以，在所有和推送相关的配置中，首先要做的就是先开通支持推送服务的appID;\n3、推送证书（分为开发和发布两种，类型分别为APNs Development ios,APNs Distribution ios）,该证书在appID配置中创建生成，和开发者证书一样，安装到开发电脑上；\n4、Provisioning Profiles,这个东西是很有苹果特色的一个东西，我一般称之为PP文件，该文件将appID,开发者证书，硬件Device绑定到一块儿，在开发者中心配置好后可以添加到Xcode上，也可以直接在Xcode上连接开发者中心生成，真机调试时需要在PP文件中添加真机的udid；是真机调试和必架必备之珍品；\n平常我们的制作流程一般都是按以上序列进行，先利用开发者帐号登陆开发者中心，创建开发者证书，appID,在appID中开通推送服务，在开通推送服务的选项下面创建推送证书（服务器端的推送证书见下文），之后在PP文件中绑定所有的证书id,添加调试真机等；\n###下面开始申请证书\n 1.将原来快要过期或者已经过期的测试证书.发布证书. Provision Profile文件等跟该AppID相关的证书和PP文件revoke;\n![](http://upload-images.jianshu.io/upload_images/3340896-a97820d267527d92.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n2.创建开发者证书;\n![](http://upload-images.jianshu.io/upload_images/3340896-5f43433de9e5d5bd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![](http://upload-images.jianshu.io/upload_images/3340896-b2725fd7db2e92f5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n选择continue,然后要求上传CSR文件,这里解释一下CSR文件,全称Certificate Signing Requst ,苹果公司要知道是谁在请求证书,需要请求者进行签名;\n![](http://upload-images.jianshu.io/upload_images/3340896-f913802a5e2ca432.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\nCSR文件生成方法,打开钥匙串;\n![](http://upload-images.jianshu.io/upload_images/3340896-5c4407a763055aee.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![](http://upload-images.jianshu.io/upload_images/3340896-177df67ecf5ed162.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n选择存储到磁盘;\n 然后上传CSR文件,点击generate,就会生成开发者证书;然后下载,存到指定文件夹下,双击安装证书;\n2.同理生成发布证书,同样流程创建开发推送证书和发布推送证书;选择开发推送证书类型\n![](http://upload-images.jianshu.io/upload_images/3340896-1c62d3f7275ae169.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n然后选择appID;\n![](http://upload-images.jianshu.io/upload_images/3340896-185bdbaa7f22c17a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n上传CSR文件,点击generate 就生成开发环境的推送证书;\n![](http://upload-images.jianshu.io/upload_images/3340896-35c8b7666789eb75.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n同理生成发布环境的推送证书;\n3.生成发布和推送证书后,可以去查看推送服务是否激活; \n ![](http://upload-images.jianshu.io/upload_images/3340896-7f7a15afa3c997e9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n 激活后,创建Provision Profile文件,简称PP文件;\n![](http://upload-images.jianshu.io/upload_images/3340896-9b55694b0e1d0467.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![](http://upload-images.jianshu.io/upload_images/3340896-fe6f70f2c6a7b15c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![](http://upload-images.jianshu.io/upload_images/3340896-ca7b60ee04269861.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![](http://upload-images.jianshu.io/upload_images/3340896-eea56e362aad9353.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![](http://upload-images.jianshu.io/upload_images/3340896-f30b174c576adeff.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n填写名称,continue就ok了;同理创建发布环境PP文件;下载双击安装即可;\n![](http://upload-images.jianshu.io/upload_images/3340896-f2f8121e8ae46822.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n致此,完毕.\n \n","source":"_posts/工具/iOS账号续费及证书更新流程.md","raw":"\n---\ntitle: iOS 账号续费及证书更新流程\ndate:  2017-03-16 11:25\ncategories:\n- 工具\ntags:\n-  证书\n---\n\n  #####  开发者账号会员快到期的时候,苹果会发送给开发者账号的注册邮箱一封邮件,提示用户账号快到期了,及时续费,一般是提前一个月提示用户续费.下面开始介绍续费流程;\n1.登录开发者账号后,网页上面会有账号过期黄色提示;点击renew your membership ;会跳到支付页面;个人开发者账号是688RMB/年;\n![](http://upload-images.jianshu.io/upload_images/3340896-c84af4890fcb7576.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n2.选择continue;\n![](http://upload-images.jianshu.io/upload_images/3340896-f211f9428c8d363f.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n3.购买详情,选择continue,然后点击购买\n \n![](http://upload-images.jianshu.io/upload_images/3340896-8cd11c2ff508d2f6.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n \n![](http://upload-images.jianshu.io/upload_images/3340896-071e0e01c3d430cc.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n4.使用visa 或者 万事达信用卡支付,填写好发票信息就ok了,需要纸质发票的选择纸质发票;购买完后,苹果会发邮件告诉你续费成功.然后就是接下来的更新证书流程了.\n![](http://upload-images.jianshu.io/upload_images/3340896-f65f7b4cc0565609.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n \n ###   续费后证书更新流程,首先得描述一下各个证书的定位，作用，这样在制作的时候心中有谱，对整个流程的把握也会准确一些\n1、开发者证书（分为开发和发布两种，类型为[iOS](http://lib.csdn.net/base/1) Development,ios Distribution），这个是最基础的，不论是真机调试，还是上传到appstore都是需要的，是一个基证书，用来证明自己开发者身份的；\n2、appID,这是每一个应用的独立标识，在设置项中可以配置该应用的权限，比如是否用到了PassBook,GameCenter,以及更常见的push服务，如果选中了push服务，那么就可以创建生成下面第3条所提到的推送证书，所以，在所有和推送相关的配置中，首先要做的就是先开通支持推送服务的appID;\n3、推送证书（分为开发和发布两种，类型分别为APNs Development ios,APNs Distribution ios）,该证书在appID配置中创建生成，和开发者证书一样，安装到开发电脑上；\n4、Provisioning Profiles,这个东西是很有苹果特色的一个东西，我一般称之为PP文件，该文件将appID,开发者证书，硬件Device绑定到一块儿，在开发者中心配置好后可以添加到Xcode上，也可以直接在Xcode上连接开发者中心生成，真机调试时需要在PP文件中添加真机的udid；是真机调试和必架必备之珍品；\n平常我们的制作流程一般都是按以上序列进行，先利用开发者帐号登陆开发者中心，创建开发者证书，appID,在appID中开通推送服务，在开通推送服务的选项下面创建推送证书（服务器端的推送证书见下文），之后在PP文件中绑定所有的证书id,添加调试真机等；\n###下面开始申请证书\n 1.将原来快要过期或者已经过期的测试证书.发布证书. Provision Profile文件等跟该AppID相关的证书和PP文件revoke;\n![](http://upload-images.jianshu.io/upload_images/3340896-a97820d267527d92.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n2.创建开发者证书;\n![](http://upload-images.jianshu.io/upload_images/3340896-5f43433de9e5d5bd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![](http://upload-images.jianshu.io/upload_images/3340896-b2725fd7db2e92f5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n选择continue,然后要求上传CSR文件,这里解释一下CSR文件,全称Certificate Signing Requst ,苹果公司要知道是谁在请求证书,需要请求者进行签名;\n![](http://upload-images.jianshu.io/upload_images/3340896-f913802a5e2ca432.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\nCSR文件生成方法,打开钥匙串;\n![](http://upload-images.jianshu.io/upload_images/3340896-5c4407a763055aee.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![](http://upload-images.jianshu.io/upload_images/3340896-177df67ecf5ed162.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n选择存储到磁盘;\n 然后上传CSR文件,点击generate,就会生成开发者证书;然后下载,存到指定文件夹下,双击安装证书;\n2.同理生成发布证书,同样流程创建开发推送证书和发布推送证书;选择开发推送证书类型\n![](http://upload-images.jianshu.io/upload_images/3340896-1c62d3f7275ae169.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n然后选择appID;\n![](http://upload-images.jianshu.io/upload_images/3340896-185bdbaa7f22c17a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n上传CSR文件,点击generate 就生成开发环境的推送证书;\n![](http://upload-images.jianshu.io/upload_images/3340896-35c8b7666789eb75.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n同理生成发布环境的推送证书;\n3.生成发布和推送证书后,可以去查看推送服务是否激活; \n ![](http://upload-images.jianshu.io/upload_images/3340896-7f7a15afa3c997e9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n 激活后,创建Provision Profile文件,简称PP文件;\n![](http://upload-images.jianshu.io/upload_images/3340896-9b55694b0e1d0467.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![](http://upload-images.jianshu.io/upload_images/3340896-fe6f70f2c6a7b15c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![](http://upload-images.jianshu.io/upload_images/3340896-ca7b60ee04269861.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![](http://upload-images.jianshu.io/upload_images/3340896-eea56e362aad9353.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![](http://upload-images.jianshu.io/upload_images/3340896-f30b174c576adeff.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n填写名称,continue就ok了;同理创建发布环境PP文件;下载双击安装即可;\n![](http://upload-images.jianshu.io/upload_images/3340896-f2f8121e8ae46822.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n致此,完毕.\n \n","slug":"工具/iOS账号续费及证书更新流程","published":1,"updated":"2020-09-27T10:47:29.737Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgq6gnxp003rt29k9fzm8a5z","content":"<p>  #####  开发者账号会员快到期的时候,苹果会发送给开发者账号的注册邮箱一封邮件,提示用户账号快到期了,及时续费,一般是提前一个月提示用户续费.下面开始介绍续费流程;<br>1.登录开发者账号后,网页上面会有账号过期黄色提示;点击renew your membership ;会跳到支付页面;个人开发者账号是688RMB/年;<br><img src=\"http://upload-images.jianshu.io/upload_images/3340896-c84af4890fcb7576.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"><br>2.选择continue;<br><img src=\"http://upload-images.jianshu.io/upload_images/3340896-f211f9428c8d363f.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"><br>3.购买详情,选择continue,然后点击购买<br> <br><img src=\"http://upload-images.jianshu.io/upload_images/3340896-8cd11c2ff508d2f6.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"><br> <br><img src=\"http://upload-images.jianshu.io/upload_images/3340896-071e0e01c3d430cc.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"><br>4.使用visa 或者 万事达信用卡支付,填写好发票信息就ok了,需要纸质发票的选择纸质发票;购买完后,苹果会发邮件告诉你续费成功.然后就是接下来的更新证书流程了.<br><img src=\"http://upload-images.jianshu.io/upload_images/3340896-f65f7b4cc0565609.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"><br> <br> ###   续费后证书更新流程,首先得描述一下各个证书的定位，作用，这样在制作的时候心中有谱，对整个流程的把握也会准确一些<br>1、开发者证书（分为开发和发布两种，类型为<a href=\"http://lib.csdn.net/base/1\">iOS</a> Development,ios Distribution），这个是最基础的，不论是真机调试，还是上传到appstore都是需要的，是一个基证书，用来证明自己开发者身份的；<br>2、appID,这是每一个应用的独立标识，在设置项中可以配置该应用的权限，比如是否用到了PassBook,GameCenter,以及更常见的push服务，如果选中了push服务，那么就可以创建生成下面第3条所提到的推送证书，所以，在所有和推送相关的配置中，首先要做的就是先开通支持推送服务的appID;<br>3、推送证书（分为开发和发布两种，类型分别为APNs Development ios,APNs Distribution ios）,该证书在appID配置中创建生成，和开发者证书一样，安装到开发电脑上；<br>4、Provisioning Profiles,这个东西是很有苹果特色的一个东西，我一般称之为PP文件，该文件将appID,开发者证书，硬件Device绑定到一块儿，在开发者中心配置好后可以添加到Xcode上，也可以直接在Xcode上连接开发者中心生成，真机调试时需要在PP文件中添加真机的udid；是真机调试和必架必备之珍品；<br>平常我们的制作流程一般都是按以上序列进行，先利用开发者帐号登陆开发者中心，创建开发者证书，appID,在appID中开通推送服务，在开通推送服务的选项下面创建推送证书（服务器端的推送证书见下文），之后在PP文件中绑定所有的证书id,添加调试真机等；<br>###下面开始申请证书<br> 1.将原来快要过期或者已经过期的测试证书.发布证书. Provision Profile文件等跟该AppID相关的证书和PP文件revoke;<br><img src=\"http://upload-images.jianshu.io/upload_images/3340896-a97820d267527d92.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"><br>2.创建开发者证书;<br><img src=\"http://upload-images.jianshu.io/upload_images/3340896-5f43433de9e5d5bd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"><br><img src=\"http://upload-images.jianshu.io/upload_images/3340896-b2725fd7db2e92f5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"><br>选择continue,然后要求上传CSR文件,这里解释一下CSR文件,全称Certificate Signing Requst ,苹果公司要知道是谁在请求证书,需要请求者进行签名;<br><img src=\"http://upload-images.jianshu.io/upload_images/3340896-f913802a5e2ca432.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"><br>CSR文件生成方法,打开钥匙串;<br><img src=\"http://upload-images.jianshu.io/upload_images/3340896-5c4407a763055aee.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"><br><img src=\"http://upload-images.jianshu.io/upload_images/3340896-177df67ecf5ed162.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"><br>选择存储到磁盘;<br> 然后上传CSR文件,点击generate,就会生成开发者证书;然后下载,存到指定文件夹下,双击安装证书;<br>2.同理生成发布证书,同样流程创建开发推送证书和发布推送证书;选择开发推送证书类型<br><img src=\"http://upload-images.jianshu.io/upload_images/3340896-1c62d3f7275ae169.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"><br>然后选择appID;<br><img src=\"http://upload-images.jianshu.io/upload_images/3340896-185bdbaa7f22c17a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"><br>上传CSR文件,点击generate 就生成开发环境的推送证书;<br><img src=\"http://upload-images.jianshu.io/upload_images/3340896-35c8b7666789eb75.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"><br>同理生成发布环境的推送证书;<br>3.生成发布和推送证书后,可以去查看推送服务是否激活; <br> <img src=\"http://upload-images.jianshu.io/upload_images/3340896-7f7a15afa3c997e9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"><br> 激活后,创建Provision Profile文件,简称PP文件;<br><img src=\"http://upload-images.jianshu.io/upload_images/3340896-9b55694b0e1d0467.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"><br><img src=\"http://upload-images.jianshu.io/upload_images/3340896-fe6f70f2c6a7b15c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"><br><img src=\"http://upload-images.jianshu.io/upload_images/3340896-ca7b60ee04269861.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"><br><img src=\"http://upload-images.jianshu.io/upload_images/3340896-eea56e362aad9353.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"><br><img src=\"http://upload-images.jianshu.io/upload_images/3340896-f30b174c576adeff.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"><br>填写名称,continue就ok了;同理创建发布环境PP文件;下载双击安装即可;<br><img src=\"http://upload-images.jianshu.io/upload_images/3340896-f2f8121e8ae46822.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"><br>致此,完毕.\n </p>\n","site":{"data":{"fluid_static_prefix":{"internal_js":"/js","internal_css":"/css","internal_img":"/img","iconfont":"//at.alicdn.com/t/font_1736178_kmeydafke9r.css","anchor":"https://cdn.staticfile.org/anchor-js/4.2.2/","github_markdown":"https://cdn.staticfile.org/github-markdown-css/4.0.0/","jquery":"https://cdn.staticfile.org/jquery/3.4.1/","bootstrap":"https://cdn.staticfile.org/twitter-bootstrap/4.4.1/","highlightjs":"https://cdn.staticfile.org/highlight.js/10.0.0/","prismjs":"https://cdn.staticfile.org/prism/1.21.0/","tocbot":"https://cdn.staticfile.org/tocbot/4.11.1/","typed":"https://cdn.staticfile.org/typed.js/2.0.11/","fancybox":"https://cdn.staticfile.org/fancybox/3.5.7/","mathjax":"https://cdn.staticfile.org/mathjax/3.0.5/es5/","katex":"https://cdn.staticfile.org/KaTeX/0.11.1/","aplayer":"https://cdn.staticfile.org/aplayer/1.10.1/","busuanzi":"https://busuanzi.ibruce.info/busuanzi/2.3/","clipboard":"https://cdn.staticfile.org/clipboard.js/2.0.6/","mermaid":"https://cdn.staticfile.org/mermaid/8.5.0/","valine":"https://cdn.staticfile.org/valine/1.4.14/","gitalk":"https://cdn.staticfile.org/gitalk/1.6.2/","blueimp_md5":"https://cdn.staticfile.org/blueimp-md5/2.13.0/","disqusjs":"https://cdn.jsdelivr.net/npm/disqusjs@1.0/dist/","hint":"/lib/hint/"},"fluid_config":{"favicon":"/img/favicon.png","apple_touch_icon":"/img/favicon.png","title_join_string":" - ","force_https":false,"code":{"copy_btn":true,"highlight":{"enable":true,"lib":"highlightjs","highlightjs":{"style":"Github Gist","bg_color":false},"prismjs":{"style":"default","preprocess":true}}},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"_","loop":false},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"right","visible":"hover","icon":""},"mouse_click":{"enable":false,"style":"values"}},"dark_mode":{"enable":true,"default":"auto"},"color":{"body_bg_color":"#eee","body_bg_color_dark":"#181c27","navbar_bg_color":"#2f4154","navbar_bg_color_dark":"#1f3144","navbar_text_color":"#fff","navbar_text_color_dark":"#d0d0d0","text_color":"#3c4858","text_color_dark":"#c4c6c9","sec_text_color":"#718096","sec_text_color_dark":"#a7a9ad","post_text_color":"#2c3e50","post_text_color_dark":"#c4c6c9","post_heading_color":"#1a202c","post_heading_color_dark":"#c4c6c9","post_link_color":"#0366d6","post_link_color_dark":"#1589e9","link_hover_color":"#30a9de","link_hover_color_dark":"#30a9de","link_hover_bg_color":"#f8f9fa","link_hover_bg_color_dark":"#364151","board_color":"#fff","board_color_dark":"#252d38"},"font":{"font_size":"16px","font_family":null,"code_font_size":"85%"},"custom_js":null,"custom_css":null,"custom_html":"","web_analytics":{"enable":false,"baidu":null,"google":null,"gtag":null,"tencent":{"sid":null,"cid":null},"woyaola":null,"cnzz":null,"leancloud":{"app_id":null,"app_key":null,"server_url":null}},"lazyload":{"enable":true,"onlypost":false},"daovoice":{"enable":false,"appid":""},"aplayer":{"enable":false,"autoplay":false,"loop":"all","order":"random","theme":"#b7daff","songs":[{"name":"name","artist":"artist","url":"/songs/test.mp3","cover":"/img/cover.jpg"},{"name":"name","artist":"artist","url":"https://...url.mp3","cover":"https://...cover.jpg"}]},"version":{"check":false},"navbar":{"blog_title":"吃面多放葱","ground_glass":{"enable":false,"px":3,"alpha":0.7},"menu":[{"key":"home","link":"/","icon":"iconfont icon-home-fill"},{"key":"category","link":"/categories/","icon":"iconfont icon-category-fill"},{"key":"tag","link":"/tags/","icon":"iconfont icon-tags-fill"},{"key":"about","link":"/about/","icon":"iconfont icon-user-fill"}]},"search":{"enable":true,"path":"/local-search.xml","generate_path":"/local-search.xml","field":"post","content":true},"scroll_down_arrow":{"enable":true,"banner_height_limit":90,"scroll_after_turning_page":true},"banner_parallax":true,"footer":{"statistics":{"enable":false,"source":"busuanzi","pv_format":"总访问量 {} 次","uv_format":"总访客数 {} 人"},"beian":{"enable":false,"icp_text":"京ICP证123456号","police_text":"京公网安备12345678号","police_code":12345678,"police_icon":"/img/police_beian.png"}},"scroll_top_arrow":{"enable":true},"index":{"banner_img":"/img/default.png","banner_img_height":100,"banner_mask_alpha":0.3,"post_default_img":"","slogan":{"enable":true,"text":"像蚂蚁一样工作，像蝴蝶一样生活"},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"category":true,"tag":true}},"page":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3},"post":{"banner_img":"/img/default.png","banner_img_height":70,"banner_mask_alpha":0.3,"meta":{"author":{"enable":false},"date":{"enable":true,"format":"LL a"},"wordcount":{"enable":true,"format":"{} 字"},"min2read":{"enable":true,"format":"{} 分钟","words":100},"views":{"enable":false,"source":"busuanzi","format":"{} 次"}},"updated":{"enable":false,"content":"本文最后更新于：","relative":false},"toc":{"enable":true,"headingSelector":"h1,h2,h3,h4,h5,h6","collapseDepth":0},"copyright":{"enable":true,"content":"本博客所有文章除特别声明外，均采用 <a href=\"https://creativecommons.org/licenses/by-sa/4.0/deed.zh\" rel=\"nofollow noopener\">CC BY-SA 4.0 协议</a> ，转载请注明出处！"},"prev_next":{"enable":true},"custom":{"enable":false,"content":"<img src=\"https://octodex.github.com/images/jetpacktocat.png\" class=\"rounded mx-auto d-block mt-5\" style=\"width:150px; height:150px;\">"},"image_zoom":{"enable":true},"footnote":{"enable":true,"header":""},"math":{"enable":false,"specific":false,"engine":"mathjax"},"mermaid":{"enable":false,"specific":false,"options":{"theme":"default"}},"comments":{"enable":false,"type":"disqus"}},"utterances":{"repo":null,"issue_term":"pathname","label":"utterances","theme":"github-light","theme_dark":"github-dark","crossorigin":"anonymous"},"disqus":{"shortname":null,"disqusjs":false,"apikey":null},"gitalk":{"clientID":null,"clientSecret":null,"repo":null,"owner":null,"admin":["name"],"id":"location.pathname","language":"zh-CN","labels":["Gitalk"],"perPage":10,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true},"valine":{"appid":null,"appkey":null,"placeholder":"说点什么","path":"window.location.pathname","avatar":"retro","meta":["nick","mail","link"],"pageSize":10,"lang":"zh-CN","highlight":false,"recordIP":false,"serverURLs":null},"changyan":{"appid":"","appkey":""},"livere":{"uid":""},"remark42":{"host":"https://remark.haoyizebo.com","site_id":"haoyizebo","max_shown_comments":10,"locale":"zh"},"archive":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null},"category":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"post_limit":10,"order_by":"-length","collapse_depth":0},"tag":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null,"tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"avatar":"/img/avatar.png","name":"蔺国防","introduce":"移动应用开发者，历史文学爱好者","icons":[{"class":"iconfont icon-github-fill","link":"https://github.com","tip":"GitHub"},{"class":"iconfont icon-douban-fill","link":"https://douban.com","tip":"豆瓣"},{"class":"iconfont icon-wechat-fill","qrcode":"/img/favicon.png"}]},"page404":{"banner_img":"/img/default.png","banner_img_height":85,"banner_mask_alpha":0.3,"subtitle":"Page not found"},"links":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"items":[{"title":"Fluid Docs","intro":"主题使用指南","link":"https://hexo.fluid-dev.com/docs/","image":"/img/favicon.png"},{"title":"Fluid Repo","intro":"主题 GitHub 仓库","link":"https://github.com/fluid-dev/hexo-theme-fluid","image":"/img/favicon.png"},{"title":"Fluid Example","intro":"主题操作示例","link":"https://hexo.fluid-dev.com/docs/example/","image":"/img/favicon.png"}]}}}},"excerpt":"","more":"<p>  #####  开发者账号会员快到期的时候,苹果会发送给开发者账号的注册邮箱一封邮件,提示用户账号快到期了,及时续费,一般是提前一个月提示用户续费.下面开始介绍续费流程;<br>1.登录开发者账号后,网页上面会有账号过期黄色提示;点击renew your membership ;会跳到支付页面;个人开发者账号是688RMB/年;<br><img src=\"http://upload-images.jianshu.io/upload_images/3340896-c84af4890fcb7576.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"><br>2.选择continue;<br><img src=\"http://upload-images.jianshu.io/upload_images/3340896-f211f9428c8d363f.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"><br>3.购买详情,选择continue,然后点击购买<br> <br><img src=\"http://upload-images.jianshu.io/upload_images/3340896-8cd11c2ff508d2f6.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"><br> <br><img src=\"http://upload-images.jianshu.io/upload_images/3340896-071e0e01c3d430cc.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"><br>4.使用visa 或者 万事达信用卡支付,填写好发票信息就ok了,需要纸质发票的选择纸质发票;购买完后,苹果会发邮件告诉你续费成功.然后就是接下来的更新证书流程了.<br><img src=\"http://upload-images.jianshu.io/upload_images/3340896-f65f7b4cc0565609.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"><br> <br> ###   续费后证书更新流程,首先得描述一下各个证书的定位，作用，这样在制作的时候心中有谱，对整个流程的把握也会准确一些<br>1、开发者证书（分为开发和发布两种，类型为<a href=\"http://lib.csdn.net/base/1\">iOS</a> Development,ios Distribution），这个是最基础的，不论是真机调试，还是上传到appstore都是需要的，是一个基证书，用来证明自己开发者身份的；<br>2、appID,这是每一个应用的独立标识，在设置项中可以配置该应用的权限，比如是否用到了PassBook,GameCenter,以及更常见的push服务，如果选中了push服务，那么就可以创建生成下面第3条所提到的推送证书，所以，在所有和推送相关的配置中，首先要做的就是先开通支持推送服务的appID;<br>3、推送证书（分为开发和发布两种，类型分别为APNs Development ios,APNs Distribution ios）,该证书在appID配置中创建生成，和开发者证书一样，安装到开发电脑上；<br>4、Provisioning Profiles,这个东西是很有苹果特色的一个东西，我一般称之为PP文件，该文件将appID,开发者证书，硬件Device绑定到一块儿，在开发者中心配置好后可以添加到Xcode上，也可以直接在Xcode上连接开发者中心生成，真机调试时需要在PP文件中添加真机的udid；是真机调试和必架必备之珍品；<br>平常我们的制作流程一般都是按以上序列进行，先利用开发者帐号登陆开发者中心，创建开发者证书，appID,在appID中开通推送服务，在开通推送服务的选项下面创建推送证书（服务器端的推送证书见下文），之后在PP文件中绑定所有的证书id,添加调试真机等；<br>###下面开始申请证书<br> 1.将原来快要过期或者已经过期的测试证书.发布证书. Provision Profile文件等跟该AppID相关的证书和PP文件revoke;<br><img src=\"http://upload-images.jianshu.io/upload_images/3340896-a97820d267527d92.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"><br>2.创建开发者证书;<br><img src=\"http://upload-images.jianshu.io/upload_images/3340896-5f43433de9e5d5bd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"><br><img src=\"http://upload-images.jianshu.io/upload_images/3340896-b2725fd7db2e92f5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"><br>选择continue,然后要求上传CSR文件,这里解释一下CSR文件,全称Certificate Signing Requst ,苹果公司要知道是谁在请求证书,需要请求者进行签名;<br><img src=\"http://upload-images.jianshu.io/upload_images/3340896-f913802a5e2ca432.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"><br>CSR文件生成方法,打开钥匙串;<br><img src=\"http://upload-images.jianshu.io/upload_images/3340896-5c4407a763055aee.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"><br><img src=\"http://upload-images.jianshu.io/upload_images/3340896-177df67ecf5ed162.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"><br>选择存储到磁盘;<br> 然后上传CSR文件,点击generate,就会生成开发者证书;然后下载,存到指定文件夹下,双击安装证书;<br>2.同理生成发布证书,同样流程创建开发推送证书和发布推送证书;选择开发推送证书类型<br><img src=\"http://upload-images.jianshu.io/upload_images/3340896-1c62d3f7275ae169.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"><br>然后选择appID;<br><img src=\"http://upload-images.jianshu.io/upload_images/3340896-185bdbaa7f22c17a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"><br>上传CSR文件,点击generate 就生成开发环境的推送证书;<br><img src=\"http://upload-images.jianshu.io/upload_images/3340896-35c8b7666789eb75.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"><br>同理生成发布环境的推送证书;<br>3.生成发布和推送证书后,可以去查看推送服务是否激活; <br> <img src=\"http://upload-images.jianshu.io/upload_images/3340896-7f7a15afa3c997e9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"><br> 激活后,创建Provision Profile文件,简称PP文件;<br><img src=\"http://upload-images.jianshu.io/upload_images/3340896-9b55694b0e1d0467.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"><br><img src=\"http://upload-images.jianshu.io/upload_images/3340896-fe6f70f2c6a7b15c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"><br><img src=\"http://upload-images.jianshu.io/upload_images/3340896-ca7b60ee04269861.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"><br><img src=\"http://upload-images.jianshu.io/upload_images/3340896-eea56e362aad9353.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"><br><img src=\"http://upload-images.jianshu.io/upload_images/3340896-f30b174c576adeff.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"><br>填写名称,continue就ok了;同理创建发布环境PP文件;下载双击安装即可;<br><img src=\"http://upload-images.jianshu.io/upload_images/3340896-f2f8121e8ae46822.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"><br>致此,完毕.\n </p>\n"},{"title":"MacOSBeta版本计划退出命令","_content":"\n```\nsudo softwareupdate --clear-catalog \n​​​\n```\n","source":"_posts/工具/如何退出-macOS-beta-计划.md","raw":"---\ntitle:  MacOSBeta版本计划退出命令\ncategories:\n- 工具\ntags:\n- MacOS\n---\n\n```\nsudo softwareupdate --clear-catalog \n​​​\n```\n","slug":"工具/如何退出-macOS-beta-计划","published":1,"date":"2020-09-23T10:25:59.000Z","updated":"2020-09-24T08:53:48.495Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgq6gnxr003vt29k2yqt5cjx","content":"<pre><code class=\"hljs ada\">sudo softwareupdate <span class=\"hljs-comment\">--clear-catalog </span>\n​​​</code></pre>\n","site":{"data":{"fluid_static_prefix":{"internal_js":"/js","internal_css":"/css","internal_img":"/img","iconfont":"//at.alicdn.com/t/font_1736178_kmeydafke9r.css","anchor":"https://cdn.staticfile.org/anchor-js/4.2.2/","github_markdown":"https://cdn.staticfile.org/github-markdown-css/4.0.0/","jquery":"https://cdn.staticfile.org/jquery/3.4.1/","bootstrap":"https://cdn.staticfile.org/twitter-bootstrap/4.4.1/","highlightjs":"https://cdn.staticfile.org/highlight.js/10.0.0/","prismjs":"https://cdn.staticfile.org/prism/1.21.0/","tocbot":"https://cdn.staticfile.org/tocbot/4.11.1/","typed":"https://cdn.staticfile.org/typed.js/2.0.11/","fancybox":"https://cdn.staticfile.org/fancybox/3.5.7/","mathjax":"https://cdn.staticfile.org/mathjax/3.0.5/es5/","katex":"https://cdn.staticfile.org/KaTeX/0.11.1/","aplayer":"https://cdn.staticfile.org/aplayer/1.10.1/","busuanzi":"https://busuanzi.ibruce.info/busuanzi/2.3/","clipboard":"https://cdn.staticfile.org/clipboard.js/2.0.6/","mermaid":"https://cdn.staticfile.org/mermaid/8.5.0/","valine":"https://cdn.staticfile.org/valine/1.4.14/","gitalk":"https://cdn.staticfile.org/gitalk/1.6.2/","blueimp_md5":"https://cdn.staticfile.org/blueimp-md5/2.13.0/","disqusjs":"https://cdn.jsdelivr.net/npm/disqusjs@1.0/dist/","hint":"/lib/hint/"},"fluid_config":{"favicon":"/img/favicon.png","apple_touch_icon":"/img/favicon.png","title_join_string":" - ","force_https":false,"code":{"copy_btn":true,"highlight":{"enable":true,"lib":"highlightjs","highlightjs":{"style":"Github Gist","bg_color":false},"prismjs":{"style":"default","preprocess":true}}},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"_","loop":false},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"right","visible":"hover","icon":""},"mouse_click":{"enable":false,"style":"values"}},"dark_mode":{"enable":true,"default":"auto"},"color":{"body_bg_color":"#eee","body_bg_color_dark":"#181c27","navbar_bg_color":"#2f4154","navbar_bg_color_dark":"#1f3144","navbar_text_color":"#fff","navbar_text_color_dark":"#d0d0d0","text_color":"#3c4858","text_color_dark":"#c4c6c9","sec_text_color":"#718096","sec_text_color_dark":"#a7a9ad","post_text_color":"#2c3e50","post_text_color_dark":"#c4c6c9","post_heading_color":"#1a202c","post_heading_color_dark":"#c4c6c9","post_link_color":"#0366d6","post_link_color_dark":"#1589e9","link_hover_color":"#30a9de","link_hover_color_dark":"#30a9de","link_hover_bg_color":"#f8f9fa","link_hover_bg_color_dark":"#364151","board_color":"#fff","board_color_dark":"#252d38"},"font":{"font_size":"16px","font_family":null,"code_font_size":"85%"},"custom_js":null,"custom_css":null,"custom_html":"","web_analytics":{"enable":false,"baidu":null,"google":null,"gtag":null,"tencent":{"sid":null,"cid":null},"woyaola":null,"cnzz":null,"leancloud":{"app_id":null,"app_key":null,"server_url":null}},"lazyload":{"enable":true,"onlypost":false},"daovoice":{"enable":false,"appid":""},"aplayer":{"enable":false,"autoplay":false,"loop":"all","order":"random","theme":"#b7daff","songs":[{"name":"name","artist":"artist","url":"/songs/test.mp3","cover":"/img/cover.jpg"},{"name":"name","artist":"artist","url":"https://...url.mp3","cover":"https://...cover.jpg"}]},"version":{"check":false},"navbar":{"blog_title":"吃面多放葱","ground_glass":{"enable":false,"px":3,"alpha":0.7},"menu":[{"key":"home","link":"/","icon":"iconfont icon-home-fill"},{"key":"category","link":"/categories/","icon":"iconfont icon-category-fill"},{"key":"tag","link":"/tags/","icon":"iconfont icon-tags-fill"},{"key":"about","link":"/about/","icon":"iconfont icon-user-fill"}]},"search":{"enable":true,"path":"/local-search.xml","generate_path":"/local-search.xml","field":"post","content":true},"scroll_down_arrow":{"enable":true,"banner_height_limit":90,"scroll_after_turning_page":true},"banner_parallax":true,"footer":{"statistics":{"enable":false,"source":"busuanzi","pv_format":"总访问量 {} 次","uv_format":"总访客数 {} 人"},"beian":{"enable":false,"icp_text":"京ICP证123456号","police_text":"京公网安备12345678号","police_code":12345678,"police_icon":"/img/police_beian.png"}},"scroll_top_arrow":{"enable":true},"index":{"banner_img":"/img/default.png","banner_img_height":100,"banner_mask_alpha":0.3,"post_default_img":"","slogan":{"enable":true,"text":"像蚂蚁一样工作，像蝴蝶一样生活"},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"category":true,"tag":true}},"page":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3},"post":{"banner_img":"/img/default.png","banner_img_height":70,"banner_mask_alpha":0.3,"meta":{"author":{"enable":false},"date":{"enable":true,"format":"LL a"},"wordcount":{"enable":true,"format":"{} 字"},"min2read":{"enable":true,"format":"{} 分钟","words":100},"views":{"enable":false,"source":"busuanzi","format":"{} 次"}},"updated":{"enable":false,"content":"本文最后更新于：","relative":false},"toc":{"enable":true,"headingSelector":"h1,h2,h3,h4,h5,h6","collapseDepth":0},"copyright":{"enable":true,"content":"本博客所有文章除特别声明外，均采用 <a href=\"https://creativecommons.org/licenses/by-sa/4.0/deed.zh\" rel=\"nofollow noopener\">CC BY-SA 4.0 协议</a> ，转载请注明出处！"},"prev_next":{"enable":true},"custom":{"enable":false,"content":"<img src=\"https://octodex.github.com/images/jetpacktocat.png\" class=\"rounded mx-auto d-block mt-5\" style=\"width:150px; height:150px;\">"},"image_zoom":{"enable":true},"footnote":{"enable":true,"header":""},"math":{"enable":false,"specific":false,"engine":"mathjax"},"mermaid":{"enable":false,"specific":false,"options":{"theme":"default"}},"comments":{"enable":false,"type":"disqus"}},"utterances":{"repo":null,"issue_term":"pathname","label":"utterances","theme":"github-light","theme_dark":"github-dark","crossorigin":"anonymous"},"disqus":{"shortname":null,"disqusjs":false,"apikey":null},"gitalk":{"clientID":null,"clientSecret":null,"repo":null,"owner":null,"admin":["name"],"id":"location.pathname","language":"zh-CN","labels":["Gitalk"],"perPage":10,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true},"valine":{"appid":null,"appkey":null,"placeholder":"说点什么","path":"window.location.pathname","avatar":"retro","meta":["nick","mail","link"],"pageSize":10,"lang":"zh-CN","highlight":false,"recordIP":false,"serverURLs":null},"changyan":{"appid":"","appkey":""},"livere":{"uid":""},"remark42":{"host":"https://remark.haoyizebo.com","site_id":"haoyizebo","max_shown_comments":10,"locale":"zh"},"archive":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null},"category":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"post_limit":10,"order_by":"-length","collapse_depth":0},"tag":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null,"tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"avatar":"/img/avatar.png","name":"蔺国防","introduce":"移动应用开发者，历史文学爱好者","icons":[{"class":"iconfont icon-github-fill","link":"https://github.com","tip":"GitHub"},{"class":"iconfont icon-douban-fill","link":"https://douban.com","tip":"豆瓣"},{"class":"iconfont icon-wechat-fill","qrcode":"/img/favicon.png"}]},"page404":{"banner_img":"/img/default.png","banner_img_height":85,"banner_mask_alpha":0.3,"subtitle":"Page not found"},"links":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"items":[{"title":"Fluid Docs","intro":"主题使用指南","link":"https://hexo.fluid-dev.com/docs/","image":"/img/favicon.png"},{"title":"Fluid Repo","intro":"主题 GitHub 仓库","link":"https://github.com/fluid-dev/hexo-theme-fluid","image":"/img/favicon.png"},{"title":"Fluid Example","intro":"主题操作示例","link":"https://hexo.fluid-dev.com/docs/example/","image":"/img/favicon.png"}]}}}},"excerpt":"","more":"<pre><code class=\"hljs ada\">sudo softwareupdate <span class=\"hljs-comment\">--clear-catalog </span>\n​​​</code></pre>\n"},{"title":"常用正则表达式","date":"2017-03-16T03:21:00.000Z","_content":"##参考链接\nhttp://www.cnblogs.com/zxin/archive/2013/01/26/2877765.html\n","source":"_posts/工具/常用正则表达式.md","raw":"\n---\ntitle:  常用正则表达式\ndate: 2017-03-16 11:21\ncategories:\n- 工具\ntags:\n- 正则表达式\n---\n##参考链接\nhttp://www.cnblogs.com/zxin/archive/2013/01/26/2877765.html\n","slug":"工具/常用正则表达式","published":1,"updated":"2020-09-27T10:56:31.906Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgq6gnxs003xt29khwi3awh2","content":"<p>##参考链接<br><a href=\"http://www.cnblogs.com/zxin/archive/2013/01/26/2877765.html\">http://www.cnblogs.com/zxin/archive/2013/01/26/2877765.html</a></p>\n","site":{"data":{"fluid_static_prefix":{"internal_js":"/js","internal_css":"/css","internal_img":"/img","iconfont":"//at.alicdn.com/t/font_1736178_kmeydafke9r.css","anchor":"https://cdn.staticfile.org/anchor-js/4.2.2/","github_markdown":"https://cdn.staticfile.org/github-markdown-css/4.0.0/","jquery":"https://cdn.staticfile.org/jquery/3.4.1/","bootstrap":"https://cdn.staticfile.org/twitter-bootstrap/4.4.1/","highlightjs":"https://cdn.staticfile.org/highlight.js/10.0.0/","prismjs":"https://cdn.staticfile.org/prism/1.21.0/","tocbot":"https://cdn.staticfile.org/tocbot/4.11.1/","typed":"https://cdn.staticfile.org/typed.js/2.0.11/","fancybox":"https://cdn.staticfile.org/fancybox/3.5.7/","mathjax":"https://cdn.staticfile.org/mathjax/3.0.5/es5/","katex":"https://cdn.staticfile.org/KaTeX/0.11.1/","aplayer":"https://cdn.staticfile.org/aplayer/1.10.1/","busuanzi":"https://busuanzi.ibruce.info/busuanzi/2.3/","clipboard":"https://cdn.staticfile.org/clipboard.js/2.0.6/","mermaid":"https://cdn.staticfile.org/mermaid/8.5.0/","valine":"https://cdn.staticfile.org/valine/1.4.14/","gitalk":"https://cdn.staticfile.org/gitalk/1.6.2/","blueimp_md5":"https://cdn.staticfile.org/blueimp-md5/2.13.0/","disqusjs":"https://cdn.jsdelivr.net/npm/disqusjs@1.0/dist/","hint":"/lib/hint/"},"fluid_config":{"favicon":"/img/favicon.png","apple_touch_icon":"/img/favicon.png","title_join_string":" - ","force_https":false,"code":{"copy_btn":true,"highlight":{"enable":true,"lib":"highlightjs","highlightjs":{"style":"Github Gist","bg_color":false},"prismjs":{"style":"default","preprocess":true}}},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"_","loop":false},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"right","visible":"hover","icon":""},"mouse_click":{"enable":false,"style":"values"}},"dark_mode":{"enable":true,"default":"auto"},"color":{"body_bg_color":"#eee","body_bg_color_dark":"#181c27","navbar_bg_color":"#2f4154","navbar_bg_color_dark":"#1f3144","navbar_text_color":"#fff","navbar_text_color_dark":"#d0d0d0","text_color":"#3c4858","text_color_dark":"#c4c6c9","sec_text_color":"#718096","sec_text_color_dark":"#a7a9ad","post_text_color":"#2c3e50","post_text_color_dark":"#c4c6c9","post_heading_color":"#1a202c","post_heading_color_dark":"#c4c6c9","post_link_color":"#0366d6","post_link_color_dark":"#1589e9","link_hover_color":"#30a9de","link_hover_color_dark":"#30a9de","link_hover_bg_color":"#f8f9fa","link_hover_bg_color_dark":"#364151","board_color":"#fff","board_color_dark":"#252d38"},"font":{"font_size":"16px","font_family":null,"code_font_size":"85%"},"custom_js":null,"custom_css":null,"custom_html":"","web_analytics":{"enable":false,"baidu":null,"google":null,"gtag":null,"tencent":{"sid":null,"cid":null},"woyaola":null,"cnzz":null,"leancloud":{"app_id":null,"app_key":null,"server_url":null}},"lazyload":{"enable":true,"onlypost":false},"daovoice":{"enable":false,"appid":""},"aplayer":{"enable":false,"autoplay":false,"loop":"all","order":"random","theme":"#b7daff","songs":[{"name":"name","artist":"artist","url":"/songs/test.mp3","cover":"/img/cover.jpg"},{"name":"name","artist":"artist","url":"https://...url.mp3","cover":"https://...cover.jpg"}]},"version":{"check":false},"navbar":{"blog_title":"吃面多放葱","ground_glass":{"enable":false,"px":3,"alpha":0.7},"menu":[{"key":"home","link":"/","icon":"iconfont icon-home-fill"},{"key":"category","link":"/categories/","icon":"iconfont icon-category-fill"},{"key":"tag","link":"/tags/","icon":"iconfont icon-tags-fill"},{"key":"about","link":"/about/","icon":"iconfont icon-user-fill"}]},"search":{"enable":true,"path":"/local-search.xml","generate_path":"/local-search.xml","field":"post","content":true},"scroll_down_arrow":{"enable":true,"banner_height_limit":90,"scroll_after_turning_page":true},"banner_parallax":true,"footer":{"statistics":{"enable":false,"source":"busuanzi","pv_format":"总访问量 {} 次","uv_format":"总访客数 {} 人"},"beian":{"enable":false,"icp_text":"京ICP证123456号","police_text":"京公网安备12345678号","police_code":12345678,"police_icon":"/img/police_beian.png"}},"scroll_top_arrow":{"enable":true},"index":{"banner_img":"/img/default.png","banner_img_height":100,"banner_mask_alpha":0.3,"post_default_img":"","slogan":{"enable":true,"text":"像蚂蚁一样工作，像蝴蝶一样生活"},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"category":true,"tag":true}},"page":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3},"post":{"banner_img":"/img/default.png","banner_img_height":70,"banner_mask_alpha":0.3,"meta":{"author":{"enable":false},"date":{"enable":true,"format":"LL a"},"wordcount":{"enable":true,"format":"{} 字"},"min2read":{"enable":true,"format":"{} 分钟","words":100},"views":{"enable":false,"source":"busuanzi","format":"{} 次"}},"updated":{"enable":false,"content":"本文最后更新于：","relative":false},"toc":{"enable":true,"headingSelector":"h1,h2,h3,h4,h5,h6","collapseDepth":0},"copyright":{"enable":true,"content":"本博客所有文章除特别声明外，均采用 <a href=\"https://creativecommons.org/licenses/by-sa/4.0/deed.zh\" rel=\"nofollow noopener\">CC BY-SA 4.0 协议</a> ，转载请注明出处！"},"prev_next":{"enable":true},"custom":{"enable":false,"content":"<img src=\"https://octodex.github.com/images/jetpacktocat.png\" class=\"rounded mx-auto d-block mt-5\" style=\"width:150px; height:150px;\">"},"image_zoom":{"enable":true},"footnote":{"enable":true,"header":""},"math":{"enable":false,"specific":false,"engine":"mathjax"},"mermaid":{"enable":false,"specific":false,"options":{"theme":"default"}},"comments":{"enable":false,"type":"disqus"}},"utterances":{"repo":null,"issue_term":"pathname","label":"utterances","theme":"github-light","theme_dark":"github-dark","crossorigin":"anonymous"},"disqus":{"shortname":null,"disqusjs":false,"apikey":null},"gitalk":{"clientID":null,"clientSecret":null,"repo":null,"owner":null,"admin":["name"],"id":"location.pathname","language":"zh-CN","labels":["Gitalk"],"perPage":10,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true},"valine":{"appid":null,"appkey":null,"placeholder":"说点什么","path":"window.location.pathname","avatar":"retro","meta":["nick","mail","link"],"pageSize":10,"lang":"zh-CN","highlight":false,"recordIP":false,"serverURLs":null},"changyan":{"appid":"","appkey":""},"livere":{"uid":""},"remark42":{"host":"https://remark.haoyizebo.com","site_id":"haoyizebo","max_shown_comments":10,"locale":"zh"},"archive":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null},"category":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"post_limit":10,"order_by":"-length","collapse_depth":0},"tag":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null,"tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"avatar":"/img/avatar.png","name":"蔺国防","introduce":"移动应用开发者，历史文学爱好者","icons":[{"class":"iconfont icon-github-fill","link":"https://github.com","tip":"GitHub"},{"class":"iconfont icon-douban-fill","link":"https://douban.com","tip":"豆瓣"},{"class":"iconfont icon-wechat-fill","qrcode":"/img/favicon.png"}]},"page404":{"banner_img":"/img/default.png","banner_img_height":85,"banner_mask_alpha":0.3,"subtitle":"Page not found"},"links":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"items":[{"title":"Fluid Docs","intro":"主题使用指南","link":"https://hexo.fluid-dev.com/docs/","image":"/img/favicon.png"},{"title":"Fluid Repo","intro":"主题 GitHub 仓库","link":"https://github.com/fluid-dev/hexo-theme-fluid","image":"/img/favicon.png"},{"title":"Fluid Example","intro":"主题操作示例","link":"https://hexo.fluid-dev.com/docs/example/","image":"/img/favicon.png"}]}}}},"excerpt":"","more":"<p>##参考链接<br><a href=\"http://www.cnblogs.com/zxin/archive/2013/01/26/2877765.html\">http://www.cnblogs.com/zxin/archive/2013/01/26/2877765.html</a></p>\n"},{"title":"数据结构","date":"2019-03-14T08:52:00.000Z","_content":"\n\n## 什么是数据结构?                                                                                                                                                                                                   \n数据结构是相互之间存在一种或多种特定关系的数据元素的集合.\n\n通常有以下四类基本结构:\n* 集合\n* 线性结构\n* 树形结构\n* 图状结构或网状结构\n\n数据的存储结构:\n* 顺序存储结构\n* 链式存储结构\n\n高级程序语言中的数据类型可以分为两类:\n一类是非结构的原子类型.  原子类型的值是不可分解的,例如C语言中的基本类型(整型,实型,字符型,枚举类型)指针类型和空类型.\n另一类是结构类型.结构类型的值是由若干成分按某种结构组成的,因此可以分解的,并且它的成分可以是结构的,也可以是非结构的. \n\n算法和算法分析\n算法是对特定问题求解步骤的一种描述,他是指令的有限序列,其中每一条指令表示一个或多个操作;此外一个算法还具有下列5个重要特性:\n* 有穷性\n* 确定性\n* 可行性\n* 输入\n* 输出    \n\n算法的时间复杂度\nT(n) = O(f(n))\n算法的空间复杂度\nS(n) = O(f(n))\n\n## 线性表\n线性表是一个相当灵活的数据结构,它的长度可根据需要增长或缩短,即对线性表的数据元素不仅可以进行访问,还可以进行插入和删除\n线性表的顺序表示指的是用一组地址连续的存储单元依次存储线性表的数据元素.\n线性表的插入和删除的时间复杂度为O(n)\n\n### 线性链表 (单链表)\n除了存储数据本身信息外,还需存储一个指示其直接后继的信息(即直接后继的存储位置),这种存储映像称作 **结点**,包含两个域,数据域和指针域\n\n### 单向循环链表\n表中最后一个结点的指针域指向头结点,整个链表形成一个环\n### 双向链表   \n包含两个指针域,其一指向直接后继,另一指向直接前趋.\n### 双向循环链表 (略)\n## 栈和队列\n栈是仅在表尾进行插入和删除操作的线性表,队列是只允许在表的一段进行插入元素,在另一端进行删除元素的线性表\n栈 (后进先出)\n队列(先进先出) \n\n## 树和二叉树\n树是n个结点的有限集.树的结点包含一个数据元素及若干指向其子树的分支.结点拥有的子树数成为结点的度.\n森林是m(m>=0)棵互不相交的树的集合.\n\n遍历二叉树\n* 先序遍历 \n1.访问根节点;\n2.先序遍历左子树;\n3.先序遍历有子树.\n* 中序遍历\n1.中序遍历左子树;\n2.访问根节点;\n3.中序遍历右子树.\n* 后序遍历\n1.后序遍历左子树;\n2.后序遍历有字数;\n3.访问根结点.\n\n### 赫夫曼树\n树的带权路径长度为树中所有叶子节点的带权路径长度之和.n个叶子节点分别带权,其中带权路径长度最小的二叉树称作**最优二叉树**或**赫夫曼树**\n\n### 二叉排序树\n- 若它的左子树不空,则左子树上所有结点的值均小于它的根结点的值;\n- 若它的右子树不空,则右子树上所有结点的值均大于它的根结点的值;\n- 它的左右子树也分别为二叉排序树.\n\n### 平衡二叉树\n它的左子树和右子树都是平衡二叉树,且左子树和右子树的的深度之差的绝对值不超过1.\n### 哈希表\n根据设定的哈希函数H(key)和处理冲突的方法将一组关键字映像到一个有限的连续的地址集(区间)上,并以关键字在地址集中的\"像\"作为记录在表中的存储位置,这种表便称为**哈希表**,所得存储位置称为**哈希地址**\n\n#### 哈希函数的构造方法\n- 直接定址法\n- 数字分析法\n- 平方取中法\n- 折叠法\n- 除留取余法\n- 随机数法 \n\n处理冲突的方法\n- 开放定址法\n- 再哈希法\n- 链地址法\n- 建立一个公共溢出区\n\n## 排序\n- 插入排序\n**直接插入排序** 是一种最简单的排序方法,它的基本操作是将一个记录插入到已排好序的有序表中,从而得到一个新的,记录数增1的有序表\n\n- 交换排序\n- 选择排序\n- 归并排序\n- 计数排序\n- 基数排序\n- 希尔排序\n- 堆排序\n\n\n","source":"_posts/计算机基础/数据结构.md","raw":"\n---\ntitle: 数据结构\ndate:  2019-03-14 16:52\ncategories:\n- 计算机基础\ntags:\n- 数据结构\n---\n\n\n## 什么是数据结构?                                                                                                                                                                                                   \n数据结构是相互之间存在一种或多种特定关系的数据元素的集合.\n\n通常有以下四类基本结构:\n* 集合\n* 线性结构\n* 树形结构\n* 图状结构或网状结构\n\n数据的存储结构:\n* 顺序存储结构\n* 链式存储结构\n\n高级程序语言中的数据类型可以分为两类:\n一类是非结构的原子类型.  原子类型的值是不可分解的,例如C语言中的基本类型(整型,实型,字符型,枚举类型)指针类型和空类型.\n另一类是结构类型.结构类型的值是由若干成分按某种结构组成的,因此可以分解的,并且它的成分可以是结构的,也可以是非结构的. \n\n算法和算法分析\n算法是对特定问题求解步骤的一种描述,他是指令的有限序列,其中每一条指令表示一个或多个操作;此外一个算法还具有下列5个重要特性:\n* 有穷性\n* 确定性\n* 可行性\n* 输入\n* 输出    \n\n算法的时间复杂度\nT(n) = O(f(n))\n算法的空间复杂度\nS(n) = O(f(n))\n\n## 线性表\n线性表是一个相当灵活的数据结构,它的长度可根据需要增长或缩短,即对线性表的数据元素不仅可以进行访问,还可以进行插入和删除\n线性表的顺序表示指的是用一组地址连续的存储单元依次存储线性表的数据元素.\n线性表的插入和删除的时间复杂度为O(n)\n\n### 线性链表 (单链表)\n除了存储数据本身信息外,还需存储一个指示其直接后继的信息(即直接后继的存储位置),这种存储映像称作 **结点**,包含两个域,数据域和指针域\n\n### 单向循环链表\n表中最后一个结点的指针域指向头结点,整个链表形成一个环\n### 双向链表   \n包含两个指针域,其一指向直接后继,另一指向直接前趋.\n### 双向循环链表 (略)\n## 栈和队列\n栈是仅在表尾进行插入和删除操作的线性表,队列是只允许在表的一段进行插入元素,在另一端进行删除元素的线性表\n栈 (后进先出)\n队列(先进先出) \n\n## 树和二叉树\n树是n个结点的有限集.树的结点包含一个数据元素及若干指向其子树的分支.结点拥有的子树数成为结点的度.\n森林是m(m>=0)棵互不相交的树的集合.\n\n遍历二叉树\n* 先序遍历 \n1.访问根节点;\n2.先序遍历左子树;\n3.先序遍历有子树.\n* 中序遍历\n1.中序遍历左子树;\n2.访问根节点;\n3.中序遍历右子树.\n* 后序遍历\n1.后序遍历左子树;\n2.后序遍历有字数;\n3.访问根结点.\n\n### 赫夫曼树\n树的带权路径长度为树中所有叶子节点的带权路径长度之和.n个叶子节点分别带权,其中带权路径长度最小的二叉树称作**最优二叉树**或**赫夫曼树**\n\n### 二叉排序树\n- 若它的左子树不空,则左子树上所有结点的值均小于它的根结点的值;\n- 若它的右子树不空,则右子树上所有结点的值均大于它的根结点的值;\n- 它的左右子树也分别为二叉排序树.\n\n### 平衡二叉树\n它的左子树和右子树都是平衡二叉树,且左子树和右子树的的深度之差的绝对值不超过1.\n### 哈希表\n根据设定的哈希函数H(key)和处理冲突的方法将一组关键字映像到一个有限的连续的地址集(区间)上,并以关键字在地址集中的\"像\"作为记录在表中的存储位置,这种表便称为**哈希表**,所得存储位置称为**哈希地址**\n\n#### 哈希函数的构造方法\n- 直接定址法\n- 数字分析法\n- 平方取中法\n- 折叠法\n- 除留取余法\n- 随机数法 \n\n处理冲突的方法\n- 开放定址法\n- 再哈希法\n- 链地址法\n- 建立一个公共溢出区\n\n## 排序\n- 插入排序\n**直接插入排序** 是一种最简单的排序方法,它的基本操作是将一个记录插入到已排好序的有序表中,从而得到一个新的,记录数增1的有序表\n\n- 交换排序\n- 选择排序\n- 归并排序\n- 计数排序\n- 基数排序\n- 希尔排序\n- 堆排序\n\n\n","slug":"计算机基础/数据结构","published":1,"updated":"2020-09-27T10:28:25.863Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgq6gnxt0041t29k61om3eol","content":"<h2 id=\"什么是数据结构\"><a href=\"#什么是数据结构\" class=\"headerlink\" title=\"什么是数据结构?\"></a>什么是数据结构?</h2><p>数据结构是相互之间存在一种或多种特定关系的数据元素的集合.</p>\n<p>通常有以下四类基本结构:</p>\n<ul>\n<li>集合</li>\n<li>线性结构</li>\n<li>树形结构</li>\n<li>图状结构或网状结构</li>\n</ul>\n<p>数据的存储结构:</p>\n<ul>\n<li>顺序存储结构</li>\n<li>链式存储结构</li>\n</ul>\n<p>高级程序语言中的数据类型可以分为两类:<br>一类是非结构的原子类型.  原子类型的值是不可分解的,例如C语言中的基本类型(整型,实型,字符型,枚举类型)指针类型和空类型.<br>另一类是结构类型.结构类型的值是由若干成分按某种结构组成的,因此可以分解的,并且它的成分可以是结构的,也可以是非结构的. </p>\n<p>算法和算法分析<br>算法是对特定问题求解步骤的一种描述,他是指令的有限序列,其中每一条指令表示一个或多个操作;此外一个算法还具有下列5个重要特性:</p>\n<ul>\n<li>有穷性</li>\n<li>确定性</li>\n<li>可行性</li>\n<li>输入</li>\n<li>输出    </li>\n</ul>\n<p>算法的时间复杂度<br>T(n) = O(f(n))<br>算法的空间复杂度<br>S(n) = O(f(n))</p>\n<h2 id=\"线性表\"><a href=\"#线性表\" class=\"headerlink\" title=\"线性表\"></a>线性表</h2><p>线性表是一个相当灵活的数据结构,它的长度可根据需要增长或缩短,即对线性表的数据元素不仅可以进行访问,还可以进行插入和删除<br>线性表的顺序表示指的是用一组地址连续的存储单元依次存储线性表的数据元素.<br>线性表的插入和删除的时间复杂度为O(n)</p>\n<h3 id=\"线性链表-单链表\"><a href=\"#线性链表-单链表\" class=\"headerlink\" title=\"线性链表 (单链表)\"></a>线性链表 (单链表)</h3><p>除了存储数据本身信息外,还需存储一个指示其直接后继的信息(即直接后继的存储位置),这种存储映像称作 <strong>结点</strong>,包含两个域,数据域和指针域</p>\n<h3 id=\"单向循环链表\"><a href=\"#单向循环链表\" class=\"headerlink\" title=\"单向循环链表\"></a>单向循环链表</h3><p>表中最后一个结点的指针域指向头结点,整个链表形成一个环</p>\n<h3 id=\"双向链表\"><a href=\"#双向链表\" class=\"headerlink\" title=\"双向链表\"></a>双向链表</h3><p>包含两个指针域,其一指向直接后继,另一指向直接前趋.</p>\n<h3 id=\"双向循环链表-略\"><a href=\"#双向循环链表-略\" class=\"headerlink\" title=\"双向循环链表 (略)\"></a>双向循环链表 (略)</h3><h2 id=\"栈和队列\"><a href=\"#栈和队列\" class=\"headerlink\" title=\"栈和队列\"></a>栈和队列</h2><p>栈是仅在表尾进行插入和删除操作的线性表,队列是只允许在表的一段进行插入元素,在另一端进行删除元素的线性表<br>栈 (后进先出)<br>队列(先进先出) </p>\n<h2 id=\"树和二叉树\"><a href=\"#树和二叉树\" class=\"headerlink\" title=\"树和二叉树\"></a>树和二叉树</h2><p>树是n个结点的有限集.树的结点包含一个数据元素及若干指向其子树的分支.结点拥有的子树数成为结点的度.<br>森林是m(m&gt;=0)棵互不相交的树的集合.</p>\n<p>遍历二叉树</p>\n<ul>\n<li>先序遍历 </li>\n</ul>\n<p>1.访问根节点;<br>2.先序遍历左子树;<br>3.先序遍历有子树.</p>\n<ul>\n<li>中序遍历</li>\n</ul>\n<p>1.中序遍历左子树;<br>2.访问根节点;<br>3.中序遍历右子树.</p>\n<ul>\n<li>后序遍历</li>\n</ul>\n<p>1.后序遍历左子树;<br>2.后序遍历有字数;<br>3.访问根结点.</p>\n<h3 id=\"赫夫曼树\"><a href=\"#赫夫曼树\" class=\"headerlink\" title=\"赫夫曼树\"></a>赫夫曼树</h3><p>树的带权路径长度为树中所有叶子节点的带权路径长度之和.n个叶子节点分别带权,其中带权路径长度最小的二叉树称作<strong>最优二叉树</strong>或<strong>赫夫曼树</strong></p>\n<h3 id=\"二叉排序树\"><a href=\"#二叉排序树\" class=\"headerlink\" title=\"二叉排序树\"></a>二叉排序树</h3><ul>\n<li>若它的左子树不空,则左子树上所有结点的值均小于它的根结点的值;</li>\n<li>若它的右子树不空,则右子树上所有结点的值均大于它的根结点的值;</li>\n<li>它的左右子树也分别为二叉排序树.</li>\n</ul>\n<h3 id=\"平衡二叉树\"><a href=\"#平衡二叉树\" class=\"headerlink\" title=\"平衡二叉树\"></a>平衡二叉树</h3><p>它的左子树和右子树都是平衡二叉树,且左子树和右子树的的深度之差的绝对值不超过1.</p>\n<h3 id=\"哈希表\"><a href=\"#哈希表\" class=\"headerlink\" title=\"哈希表\"></a>哈希表</h3><p>根据设定的哈希函数H(key)和处理冲突的方法将一组关键字映像到一个有限的连续的地址集(区间)上,并以关键字在地址集中的”像”作为记录在表中的存储位置,这种表便称为<strong>哈希表</strong>,所得存储位置称为<strong>哈希地址</strong></p>\n<h4 id=\"哈希函数的构造方法\"><a href=\"#哈希函数的构造方法\" class=\"headerlink\" title=\"哈希函数的构造方法\"></a>哈希函数的构造方法</h4><ul>\n<li>直接定址法</li>\n<li>数字分析法</li>\n<li>平方取中法</li>\n<li>折叠法</li>\n<li>除留取余法</li>\n<li>随机数法 </li>\n</ul>\n<p>处理冲突的方法</p>\n<ul>\n<li>开放定址法</li>\n<li>再哈希法</li>\n<li>链地址法</li>\n<li>建立一个公共溢出区</li>\n</ul>\n<h2 id=\"排序\"><a href=\"#排序\" class=\"headerlink\" title=\"排序\"></a>排序</h2><ul>\n<li>插入排序</li>\n</ul>\n<p><strong>直接插入排序</strong> 是一种最简单的排序方法,它的基本操作是将一个记录插入到已排好序的有序表中,从而得到一个新的,记录数增1的有序表</p>\n<ul>\n<li>交换排序</li>\n<li>选择排序</li>\n<li>归并排序</li>\n<li>计数排序</li>\n<li>基数排序</li>\n<li>希尔排序</li>\n<li>堆排序</li>\n</ul>\n","site":{"data":{"fluid_static_prefix":{"internal_js":"/js","internal_css":"/css","internal_img":"/img","iconfont":"//at.alicdn.com/t/font_1736178_kmeydafke9r.css","anchor":"https://cdn.staticfile.org/anchor-js/4.2.2/","github_markdown":"https://cdn.staticfile.org/github-markdown-css/4.0.0/","jquery":"https://cdn.staticfile.org/jquery/3.4.1/","bootstrap":"https://cdn.staticfile.org/twitter-bootstrap/4.4.1/","highlightjs":"https://cdn.staticfile.org/highlight.js/10.0.0/","prismjs":"https://cdn.staticfile.org/prism/1.21.0/","tocbot":"https://cdn.staticfile.org/tocbot/4.11.1/","typed":"https://cdn.staticfile.org/typed.js/2.0.11/","fancybox":"https://cdn.staticfile.org/fancybox/3.5.7/","mathjax":"https://cdn.staticfile.org/mathjax/3.0.5/es5/","katex":"https://cdn.staticfile.org/KaTeX/0.11.1/","aplayer":"https://cdn.staticfile.org/aplayer/1.10.1/","busuanzi":"https://busuanzi.ibruce.info/busuanzi/2.3/","clipboard":"https://cdn.staticfile.org/clipboard.js/2.0.6/","mermaid":"https://cdn.staticfile.org/mermaid/8.5.0/","valine":"https://cdn.staticfile.org/valine/1.4.14/","gitalk":"https://cdn.staticfile.org/gitalk/1.6.2/","blueimp_md5":"https://cdn.staticfile.org/blueimp-md5/2.13.0/","disqusjs":"https://cdn.jsdelivr.net/npm/disqusjs@1.0/dist/","hint":"/lib/hint/"},"fluid_config":{"favicon":"/img/favicon.png","apple_touch_icon":"/img/favicon.png","title_join_string":" - ","force_https":false,"code":{"copy_btn":true,"highlight":{"enable":true,"lib":"highlightjs","highlightjs":{"style":"Github Gist","bg_color":false},"prismjs":{"style":"default","preprocess":true}}},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"_","loop":false},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"right","visible":"hover","icon":""},"mouse_click":{"enable":false,"style":"values"}},"dark_mode":{"enable":true,"default":"auto"},"color":{"body_bg_color":"#eee","body_bg_color_dark":"#181c27","navbar_bg_color":"#2f4154","navbar_bg_color_dark":"#1f3144","navbar_text_color":"#fff","navbar_text_color_dark":"#d0d0d0","text_color":"#3c4858","text_color_dark":"#c4c6c9","sec_text_color":"#718096","sec_text_color_dark":"#a7a9ad","post_text_color":"#2c3e50","post_text_color_dark":"#c4c6c9","post_heading_color":"#1a202c","post_heading_color_dark":"#c4c6c9","post_link_color":"#0366d6","post_link_color_dark":"#1589e9","link_hover_color":"#30a9de","link_hover_color_dark":"#30a9de","link_hover_bg_color":"#f8f9fa","link_hover_bg_color_dark":"#364151","board_color":"#fff","board_color_dark":"#252d38"},"font":{"font_size":"16px","font_family":null,"code_font_size":"85%"},"custom_js":null,"custom_css":null,"custom_html":"","web_analytics":{"enable":false,"baidu":null,"google":null,"gtag":null,"tencent":{"sid":null,"cid":null},"woyaola":null,"cnzz":null,"leancloud":{"app_id":null,"app_key":null,"server_url":null}},"lazyload":{"enable":true,"onlypost":false},"daovoice":{"enable":false,"appid":""},"aplayer":{"enable":false,"autoplay":false,"loop":"all","order":"random","theme":"#b7daff","songs":[{"name":"name","artist":"artist","url":"/songs/test.mp3","cover":"/img/cover.jpg"},{"name":"name","artist":"artist","url":"https://...url.mp3","cover":"https://...cover.jpg"}]},"version":{"check":false},"navbar":{"blog_title":"吃面多放葱","ground_glass":{"enable":false,"px":3,"alpha":0.7},"menu":[{"key":"home","link":"/","icon":"iconfont icon-home-fill"},{"key":"category","link":"/categories/","icon":"iconfont icon-category-fill"},{"key":"tag","link":"/tags/","icon":"iconfont icon-tags-fill"},{"key":"about","link":"/about/","icon":"iconfont icon-user-fill"}]},"search":{"enable":true,"path":"/local-search.xml","generate_path":"/local-search.xml","field":"post","content":true},"scroll_down_arrow":{"enable":true,"banner_height_limit":90,"scroll_after_turning_page":true},"banner_parallax":true,"footer":{"statistics":{"enable":false,"source":"busuanzi","pv_format":"总访问量 {} 次","uv_format":"总访客数 {} 人"},"beian":{"enable":false,"icp_text":"京ICP证123456号","police_text":"京公网安备12345678号","police_code":12345678,"police_icon":"/img/police_beian.png"}},"scroll_top_arrow":{"enable":true},"index":{"banner_img":"/img/default.png","banner_img_height":100,"banner_mask_alpha":0.3,"post_default_img":"","slogan":{"enable":true,"text":"像蚂蚁一样工作，像蝴蝶一样生活"},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"category":true,"tag":true}},"page":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3},"post":{"banner_img":"/img/default.png","banner_img_height":70,"banner_mask_alpha":0.3,"meta":{"author":{"enable":false},"date":{"enable":true,"format":"LL a"},"wordcount":{"enable":true,"format":"{} 字"},"min2read":{"enable":true,"format":"{} 分钟","words":100},"views":{"enable":false,"source":"busuanzi","format":"{} 次"}},"updated":{"enable":false,"content":"本文最后更新于：","relative":false},"toc":{"enable":true,"headingSelector":"h1,h2,h3,h4,h5,h6","collapseDepth":0},"copyright":{"enable":true,"content":"本博客所有文章除特别声明外，均采用 <a href=\"https://creativecommons.org/licenses/by-sa/4.0/deed.zh\" rel=\"nofollow noopener\">CC BY-SA 4.0 协议</a> ，转载请注明出处！"},"prev_next":{"enable":true},"custom":{"enable":false,"content":"<img src=\"https://octodex.github.com/images/jetpacktocat.png\" class=\"rounded mx-auto d-block mt-5\" style=\"width:150px; height:150px;\">"},"image_zoom":{"enable":true},"footnote":{"enable":true,"header":""},"math":{"enable":false,"specific":false,"engine":"mathjax"},"mermaid":{"enable":false,"specific":false,"options":{"theme":"default"}},"comments":{"enable":false,"type":"disqus"}},"utterances":{"repo":null,"issue_term":"pathname","label":"utterances","theme":"github-light","theme_dark":"github-dark","crossorigin":"anonymous"},"disqus":{"shortname":null,"disqusjs":false,"apikey":null},"gitalk":{"clientID":null,"clientSecret":null,"repo":null,"owner":null,"admin":["name"],"id":"location.pathname","language":"zh-CN","labels":["Gitalk"],"perPage":10,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true},"valine":{"appid":null,"appkey":null,"placeholder":"说点什么","path":"window.location.pathname","avatar":"retro","meta":["nick","mail","link"],"pageSize":10,"lang":"zh-CN","highlight":false,"recordIP":false,"serverURLs":null},"changyan":{"appid":"","appkey":""},"livere":{"uid":""},"remark42":{"host":"https://remark.haoyizebo.com","site_id":"haoyizebo","max_shown_comments":10,"locale":"zh"},"archive":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null},"category":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"post_limit":10,"order_by":"-length","collapse_depth":0},"tag":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null,"tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"avatar":"/img/avatar.png","name":"蔺国防","introduce":"移动应用开发者，历史文学爱好者","icons":[{"class":"iconfont icon-github-fill","link":"https://github.com","tip":"GitHub"},{"class":"iconfont icon-douban-fill","link":"https://douban.com","tip":"豆瓣"},{"class":"iconfont icon-wechat-fill","qrcode":"/img/favicon.png"}]},"page404":{"banner_img":"/img/default.png","banner_img_height":85,"banner_mask_alpha":0.3,"subtitle":"Page not found"},"links":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"items":[{"title":"Fluid Docs","intro":"主题使用指南","link":"https://hexo.fluid-dev.com/docs/","image":"/img/favicon.png"},{"title":"Fluid Repo","intro":"主题 GitHub 仓库","link":"https://github.com/fluid-dev/hexo-theme-fluid","image":"/img/favicon.png"},{"title":"Fluid Example","intro":"主题操作示例","link":"https://hexo.fluid-dev.com/docs/example/","image":"/img/favicon.png"}]}}}},"excerpt":"","more":"<h2 id=\"什么是数据结构\"><a href=\"#什么是数据结构\" class=\"headerlink\" title=\"什么是数据结构?\"></a>什么是数据结构?</h2><p>数据结构是相互之间存在一种或多种特定关系的数据元素的集合.</p>\n<p>通常有以下四类基本结构:</p>\n<ul>\n<li>集合</li>\n<li>线性结构</li>\n<li>树形结构</li>\n<li>图状结构或网状结构</li>\n</ul>\n<p>数据的存储结构:</p>\n<ul>\n<li>顺序存储结构</li>\n<li>链式存储结构</li>\n</ul>\n<p>高级程序语言中的数据类型可以分为两类:<br>一类是非结构的原子类型.  原子类型的值是不可分解的,例如C语言中的基本类型(整型,实型,字符型,枚举类型)指针类型和空类型.<br>另一类是结构类型.结构类型的值是由若干成分按某种结构组成的,因此可以分解的,并且它的成分可以是结构的,也可以是非结构的. </p>\n<p>算法和算法分析<br>算法是对特定问题求解步骤的一种描述,他是指令的有限序列,其中每一条指令表示一个或多个操作;此外一个算法还具有下列5个重要特性:</p>\n<ul>\n<li>有穷性</li>\n<li>确定性</li>\n<li>可行性</li>\n<li>输入</li>\n<li>输出    </li>\n</ul>\n<p>算法的时间复杂度<br>T(n) = O(f(n))<br>算法的空间复杂度<br>S(n) = O(f(n))</p>\n<h2 id=\"线性表\"><a href=\"#线性表\" class=\"headerlink\" title=\"线性表\"></a>线性表</h2><p>线性表是一个相当灵活的数据结构,它的长度可根据需要增长或缩短,即对线性表的数据元素不仅可以进行访问,还可以进行插入和删除<br>线性表的顺序表示指的是用一组地址连续的存储单元依次存储线性表的数据元素.<br>线性表的插入和删除的时间复杂度为O(n)</p>\n<h3 id=\"线性链表-单链表\"><a href=\"#线性链表-单链表\" class=\"headerlink\" title=\"线性链表 (单链表)\"></a>线性链表 (单链表)</h3><p>除了存储数据本身信息外,还需存储一个指示其直接后继的信息(即直接后继的存储位置),这种存储映像称作 <strong>结点</strong>,包含两个域,数据域和指针域</p>\n<h3 id=\"单向循环链表\"><a href=\"#单向循环链表\" class=\"headerlink\" title=\"单向循环链表\"></a>单向循环链表</h3><p>表中最后一个结点的指针域指向头结点,整个链表形成一个环</p>\n<h3 id=\"双向链表\"><a href=\"#双向链表\" class=\"headerlink\" title=\"双向链表\"></a>双向链表</h3><p>包含两个指针域,其一指向直接后继,另一指向直接前趋.</p>\n<h3 id=\"双向循环链表-略\"><a href=\"#双向循环链表-略\" class=\"headerlink\" title=\"双向循环链表 (略)\"></a>双向循环链表 (略)</h3><h2 id=\"栈和队列\"><a href=\"#栈和队列\" class=\"headerlink\" title=\"栈和队列\"></a>栈和队列</h2><p>栈是仅在表尾进行插入和删除操作的线性表,队列是只允许在表的一段进行插入元素,在另一端进行删除元素的线性表<br>栈 (后进先出)<br>队列(先进先出) </p>\n<h2 id=\"树和二叉树\"><a href=\"#树和二叉树\" class=\"headerlink\" title=\"树和二叉树\"></a>树和二叉树</h2><p>树是n个结点的有限集.树的结点包含一个数据元素及若干指向其子树的分支.结点拥有的子树数成为结点的度.<br>森林是m(m&gt;=0)棵互不相交的树的集合.</p>\n<p>遍历二叉树</p>\n<ul>\n<li>先序遍历 </li>\n</ul>\n<p>1.访问根节点;<br>2.先序遍历左子树;<br>3.先序遍历有子树.</p>\n<ul>\n<li>中序遍历</li>\n</ul>\n<p>1.中序遍历左子树;<br>2.访问根节点;<br>3.中序遍历右子树.</p>\n<ul>\n<li>后序遍历</li>\n</ul>\n<p>1.后序遍历左子树;<br>2.后序遍历有字数;<br>3.访问根结点.</p>\n<h3 id=\"赫夫曼树\"><a href=\"#赫夫曼树\" class=\"headerlink\" title=\"赫夫曼树\"></a>赫夫曼树</h3><p>树的带权路径长度为树中所有叶子节点的带权路径长度之和.n个叶子节点分别带权,其中带权路径长度最小的二叉树称作<strong>最优二叉树</strong>或<strong>赫夫曼树</strong></p>\n<h3 id=\"二叉排序树\"><a href=\"#二叉排序树\" class=\"headerlink\" title=\"二叉排序树\"></a>二叉排序树</h3><ul>\n<li>若它的左子树不空,则左子树上所有结点的值均小于它的根结点的值;</li>\n<li>若它的右子树不空,则右子树上所有结点的值均大于它的根结点的值;</li>\n<li>它的左右子树也分别为二叉排序树.</li>\n</ul>\n<h3 id=\"平衡二叉树\"><a href=\"#平衡二叉树\" class=\"headerlink\" title=\"平衡二叉树\"></a>平衡二叉树</h3><p>它的左子树和右子树都是平衡二叉树,且左子树和右子树的的深度之差的绝对值不超过1.</p>\n<h3 id=\"哈希表\"><a href=\"#哈希表\" class=\"headerlink\" title=\"哈希表\"></a>哈希表</h3><p>根据设定的哈希函数H(key)和处理冲突的方法将一组关键字映像到一个有限的连续的地址集(区间)上,并以关键字在地址集中的”像”作为记录在表中的存储位置,这种表便称为<strong>哈希表</strong>,所得存储位置称为<strong>哈希地址</strong></p>\n<h4 id=\"哈希函数的构造方法\"><a href=\"#哈希函数的构造方法\" class=\"headerlink\" title=\"哈希函数的构造方法\"></a>哈希函数的构造方法</h4><ul>\n<li>直接定址法</li>\n<li>数字分析法</li>\n<li>平方取中法</li>\n<li>折叠法</li>\n<li>除留取余法</li>\n<li>随机数法 </li>\n</ul>\n<p>处理冲突的方法</p>\n<ul>\n<li>开放定址法</li>\n<li>再哈希法</li>\n<li>链地址法</li>\n<li>建立一个公共溢出区</li>\n</ul>\n<h2 id=\"排序\"><a href=\"#排序\" class=\"headerlink\" title=\"排序\"></a>排序</h2><ul>\n<li>插入排序</li>\n</ul>\n<p><strong>直接插入排序</strong> 是一种最简单的排序方法,它的基本操作是将一个记录插入到已排好序的有序表中,从而得到一个新的,记录数增1的有序表</p>\n<ul>\n<li>交换排序</li>\n<li>选择排序</li>\n<li>归并排序</li>\n<li>计数排序</li>\n<li>基数排序</li>\n<li>希尔排序</li>\n<li>堆排序</li>\n</ul>\n"},{"title":"编译原理","date":"2019-03-14T08:52:00.000Z","_content":"## 什么是编译程序?\n从功能上看,一个编译程序就是一个语言翻译程序.语言翻译程序是把一种语言(称作源语言)书写的程序翻译成另外一种语言(称作目标语言)的等价程序.\n\n![编译程序功能及高级源程序的处理过程](https://upload-images.jianshu.io/upload_images/3340896-58117c524cd79319.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n* 编译的各个阶段\n![编译各个阶段](https://upload-images.jianshu.io/upload_images/3340896-b8ccae78df765998.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n* 编译程序的结构\n**编译程序** 按照执行顺序包含 *词法分析程序*  *语法分析程序*  *语义分析程序* *中间代码生成程序* *代码优化程序* *目标代码生成程序*\n    另外 *表格管理程序* 及 *出错处理程序* 伴随整个编译过程.  \n    表格管理程序主要负责编译过程中各种信息的保留;编译过程发现源程序有错误,编译程序应报告错误性质和错误发生的位置,并将错误造成的影响限制在最小范围内,这些工作由出错处理程序来完成.\n\n## 解释程序和编译程序的区别?\n编译程序是一个语言处理程序,它把一个高级语言程序翻译成某个机器的汇编语言程序或二进制代码程序,这个二进制代码程序在机器上运行以生成结果;\n解释程序不需要在运行前先把源程序翻译成目标代码,也可以实现在某台机器上运行程序并生成结果.\n\n解释程序接收某个语言的程序并立即运行这个源程序.它的工作模式是一个个的获取,分析并执行源程序语句,一旦第一个语句分析结束,源程序便开始运行并且生成结果,它特别适合程序员以交互方式工作的情况,即希望在获取下一个语句之前了解每个语句的执行结果,允许执行时修改程序. (如Shell解释程序,SQL解释程序)\n\n## 运行时存储组织\n\n目标程序在目标机环境中运行时,都置身于自己的一个运行时存储空间.\n  编译程序所产生的目标程序本身大小通常是确定的,一般存放在指定的专用存储区域,即**代码区**\n  相应地,目标程序运行过程中需要创建或访问的数据对象将存储在**数据区**,数据对象包括用户定义的各种类型的命名对象(如变量和常量),作为保留中间结果和传递参数的临时对象及调用过程时所需的连接信息等.\n\n面向数据对象的运行时存储组织所关注的几个重要问题:\n* **数据对象的表示**\n需要明确源语言中各类数据对象在目标机中的表示形式.\n* **表达式计算**\n需要明确如何正确有效地组织表达式的计算过程\n* **存储分配策略**\n核心问题是如何正确有效地分配不同作用域或不同生命周期的数据对象的存储\n* **过程实现**\n如何实现过程/函数调用以及参数传递\n### 程序运行时存储空间的布局\n运行时的存储空间从逻辑上可分为`代码区`和`数据区`两个主要部分,一般情况下至少含有 `保留地址区` `代码区` `静态数据区` `动态数据区`\n\n存储分配策略\n1.静态存储分配, 即在编译期间为数据对象分配存储空间.\n2.栈式存储分配   内存地址由高到低\n3.堆式存储分配   内存地址由低到高\n\n## 面向对象语言存储分配策略\n### 类和对象的角色\n* 类扮演的角色是程序的静态定义.类是一组运行时对象的共同性质的静态描述.类包含两类特征成员,属性和方法\n* 对象扮演的角色是程序运行时的动态结构. 每个对象都是某个类的实例.\n面向对象机制的主要特点, `封装` `继承` `多态` `重载` `动态绑定`\n### 面向对象程序运行时的特征\n* 对象是类的一个实例\n* 执行一个面向对象程序就是创建系统根类的一个实例,并调用该实例的创建该过程.\n* 创建对象的过程实现该对象的初始化;对于根类而言,创建其对象即执行该系统.\n\n对象的存储包含对象各个属性的存储以及方法索引表,\n方法的动态绑定,是将当前实例方法对应的实例作为参数传进去(即self 或 this 指向的实例作为参数传给该方法  )\n","source":"_posts/计算机基础/编译原理.md","raw":"\n---\ntitle: 编译原理\ndate:  2019-03-14 16:52\ncategories:\n- 计算机基础\ntags:\n- 编译\n---\n## 什么是编译程序?\n从功能上看,一个编译程序就是一个语言翻译程序.语言翻译程序是把一种语言(称作源语言)书写的程序翻译成另外一种语言(称作目标语言)的等价程序.\n\n![编译程序功能及高级源程序的处理过程](https://upload-images.jianshu.io/upload_images/3340896-58117c524cd79319.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n* 编译的各个阶段\n![编译各个阶段](https://upload-images.jianshu.io/upload_images/3340896-b8ccae78df765998.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n* 编译程序的结构\n**编译程序** 按照执行顺序包含 *词法分析程序*  *语法分析程序*  *语义分析程序* *中间代码生成程序* *代码优化程序* *目标代码生成程序*\n    另外 *表格管理程序* 及 *出错处理程序* 伴随整个编译过程.  \n    表格管理程序主要负责编译过程中各种信息的保留;编译过程发现源程序有错误,编译程序应报告错误性质和错误发生的位置,并将错误造成的影响限制在最小范围内,这些工作由出错处理程序来完成.\n\n## 解释程序和编译程序的区别?\n编译程序是一个语言处理程序,它把一个高级语言程序翻译成某个机器的汇编语言程序或二进制代码程序,这个二进制代码程序在机器上运行以生成结果;\n解释程序不需要在运行前先把源程序翻译成目标代码,也可以实现在某台机器上运行程序并生成结果.\n\n解释程序接收某个语言的程序并立即运行这个源程序.它的工作模式是一个个的获取,分析并执行源程序语句,一旦第一个语句分析结束,源程序便开始运行并且生成结果,它特别适合程序员以交互方式工作的情况,即希望在获取下一个语句之前了解每个语句的执行结果,允许执行时修改程序. (如Shell解释程序,SQL解释程序)\n\n## 运行时存储组织\n\n目标程序在目标机环境中运行时,都置身于自己的一个运行时存储空间.\n  编译程序所产生的目标程序本身大小通常是确定的,一般存放在指定的专用存储区域,即**代码区**\n  相应地,目标程序运行过程中需要创建或访问的数据对象将存储在**数据区**,数据对象包括用户定义的各种类型的命名对象(如变量和常量),作为保留中间结果和传递参数的临时对象及调用过程时所需的连接信息等.\n\n面向数据对象的运行时存储组织所关注的几个重要问题:\n* **数据对象的表示**\n需要明确源语言中各类数据对象在目标机中的表示形式.\n* **表达式计算**\n需要明确如何正确有效地组织表达式的计算过程\n* **存储分配策略**\n核心问题是如何正确有效地分配不同作用域或不同生命周期的数据对象的存储\n* **过程实现**\n如何实现过程/函数调用以及参数传递\n### 程序运行时存储空间的布局\n运行时的存储空间从逻辑上可分为`代码区`和`数据区`两个主要部分,一般情况下至少含有 `保留地址区` `代码区` `静态数据区` `动态数据区`\n\n存储分配策略\n1.静态存储分配, 即在编译期间为数据对象分配存储空间.\n2.栈式存储分配   内存地址由高到低\n3.堆式存储分配   内存地址由低到高\n\n## 面向对象语言存储分配策略\n### 类和对象的角色\n* 类扮演的角色是程序的静态定义.类是一组运行时对象的共同性质的静态描述.类包含两类特征成员,属性和方法\n* 对象扮演的角色是程序运行时的动态结构. 每个对象都是某个类的实例.\n面向对象机制的主要特点, `封装` `继承` `多态` `重载` `动态绑定`\n### 面向对象程序运行时的特征\n* 对象是类的一个实例\n* 执行一个面向对象程序就是创建系统根类的一个实例,并调用该实例的创建该过程.\n* 创建对象的过程实现该对象的初始化;对于根类而言,创建其对象即执行该系统.\n\n对象的存储包含对象各个属性的存储以及方法索引表,\n方法的动态绑定,是将当前实例方法对应的实例作为参数传进去(即self 或 this 指向的实例作为参数传给该方法  )\n","slug":"计算机基础/编译原理","published":1,"updated":"2020-09-27T10:27:46.538Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgq6gnxt0042t29k00ns6klg","content":"<h2 id=\"什么是编译程序\"><a href=\"#什么是编译程序\" class=\"headerlink\" title=\"什么是编译程序?\"></a>什么是编译程序?</h2><p>从功能上看,一个编译程序就是一个语言翻译程序.语言翻译程序是把一种语言(称作源语言)书写的程序翻译成另外一种语言(称作目标语言)的等价程序.</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/3340896-58117c524cd79319.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"编译程序功能及高级源程序的处理过程\"></p>\n<ul>\n<li>编译的各个阶段<br><img src=\"https://upload-images.jianshu.io/upload_images/3340896-b8ccae78df765998.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"编译各个阶段\"></li>\n<li>编译程序的结构</li>\n<li>*编译程序** 按照执行顺序包含 <em>词法分析程序</em>  <em>语法分析程序</em>  <em>语义分析程序</em> <em>中间代码生成程序</em> <em>代码优化程序</em> <em>目标代码生成程序</em><br>   另外 <em>表格管理程序</em> 及 <em>出错处理程序</em> 伴随整个编译过程.<br>   表格管理程序主要负责编译过程中各种信息的保留;编译过程发现源程序有错误,编译程序应报告错误性质和错误发生的位置,并将错误造成的影响限制在最小范围内,这些工作由出错处理程序来完成.</li>\n</ul>\n<h2 id=\"解释程序和编译程序的区别\"><a href=\"#解释程序和编译程序的区别\" class=\"headerlink\" title=\"解释程序和编译程序的区别?\"></a>解释程序和编译程序的区别?</h2><p>编译程序是一个语言处理程序,它把一个高级语言程序翻译成某个机器的汇编语言程序或二进制代码程序,这个二进制代码程序在机器上运行以生成结果;<br>解释程序不需要在运行前先把源程序翻译成目标代码,也可以实现在某台机器上运行程序并生成结果.</p>\n<p>解释程序接收某个语言的程序并立即运行这个源程序.它的工作模式是一个个的获取,分析并执行源程序语句,一旦第一个语句分析结束,源程序便开始运行并且生成结果,它特别适合程序员以交互方式工作的情况,即希望在获取下一个语句之前了解每个语句的执行结果,允许执行时修改程序. (如Shell解释程序,SQL解释程序)</p>\n<h2 id=\"运行时存储组织\"><a href=\"#运行时存储组织\" class=\"headerlink\" title=\"运行时存储组织\"></a>运行时存储组织</h2><p>目标程序在目标机环境中运行时,都置身于自己的一个运行时存储空间.<br>  编译程序所产生的目标程序本身大小通常是确定的,一般存放在指定的专用存储区域,即<strong>代码区</strong><br>  相应地,目标程序运行过程中需要创建或访问的数据对象将存储在<strong>数据区</strong>,数据对象包括用户定义的各种类型的命名对象(如变量和常量),作为保留中间结果和传递参数的临时对象及调用过程时所需的连接信息等.</p>\n<p>面向数据对象的运行时存储组织所关注的几个重要问题:</p>\n<ul>\n<li><strong>数据对象的表示</strong><br>需要明确源语言中各类数据对象在目标机中的表示形式.</li>\n<li><strong>表达式计算</strong><br>需要明确如何正确有效地组织表达式的计算过程</li>\n<li><strong>存储分配策略</strong><br>核心问题是如何正确有效地分配不同作用域或不同生命周期的数据对象的存储</li>\n<li><strong>过程实现</strong><br>如何实现过程/函数调用以及参数传递<h3 id=\"程序运行时存储空间的布局\"><a href=\"#程序运行时存储空间的布局\" class=\"headerlink\" title=\"程序运行时存储空间的布局\"></a>程序运行时存储空间的布局</h3>运行时的存储空间从逻辑上可分为<code>代码区</code>和<code>数据区</code>两个主要部分,一般情况下至少含有 <code>保留地址区</code> <code>代码区</code> <code>静态数据区</code> <code>动态数据区</code></li>\n</ul>\n<p>存储分配策略<br>1.静态存储分配, 即在编译期间为数据对象分配存储空间.<br>2.栈式存储分配   内存地址由高到低<br>3.堆式存储分配   内存地址由低到高</p>\n<h2 id=\"面向对象语言存储分配策略\"><a href=\"#面向对象语言存储分配策略\" class=\"headerlink\" title=\"面向对象语言存储分配策略\"></a>面向对象语言存储分配策略</h2><h3 id=\"类和对象的角色\"><a href=\"#类和对象的角色\" class=\"headerlink\" title=\"类和对象的角色\"></a>类和对象的角色</h3><ul>\n<li>类扮演的角色是程序的静态定义.类是一组运行时对象的共同性质的静态描述.类包含两类特征成员,属性和方法</li>\n<li>对象扮演的角色是程序运行时的动态结构. 每个对象都是某个类的实例.<br>面向对象机制的主要特点, <code>封装</code> <code>继承</code> <code>多态</code> <code>重载</code> <code>动态绑定</code><h3 id=\"面向对象程序运行时的特征\"><a href=\"#面向对象程序运行时的特征\" class=\"headerlink\" title=\"面向对象程序运行时的特征\"></a>面向对象程序运行时的特征</h3></li>\n<li>对象是类的一个实例</li>\n<li>执行一个面向对象程序就是创建系统根类的一个实例,并调用该实例的创建该过程.</li>\n<li>创建对象的过程实现该对象的初始化;对于根类而言,创建其对象即执行该系统.</li>\n</ul>\n<p>对象的存储包含对象各个属性的存储以及方法索引表,<br>方法的动态绑定,是将当前实例方法对应的实例作为参数传进去(即self 或 this 指向的实例作为参数传给该方法  )</p>\n","site":{"data":{"fluid_static_prefix":{"internal_js":"/js","internal_css":"/css","internal_img":"/img","iconfont":"//at.alicdn.com/t/font_1736178_kmeydafke9r.css","anchor":"https://cdn.staticfile.org/anchor-js/4.2.2/","github_markdown":"https://cdn.staticfile.org/github-markdown-css/4.0.0/","jquery":"https://cdn.staticfile.org/jquery/3.4.1/","bootstrap":"https://cdn.staticfile.org/twitter-bootstrap/4.4.1/","highlightjs":"https://cdn.staticfile.org/highlight.js/10.0.0/","prismjs":"https://cdn.staticfile.org/prism/1.21.0/","tocbot":"https://cdn.staticfile.org/tocbot/4.11.1/","typed":"https://cdn.staticfile.org/typed.js/2.0.11/","fancybox":"https://cdn.staticfile.org/fancybox/3.5.7/","mathjax":"https://cdn.staticfile.org/mathjax/3.0.5/es5/","katex":"https://cdn.staticfile.org/KaTeX/0.11.1/","aplayer":"https://cdn.staticfile.org/aplayer/1.10.1/","busuanzi":"https://busuanzi.ibruce.info/busuanzi/2.3/","clipboard":"https://cdn.staticfile.org/clipboard.js/2.0.6/","mermaid":"https://cdn.staticfile.org/mermaid/8.5.0/","valine":"https://cdn.staticfile.org/valine/1.4.14/","gitalk":"https://cdn.staticfile.org/gitalk/1.6.2/","blueimp_md5":"https://cdn.staticfile.org/blueimp-md5/2.13.0/","disqusjs":"https://cdn.jsdelivr.net/npm/disqusjs@1.0/dist/","hint":"/lib/hint/"},"fluid_config":{"favicon":"/img/favicon.png","apple_touch_icon":"/img/favicon.png","title_join_string":" - ","force_https":false,"code":{"copy_btn":true,"highlight":{"enable":true,"lib":"highlightjs","highlightjs":{"style":"Github Gist","bg_color":false},"prismjs":{"style":"default","preprocess":true}}},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"_","loop":false},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"right","visible":"hover","icon":""},"mouse_click":{"enable":false,"style":"values"}},"dark_mode":{"enable":true,"default":"auto"},"color":{"body_bg_color":"#eee","body_bg_color_dark":"#181c27","navbar_bg_color":"#2f4154","navbar_bg_color_dark":"#1f3144","navbar_text_color":"#fff","navbar_text_color_dark":"#d0d0d0","text_color":"#3c4858","text_color_dark":"#c4c6c9","sec_text_color":"#718096","sec_text_color_dark":"#a7a9ad","post_text_color":"#2c3e50","post_text_color_dark":"#c4c6c9","post_heading_color":"#1a202c","post_heading_color_dark":"#c4c6c9","post_link_color":"#0366d6","post_link_color_dark":"#1589e9","link_hover_color":"#30a9de","link_hover_color_dark":"#30a9de","link_hover_bg_color":"#f8f9fa","link_hover_bg_color_dark":"#364151","board_color":"#fff","board_color_dark":"#252d38"},"font":{"font_size":"16px","font_family":null,"code_font_size":"85%"},"custom_js":null,"custom_css":null,"custom_html":"","web_analytics":{"enable":false,"baidu":null,"google":null,"gtag":null,"tencent":{"sid":null,"cid":null},"woyaola":null,"cnzz":null,"leancloud":{"app_id":null,"app_key":null,"server_url":null}},"lazyload":{"enable":true,"onlypost":false},"daovoice":{"enable":false,"appid":""},"aplayer":{"enable":false,"autoplay":false,"loop":"all","order":"random","theme":"#b7daff","songs":[{"name":"name","artist":"artist","url":"/songs/test.mp3","cover":"/img/cover.jpg"},{"name":"name","artist":"artist","url":"https://...url.mp3","cover":"https://...cover.jpg"}]},"version":{"check":false},"navbar":{"blog_title":"吃面多放葱","ground_glass":{"enable":false,"px":3,"alpha":0.7},"menu":[{"key":"home","link":"/","icon":"iconfont icon-home-fill"},{"key":"category","link":"/categories/","icon":"iconfont icon-category-fill"},{"key":"tag","link":"/tags/","icon":"iconfont icon-tags-fill"},{"key":"about","link":"/about/","icon":"iconfont icon-user-fill"}]},"search":{"enable":true,"path":"/local-search.xml","generate_path":"/local-search.xml","field":"post","content":true},"scroll_down_arrow":{"enable":true,"banner_height_limit":90,"scroll_after_turning_page":true},"banner_parallax":true,"footer":{"statistics":{"enable":false,"source":"busuanzi","pv_format":"总访问量 {} 次","uv_format":"总访客数 {} 人"},"beian":{"enable":false,"icp_text":"京ICP证123456号","police_text":"京公网安备12345678号","police_code":12345678,"police_icon":"/img/police_beian.png"}},"scroll_top_arrow":{"enable":true},"index":{"banner_img":"/img/default.png","banner_img_height":100,"banner_mask_alpha":0.3,"post_default_img":"","slogan":{"enable":true,"text":"像蚂蚁一样工作，像蝴蝶一样生活"},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"category":true,"tag":true}},"page":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3},"post":{"banner_img":"/img/default.png","banner_img_height":70,"banner_mask_alpha":0.3,"meta":{"author":{"enable":false},"date":{"enable":true,"format":"LL a"},"wordcount":{"enable":true,"format":"{} 字"},"min2read":{"enable":true,"format":"{} 分钟","words":100},"views":{"enable":false,"source":"busuanzi","format":"{} 次"}},"updated":{"enable":false,"content":"本文最后更新于：","relative":false},"toc":{"enable":true,"headingSelector":"h1,h2,h3,h4,h5,h6","collapseDepth":0},"copyright":{"enable":true,"content":"本博客所有文章除特别声明外，均采用 <a href=\"https://creativecommons.org/licenses/by-sa/4.0/deed.zh\" rel=\"nofollow noopener\">CC BY-SA 4.0 协议</a> ，转载请注明出处！"},"prev_next":{"enable":true},"custom":{"enable":false,"content":"<img src=\"https://octodex.github.com/images/jetpacktocat.png\" class=\"rounded mx-auto d-block mt-5\" style=\"width:150px; height:150px;\">"},"image_zoom":{"enable":true},"footnote":{"enable":true,"header":""},"math":{"enable":false,"specific":false,"engine":"mathjax"},"mermaid":{"enable":false,"specific":false,"options":{"theme":"default"}},"comments":{"enable":false,"type":"disqus"}},"utterances":{"repo":null,"issue_term":"pathname","label":"utterances","theme":"github-light","theme_dark":"github-dark","crossorigin":"anonymous"},"disqus":{"shortname":null,"disqusjs":false,"apikey":null},"gitalk":{"clientID":null,"clientSecret":null,"repo":null,"owner":null,"admin":["name"],"id":"location.pathname","language":"zh-CN","labels":["Gitalk"],"perPage":10,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true},"valine":{"appid":null,"appkey":null,"placeholder":"说点什么","path":"window.location.pathname","avatar":"retro","meta":["nick","mail","link"],"pageSize":10,"lang":"zh-CN","highlight":false,"recordIP":false,"serverURLs":null},"changyan":{"appid":"","appkey":""},"livere":{"uid":""},"remark42":{"host":"https://remark.haoyizebo.com","site_id":"haoyizebo","max_shown_comments":10,"locale":"zh"},"archive":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null},"category":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"post_limit":10,"order_by":"-length","collapse_depth":0},"tag":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null,"tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"avatar":"/img/avatar.png","name":"蔺国防","introduce":"移动应用开发者，历史文学爱好者","icons":[{"class":"iconfont icon-github-fill","link":"https://github.com","tip":"GitHub"},{"class":"iconfont icon-douban-fill","link":"https://douban.com","tip":"豆瓣"},{"class":"iconfont icon-wechat-fill","qrcode":"/img/favicon.png"}]},"page404":{"banner_img":"/img/default.png","banner_img_height":85,"banner_mask_alpha":0.3,"subtitle":"Page not found"},"links":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"items":[{"title":"Fluid Docs","intro":"主题使用指南","link":"https://hexo.fluid-dev.com/docs/","image":"/img/favicon.png"},{"title":"Fluid Repo","intro":"主题 GitHub 仓库","link":"https://github.com/fluid-dev/hexo-theme-fluid","image":"/img/favicon.png"},{"title":"Fluid Example","intro":"主题操作示例","link":"https://hexo.fluid-dev.com/docs/example/","image":"/img/favicon.png"}]}}}},"excerpt":"","more":"<h2 id=\"什么是编译程序\"><a href=\"#什么是编译程序\" class=\"headerlink\" title=\"什么是编译程序?\"></a>什么是编译程序?</h2><p>从功能上看,一个编译程序就是一个语言翻译程序.语言翻译程序是把一种语言(称作源语言)书写的程序翻译成另外一种语言(称作目标语言)的等价程序.</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/3340896-58117c524cd79319.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"编译程序功能及高级源程序的处理过程\"></p>\n<ul>\n<li>编译的各个阶段<br><img src=\"https://upload-images.jianshu.io/upload_images/3340896-b8ccae78df765998.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"编译各个阶段\"></li>\n<li>编译程序的结构</li>\n<li>*编译程序** 按照执行顺序包含 <em>词法分析程序</em>  <em>语法分析程序</em>  <em>语义分析程序</em> <em>中间代码生成程序</em> <em>代码优化程序</em> <em>目标代码生成程序</em><br>   另外 <em>表格管理程序</em> 及 <em>出错处理程序</em> 伴随整个编译过程.<br>   表格管理程序主要负责编译过程中各种信息的保留;编译过程发现源程序有错误,编译程序应报告错误性质和错误发生的位置,并将错误造成的影响限制在最小范围内,这些工作由出错处理程序来完成.</li>\n</ul>\n<h2 id=\"解释程序和编译程序的区别\"><a href=\"#解释程序和编译程序的区别\" class=\"headerlink\" title=\"解释程序和编译程序的区别?\"></a>解释程序和编译程序的区别?</h2><p>编译程序是一个语言处理程序,它把一个高级语言程序翻译成某个机器的汇编语言程序或二进制代码程序,这个二进制代码程序在机器上运行以生成结果;<br>解释程序不需要在运行前先把源程序翻译成目标代码,也可以实现在某台机器上运行程序并生成结果.</p>\n<p>解释程序接收某个语言的程序并立即运行这个源程序.它的工作模式是一个个的获取,分析并执行源程序语句,一旦第一个语句分析结束,源程序便开始运行并且生成结果,它特别适合程序员以交互方式工作的情况,即希望在获取下一个语句之前了解每个语句的执行结果,允许执行时修改程序. (如Shell解释程序,SQL解释程序)</p>\n<h2 id=\"运行时存储组织\"><a href=\"#运行时存储组织\" class=\"headerlink\" title=\"运行时存储组织\"></a>运行时存储组织</h2><p>目标程序在目标机环境中运行时,都置身于自己的一个运行时存储空间.<br>  编译程序所产生的目标程序本身大小通常是确定的,一般存放在指定的专用存储区域,即<strong>代码区</strong><br>  相应地,目标程序运行过程中需要创建或访问的数据对象将存储在<strong>数据区</strong>,数据对象包括用户定义的各种类型的命名对象(如变量和常量),作为保留中间结果和传递参数的临时对象及调用过程时所需的连接信息等.</p>\n<p>面向数据对象的运行时存储组织所关注的几个重要问题:</p>\n<ul>\n<li><strong>数据对象的表示</strong><br>需要明确源语言中各类数据对象在目标机中的表示形式.</li>\n<li><strong>表达式计算</strong><br>需要明确如何正确有效地组织表达式的计算过程</li>\n<li><strong>存储分配策略</strong><br>核心问题是如何正确有效地分配不同作用域或不同生命周期的数据对象的存储</li>\n<li><strong>过程实现</strong><br>如何实现过程/函数调用以及参数传递<h3 id=\"程序运行时存储空间的布局\"><a href=\"#程序运行时存储空间的布局\" class=\"headerlink\" title=\"程序运行时存储空间的布局\"></a>程序运行时存储空间的布局</h3>运行时的存储空间从逻辑上可分为<code>代码区</code>和<code>数据区</code>两个主要部分,一般情况下至少含有 <code>保留地址区</code> <code>代码区</code> <code>静态数据区</code> <code>动态数据区</code></li>\n</ul>\n<p>存储分配策略<br>1.静态存储分配, 即在编译期间为数据对象分配存储空间.<br>2.栈式存储分配   内存地址由高到低<br>3.堆式存储分配   内存地址由低到高</p>\n<h2 id=\"面向对象语言存储分配策略\"><a href=\"#面向对象语言存储分配策略\" class=\"headerlink\" title=\"面向对象语言存储分配策略\"></a>面向对象语言存储分配策略</h2><h3 id=\"类和对象的角色\"><a href=\"#类和对象的角色\" class=\"headerlink\" title=\"类和对象的角色\"></a>类和对象的角色</h3><ul>\n<li>类扮演的角色是程序的静态定义.类是一组运行时对象的共同性质的静态描述.类包含两类特征成员,属性和方法</li>\n<li>对象扮演的角色是程序运行时的动态结构. 每个对象都是某个类的实例.<br>面向对象机制的主要特点, <code>封装</code> <code>继承</code> <code>多态</code> <code>重载</code> <code>动态绑定</code><h3 id=\"面向对象程序运行时的特征\"><a href=\"#面向对象程序运行时的特征\" class=\"headerlink\" title=\"面向对象程序运行时的特征\"></a>面向对象程序运行时的特征</h3></li>\n<li>对象是类的一个实例</li>\n<li>执行一个面向对象程序就是创建系统根类的一个实例,并调用该实例的创建该过程.</li>\n<li>创建对象的过程实现该对象的初始化;对于根类而言,创建其对象即执行该系统.</li>\n</ul>\n<p>对象的存储包含对象各个属性的存储以及方法索引表,<br>方法的动态绑定,是将当前实例方法对应的实例作为参数传进去(即self 或 this 指向的实例作为参数传给该方法  )</p>\n"},{"title":"天路旅途（四）","date":"2018-08-25T09:43:00.000Z","_content":"\n接下来的就是看图说话环节了,码字太累,何况自己文学素养不高,对付着看吧,O(∩_∩)O哈哈~\n![拉萨站.jpg](https://upload-images.jianshu.io/upload_images/3340896-fb317d08ae873cf6.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n这张照片呢,是我从拉萨站走出来的时候拍的,当时很纳闷,为什么不让走正门广场而从边上一个简陋的小门出去呢?后来了解到好像是由于安保问题,具体什么的就不深究了.\n![广场雕塑.jpg](https://upload-images.jianshu.io/upload_images/3340896-11d88ab0e555d555.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n拉萨站是在堆龙德庆区,到拉萨市里面还得打车,大约四十来分钟吧,咳咳...写这篇文章的时候,时间已经过了将近一年了,我就记得我当时是直接滴滴过去的.司机是东北人,来这里一年了,下车的时候留了手机号,如果去景区,他说可以载着我,价钱合适就ok.后来还真给这大哥打了电话,带着我们去了纳木错.\n![拉萨站广场.jpg](https://upload-images.jianshu.io/upload_images/3340896-654c1b4f835cafda.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n这张照片是我下车后,过了大概两个小时后拍的.中间有一段小插曲,火车到拉萨的时候已经中午12点10分了,到吃饭点儿了,我呢? 一个人,不用担心,本来就是自由行,所以喜欢哪里就在哪里多待会儿.先解决午饭问题,\n车站的路对过,就是各种饭馆,转到一家饭馆,进去点了一碗面,吃完后,就背着包出去接着逛. 没过多久,肚子就开始疼起来,幸亏我带着纸,于是屁颠屁颠地开始找厕所.\n来到拉萨吃的第一顿饭,居然让我这样度过,至今难忘~~\n\n转了一会儿, 感觉没意思了,于是滴滴了一个司机,带着我向拉萨城里出发,下面这张是在等车的公交站牌前拍的,自我感觉还是比较良好的~O(∩_∩)O哈哈~\n![远山.jpg](https://upload-images.jianshu.io/upload_images/3340896-fe9ac1954177f7c3.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n到酒店后放下行囊,就带着相机,开始在城里到处溜达,首先当然去八廓街了...\n\n![八廓街.jpg](https://upload-images.jianshu.io/upload_images/3340896-902846f9f13c96f9.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![色彩斑斓.jpg](https://upload-images.jianshu.io/upload_images/3340896-4e2c1d6b30c6253f.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n主街道的酒店还是蛮漂亮的,就在玛吉阿米茶馆前面,地理位置相当好,当然价格肯定也不菲喽.\n 拉萨给我的印象就是,没人的地方,蓝天白云,绿水青山;有人的地方,花枝招展,色彩斑斓.\n\n![五彩经幡.jpg](https://upload-images.jianshu.io/upload_images/3340896-5f5e77f179446f5b.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n藏族民居的楼顶一般都会挂上五彩经幡,随风摆动,煞是好看.这里我要科普一下,经幡之所以被称作经幡，是因为这些幡上面都印有佛经，在信奉藏传佛教的人们看来，随风而舞的经幡飘动一下，就是诵经一次，在不停地向神传达人的愿望，祈求神的庇佑。这样，经幡便成为连接神与人的纽带。风幡所在即意味着神灵所在，也意味着人们对神灵的祈求所在。风幡寄托着人们美好的愿望。\n\n![天堂时光.jpg](https://upload-images.jianshu.io/upload_images/3340896-50563d1edccf5599.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n<天堂时光旅行书店> 听名字就感觉仙气满满, 这里也是我此行的目的地之一,简友 [马儿你慢些走](https://www.jianshu.com/u/54f4e7e9a502) 里面写在西藏支教的日子,就是通过书店的主人,潘老师介绍,来拉萨支教的,非常有趣的一个人,感兴趣的话可以看看她写的文章.\n\n![自信.jpg](https://upload-images.jianshu.io/upload_images/3340896-80402ee877d42cec.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![佛语.jpg](https://upload-images.jianshu.io/upload_images/3340896-b673fa7dfce8c0e9.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![掠影1.jpg](https://upload-images.jianshu.io/upload_images/3340896-5eabff6a2d72611c.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n偷拍一下小姐姐,O(∩_∩)O哈哈~\n![掠影2.jpg](https://upload-images.jianshu.io/upload_images/3340896-99af155ecd8b1a54.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![仓姑寺甜茶馆.jpg](https://upload-images.jianshu.io/upload_images/3340896-792f08459fa98f28.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n仓姑寺甜茶馆就在八廓街里,由于不能再里面拍照,所以我就百度了一张,自己标明位置,自己点了一壶甜茶.我是不是灵魂画手呀! 😝\n\n\n[未完待续]()\n\n\n\n\n\n","source":"_posts/随笔/天路旅途-(四).md","raw":"---\ntitle:  天路旅途（四）\ndate:  2018-08-25 17:43\ncategories:\n- 随笔\ntags: \n- 旅游\n---\n\n接下来的就是看图说话环节了,码字太累,何况自己文学素养不高,对付着看吧,O(∩_∩)O哈哈~\n![拉萨站.jpg](https://upload-images.jianshu.io/upload_images/3340896-fb317d08ae873cf6.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n这张照片呢,是我从拉萨站走出来的时候拍的,当时很纳闷,为什么不让走正门广场而从边上一个简陋的小门出去呢?后来了解到好像是由于安保问题,具体什么的就不深究了.\n![广场雕塑.jpg](https://upload-images.jianshu.io/upload_images/3340896-11d88ab0e555d555.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n拉萨站是在堆龙德庆区,到拉萨市里面还得打车,大约四十来分钟吧,咳咳...写这篇文章的时候,时间已经过了将近一年了,我就记得我当时是直接滴滴过去的.司机是东北人,来这里一年了,下车的时候留了手机号,如果去景区,他说可以载着我,价钱合适就ok.后来还真给这大哥打了电话,带着我们去了纳木错.\n![拉萨站广场.jpg](https://upload-images.jianshu.io/upload_images/3340896-654c1b4f835cafda.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n这张照片是我下车后,过了大概两个小时后拍的.中间有一段小插曲,火车到拉萨的时候已经中午12点10分了,到吃饭点儿了,我呢? 一个人,不用担心,本来就是自由行,所以喜欢哪里就在哪里多待会儿.先解决午饭问题,\n车站的路对过,就是各种饭馆,转到一家饭馆,进去点了一碗面,吃完后,就背着包出去接着逛. 没过多久,肚子就开始疼起来,幸亏我带着纸,于是屁颠屁颠地开始找厕所.\n来到拉萨吃的第一顿饭,居然让我这样度过,至今难忘~~\n\n转了一会儿, 感觉没意思了,于是滴滴了一个司机,带着我向拉萨城里出发,下面这张是在等车的公交站牌前拍的,自我感觉还是比较良好的~O(∩_∩)O哈哈~\n![远山.jpg](https://upload-images.jianshu.io/upload_images/3340896-fe9ac1954177f7c3.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n到酒店后放下行囊,就带着相机,开始在城里到处溜达,首先当然去八廓街了...\n\n![八廓街.jpg](https://upload-images.jianshu.io/upload_images/3340896-902846f9f13c96f9.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![色彩斑斓.jpg](https://upload-images.jianshu.io/upload_images/3340896-4e2c1d6b30c6253f.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n主街道的酒店还是蛮漂亮的,就在玛吉阿米茶馆前面,地理位置相当好,当然价格肯定也不菲喽.\n 拉萨给我的印象就是,没人的地方,蓝天白云,绿水青山;有人的地方,花枝招展,色彩斑斓.\n\n![五彩经幡.jpg](https://upload-images.jianshu.io/upload_images/3340896-5f5e77f179446f5b.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n藏族民居的楼顶一般都会挂上五彩经幡,随风摆动,煞是好看.这里我要科普一下,经幡之所以被称作经幡，是因为这些幡上面都印有佛经，在信奉藏传佛教的人们看来，随风而舞的经幡飘动一下，就是诵经一次，在不停地向神传达人的愿望，祈求神的庇佑。这样，经幡便成为连接神与人的纽带。风幡所在即意味着神灵所在，也意味着人们对神灵的祈求所在。风幡寄托着人们美好的愿望。\n\n![天堂时光.jpg](https://upload-images.jianshu.io/upload_images/3340896-50563d1edccf5599.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n<天堂时光旅行书店> 听名字就感觉仙气满满, 这里也是我此行的目的地之一,简友 [马儿你慢些走](https://www.jianshu.com/u/54f4e7e9a502) 里面写在西藏支教的日子,就是通过书店的主人,潘老师介绍,来拉萨支教的,非常有趣的一个人,感兴趣的话可以看看她写的文章.\n\n![自信.jpg](https://upload-images.jianshu.io/upload_images/3340896-80402ee877d42cec.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![佛语.jpg](https://upload-images.jianshu.io/upload_images/3340896-b673fa7dfce8c0e9.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![掠影1.jpg](https://upload-images.jianshu.io/upload_images/3340896-5eabff6a2d72611c.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n偷拍一下小姐姐,O(∩_∩)O哈哈~\n![掠影2.jpg](https://upload-images.jianshu.io/upload_images/3340896-99af155ecd8b1a54.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![仓姑寺甜茶馆.jpg](https://upload-images.jianshu.io/upload_images/3340896-792f08459fa98f28.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n仓姑寺甜茶馆就在八廓街里,由于不能再里面拍照,所以我就百度了一张,自己标明位置,自己点了一壶甜茶.我是不是灵魂画手呀! 😝\n\n\n[未完待续]()\n\n\n\n\n\n","slug":"随笔/天路旅途-(四)","published":1,"updated":"2020-09-27T10:35:28.708Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgq6gnxu0046t29ke7n51n8g","content":"<p>接下来的就是看图说话环节了,码字太累,何况自己文学素养不高,对付着看吧,O(∩_∩)O哈哈~<br><img src=\"https://upload-images.jianshu.io/upload_images/3340896-fb317d08ae873cf6.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"拉萨站.jpg\"><br>这张照片呢,是我从拉萨站走出来的时候拍的,当时很纳闷,为什么不让走正门广场而从边上一个简陋的小门出去呢?后来了解到好像是由于安保问题,具体什么的就不深究了.<br><img src=\"https://upload-images.jianshu.io/upload_images/3340896-11d88ab0e555d555.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"广场雕塑.jpg\"><br>拉萨站是在堆龙德庆区,到拉萨市里面还得打车,大约四十来分钟吧,咳咳…写这篇文章的时候,时间已经过了将近一年了,我就记得我当时是直接滴滴过去的.司机是东北人,来这里一年了,下车的时候留了手机号,如果去景区,他说可以载着我,价钱合适就ok.后来还真给这大哥打了电话,带着我们去了纳木错.<br><img src=\"https://upload-images.jianshu.io/upload_images/3340896-654c1b4f835cafda.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"拉萨站广场.jpg\"><br>这张照片是我下车后,过了大概两个小时后拍的.中间有一段小插曲,火车到拉萨的时候已经中午12点10分了,到吃饭点儿了,我呢? 一个人,不用担心,本来就是自由行,所以喜欢哪里就在哪里多待会儿.先解决午饭问题,<br>车站的路对过,就是各种饭馆,转到一家饭馆,进去点了一碗面,吃完后,就背着包出去接着逛. 没过多久,肚子就开始疼起来,幸亏我带着纸,于是屁颠屁颠地开始找厕所.<br>来到拉萨吃的第一顿饭,居然让我这样度过,至今难忘~~</p>\n<p>转了一会儿, 感觉没意思了,于是滴滴了一个司机,带着我向拉萨城里出发,下面这张是在等车的公交站牌前拍的,自我感觉还是比较良好的<del>O(∩_∩)O哈哈</del><br><img src=\"https://upload-images.jianshu.io/upload_images/3340896-fe9ac1954177f7c3.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"远山.jpg\"></p>\n<p>到酒店后放下行囊,就带着相机,开始在城里到处溜达,首先当然去八廓街了…</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/3340896-902846f9f13c96f9.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"八廓街.jpg\"></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/3340896-4e2c1d6b30c6253f.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"色彩斑斓.jpg\"></p>\n<p>主街道的酒店还是蛮漂亮的,就在玛吉阿米茶馆前面,地理位置相当好,当然价格肯定也不菲喽.<br> 拉萨给我的印象就是,没人的地方,蓝天白云,绿水青山;有人的地方,花枝招展,色彩斑斓.</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/3340896-5f5e77f179446f5b.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"五彩经幡.jpg\"><br>藏族民居的楼顶一般都会挂上五彩经幡,随风摆动,煞是好看.这里我要科普一下,经幡之所以被称作经幡，是因为这些幡上面都印有佛经，在信奉藏传佛教的人们看来，随风而舞的经幡飘动一下，就是诵经一次，在不停地向神传达人的愿望，祈求神的庇佑。这样，经幡便成为连接神与人的纽带。风幡所在即意味着神灵所在，也意味着人们对神灵的祈求所在。风幡寄托着人们美好的愿望。</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/3340896-50563d1edccf5599.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"天堂时光.jpg\"><br>&lt;天堂时光旅行书店&gt; 听名字就感觉仙气满满, 这里也是我此行的目的地之一,简友 <a href=\"https://www.jianshu.com/u/54f4e7e9a502\">马儿你慢些走</a> 里面写在西藏支教的日子,就是通过书店的主人,潘老师介绍,来拉萨支教的,非常有趣的一个人,感兴趣的话可以看看她写的文章.</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/3340896-80402ee877d42cec.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"自信.jpg\"><br><img src=\"https://upload-images.jianshu.io/upload_images/3340896-b673fa7dfce8c0e9.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"佛语.jpg\"></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/3340896-5eabff6a2d72611c.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"掠影1.jpg\"><br>偷拍一下小姐姐,O(∩_∩)O哈哈~<br><img src=\"https://upload-images.jianshu.io/upload_images/3340896-99af155ecd8b1a54.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"掠影2.jpg\"></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/3340896-792f08459fa98f28.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"仓姑寺甜茶馆.jpg\"><br>仓姑寺甜茶馆就在八廓街里,由于不能再里面拍照,所以我就百度了一张,自己标明位置,自己点了一壶甜茶.我是不是灵魂画手呀! 😝</p>\n<p><a href=\"\">未完待续</a></p>\n","site":{"data":{"fluid_static_prefix":{"internal_js":"/js","internal_css":"/css","internal_img":"/img","iconfont":"//at.alicdn.com/t/font_1736178_kmeydafke9r.css","anchor":"https://cdn.staticfile.org/anchor-js/4.2.2/","github_markdown":"https://cdn.staticfile.org/github-markdown-css/4.0.0/","jquery":"https://cdn.staticfile.org/jquery/3.4.1/","bootstrap":"https://cdn.staticfile.org/twitter-bootstrap/4.4.1/","highlightjs":"https://cdn.staticfile.org/highlight.js/10.0.0/","prismjs":"https://cdn.staticfile.org/prism/1.21.0/","tocbot":"https://cdn.staticfile.org/tocbot/4.11.1/","typed":"https://cdn.staticfile.org/typed.js/2.0.11/","fancybox":"https://cdn.staticfile.org/fancybox/3.5.7/","mathjax":"https://cdn.staticfile.org/mathjax/3.0.5/es5/","katex":"https://cdn.staticfile.org/KaTeX/0.11.1/","aplayer":"https://cdn.staticfile.org/aplayer/1.10.1/","busuanzi":"https://busuanzi.ibruce.info/busuanzi/2.3/","clipboard":"https://cdn.staticfile.org/clipboard.js/2.0.6/","mermaid":"https://cdn.staticfile.org/mermaid/8.5.0/","valine":"https://cdn.staticfile.org/valine/1.4.14/","gitalk":"https://cdn.staticfile.org/gitalk/1.6.2/","blueimp_md5":"https://cdn.staticfile.org/blueimp-md5/2.13.0/","disqusjs":"https://cdn.jsdelivr.net/npm/disqusjs@1.0/dist/","hint":"/lib/hint/"},"fluid_config":{"favicon":"/img/favicon.png","apple_touch_icon":"/img/favicon.png","title_join_string":" - ","force_https":false,"code":{"copy_btn":true,"highlight":{"enable":true,"lib":"highlightjs","highlightjs":{"style":"Github Gist","bg_color":false},"prismjs":{"style":"default","preprocess":true}}},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"_","loop":false},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"right","visible":"hover","icon":""},"mouse_click":{"enable":false,"style":"values"}},"dark_mode":{"enable":true,"default":"auto"},"color":{"body_bg_color":"#eee","body_bg_color_dark":"#181c27","navbar_bg_color":"#2f4154","navbar_bg_color_dark":"#1f3144","navbar_text_color":"#fff","navbar_text_color_dark":"#d0d0d0","text_color":"#3c4858","text_color_dark":"#c4c6c9","sec_text_color":"#718096","sec_text_color_dark":"#a7a9ad","post_text_color":"#2c3e50","post_text_color_dark":"#c4c6c9","post_heading_color":"#1a202c","post_heading_color_dark":"#c4c6c9","post_link_color":"#0366d6","post_link_color_dark":"#1589e9","link_hover_color":"#30a9de","link_hover_color_dark":"#30a9de","link_hover_bg_color":"#f8f9fa","link_hover_bg_color_dark":"#364151","board_color":"#fff","board_color_dark":"#252d38"},"font":{"font_size":"16px","font_family":null,"code_font_size":"85%"},"custom_js":null,"custom_css":null,"custom_html":"","web_analytics":{"enable":false,"baidu":null,"google":null,"gtag":null,"tencent":{"sid":null,"cid":null},"woyaola":null,"cnzz":null,"leancloud":{"app_id":null,"app_key":null,"server_url":null}},"lazyload":{"enable":true,"onlypost":false},"daovoice":{"enable":false,"appid":""},"aplayer":{"enable":false,"autoplay":false,"loop":"all","order":"random","theme":"#b7daff","songs":[{"name":"name","artist":"artist","url":"/songs/test.mp3","cover":"/img/cover.jpg"},{"name":"name","artist":"artist","url":"https://...url.mp3","cover":"https://...cover.jpg"}]},"version":{"check":false},"navbar":{"blog_title":"吃面多放葱","ground_glass":{"enable":false,"px":3,"alpha":0.7},"menu":[{"key":"home","link":"/","icon":"iconfont icon-home-fill"},{"key":"category","link":"/categories/","icon":"iconfont icon-category-fill"},{"key":"tag","link":"/tags/","icon":"iconfont icon-tags-fill"},{"key":"about","link":"/about/","icon":"iconfont icon-user-fill"}]},"search":{"enable":true,"path":"/local-search.xml","generate_path":"/local-search.xml","field":"post","content":true},"scroll_down_arrow":{"enable":true,"banner_height_limit":90,"scroll_after_turning_page":true},"banner_parallax":true,"footer":{"statistics":{"enable":false,"source":"busuanzi","pv_format":"总访问量 {} 次","uv_format":"总访客数 {} 人"},"beian":{"enable":false,"icp_text":"京ICP证123456号","police_text":"京公网安备12345678号","police_code":12345678,"police_icon":"/img/police_beian.png"}},"scroll_top_arrow":{"enable":true},"index":{"banner_img":"/img/default.png","banner_img_height":100,"banner_mask_alpha":0.3,"post_default_img":"","slogan":{"enable":true,"text":"像蚂蚁一样工作，像蝴蝶一样生活"},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"category":true,"tag":true}},"page":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3},"post":{"banner_img":"/img/default.png","banner_img_height":70,"banner_mask_alpha":0.3,"meta":{"author":{"enable":false},"date":{"enable":true,"format":"LL a"},"wordcount":{"enable":true,"format":"{} 字"},"min2read":{"enable":true,"format":"{} 分钟","words":100},"views":{"enable":false,"source":"busuanzi","format":"{} 次"}},"updated":{"enable":false,"content":"本文最后更新于：","relative":false},"toc":{"enable":true,"headingSelector":"h1,h2,h3,h4,h5,h6","collapseDepth":0},"copyright":{"enable":true,"content":"本博客所有文章除特别声明外，均采用 <a href=\"https://creativecommons.org/licenses/by-sa/4.0/deed.zh\" rel=\"nofollow noopener\">CC BY-SA 4.0 协议</a> ，转载请注明出处！"},"prev_next":{"enable":true},"custom":{"enable":false,"content":"<img src=\"https://octodex.github.com/images/jetpacktocat.png\" class=\"rounded mx-auto d-block mt-5\" style=\"width:150px; height:150px;\">"},"image_zoom":{"enable":true},"footnote":{"enable":true,"header":""},"math":{"enable":false,"specific":false,"engine":"mathjax"},"mermaid":{"enable":false,"specific":false,"options":{"theme":"default"}},"comments":{"enable":false,"type":"disqus"}},"utterances":{"repo":null,"issue_term":"pathname","label":"utterances","theme":"github-light","theme_dark":"github-dark","crossorigin":"anonymous"},"disqus":{"shortname":null,"disqusjs":false,"apikey":null},"gitalk":{"clientID":null,"clientSecret":null,"repo":null,"owner":null,"admin":["name"],"id":"location.pathname","language":"zh-CN","labels":["Gitalk"],"perPage":10,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true},"valine":{"appid":null,"appkey":null,"placeholder":"说点什么","path":"window.location.pathname","avatar":"retro","meta":["nick","mail","link"],"pageSize":10,"lang":"zh-CN","highlight":false,"recordIP":false,"serverURLs":null},"changyan":{"appid":"","appkey":""},"livere":{"uid":""},"remark42":{"host":"https://remark.haoyizebo.com","site_id":"haoyizebo","max_shown_comments":10,"locale":"zh"},"archive":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null},"category":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"post_limit":10,"order_by":"-length","collapse_depth":0},"tag":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null,"tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"avatar":"/img/avatar.png","name":"蔺国防","introduce":"移动应用开发者，历史文学爱好者","icons":[{"class":"iconfont icon-github-fill","link":"https://github.com","tip":"GitHub"},{"class":"iconfont icon-douban-fill","link":"https://douban.com","tip":"豆瓣"},{"class":"iconfont icon-wechat-fill","qrcode":"/img/favicon.png"}]},"page404":{"banner_img":"/img/default.png","banner_img_height":85,"banner_mask_alpha":0.3,"subtitle":"Page not found"},"links":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"items":[{"title":"Fluid Docs","intro":"主题使用指南","link":"https://hexo.fluid-dev.com/docs/","image":"/img/favicon.png"},{"title":"Fluid Repo","intro":"主题 GitHub 仓库","link":"https://github.com/fluid-dev/hexo-theme-fluid","image":"/img/favicon.png"},{"title":"Fluid Example","intro":"主题操作示例","link":"https://hexo.fluid-dev.com/docs/example/","image":"/img/favicon.png"}]}}}},"excerpt":"","more":"<p>接下来的就是看图说话环节了,码字太累,何况自己文学素养不高,对付着看吧,O(∩_∩)O哈哈~<br><img src=\"https://upload-images.jianshu.io/upload_images/3340896-fb317d08ae873cf6.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"拉萨站.jpg\"><br>这张照片呢,是我从拉萨站走出来的时候拍的,当时很纳闷,为什么不让走正门广场而从边上一个简陋的小门出去呢?后来了解到好像是由于安保问题,具体什么的就不深究了.<br><img src=\"https://upload-images.jianshu.io/upload_images/3340896-11d88ab0e555d555.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"广场雕塑.jpg\"><br>拉萨站是在堆龙德庆区,到拉萨市里面还得打车,大约四十来分钟吧,咳咳…写这篇文章的时候,时间已经过了将近一年了,我就记得我当时是直接滴滴过去的.司机是东北人,来这里一年了,下车的时候留了手机号,如果去景区,他说可以载着我,价钱合适就ok.后来还真给这大哥打了电话,带着我们去了纳木错.<br><img src=\"https://upload-images.jianshu.io/upload_images/3340896-654c1b4f835cafda.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"拉萨站广场.jpg\"><br>这张照片是我下车后,过了大概两个小时后拍的.中间有一段小插曲,火车到拉萨的时候已经中午12点10分了,到吃饭点儿了,我呢? 一个人,不用担心,本来就是自由行,所以喜欢哪里就在哪里多待会儿.先解决午饭问题,<br>车站的路对过,就是各种饭馆,转到一家饭馆,进去点了一碗面,吃完后,就背着包出去接着逛. 没过多久,肚子就开始疼起来,幸亏我带着纸,于是屁颠屁颠地开始找厕所.<br>来到拉萨吃的第一顿饭,居然让我这样度过,至今难忘~~</p>\n<p>转了一会儿, 感觉没意思了,于是滴滴了一个司机,带着我向拉萨城里出发,下面这张是在等车的公交站牌前拍的,自我感觉还是比较良好的<del>O(∩_∩)O哈哈</del><br><img src=\"https://upload-images.jianshu.io/upload_images/3340896-fe9ac1954177f7c3.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"远山.jpg\"></p>\n<p>到酒店后放下行囊,就带着相机,开始在城里到处溜达,首先当然去八廓街了…</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/3340896-902846f9f13c96f9.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"八廓街.jpg\"></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/3340896-4e2c1d6b30c6253f.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"色彩斑斓.jpg\"></p>\n<p>主街道的酒店还是蛮漂亮的,就在玛吉阿米茶馆前面,地理位置相当好,当然价格肯定也不菲喽.<br> 拉萨给我的印象就是,没人的地方,蓝天白云,绿水青山;有人的地方,花枝招展,色彩斑斓.</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/3340896-5f5e77f179446f5b.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"五彩经幡.jpg\"><br>藏族民居的楼顶一般都会挂上五彩经幡,随风摆动,煞是好看.这里我要科普一下,经幡之所以被称作经幡，是因为这些幡上面都印有佛经，在信奉藏传佛教的人们看来，随风而舞的经幡飘动一下，就是诵经一次，在不停地向神传达人的愿望，祈求神的庇佑。这样，经幡便成为连接神与人的纽带。风幡所在即意味着神灵所在，也意味着人们对神灵的祈求所在。风幡寄托着人们美好的愿望。</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/3340896-50563d1edccf5599.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"天堂时光.jpg\"><br>&lt;天堂时光旅行书店&gt; 听名字就感觉仙气满满, 这里也是我此行的目的地之一,简友 <a href=\"https://www.jianshu.com/u/54f4e7e9a502\">马儿你慢些走</a> 里面写在西藏支教的日子,就是通过书店的主人,潘老师介绍,来拉萨支教的,非常有趣的一个人,感兴趣的话可以看看她写的文章.</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/3340896-80402ee877d42cec.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"自信.jpg\"><br><img src=\"https://upload-images.jianshu.io/upload_images/3340896-b673fa7dfce8c0e9.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"佛语.jpg\"></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/3340896-5eabff6a2d72611c.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"掠影1.jpg\"><br>偷拍一下小姐姐,O(∩_∩)O哈哈~<br><img src=\"https://upload-images.jianshu.io/upload_images/3340896-99af155ecd8b1a54.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"掠影2.jpg\"></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/3340896-792f08459fa98f28.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"仓姑寺甜茶馆.jpg\"><br>仓姑寺甜茶馆就在八廓街里,由于不能再里面拍照,所以我就百度了一张,自己标明位置,自己点了一壶甜茶.我是不是灵魂画手呀! 😝</p>\n<p><a href=\"\">未完待续</a></p>\n"},{"title":"天路旅途（一）","date":"2017-10-15T08:15:00.000Z","_content":"\n![水立方展览的藏族小姑娘油画](http://upload-images.jianshu.io/upload_images/3340896-60da4e7205a94044.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n说起去拉萨，可能跟这幅画有很大关系。有一次我从水立方游完泳，恰好碰到里面举办油画展览，反正也没啥事，于是便去里面逛逛。给我印象最深的就是这幅画，吸引我最深的就是这位藏族小姑娘的那双眼睛，深邃澄澈，给人无限遐想。这幅画唤醒了我对拉萨的兴趣，也为之后的拉萨之行做了一个铺垫。\n\n![第三极](http://upload-images.jianshu.io/upload_images/3340896-dbf120add38fbd39.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n西藏，一个神圣的地方，美丽壮观的雪域高原，一望无际的可可西里，阳光普照的拉萨城，壮丽雄浑的布达拉宫，这一切对于我来讲都充满了吸引力。我比较喜欢逛B站的记录片，有一次看到央视拍的记录片[《第三极》](https://www.bilibili.com/video/av8668069/?from=search&seid=2105442602118330865)，里面对西藏的景物，人文，历史，饮食，风俗等多方面做了详细的介绍，让我心驰神往。江西大学生况露单车骑行穿藏的纪录片[《行疆》](https://space.bilibili.com/19515012?from=search&seid=13205517380530848374#!/channel/detail?cid=8399)也让我佩服不已。这些记录片让我对西藏这个地方越来越感兴趣。\n\n上班闲暇之余，在逛简书的时候，无意间看到一篇文章[《在西藏支教的日子》](http://www.jianshu.com/u/54f4e7e9a502)，作者的个人简介是这样写的  **“对待工作和生活，不抛头颅，只洒热血。”**我感觉这个作者特有意思，于是便开始细读她的文章，里面主要以日记的形式来展现她在支教期间的生活点滴。作者是东北人，讲话幽默诙谐，却也不乏真情流露，读着读着便上道了，从此便一发不可收拾，找到了当年读连载小说的感觉。里面对藏族小学生活的描述让我充满兴趣。眼看还有一个月要过国庆节了，长假期间恰好可以去拉萨一趟，于是便开始了行前的准备。\n\n要说准备，其实也没有多上心，从淘宝上买了一袋葡萄糖粉，一袋红景天。入藏最担心的便是高原反应，网上查攻略说红景天可以预防高反，所以我就买了一袋。葡萄糖对高反有一定的缓解作用，主要还是偏预防。出发前的一个月，开始跑步，一方面锻炼自己的耐力，一方面减肥。网上说去拉萨前避免剧烈运动，我也没当回事，还是减肥要紧，要不驮着这一百六七十斤的体重也是一个累赘。因为出行是在国庆，恰好碰到出行的高峰期，而北京到拉萨的火车只有一趟Z21,出发前一个月我就蹲点12306，开始抢票，放票的当天上午8点，眼看着有七八十张卧铺就是无法下单成功。后来几天又陆陆续续抢了几次，一直没有抢票成功，索性就交给万能的淘宝吧，在出行的前一天，终于刷到了，我心里那个激动啊，还以为这趟旅行要泡汤了呢。回到宿舍就赶紧收拾东西。第二天准备出发，坐着火车去拉萨...\n\n[天路旅途 (二)](https://www.jianshu.com/p/7ae5ac073849)\n","source":"_posts/随笔/天路旅途（一）.md","raw":"---\ntitle:  天路旅途（一）\ndate:  2017-10-15 16:15\ncategories:\n- 随笔\ntags: \n- 旅游\n---\n\n![水立方展览的藏族小姑娘油画](http://upload-images.jianshu.io/upload_images/3340896-60da4e7205a94044.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n说起去拉萨，可能跟这幅画有很大关系。有一次我从水立方游完泳，恰好碰到里面举办油画展览，反正也没啥事，于是便去里面逛逛。给我印象最深的就是这幅画，吸引我最深的就是这位藏族小姑娘的那双眼睛，深邃澄澈，给人无限遐想。这幅画唤醒了我对拉萨的兴趣，也为之后的拉萨之行做了一个铺垫。\n\n![第三极](http://upload-images.jianshu.io/upload_images/3340896-dbf120add38fbd39.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n西藏，一个神圣的地方，美丽壮观的雪域高原，一望无际的可可西里，阳光普照的拉萨城，壮丽雄浑的布达拉宫，这一切对于我来讲都充满了吸引力。我比较喜欢逛B站的记录片，有一次看到央视拍的记录片[《第三极》](https://www.bilibili.com/video/av8668069/?from=search&seid=2105442602118330865)，里面对西藏的景物，人文，历史，饮食，风俗等多方面做了详细的介绍，让我心驰神往。江西大学生况露单车骑行穿藏的纪录片[《行疆》](https://space.bilibili.com/19515012?from=search&seid=13205517380530848374#!/channel/detail?cid=8399)也让我佩服不已。这些记录片让我对西藏这个地方越来越感兴趣。\n\n上班闲暇之余，在逛简书的时候，无意间看到一篇文章[《在西藏支教的日子》](http://www.jianshu.com/u/54f4e7e9a502)，作者的个人简介是这样写的  **“对待工作和生活，不抛头颅，只洒热血。”**我感觉这个作者特有意思，于是便开始细读她的文章，里面主要以日记的形式来展现她在支教期间的生活点滴。作者是东北人，讲话幽默诙谐，却也不乏真情流露，读着读着便上道了，从此便一发不可收拾，找到了当年读连载小说的感觉。里面对藏族小学生活的描述让我充满兴趣。眼看还有一个月要过国庆节了，长假期间恰好可以去拉萨一趟，于是便开始了行前的准备。\n\n要说准备，其实也没有多上心，从淘宝上买了一袋葡萄糖粉，一袋红景天。入藏最担心的便是高原反应，网上查攻略说红景天可以预防高反，所以我就买了一袋。葡萄糖对高反有一定的缓解作用，主要还是偏预防。出发前的一个月，开始跑步，一方面锻炼自己的耐力，一方面减肥。网上说去拉萨前避免剧烈运动，我也没当回事，还是减肥要紧，要不驮着这一百六七十斤的体重也是一个累赘。因为出行是在国庆，恰好碰到出行的高峰期，而北京到拉萨的火车只有一趟Z21,出发前一个月我就蹲点12306，开始抢票，放票的当天上午8点，眼看着有七八十张卧铺就是无法下单成功。后来几天又陆陆续续抢了几次，一直没有抢票成功，索性就交给万能的淘宝吧，在出行的前一天，终于刷到了，我心里那个激动啊，还以为这趟旅行要泡汤了呢。回到宿舍就赶紧收拾东西。第二天准备出发，坐着火车去拉萨...\n\n[天路旅途 (二)](https://www.jianshu.com/p/7ae5ac073849)\n","slug":"随笔/天路旅途（一）","published":1,"updated":"2020-09-27T10:44:30.388Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgq6gnxv0048t29k5gnfgn48","content":"<p><img src=\"http://upload-images.jianshu.io/upload_images/3340896-60da4e7205a94044.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"水立方展览的藏族小姑娘油画\"></p>\n<p>说起去拉萨，可能跟这幅画有很大关系。有一次我从水立方游完泳，恰好碰到里面举办油画展览，反正也没啥事，于是便去里面逛逛。给我印象最深的就是这幅画，吸引我最深的就是这位藏族小姑娘的那双眼睛，深邃澄澈，给人无限遐想。这幅画唤醒了我对拉萨的兴趣，也为之后的拉萨之行做了一个铺垫。</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/3340896-dbf120add38fbd39.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"第三极\"></p>\n<p>西藏，一个神圣的地方，美丽壮观的雪域高原，一望无际的可可西里，阳光普照的拉萨城，壮丽雄浑的布达拉宫，这一切对于我来讲都充满了吸引力。我比较喜欢逛B站的记录片，有一次看到央视拍的记录片<a href=\"https://www.bilibili.com/video/av8668069/?from=search&seid=2105442602118330865\">《第三极》</a>，里面对西藏的景物，人文，历史，饮食，风俗等多方面做了详细的介绍，让我心驰神往。江西大学生况露单车骑行穿藏的纪录片<a href=\"https://space.bilibili.com/19515012?from=search&seid=13205517380530848374#!/channel/detail?cid=8399\">《行疆》</a>也让我佩服不已。这些记录片让我对西藏这个地方越来越感兴趣。</p>\n<p>上班闲暇之余，在逛简书的时候，无意间看到一篇文章<a href=\"http://www.jianshu.com/u/54f4e7e9a502\">《在西藏支教的日子》</a>，作者的个人简介是这样写的  <strong>“对待工作和生活，不抛头颅，只洒热血。”</strong>我感觉这个作者特有意思，于是便开始细读她的文章，里面主要以日记的形式来展现她在支教期间的生活点滴。作者是东北人，讲话幽默诙谐，却也不乏真情流露，读着读着便上道了，从此便一发不可收拾，找到了当年读连载小说的感觉。里面对藏族小学生活的描述让我充满兴趣。眼看还有一个月要过国庆节了，长假期间恰好可以去拉萨一趟，于是便开始了行前的准备。</p>\n<p>要说准备，其实也没有多上心，从淘宝上买了一袋葡萄糖粉，一袋红景天。入藏最担心的便是高原反应，网上查攻略说红景天可以预防高反，所以我就买了一袋。葡萄糖对高反有一定的缓解作用，主要还是偏预防。出发前的一个月，开始跑步，一方面锻炼自己的耐力，一方面减肥。网上说去拉萨前避免剧烈运动，我也没当回事，还是减肥要紧，要不驮着这一百六七十斤的体重也是一个累赘。因为出行是在国庆，恰好碰到出行的高峰期，而北京到拉萨的火车只有一趟Z21,出发前一个月我就蹲点12306，开始抢票，放票的当天上午8点，眼看着有七八十张卧铺就是无法下单成功。后来几天又陆陆续续抢了几次，一直没有抢票成功，索性就交给万能的淘宝吧，在出行的前一天，终于刷到了，我心里那个激动啊，还以为这趟旅行要泡汤了呢。回到宿舍就赶紧收拾东西。第二天准备出发，坐着火车去拉萨…</p>\n<p><a href=\"https://www.jianshu.com/p/7ae5ac073849\">天路旅途 (二)</a></p>\n","site":{"data":{"fluid_static_prefix":{"internal_js":"/js","internal_css":"/css","internal_img":"/img","iconfont":"//at.alicdn.com/t/font_1736178_kmeydafke9r.css","anchor":"https://cdn.staticfile.org/anchor-js/4.2.2/","github_markdown":"https://cdn.staticfile.org/github-markdown-css/4.0.0/","jquery":"https://cdn.staticfile.org/jquery/3.4.1/","bootstrap":"https://cdn.staticfile.org/twitter-bootstrap/4.4.1/","highlightjs":"https://cdn.staticfile.org/highlight.js/10.0.0/","prismjs":"https://cdn.staticfile.org/prism/1.21.0/","tocbot":"https://cdn.staticfile.org/tocbot/4.11.1/","typed":"https://cdn.staticfile.org/typed.js/2.0.11/","fancybox":"https://cdn.staticfile.org/fancybox/3.5.7/","mathjax":"https://cdn.staticfile.org/mathjax/3.0.5/es5/","katex":"https://cdn.staticfile.org/KaTeX/0.11.1/","aplayer":"https://cdn.staticfile.org/aplayer/1.10.1/","busuanzi":"https://busuanzi.ibruce.info/busuanzi/2.3/","clipboard":"https://cdn.staticfile.org/clipboard.js/2.0.6/","mermaid":"https://cdn.staticfile.org/mermaid/8.5.0/","valine":"https://cdn.staticfile.org/valine/1.4.14/","gitalk":"https://cdn.staticfile.org/gitalk/1.6.2/","blueimp_md5":"https://cdn.staticfile.org/blueimp-md5/2.13.0/","disqusjs":"https://cdn.jsdelivr.net/npm/disqusjs@1.0/dist/","hint":"/lib/hint/"},"fluid_config":{"favicon":"/img/favicon.png","apple_touch_icon":"/img/favicon.png","title_join_string":" - ","force_https":false,"code":{"copy_btn":true,"highlight":{"enable":true,"lib":"highlightjs","highlightjs":{"style":"Github Gist","bg_color":false},"prismjs":{"style":"default","preprocess":true}}},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"_","loop":false},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"right","visible":"hover","icon":""},"mouse_click":{"enable":false,"style":"values"}},"dark_mode":{"enable":true,"default":"auto"},"color":{"body_bg_color":"#eee","body_bg_color_dark":"#181c27","navbar_bg_color":"#2f4154","navbar_bg_color_dark":"#1f3144","navbar_text_color":"#fff","navbar_text_color_dark":"#d0d0d0","text_color":"#3c4858","text_color_dark":"#c4c6c9","sec_text_color":"#718096","sec_text_color_dark":"#a7a9ad","post_text_color":"#2c3e50","post_text_color_dark":"#c4c6c9","post_heading_color":"#1a202c","post_heading_color_dark":"#c4c6c9","post_link_color":"#0366d6","post_link_color_dark":"#1589e9","link_hover_color":"#30a9de","link_hover_color_dark":"#30a9de","link_hover_bg_color":"#f8f9fa","link_hover_bg_color_dark":"#364151","board_color":"#fff","board_color_dark":"#252d38"},"font":{"font_size":"16px","font_family":null,"code_font_size":"85%"},"custom_js":null,"custom_css":null,"custom_html":"","web_analytics":{"enable":false,"baidu":null,"google":null,"gtag":null,"tencent":{"sid":null,"cid":null},"woyaola":null,"cnzz":null,"leancloud":{"app_id":null,"app_key":null,"server_url":null}},"lazyload":{"enable":true,"onlypost":false},"daovoice":{"enable":false,"appid":""},"aplayer":{"enable":false,"autoplay":false,"loop":"all","order":"random","theme":"#b7daff","songs":[{"name":"name","artist":"artist","url":"/songs/test.mp3","cover":"/img/cover.jpg"},{"name":"name","artist":"artist","url":"https://...url.mp3","cover":"https://...cover.jpg"}]},"version":{"check":false},"navbar":{"blog_title":"吃面多放葱","ground_glass":{"enable":false,"px":3,"alpha":0.7},"menu":[{"key":"home","link":"/","icon":"iconfont icon-home-fill"},{"key":"category","link":"/categories/","icon":"iconfont icon-category-fill"},{"key":"tag","link":"/tags/","icon":"iconfont icon-tags-fill"},{"key":"about","link":"/about/","icon":"iconfont icon-user-fill"}]},"search":{"enable":true,"path":"/local-search.xml","generate_path":"/local-search.xml","field":"post","content":true},"scroll_down_arrow":{"enable":true,"banner_height_limit":90,"scroll_after_turning_page":true},"banner_parallax":true,"footer":{"statistics":{"enable":false,"source":"busuanzi","pv_format":"总访问量 {} 次","uv_format":"总访客数 {} 人"},"beian":{"enable":false,"icp_text":"京ICP证123456号","police_text":"京公网安备12345678号","police_code":12345678,"police_icon":"/img/police_beian.png"}},"scroll_top_arrow":{"enable":true},"index":{"banner_img":"/img/default.png","banner_img_height":100,"banner_mask_alpha":0.3,"post_default_img":"","slogan":{"enable":true,"text":"像蚂蚁一样工作，像蝴蝶一样生活"},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"category":true,"tag":true}},"page":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3},"post":{"banner_img":"/img/default.png","banner_img_height":70,"banner_mask_alpha":0.3,"meta":{"author":{"enable":false},"date":{"enable":true,"format":"LL a"},"wordcount":{"enable":true,"format":"{} 字"},"min2read":{"enable":true,"format":"{} 分钟","words":100},"views":{"enable":false,"source":"busuanzi","format":"{} 次"}},"updated":{"enable":false,"content":"本文最后更新于：","relative":false},"toc":{"enable":true,"headingSelector":"h1,h2,h3,h4,h5,h6","collapseDepth":0},"copyright":{"enable":true,"content":"本博客所有文章除特别声明外，均采用 <a href=\"https://creativecommons.org/licenses/by-sa/4.0/deed.zh\" rel=\"nofollow noopener\">CC BY-SA 4.0 协议</a> ，转载请注明出处！"},"prev_next":{"enable":true},"custom":{"enable":false,"content":"<img src=\"https://octodex.github.com/images/jetpacktocat.png\" class=\"rounded mx-auto d-block mt-5\" style=\"width:150px; height:150px;\">"},"image_zoom":{"enable":true},"footnote":{"enable":true,"header":""},"math":{"enable":false,"specific":false,"engine":"mathjax"},"mermaid":{"enable":false,"specific":false,"options":{"theme":"default"}},"comments":{"enable":false,"type":"disqus"}},"utterances":{"repo":null,"issue_term":"pathname","label":"utterances","theme":"github-light","theme_dark":"github-dark","crossorigin":"anonymous"},"disqus":{"shortname":null,"disqusjs":false,"apikey":null},"gitalk":{"clientID":null,"clientSecret":null,"repo":null,"owner":null,"admin":["name"],"id":"location.pathname","language":"zh-CN","labels":["Gitalk"],"perPage":10,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true},"valine":{"appid":null,"appkey":null,"placeholder":"说点什么","path":"window.location.pathname","avatar":"retro","meta":["nick","mail","link"],"pageSize":10,"lang":"zh-CN","highlight":false,"recordIP":false,"serverURLs":null},"changyan":{"appid":"","appkey":""},"livere":{"uid":""},"remark42":{"host":"https://remark.haoyizebo.com","site_id":"haoyizebo","max_shown_comments":10,"locale":"zh"},"archive":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null},"category":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"post_limit":10,"order_by":"-length","collapse_depth":0},"tag":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null,"tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"avatar":"/img/avatar.png","name":"蔺国防","introduce":"移动应用开发者，历史文学爱好者","icons":[{"class":"iconfont icon-github-fill","link":"https://github.com","tip":"GitHub"},{"class":"iconfont icon-douban-fill","link":"https://douban.com","tip":"豆瓣"},{"class":"iconfont icon-wechat-fill","qrcode":"/img/favicon.png"}]},"page404":{"banner_img":"/img/default.png","banner_img_height":85,"banner_mask_alpha":0.3,"subtitle":"Page not found"},"links":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"items":[{"title":"Fluid Docs","intro":"主题使用指南","link":"https://hexo.fluid-dev.com/docs/","image":"/img/favicon.png"},{"title":"Fluid Repo","intro":"主题 GitHub 仓库","link":"https://github.com/fluid-dev/hexo-theme-fluid","image":"/img/favicon.png"},{"title":"Fluid Example","intro":"主题操作示例","link":"https://hexo.fluid-dev.com/docs/example/","image":"/img/favicon.png"}]}}}},"excerpt":"","more":"<p><img src=\"http://upload-images.jianshu.io/upload_images/3340896-60da4e7205a94044.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"水立方展览的藏族小姑娘油画\"></p>\n<p>说起去拉萨，可能跟这幅画有很大关系。有一次我从水立方游完泳，恰好碰到里面举办油画展览，反正也没啥事，于是便去里面逛逛。给我印象最深的就是这幅画，吸引我最深的就是这位藏族小姑娘的那双眼睛，深邃澄澈，给人无限遐想。这幅画唤醒了我对拉萨的兴趣，也为之后的拉萨之行做了一个铺垫。</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/3340896-dbf120add38fbd39.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"第三极\"></p>\n<p>西藏，一个神圣的地方，美丽壮观的雪域高原，一望无际的可可西里，阳光普照的拉萨城，壮丽雄浑的布达拉宫，这一切对于我来讲都充满了吸引力。我比较喜欢逛B站的记录片，有一次看到央视拍的记录片<a href=\"https://www.bilibili.com/video/av8668069/?from=search&seid=2105442602118330865\">《第三极》</a>，里面对西藏的景物，人文，历史，饮食，风俗等多方面做了详细的介绍，让我心驰神往。江西大学生况露单车骑行穿藏的纪录片<a href=\"https://space.bilibili.com/19515012?from=search&seid=13205517380530848374#!/channel/detail?cid=8399\">《行疆》</a>也让我佩服不已。这些记录片让我对西藏这个地方越来越感兴趣。</p>\n<p>上班闲暇之余，在逛简书的时候，无意间看到一篇文章<a href=\"http://www.jianshu.com/u/54f4e7e9a502\">《在西藏支教的日子》</a>，作者的个人简介是这样写的  <strong>“对待工作和生活，不抛头颅，只洒热血。”</strong>我感觉这个作者特有意思，于是便开始细读她的文章，里面主要以日记的形式来展现她在支教期间的生活点滴。作者是东北人，讲话幽默诙谐，却也不乏真情流露，读着读着便上道了，从此便一发不可收拾，找到了当年读连载小说的感觉。里面对藏族小学生活的描述让我充满兴趣。眼看还有一个月要过国庆节了，长假期间恰好可以去拉萨一趟，于是便开始了行前的准备。</p>\n<p>要说准备，其实也没有多上心，从淘宝上买了一袋葡萄糖粉，一袋红景天。入藏最担心的便是高原反应，网上查攻略说红景天可以预防高反，所以我就买了一袋。葡萄糖对高反有一定的缓解作用，主要还是偏预防。出发前的一个月，开始跑步，一方面锻炼自己的耐力，一方面减肥。网上说去拉萨前避免剧烈运动，我也没当回事，还是减肥要紧，要不驮着这一百六七十斤的体重也是一个累赘。因为出行是在国庆，恰好碰到出行的高峰期，而北京到拉萨的火车只有一趟Z21,出发前一个月我就蹲点12306，开始抢票，放票的当天上午8点，眼看着有七八十张卧铺就是无法下单成功。后来几天又陆陆续续抢了几次，一直没有抢票成功，索性就交给万能的淘宝吧，在出行的前一天，终于刷到了，我心里那个激动啊，还以为这趟旅行要泡汤了呢。回到宿舍就赶紧收拾东西。第二天准备出发，坐着火车去拉萨…</p>\n<p><a href=\"https://www.jianshu.com/p/7ae5ac073849\">天路旅途 (二)</a></p>\n"},{"title":"天路旅途（三）","date":"2018-02-11T09:50:00.000Z","_content":"\n旅行路上睡觉质量一般都不太好，晚上醒来好几次，感觉有点喘不过气，但是困意毕竟挡不住，还是昏昏沉沉睡到了天亮。6点多的时候，我起床,简单洗漱了一下，便开始欣赏晨曦中的高原。\n\n6点钟的时刻,车厢里大部分人还停留在睡梦中,偶尔传过来几声鼾响。望向窗外,阳光穿过云层,将沉睡了一晚的大地唤醒。拉货的卡车也三三两两地留迹于视野。崭新美好的一天,开始了!\n![阳光穿透云层](http://upload-images.jianshu.io/upload_images/3340896-bb07572951c66f15.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n旅途上,你要问我什么最美? 我会毫不犹豫地回答:\"高原上的云！\"清晨从火车窗外望去，漂亮的鳞状云齐整整地排满半边天，仿佛一群绵羊，悠闲地漫步在这湛蓝的天空上。这群绵羊脚下的大地，也在它们的踩踏声中逐渐苏醒。\n![漂亮的鳞状云](http://upload-images.jianshu.io/upload_images/3340896-1ef43feb6295f554.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n有羊的地方，必然水草丰美。高原独特的地理环境，特别适合草甸生长，加上来自雪山的融水，给草甸提供充足的养分，于是便形成了这一望无际的水草肥美之地。\n ![蓝天与草甸交相辉映](http://upload-images.jianshu.io/upload_images/3340896-e5cc0d011bf08529.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n当思想还徜徉在蓝天碧草之时，列车已进入堆龙德庆段，地势陡然变化，由刚才的一望无际，到眼前的重山叠峦。远处的山峰被云雾环绕，近处的河流在山谷间流淌。雪山上的融水，形成无数小小的支流，绕过山谷间冲击形成的平地，绕过平地上生长的阔叶林，汇聚成一条小河，沿着山谷，奔向远方...\n\n![列车进入堆龙德庆](http://upload-images.jianshu.io/upload_images/3340896-9eeb941c2bf628ef.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n列车行至堆龙德庆，也意味着漫长的车厢旅途即将结束。快到拉萨站的时候，列车从奔腾的拉萨河上跨过，在白云和群山之下，眺望远处的布达拉宫，我在心中激动地呐喊——“拉萨，我来啦...”\n![列车上远眺布达拉](http://upload-images.jianshu.io/upload_images/3340896-0d06f79a099fcb92.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n[天路旅途 (四)](https://www.jianshu.com/p/bc5b71a337f5)\n","source":"_posts/随笔/天路旅途（三）.md","raw":"---\ntitle:  天路旅途（三）\ndate:  2018-02-11 17:50\ncategories:\n- 随笔\ntags: \n- 旅游\n---\n\n旅行路上睡觉质量一般都不太好，晚上醒来好几次，感觉有点喘不过气，但是困意毕竟挡不住，还是昏昏沉沉睡到了天亮。6点多的时候，我起床,简单洗漱了一下，便开始欣赏晨曦中的高原。\n\n6点钟的时刻,车厢里大部分人还停留在睡梦中,偶尔传过来几声鼾响。望向窗外,阳光穿过云层,将沉睡了一晚的大地唤醒。拉货的卡车也三三两两地留迹于视野。崭新美好的一天,开始了!\n![阳光穿透云层](http://upload-images.jianshu.io/upload_images/3340896-bb07572951c66f15.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n旅途上,你要问我什么最美? 我会毫不犹豫地回答:\"高原上的云！\"清晨从火车窗外望去，漂亮的鳞状云齐整整地排满半边天，仿佛一群绵羊，悠闲地漫步在这湛蓝的天空上。这群绵羊脚下的大地，也在它们的踩踏声中逐渐苏醒。\n![漂亮的鳞状云](http://upload-images.jianshu.io/upload_images/3340896-1ef43feb6295f554.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n有羊的地方，必然水草丰美。高原独特的地理环境，特别适合草甸生长，加上来自雪山的融水，给草甸提供充足的养分，于是便形成了这一望无际的水草肥美之地。\n ![蓝天与草甸交相辉映](http://upload-images.jianshu.io/upload_images/3340896-e5cc0d011bf08529.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n当思想还徜徉在蓝天碧草之时，列车已进入堆龙德庆段，地势陡然变化，由刚才的一望无际，到眼前的重山叠峦。远处的山峰被云雾环绕，近处的河流在山谷间流淌。雪山上的融水，形成无数小小的支流，绕过山谷间冲击形成的平地，绕过平地上生长的阔叶林，汇聚成一条小河，沿着山谷，奔向远方...\n\n![列车进入堆龙德庆](http://upload-images.jianshu.io/upload_images/3340896-9eeb941c2bf628ef.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n列车行至堆龙德庆，也意味着漫长的车厢旅途即将结束。快到拉萨站的时候，列车从奔腾的拉萨河上跨过，在白云和群山之下，眺望远处的布达拉宫，我在心中激动地呐喊——“拉萨，我来啦...”\n![列车上远眺布达拉](http://upload-images.jianshu.io/upload_images/3340896-0d06f79a099fcb92.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n[天路旅途 (四)](https://www.jianshu.com/p/bc5b71a337f5)\n","slug":"随笔/天路旅途（三）","published":1,"updated":"2020-09-27T10:40:50.435Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgq6gnxw004ct29k0058eh3v","content":"<p>旅行路上睡觉质量一般都不太好，晚上醒来好几次，感觉有点喘不过气，但是困意毕竟挡不住，还是昏昏沉沉睡到了天亮。6点多的时候，我起床,简单洗漱了一下，便开始欣赏晨曦中的高原。</p>\n<p>6点钟的时刻,车厢里大部分人还停留在睡梦中,偶尔传过来几声鼾响。望向窗外,阳光穿过云层,将沉睡了一晚的大地唤醒。拉货的卡车也三三两两地留迹于视野。崭新美好的一天,开始了!<br><img src=\"http://upload-images.jianshu.io/upload_images/3340896-bb07572951c66f15.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"阳光穿透云层\"><br>旅途上,你要问我什么最美? 我会毫不犹豫地回答:”高原上的云！”清晨从火车窗外望去，漂亮的鳞状云齐整整地排满半边天，仿佛一群绵羊，悠闲地漫步在这湛蓝的天空上。这群绵羊脚下的大地，也在它们的踩踏声中逐渐苏醒。<br><img src=\"http://upload-images.jianshu.io/upload_images/3340896-1ef43feb6295f554.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"漂亮的鳞状云\"><br>有羊的地方，必然水草丰美。高原独特的地理环境，特别适合草甸生长，加上来自雪山的融水，给草甸提供充足的养分，于是便形成了这一望无际的水草肥美之地。<br> <img src=\"http://upload-images.jianshu.io/upload_images/3340896-e5cc0d011bf08529.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"蓝天与草甸交相辉映\"><br>当思想还徜徉在蓝天碧草之时，列车已进入堆龙德庆段，地势陡然变化，由刚才的一望无际，到眼前的重山叠峦。远处的山峰被云雾环绕，近处的河流在山谷间流淌。雪山上的融水，形成无数小小的支流，绕过山谷间冲击形成的平地，绕过平地上生长的阔叶林，汇聚成一条小河，沿着山谷，奔向远方…</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/3340896-9eeb941c2bf628ef.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"列车进入堆龙德庆\"><br>列车行至堆龙德庆，也意味着漫长的车厢旅途即将结束。快到拉萨站的时候，列车从奔腾的拉萨河上跨过，在白云和群山之下，眺望远处的布达拉宫，我在心中激动地呐喊——“拉萨，我来啦…”<br><img src=\"http://upload-images.jianshu.io/upload_images/3340896-0d06f79a099fcb92.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"列车上远眺布达拉\"></p>\n<p><a href=\"https://www.jianshu.com/p/bc5b71a337f5\">天路旅途 (四)</a></p>\n","site":{"data":{"fluid_static_prefix":{"internal_js":"/js","internal_css":"/css","internal_img":"/img","iconfont":"//at.alicdn.com/t/font_1736178_kmeydafke9r.css","anchor":"https://cdn.staticfile.org/anchor-js/4.2.2/","github_markdown":"https://cdn.staticfile.org/github-markdown-css/4.0.0/","jquery":"https://cdn.staticfile.org/jquery/3.4.1/","bootstrap":"https://cdn.staticfile.org/twitter-bootstrap/4.4.1/","highlightjs":"https://cdn.staticfile.org/highlight.js/10.0.0/","prismjs":"https://cdn.staticfile.org/prism/1.21.0/","tocbot":"https://cdn.staticfile.org/tocbot/4.11.1/","typed":"https://cdn.staticfile.org/typed.js/2.0.11/","fancybox":"https://cdn.staticfile.org/fancybox/3.5.7/","mathjax":"https://cdn.staticfile.org/mathjax/3.0.5/es5/","katex":"https://cdn.staticfile.org/KaTeX/0.11.1/","aplayer":"https://cdn.staticfile.org/aplayer/1.10.1/","busuanzi":"https://busuanzi.ibruce.info/busuanzi/2.3/","clipboard":"https://cdn.staticfile.org/clipboard.js/2.0.6/","mermaid":"https://cdn.staticfile.org/mermaid/8.5.0/","valine":"https://cdn.staticfile.org/valine/1.4.14/","gitalk":"https://cdn.staticfile.org/gitalk/1.6.2/","blueimp_md5":"https://cdn.staticfile.org/blueimp-md5/2.13.0/","disqusjs":"https://cdn.jsdelivr.net/npm/disqusjs@1.0/dist/","hint":"/lib/hint/"},"fluid_config":{"favicon":"/img/favicon.png","apple_touch_icon":"/img/favicon.png","title_join_string":" - ","force_https":false,"code":{"copy_btn":true,"highlight":{"enable":true,"lib":"highlightjs","highlightjs":{"style":"Github Gist","bg_color":false},"prismjs":{"style":"default","preprocess":true}}},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"_","loop":false},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"right","visible":"hover","icon":""},"mouse_click":{"enable":false,"style":"values"}},"dark_mode":{"enable":true,"default":"auto"},"color":{"body_bg_color":"#eee","body_bg_color_dark":"#181c27","navbar_bg_color":"#2f4154","navbar_bg_color_dark":"#1f3144","navbar_text_color":"#fff","navbar_text_color_dark":"#d0d0d0","text_color":"#3c4858","text_color_dark":"#c4c6c9","sec_text_color":"#718096","sec_text_color_dark":"#a7a9ad","post_text_color":"#2c3e50","post_text_color_dark":"#c4c6c9","post_heading_color":"#1a202c","post_heading_color_dark":"#c4c6c9","post_link_color":"#0366d6","post_link_color_dark":"#1589e9","link_hover_color":"#30a9de","link_hover_color_dark":"#30a9de","link_hover_bg_color":"#f8f9fa","link_hover_bg_color_dark":"#364151","board_color":"#fff","board_color_dark":"#252d38"},"font":{"font_size":"16px","font_family":null,"code_font_size":"85%"},"custom_js":null,"custom_css":null,"custom_html":"","web_analytics":{"enable":false,"baidu":null,"google":null,"gtag":null,"tencent":{"sid":null,"cid":null},"woyaola":null,"cnzz":null,"leancloud":{"app_id":null,"app_key":null,"server_url":null}},"lazyload":{"enable":true,"onlypost":false},"daovoice":{"enable":false,"appid":""},"aplayer":{"enable":false,"autoplay":false,"loop":"all","order":"random","theme":"#b7daff","songs":[{"name":"name","artist":"artist","url":"/songs/test.mp3","cover":"/img/cover.jpg"},{"name":"name","artist":"artist","url":"https://...url.mp3","cover":"https://...cover.jpg"}]},"version":{"check":false},"navbar":{"blog_title":"吃面多放葱","ground_glass":{"enable":false,"px":3,"alpha":0.7},"menu":[{"key":"home","link":"/","icon":"iconfont icon-home-fill"},{"key":"category","link":"/categories/","icon":"iconfont icon-category-fill"},{"key":"tag","link":"/tags/","icon":"iconfont icon-tags-fill"},{"key":"about","link":"/about/","icon":"iconfont icon-user-fill"}]},"search":{"enable":true,"path":"/local-search.xml","generate_path":"/local-search.xml","field":"post","content":true},"scroll_down_arrow":{"enable":true,"banner_height_limit":90,"scroll_after_turning_page":true},"banner_parallax":true,"footer":{"statistics":{"enable":false,"source":"busuanzi","pv_format":"总访问量 {} 次","uv_format":"总访客数 {} 人"},"beian":{"enable":false,"icp_text":"京ICP证123456号","police_text":"京公网安备12345678号","police_code":12345678,"police_icon":"/img/police_beian.png"}},"scroll_top_arrow":{"enable":true},"index":{"banner_img":"/img/default.png","banner_img_height":100,"banner_mask_alpha":0.3,"post_default_img":"","slogan":{"enable":true,"text":"像蚂蚁一样工作，像蝴蝶一样生活"},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"category":true,"tag":true}},"page":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3},"post":{"banner_img":"/img/default.png","banner_img_height":70,"banner_mask_alpha":0.3,"meta":{"author":{"enable":false},"date":{"enable":true,"format":"LL a"},"wordcount":{"enable":true,"format":"{} 字"},"min2read":{"enable":true,"format":"{} 分钟","words":100},"views":{"enable":false,"source":"busuanzi","format":"{} 次"}},"updated":{"enable":false,"content":"本文最后更新于：","relative":false},"toc":{"enable":true,"headingSelector":"h1,h2,h3,h4,h5,h6","collapseDepth":0},"copyright":{"enable":true,"content":"本博客所有文章除特别声明外，均采用 <a href=\"https://creativecommons.org/licenses/by-sa/4.0/deed.zh\" rel=\"nofollow noopener\">CC BY-SA 4.0 协议</a> ，转载请注明出处！"},"prev_next":{"enable":true},"custom":{"enable":false,"content":"<img src=\"https://octodex.github.com/images/jetpacktocat.png\" class=\"rounded mx-auto d-block mt-5\" style=\"width:150px; height:150px;\">"},"image_zoom":{"enable":true},"footnote":{"enable":true,"header":""},"math":{"enable":false,"specific":false,"engine":"mathjax"},"mermaid":{"enable":false,"specific":false,"options":{"theme":"default"}},"comments":{"enable":false,"type":"disqus"}},"utterances":{"repo":null,"issue_term":"pathname","label":"utterances","theme":"github-light","theme_dark":"github-dark","crossorigin":"anonymous"},"disqus":{"shortname":null,"disqusjs":false,"apikey":null},"gitalk":{"clientID":null,"clientSecret":null,"repo":null,"owner":null,"admin":["name"],"id":"location.pathname","language":"zh-CN","labels":["Gitalk"],"perPage":10,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true},"valine":{"appid":null,"appkey":null,"placeholder":"说点什么","path":"window.location.pathname","avatar":"retro","meta":["nick","mail","link"],"pageSize":10,"lang":"zh-CN","highlight":false,"recordIP":false,"serverURLs":null},"changyan":{"appid":"","appkey":""},"livere":{"uid":""},"remark42":{"host":"https://remark.haoyizebo.com","site_id":"haoyizebo","max_shown_comments":10,"locale":"zh"},"archive":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null},"category":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"post_limit":10,"order_by":"-length","collapse_depth":0},"tag":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null,"tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"avatar":"/img/avatar.png","name":"蔺国防","introduce":"移动应用开发者，历史文学爱好者","icons":[{"class":"iconfont icon-github-fill","link":"https://github.com","tip":"GitHub"},{"class":"iconfont icon-douban-fill","link":"https://douban.com","tip":"豆瓣"},{"class":"iconfont icon-wechat-fill","qrcode":"/img/favicon.png"}]},"page404":{"banner_img":"/img/default.png","banner_img_height":85,"banner_mask_alpha":0.3,"subtitle":"Page not found"},"links":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"items":[{"title":"Fluid Docs","intro":"主题使用指南","link":"https://hexo.fluid-dev.com/docs/","image":"/img/favicon.png"},{"title":"Fluid Repo","intro":"主题 GitHub 仓库","link":"https://github.com/fluid-dev/hexo-theme-fluid","image":"/img/favicon.png"},{"title":"Fluid Example","intro":"主题操作示例","link":"https://hexo.fluid-dev.com/docs/example/","image":"/img/favicon.png"}]}}}},"excerpt":"","more":"<p>旅行路上睡觉质量一般都不太好，晚上醒来好几次，感觉有点喘不过气，但是困意毕竟挡不住，还是昏昏沉沉睡到了天亮。6点多的时候，我起床,简单洗漱了一下，便开始欣赏晨曦中的高原。</p>\n<p>6点钟的时刻,车厢里大部分人还停留在睡梦中,偶尔传过来几声鼾响。望向窗外,阳光穿过云层,将沉睡了一晚的大地唤醒。拉货的卡车也三三两两地留迹于视野。崭新美好的一天,开始了!<br><img src=\"http://upload-images.jianshu.io/upload_images/3340896-bb07572951c66f15.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"阳光穿透云层\"><br>旅途上,你要问我什么最美? 我会毫不犹豫地回答:”高原上的云！”清晨从火车窗外望去，漂亮的鳞状云齐整整地排满半边天，仿佛一群绵羊，悠闲地漫步在这湛蓝的天空上。这群绵羊脚下的大地，也在它们的踩踏声中逐渐苏醒。<br><img src=\"http://upload-images.jianshu.io/upload_images/3340896-1ef43feb6295f554.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"漂亮的鳞状云\"><br>有羊的地方，必然水草丰美。高原独特的地理环境，特别适合草甸生长，加上来自雪山的融水，给草甸提供充足的养分，于是便形成了这一望无际的水草肥美之地。<br> <img src=\"http://upload-images.jianshu.io/upload_images/3340896-e5cc0d011bf08529.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"蓝天与草甸交相辉映\"><br>当思想还徜徉在蓝天碧草之时，列车已进入堆龙德庆段，地势陡然变化，由刚才的一望无际，到眼前的重山叠峦。远处的山峰被云雾环绕，近处的河流在山谷间流淌。雪山上的融水，形成无数小小的支流，绕过山谷间冲击形成的平地，绕过平地上生长的阔叶林，汇聚成一条小河，沿着山谷，奔向远方…</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/3340896-9eeb941c2bf628ef.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"列车进入堆龙德庆\"><br>列车行至堆龙德庆，也意味着漫长的车厢旅途即将结束。快到拉萨站的时候，列车从奔腾的拉萨河上跨过，在白云和群山之下，眺望远处的布达拉宫，我在心中激动地呐喊——“拉萨，我来啦…”<br><img src=\"http://upload-images.jianshu.io/upload_images/3340896-0d06f79a099fcb92.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"列车上远眺布达拉\"></p>\n<p><a href=\"https://www.jianshu.com/p/bc5b71a337f5\">天路旅途 (四)</a></p>\n"},{"title":"天路旅途（二）","date":"2017-10-15T08:40:00.000Z","_content":"\n北京到拉萨的Z21列车全程40小时10分钟，全程3757公里，从北京晚上八点钟出发，到后天12点10分才能到达拉萨，有生以来，做过的最漫长的铁路。旅行途中，要经过举世瞩目的青藏铁路。\n\n![青藏铁路格尔木至拉萨段线路图](http://upload-images.jianshu.io/upload_images/3340896-58e0c0a43123ecfe.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n为什么说青藏铁路举世瞩目？下面请看一下青藏铁路创下的多项世界之最\n\n1.青藏铁路是世界海拔最高的高原铁路：铁路穿越海拔4000米以上地段达960千米，最高点为海拔5072米。\n2.青藏铁路也是世界最长的高原铁路：青藏铁路格尔木至拉萨段，穿越戈壁荒漠、沼泽湿地和雪山草原，全线总里程达1142千米。\n3.青藏铁路还是世界上穿越冻土里程最长的高原铁路：铁路穿越多年连续冻土里程达550公里。\n4.海拔5068米的唐古拉山车站，是世界海拔最高的铁路车站。\n5.海拔4905米的风火山隧道，是世界海拔最高的冻土隧道。\n6.全长1686米的昆仑山隧道，是世界最长的高原冻土隧道。\n7.海拔4704米的安多铺架基地，是世界海拔最高的铺架基地。\n......\n\n更让我佩服的是，自2001年6月29日开工建设至2005年10月15日全线铺通,青藏铁路格拉段的建设历时4年多.这期间,先后十几万人上下青藏高原,奋战在被称为“ 世界第三极”的生命禁区,但是,却没有一例因高原脑水肿、肺水肿等高原常见病而死亡的事故.这是青藏铁路建设中,中国人创造的又一个世界之最。因此，我对所有参与修建青藏铁路的人员是即崇拜，又敬畏。他们不惜用生命，架起了通往雪域高原的天路。\n![天路故事](http://upload-images.jianshu.io/upload_images/3340896-2770bc0cf41dff66.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n2016年是青藏铁路通车10周年，中国铁路总公司拍摄的[《天路故事》](https://www.bilibili.com/video/av5041137/?from=search&seid=6581890509244381135#page=1)，详细介绍了青藏铁路建设和通车运营期间克服的种种难题和背后的感人故事。这些内容也是我出行前做的一些小功课，以便能够更加了解和认识西藏这个神奇而又美丽的地方。\n\n---\n\n北京上车的时候是晚上，所以基本上洗漱一下，玩一会儿手机就睡觉去了。旅途漫漫，总得找个人聊会儿天打磨这难捱的时光，我的对面是一对情侣，他们是在石家庄站上车的。一聊天居然是老乡，倍感亲切，话题自然而然也就多起来。他们国庆节前刚结婚，这次西藏之行是结婚旅行。了解到这些内容后，我开玩笑的说，结婚旅行怎么选这个地方，多艰苦啊。老乡说，他一个朋友在这工作，说这里风景挺不错，于是便过来玩了。我开玩笑的说，来了这次说不定还有下次。对于了解过西藏的人来说，应该都有踏上这片高原土地的梦想。反正我这个梦已经做了好久，直到现在终于实现。\n\n旅行中还有一个趣事便是我对面的中铺。他的名字叫Tobi,德国人，来北大留学，跟着同学一块来拉萨，他们一行有十个人，有乘飞机去的，有坐火车的，坐火车的又分两拨，他有幸买到了卧铺，剩下的就只能悲催的坐硬座了。40个小时，想想心里就打颤。有趣的是在行李架上我看到一大桶农夫山泉，5L的那种。我就跟我对面老乡说，火车上不是有热水吗？他还带这一大桶水干嘛？喝不惯？后来Tobi从外边回来后，我就问他,为什么要带这么一大桶水，多累啊。他的回答让我豁然开朗，他们那边没有喝热水的习惯，平时喝的水都是冷水，我忽然想起来，之前在斗鱼上看直播，听那些海外留学生介绍是有这么回事。因为自己的英语水平有限，所以也就没和他多聊。\n\n![西宁站](http://upload-images.jianshu.io/upload_images/3340896-4dd039e8a2cbc77e.JPG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n列车在西宁站因为要换火车头，停留时间较长，所以下来透透气，顺便拍一下西宁站的风景。\n\n![这便是传说中的弥漫式供氧列车Z21](http://upload-images.jianshu.io/upload_images/3340896-907a7b56b57477ea.JPG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![列车与车厢进行接合](http://upload-images.jianshu.io/upload_images/3340896-aa7ef6f2a06628c1.JPG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n还有一个挺尴尬的事情要说一下，从北京出发的时候，因为着急赶车，居然忘记取钱了，所以从北京到拉萨的一路上，身无分文的我，看着车厢内卖食品的小推车来回转悠，手机信号不好，不能移动支付，只能干瞪眼看着。幸福总是来得这么突然，列车到西宁的时候，站台上卖的食品可以微信支付，于是我果断买了一盒青海酸奶给自己解解馋。口感挺不错，就是有点小贵，三盒15块钱。从西宁到拉萨的一路上，风景就格外漂亮了，不多说，直接上图。\n![远山与白云](http://upload-images.jianshu.io/upload_images/3340896-78669065449c4513.JPG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![白云与远山](http://upload-images.jianshu.io/upload_images/3340896-ffa6ba788ba67e3f.JPG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![大美青海湖](http://upload-images.jianshu.io/upload_images/3340896-9436df28e4ef9358.JPG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![光与影交织下的山峰与草甸](http://upload-images.jianshu.io/upload_images/3340896-d7eea52340ba13ed.JPG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![在夕阳的映照下，群山看起来棱角分明](http://upload-images.jianshu.io/upload_images/3340896-92020e0c6c7b61c2.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n一边拍摄，一边惊叹，不知不觉便到晚上。列车到达格尔木，天已经完全黑下来。在格尔木站，列车要更换功率更大的车头，开始晚上的爬坡。在[《天路故事》](https://www.bilibili.com/video/av5041137/?from=search&seid=6581890509244381135#page=1)记录片里描述，从格尔木出发的一百五十公里内，列车将会爬升接近两千米，列车也是从此处开始进行弥漫式供氧。\n\n![供氧口](http://upload-images.jianshu.io/upload_images/3340896-99810f8728054f65.JPG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n列车到达格尔木的时候已经晚上十点多了，下去看一下更换车头，回来洗漱完毕，便去睡觉。（说实话，还是挺担心自己高反的，不过晚上稍微感觉有些喘不过气，慢慢还是进入了梦乡）\n\n[天路旅途(三)](https://www.jianshu.com/p/bb1befb30773)\n","source":"_posts/随笔/天路旅途（二）.md","raw":"---\ntitle:  天路旅途（二）\ndate:  2017-10-15 16:40\ncategories:\n- 随笔\ntags: \n- 旅游\n---\n\n北京到拉萨的Z21列车全程40小时10分钟，全程3757公里，从北京晚上八点钟出发，到后天12点10分才能到达拉萨，有生以来，做过的最漫长的铁路。旅行途中，要经过举世瞩目的青藏铁路。\n\n![青藏铁路格尔木至拉萨段线路图](http://upload-images.jianshu.io/upload_images/3340896-58e0c0a43123ecfe.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n为什么说青藏铁路举世瞩目？下面请看一下青藏铁路创下的多项世界之最\n\n1.青藏铁路是世界海拔最高的高原铁路：铁路穿越海拔4000米以上地段达960千米，最高点为海拔5072米。\n2.青藏铁路也是世界最长的高原铁路：青藏铁路格尔木至拉萨段，穿越戈壁荒漠、沼泽湿地和雪山草原，全线总里程达1142千米。\n3.青藏铁路还是世界上穿越冻土里程最长的高原铁路：铁路穿越多年连续冻土里程达550公里。\n4.海拔5068米的唐古拉山车站，是世界海拔最高的铁路车站。\n5.海拔4905米的风火山隧道，是世界海拔最高的冻土隧道。\n6.全长1686米的昆仑山隧道，是世界最长的高原冻土隧道。\n7.海拔4704米的安多铺架基地，是世界海拔最高的铺架基地。\n......\n\n更让我佩服的是，自2001年6月29日开工建设至2005年10月15日全线铺通,青藏铁路格拉段的建设历时4年多.这期间,先后十几万人上下青藏高原,奋战在被称为“ 世界第三极”的生命禁区,但是,却没有一例因高原脑水肿、肺水肿等高原常见病而死亡的事故.这是青藏铁路建设中,中国人创造的又一个世界之最。因此，我对所有参与修建青藏铁路的人员是即崇拜，又敬畏。他们不惜用生命，架起了通往雪域高原的天路。\n![天路故事](http://upload-images.jianshu.io/upload_images/3340896-2770bc0cf41dff66.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n2016年是青藏铁路通车10周年，中国铁路总公司拍摄的[《天路故事》](https://www.bilibili.com/video/av5041137/?from=search&seid=6581890509244381135#page=1)，详细介绍了青藏铁路建设和通车运营期间克服的种种难题和背后的感人故事。这些内容也是我出行前做的一些小功课，以便能够更加了解和认识西藏这个神奇而又美丽的地方。\n\n---\n\n北京上车的时候是晚上，所以基本上洗漱一下，玩一会儿手机就睡觉去了。旅途漫漫，总得找个人聊会儿天打磨这难捱的时光，我的对面是一对情侣，他们是在石家庄站上车的。一聊天居然是老乡，倍感亲切，话题自然而然也就多起来。他们国庆节前刚结婚，这次西藏之行是结婚旅行。了解到这些内容后，我开玩笑的说，结婚旅行怎么选这个地方，多艰苦啊。老乡说，他一个朋友在这工作，说这里风景挺不错，于是便过来玩了。我开玩笑的说，来了这次说不定还有下次。对于了解过西藏的人来说，应该都有踏上这片高原土地的梦想。反正我这个梦已经做了好久，直到现在终于实现。\n\n旅行中还有一个趣事便是我对面的中铺。他的名字叫Tobi,德国人，来北大留学，跟着同学一块来拉萨，他们一行有十个人，有乘飞机去的，有坐火车的，坐火车的又分两拨，他有幸买到了卧铺，剩下的就只能悲催的坐硬座了。40个小时，想想心里就打颤。有趣的是在行李架上我看到一大桶农夫山泉，5L的那种。我就跟我对面老乡说，火车上不是有热水吗？他还带这一大桶水干嘛？喝不惯？后来Tobi从外边回来后，我就问他,为什么要带这么一大桶水，多累啊。他的回答让我豁然开朗，他们那边没有喝热水的习惯，平时喝的水都是冷水，我忽然想起来，之前在斗鱼上看直播，听那些海外留学生介绍是有这么回事。因为自己的英语水平有限，所以也就没和他多聊。\n\n![西宁站](http://upload-images.jianshu.io/upload_images/3340896-4dd039e8a2cbc77e.JPG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n列车在西宁站因为要换火车头，停留时间较长，所以下来透透气，顺便拍一下西宁站的风景。\n\n![这便是传说中的弥漫式供氧列车Z21](http://upload-images.jianshu.io/upload_images/3340896-907a7b56b57477ea.JPG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![列车与车厢进行接合](http://upload-images.jianshu.io/upload_images/3340896-aa7ef6f2a06628c1.JPG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n还有一个挺尴尬的事情要说一下，从北京出发的时候，因为着急赶车，居然忘记取钱了，所以从北京到拉萨的一路上，身无分文的我，看着车厢内卖食品的小推车来回转悠，手机信号不好，不能移动支付，只能干瞪眼看着。幸福总是来得这么突然，列车到西宁的时候，站台上卖的食品可以微信支付，于是我果断买了一盒青海酸奶给自己解解馋。口感挺不错，就是有点小贵，三盒15块钱。从西宁到拉萨的一路上，风景就格外漂亮了，不多说，直接上图。\n![远山与白云](http://upload-images.jianshu.io/upload_images/3340896-78669065449c4513.JPG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![白云与远山](http://upload-images.jianshu.io/upload_images/3340896-ffa6ba788ba67e3f.JPG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![大美青海湖](http://upload-images.jianshu.io/upload_images/3340896-9436df28e4ef9358.JPG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![光与影交织下的山峰与草甸](http://upload-images.jianshu.io/upload_images/3340896-d7eea52340ba13ed.JPG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![在夕阳的映照下，群山看起来棱角分明](http://upload-images.jianshu.io/upload_images/3340896-92020e0c6c7b61c2.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n一边拍摄，一边惊叹，不知不觉便到晚上。列车到达格尔木，天已经完全黑下来。在格尔木站，列车要更换功率更大的车头，开始晚上的爬坡。在[《天路故事》](https://www.bilibili.com/video/av5041137/?from=search&seid=6581890509244381135#page=1)记录片里描述，从格尔木出发的一百五十公里内，列车将会爬升接近两千米，列车也是从此处开始进行弥漫式供氧。\n\n![供氧口](http://upload-images.jianshu.io/upload_images/3340896-99810f8728054f65.JPG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n列车到达格尔木的时候已经晚上十点多了，下去看一下更换车头，回来洗漱完毕，便去睡觉。（说实话，还是挺担心自己高反的，不过晚上稍微感觉有些喘不过气，慢慢还是进入了梦乡）\n\n[天路旅途(三)](https://www.jianshu.com/p/bb1befb30773)\n","slug":"随笔/天路旅途（二）","published":1,"updated":"2020-09-27T10:44:02.887Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgq6gnxx004ft29k38syabe1","content":"<p>北京到拉萨的Z21列车全程40小时10分钟，全程3757公里，从北京晚上八点钟出发，到后天12点10分才能到达拉萨，有生以来，做过的最漫长的铁路。旅行途中，要经过举世瞩目的青藏铁路。</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/3340896-58e0c0a43123ecfe.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"青藏铁路格尔木至拉萨段线路图\"><br>为什么说青藏铁路举世瞩目？下面请看一下青藏铁路创下的多项世界之最</p>\n<p>1.青藏铁路是世界海拔最高的高原铁路：铁路穿越海拔4000米以上地段达960千米，最高点为海拔5072米。<br>2.青藏铁路也是世界最长的高原铁路：青藏铁路格尔木至拉萨段，穿越戈壁荒漠、沼泽湿地和雪山草原，全线总里程达1142千米。<br>3.青藏铁路还是世界上穿越冻土里程最长的高原铁路：铁路穿越多年连续冻土里程达550公里。<br>4.海拔5068米的唐古拉山车站，是世界海拔最高的铁路车站。<br>5.海拔4905米的风火山隧道，是世界海拔最高的冻土隧道。<br>6.全长1686米的昆仑山隧道，是世界最长的高原冻土隧道。<br>7.海拔4704米的安多铺架基地，是世界海拔最高的铺架基地。<br>……</p>\n<p>更让我佩服的是，自2001年6月29日开工建设至2005年10月15日全线铺通,青藏铁路格拉段的建设历时4年多.这期间,先后十几万人上下青藏高原,奋战在被称为“ 世界第三极”的生命禁区,但是,却没有一例因高原脑水肿、肺水肿等高原常见病而死亡的事故.这是青藏铁路建设中,中国人创造的又一个世界之最。因此，我对所有参与修建青藏铁路的人员是即崇拜，又敬畏。他们不惜用生命，架起了通往雪域高原的天路。<br><img src=\"http://upload-images.jianshu.io/upload_images/3340896-2770bc0cf41dff66.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"天路故事\"><br>2016年是青藏铁路通车10周年，中国铁路总公司拍摄的<a href=\"https://www.bilibili.com/video/av5041137/?from=search&seid=6581890509244381135#page=1\">《天路故事》</a>，详细介绍了青藏铁路建设和通车运营期间克服的种种难题和背后的感人故事。这些内容也是我出行前做的一些小功课，以便能够更加了解和认识西藏这个神奇而又美丽的地方。</p>\n<hr>\n<p>北京上车的时候是晚上，所以基本上洗漱一下，玩一会儿手机就睡觉去了。旅途漫漫，总得找个人聊会儿天打磨这难捱的时光，我的对面是一对情侣，他们是在石家庄站上车的。一聊天居然是老乡，倍感亲切，话题自然而然也就多起来。他们国庆节前刚结婚，这次西藏之行是结婚旅行。了解到这些内容后，我开玩笑的说，结婚旅行怎么选这个地方，多艰苦啊。老乡说，他一个朋友在这工作，说这里风景挺不错，于是便过来玩了。我开玩笑的说，来了这次说不定还有下次。对于了解过西藏的人来说，应该都有踏上这片高原土地的梦想。反正我这个梦已经做了好久，直到现在终于实现。</p>\n<p>旅行中还有一个趣事便是我对面的中铺。他的名字叫Tobi,德国人，来北大留学，跟着同学一块来拉萨，他们一行有十个人，有乘飞机去的，有坐火车的，坐火车的又分两拨，他有幸买到了卧铺，剩下的就只能悲催的坐硬座了。40个小时，想想心里就打颤。有趣的是在行李架上我看到一大桶农夫山泉，5L的那种。我就跟我对面老乡说，火车上不是有热水吗？他还带这一大桶水干嘛？喝不惯？后来Tobi从外边回来后，我就问他,为什么要带这么一大桶水，多累啊。他的回答让我豁然开朗，他们那边没有喝热水的习惯，平时喝的水都是冷水，我忽然想起来，之前在斗鱼上看直播，听那些海外留学生介绍是有这么回事。因为自己的英语水平有限，所以也就没和他多聊。</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/3340896-4dd039e8a2cbc77e.JPG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"西宁站\"></p>\n<p>列车在西宁站因为要换火车头，停留时间较长，所以下来透透气，顺便拍一下西宁站的风景。</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/3340896-907a7b56b57477ea.JPG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"这便是传说中的弥漫式供氧列车Z21\"><br><img src=\"http://upload-images.jianshu.io/upload_images/3340896-aa7ef6f2a06628c1.JPG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"列车与车厢进行接合\"></p>\n<p>还有一个挺尴尬的事情要说一下，从北京出发的时候，因为着急赶车，居然忘记取钱了，所以从北京到拉萨的一路上，身无分文的我，看着车厢内卖食品的小推车来回转悠，手机信号不好，不能移动支付，只能干瞪眼看着。幸福总是来得这么突然，列车到西宁的时候，站台上卖的食品可以微信支付，于是我果断买了一盒青海酸奶给自己解解馋。口感挺不错，就是有点小贵，三盒15块钱。从西宁到拉萨的一路上，风景就格外漂亮了，不多说，直接上图。<br><img src=\"http://upload-images.jianshu.io/upload_images/3340896-78669065449c4513.JPG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"远山与白云\"><br><img src=\"http://upload-images.jianshu.io/upload_images/3340896-ffa6ba788ba67e3f.JPG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"白云与远山\"><br><img src=\"http://upload-images.jianshu.io/upload_images/3340896-9436df28e4ef9358.JPG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"大美青海湖\"><br><img src=\"http://upload-images.jianshu.io/upload_images/3340896-d7eea52340ba13ed.JPG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"光与影交织下的山峰与草甸\"><br><img src=\"http://upload-images.jianshu.io/upload_images/3340896-92020e0c6c7b61c2.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"在夕阳的映照下，群山看起来棱角分明\"><br>一边拍摄，一边惊叹，不知不觉便到晚上。列车到达格尔木，天已经完全黑下来。在格尔木站，列车要更换功率更大的车头，开始晚上的爬坡。在<a href=\"https://www.bilibili.com/video/av5041137/?from=search&seid=6581890509244381135#page=1\">《天路故事》</a>记录片里描述，从格尔木出发的一百五十公里内，列车将会爬升接近两千米，列车也是从此处开始进行弥漫式供氧。</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/3340896-99810f8728054f65.JPG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"供氧口\"></p>\n<p>列车到达格尔木的时候已经晚上十点多了，下去看一下更换车头，回来洗漱完毕，便去睡觉。（说实话，还是挺担心自己高反的，不过晚上稍微感觉有些喘不过气，慢慢还是进入了梦乡）</p>\n<p><a href=\"https://www.jianshu.com/p/bb1befb30773\">天路旅途(三)</a></p>\n","site":{"data":{"fluid_static_prefix":{"internal_js":"/js","internal_css":"/css","internal_img":"/img","iconfont":"//at.alicdn.com/t/font_1736178_kmeydafke9r.css","anchor":"https://cdn.staticfile.org/anchor-js/4.2.2/","github_markdown":"https://cdn.staticfile.org/github-markdown-css/4.0.0/","jquery":"https://cdn.staticfile.org/jquery/3.4.1/","bootstrap":"https://cdn.staticfile.org/twitter-bootstrap/4.4.1/","highlightjs":"https://cdn.staticfile.org/highlight.js/10.0.0/","prismjs":"https://cdn.staticfile.org/prism/1.21.0/","tocbot":"https://cdn.staticfile.org/tocbot/4.11.1/","typed":"https://cdn.staticfile.org/typed.js/2.0.11/","fancybox":"https://cdn.staticfile.org/fancybox/3.5.7/","mathjax":"https://cdn.staticfile.org/mathjax/3.0.5/es5/","katex":"https://cdn.staticfile.org/KaTeX/0.11.1/","aplayer":"https://cdn.staticfile.org/aplayer/1.10.1/","busuanzi":"https://busuanzi.ibruce.info/busuanzi/2.3/","clipboard":"https://cdn.staticfile.org/clipboard.js/2.0.6/","mermaid":"https://cdn.staticfile.org/mermaid/8.5.0/","valine":"https://cdn.staticfile.org/valine/1.4.14/","gitalk":"https://cdn.staticfile.org/gitalk/1.6.2/","blueimp_md5":"https://cdn.staticfile.org/blueimp-md5/2.13.0/","disqusjs":"https://cdn.jsdelivr.net/npm/disqusjs@1.0/dist/","hint":"/lib/hint/"},"fluid_config":{"favicon":"/img/favicon.png","apple_touch_icon":"/img/favicon.png","title_join_string":" - ","force_https":false,"code":{"copy_btn":true,"highlight":{"enable":true,"lib":"highlightjs","highlightjs":{"style":"Github Gist","bg_color":false},"prismjs":{"style":"default","preprocess":true}}},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"_","loop":false},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"right","visible":"hover","icon":""},"mouse_click":{"enable":false,"style":"values"}},"dark_mode":{"enable":true,"default":"auto"},"color":{"body_bg_color":"#eee","body_bg_color_dark":"#181c27","navbar_bg_color":"#2f4154","navbar_bg_color_dark":"#1f3144","navbar_text_color":"#fff","navbar_text_color_dark":"#d0d0d0","text_color":"#3c4858","text_color_dark":"#c4c6c9","sec_text_color":"#718096","sec_text_color_dark":"#a7a9ad","post_text_color":"#2c3e50","post_text_color_dark":"#c4c6c9","post_heading_color":"#1a202c","post_heading_color_dark":"#c4c6c9","post_link_color":"#0366d6","post_link_color_dark":"#1589e9","link_hover_color":"#30a9de","link_hover_color_dark":"#30a9de","link_hover_bg_color":"#f8f9fa","link_hover_bg_color_dark":"#364151","board_color":"#fff","board_color_dark":"#252d38"},"font":{"font_size":"16px","font_family":null,"code_font_size":"85%"},"custom_js":null,"custom_css":null,"custom_html":"","web_analytics":{"enable":false,"baidu":null,"google":null,"gtag":null,"tencent":{"sid":null,"cid":null},"woyaola":null,"cnzz":null,"leancloud":{"app_id":null,"app_key":null,"server_url":null}},"lazyload":{"enable":true,"onlypost":false},"daovoice":{"enable":false,"appid":""},"aplayer":{"enable":false,"autoplay":false,"loop":"all","order":"random","theme":"#b7daff","songs":[{"name":"name","artist":"artist","url":"/songs/test.mp3","cover":"/img/cover.jpg"},{"name":"name","artist":"artist","url":"https://...url.mp3","cover":"https://...cover.jpg"}]},"version":{"check":false},"navbar":{"blog_title":"吃面多放葱","ground_glass":{"enable":false,"px":3,"alpha":0.7},"menu":[{"key":"home","link":"/","icon":"iconfont icon-home-fill"},{"key":"category","link":"/categories/","icon":"iconfont icon-category-fill"},{"key":"tag","link":"/tags/","icon":"iconfont icon-tags-fill"},{"key":"about","link":"/about/","icon":"iconfont icon-user-fill"}]},"search":{"enable":true,"path":"/local-search.xml","generate_path":"/local-search.xml","field":"post","content":true},"scroll_down_arrow":{"enable":true,"banner_height_limit":90,"scroll_after_turning_page":true},"banner_parallax":true,"footer":{"statistics":{"enable":false,"source":"busuanzi","pv_format":"总访问量 {} 次","uv_format":"总访客数 {} 人"},"beian":{"enable":false,"icp_text":"京ICP证123456号","police_text":"京公网安备12345678号","police_code":12345678,"police_icon":"/img/police_beian.png"}},"scroll_top_arrow":{"enable":true},"index":{"banner_img":"/img/default.png","banner_img_height":100,"banner_mask_alpha":0.3,"post_default_img":"","slogan":{"enable":true,"text":"像蚂蚁一样工作，像蝴蝶一样生活"},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"category":true,"tag":true}},"page":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3},"post":{"banner_img":"/img/default.png","banner_img_height":70,"banner_mask_alpha":0.3,"meta":{"author":{"enable":false},"date":{"enable":true,"format":"LL a"},"wordcount":{"enable":true,"format":"{} 字"},"min2read":{"enable":true,"format":"{} 分钟","words":100},"views":{"enable":false,"source":"busuanzi","format":"{} 次"}},"updated":{"enable":false,"content":"本文最后更新于：","relative":false},"toc":{"enable":true,"headingSelector":"h1,h2,h3,h4,h5,h6","collapseDepth":0},"copyright":{"enable":true,"content":"本博客所有文章除特别声明外，均采用 <a href=\"https://creativecommons.org/licenses/by-sa/4.0/deed.zh\" rel=\"nofollow noopener\">CC BY-SA 4.0 协议</a> ，转载请注明出处！"},"prev_next":{"enable":true},"custom":{"enable":false,"content":"<img src=\"https://octodex.github.com/images/jetpacktocat.png\" class=\"rounded mx-auto d-block mt-5\" style=\"width:150px; height:150px;\">"},"image_zoom":{"enable":true},"footnote":{"enable":true,"header":""},"math":{"enable":false,"specific":false,"engine":"mathjax"},"mermaid":{"enable":false,"specific":false,"options":{"theme":"default"}},"comments":{"enable":false,"type":"disqus"}},"utterances":{"repo":null,"issue_term":"pathname","label":"utterances","theme":"github-light","theme_dark":"github-dark","crossorigin":"anonymous"},"disqus":{"shortname":null,"disqusjs":false,"apikey":null},"gitalk":{"clientID":null,"clientSecret":null,"repo":null,"owner":null,"admin":["name"],"id":"location.pathname","language":"zh-CN","labels":["Gitalk"],"perPage":10,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true},"valine":{"appid":null,"appkey":null,"placeholder":"说点什么","path":"window.location.pathname","avatar":"retro","meta":["nick","mail","link"],"pageSize":10,"lang":"zh-CN","highlight":false,"recordIP":false,"serverURLs":null},"changyan":{"appid":"","appkey":""},"livere":{"uid":""},"remark42":{"host":"https://remark.haoyizebo.com","site_id":"haoyizebo","max_shown_comments":10,"locale":"zh"},"archive":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null},"category":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"post_limit":10,"order_by":"-length","collapse_depth":0},"tag":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null,"tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"avatar":"/img/avatar.png","name":"蔺国防","introduce":"移动应用开发者，历史文学爱好者","icons":[{"class":"iconfont icon-github-fill","link":"https://github.com","tip":"GitHub"},{"class":"iconfont icon-douban-fill","link":"https://douban.com","tip":"豆瓣"},{"class":"iconfont icon-wechat-fill","qrcode":"/img/favicon.png"}]},"page404":{"banner_img":"/img/default.png","banner_img_height":85,"banner_mask_alpha":0.3,"subtitle":"Page not found"},"links":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"items":[{"title":"Fluid Docs","intro":"主题使用指南","link":"https://hexo.fluid-dev.com/docs/","image":"/img/favicon.png"},{"title":"Fluid Repo","intro":"主题 GitHub 仓库","link":"https://github.com/fluid-dev/hexo-theme-fluid","image":"/img/favicon.png"},{"title":"Fluid Example","intro":"主题操作示例","link":"https://hexo.fluid-dev.com/docs/example/","image":"/img/favicon.png"}]}}}},"excerpt":"","more":"<p>北京到拉萨的Z21列车全程40小时10分钟，全程3757公里，从北京晚上八点钟出发，到后天12点10分才能到达拉萨，有生以来，做过的最漫长的铁路。旅行途中，要经过举世瞩目的青藏铁路。</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/3340896-58e0c0a43123ecfe.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"青藏铁路格尔木至拉萨段线路图\"><br>为什么说青藏铁路举世瞩目？下面请看一下青藏铁路创下的多项世界之最</p>\n<p>1.青藏铁路是世界海拔最高的高原铁路：铁路穿越海拔4000米以上地段达960千米，最高点为海拔5072米。<br>2.青藏铁路也是世界最长的高原铁路：青藏铁路格尔木至拉萨段，穿越戈壁荒漠、沼泽湿地和雪山草原，全线总里程达1142千米。<br>3.青藏铁路还是世界上穿越冻土里程最长的高原铁路：铁路穿越多年连续冻土里程达550公里。<br>4.海拔5068米的唐古拉山车站，是世界海拔最高的铁路车站。<br>5.海拔4905米的风火山隧道，是世界海拔最高的冻土隧道。<br>6.全长1686米的昆仑山隧道，是世界最长的高原冻土隧道。<br>7.海拔4704米的安多铺架基地，是世界海拔最高的铺架基地。<br>……</p>\n<p>更让我佩服的是，自2001年6月29日开工建设至2005年10月15日全线铺通,青藏铁路格拉段的建设历时4年多.这期间,先后十几万人上下青藏高原,奋战在被称为“ 世界第三极”的生命禁区,但是,却没有一例因高原脑水肿、肺水肿等高原常见病而死亡的事故.这是青藏铁路建设中,中国人创造的又一个世界之最。因此，我对所有参与修建青藏铁路的人员是即崇拜，又敬畏。他们不惜用生命，架起了通往雪域高原的天路。<br><img src=\"http://upload-images.jianshu.io/upload_images/3340896-2770bc0cf41dff66.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"天路故事\"><br>2016年是青藏铁路通车10周年，中国铁路总公司拍摄的<a href=\"https://www.bilibili.com/video/av5041137/?from=search&seid=6581890509244381135#page=1\">《天路故事》</a>，详细介绍了青藏铁路建设和通车运营期间克服的种种难题和背后的感人故事。这些内容也是我出行前做的一些小功课，以便能够更加了解和认识西藏这个神奇而又美丽的地方。</p>\n<hr>\n<p>北京上车的时候是晚上，所以基本上洗漱一下，玩一会儿手机就睡觉去了。旅途漫漫，总得找个人聊会儿天打磨这难捱的时光，我的对面是一对情侣，他们是在石家庄站上车的。一聊天居然是老乡，倍感亲切，话题自然而然也就多起来。他们国庆节前刚结婚，这次西藏之行是结婚旅行。了解到这些内容后，我开玩笑的说，结婚旅行怎么选这个地方，多艰苦啊。老乡说，他一个朋友在这工作，说这里风景挺不错，于是便过来玩了。我开玩笑的说，来了这次说不定还有下次。对于了解过西藏的人来说，应该都有踏上这片高原土地的梦想。反正我这个梦已经做了好久，直到现在终于实现。</p>\n<p>旅行中还有一个趣事便是我对面的中铺。他的名字叫Tobi,德国人，来北大留学，跟着同学一块来拉萨，他们一行有十个人，有乘飞机去的，有坐火车的，坐火车的又分两拨，他有幸买到了卧铺，剩下的就只能悲催的坐硬座了。40个小时，想想心里就打颤。有趣的是在行李架上我看到一大桶农夫山泉，5L的那种。我就跟我对面老乡说，火车上不是有热水吗？他还带这一大桶水干嘛？喝不惯？后来Tobi从外边回来后，我就问他,为什么要带这么一大桶水，多累啊。他的回答让我豁然开朗，他们那边没有喝热水的习惯，平时喝的水都是冷水，我忽然想起来，之前在斗鱼上看直播，听那些海外留学生介绍是有这么回事。因为自己的英语水平有限，所以也就没和他多聊。</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/3340896-4dd039e8a2cbc77e.JPG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"西宁站\"></p>\n<p>列车在西宁站因为要换火车头，停留时间较长，所以下来透透气，顺便拍一下西宁站的风景。</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/3340896-907a7b56b57477ea.JPG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"这便是传说中的弥漫式供氧列车Z21\"><br><img src=\"http://upload-images.jianshu.io/upload_images/3340896-aa7ef6f2a06628c1.JPG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"列车与车厢进行接合\"></p>\n<p>还有一个挺尴尬的事情要说一下，从北京出发的时候，因为着急赶车，居然忘记取钱了，所以从北京到拉萨的一路上，身无分文的我，看着车厢内卖食品的小推车来回转悠，手机信号不好，不能移动支付，只能干瞪眼看着。幸福总是来得这么突然，列车到西宁的时候，站台上卖的食品可以微信支付，于是我果断买了一盒青海酸奶给自己解解馋。口感挺不错，就是有点小贵，三盒15块钱。从西宁到拉萨的一路上，风景就格外漂亮了，不多说，直接上图。<br><img src=\"http://upload-images.jianshu.io/upload_images/3340896-78669065449c4513.JPG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"远山与白云\"><br><img src=\"http://upload-images.jianshu.io/upload_images/3340896-ffa6ba788ba67e3f.JPG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"白云与远山\"><br><img src=\"http://upload-images.jianshu.io/upload_images/3340896-9436df28e4ef9358.JPG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"大美青海湖\"><br><img src=\"http://upload-images.jianshu.io/upload_images/3340896-d7eea52340ba13ed.JPG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"光与影交织下的山峰与草甸\"><br><img src=\"http://upload-images.jianshu.io/upload_images/3340896-92020e0c6c7b61c2.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"在夕阳的映照下，群山看起来棱角分明\"><br>一边拍摄，一边惊叹，不知不觉便到晚上。列车到达格尔木，天已经完全黑下来。在格尔木站，列车要更换功率更大的车头，开始晚上的爬坡。在<a href=\"https://www.bilibili.com/video/av5041137/?from=search&seid=6581890509244381135#page=1\">《天路故事》</a>记录片里描述，从格尔木出发的一百五十公里内，列车将会爬升接近两千米，列车也是从此处开始进行弥漫式供氧。</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/3340896-99810f8728054f65.JPG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"供氧口\"></p>\n<p>列车到达格尔木的时候已经晚上十点多了，下去看一下更换车头，回来洗漱完毕，便去睡觉。（说实话，还是挺担心自己高反的，不过晚上稍微感觉有些喘不过气，慢慢还是进入了梦乡）</p>\n<p><a href=\"https://www.jianshu.com/p/bb1befb30773\">天路旅途(三)</a></p>\n"},{"title":"Objective-C Runtime","date":"2017-11-20T13:25:00.000Z","_content":"描述macOS OC运行时库支持的函数和数据结构.\n\n## 通览\n\nOC运行时是一个运行时库,该库用来支持OC语言的动态属性.并且这种情况对所有的的Objectiv-C的app都有关系.OC运行时库支持的函数实现在 /usr/lib/libobjc.A.dylib中的分享库中可以查到.(自己测试是在资源库文件夹下面)\n\n在OC编程中,您完全没有必要直接地使用OC运行时库.这些Api的主要作用是作为OC和其他语言的桥接层.或者更底层的调试.\n\nOC运行时库在macOS 中的实现是特殊的.对于其他平台,GNU编译集合使用类似的Api提供了一种不同的的实现.这个文档只包含了macOS的实现.\n\n底层的OC运行时Api在OS X 版本10.5中做了显著更新.许多函数和所有现有的数据结构被替换为新的函数.老的函数和数据结构在32位模式下被弃用.64位模式下仍然存在.Api在64位模式下约束了一些在32位模式下表示的整型数据值.比如 class Count, protocol Count, methods per class, ivars per class, arguments per method, sizeof(all arguments) per method, class version number.另外,新的Objective-C ABI 对32位模式下的对象实例化约束更多.并且三个其他的24位模式下表示的一些值 methods per class, ivars per class, sizeof(a single ivar).最后,\n老式的NXHashTable和NXMapTable被限制到四百万项.\n\n> 字符串编码\n> 在运行时API中所有的字符指针应该\n 被看作UTF-8编码格式.\n\n## 该文档适用哪些人?\n\n这个文档适用那些对OC运行时有兴趣学习的读者.\n因为这不是关于C的文档.该文档仅当做对OC开发者的一些拓展.\n\n## Topics \n\n### 与Class一起使用\n\n```\n\n    /*\n     cls: 一个类对象\n     返回值: 类的名称,如果传Nil则为空字符串\n     **/\n\n    func class_getName(_ cls:AnyClass?) -> UnsafePointer<Int8>\n    \n    /*\n     cls: 一个类对象\n     返回值: 该类的父类. 如果cls为根类或者cls为Nil的话,返回值为Nil\n     \n     讨论:\n     你应该通常使用NSObject的 superclass()方法替换该方法\n     **/\n\n    func class_getSuperclass(_ cls: AnyClass?) -> AnyClass?\n    \n    /*\n     返回一个布尔值, 该值表示是否一个类对象是一个元类\n     \n     cls: 一个类对象\n     返回值: 如果参数是一个元类,则返回true. 如果非元类,则返回false,或者参数为Nil也返回false.\n    \n     **/\n\n    func class_isMetaClass(_ cls: AnyClass?) -> Bool\n\n    /*\n     返回一个类的实例占用内存的大小\n     \n     cls: 一个类对象\n     返回值: 类实例的占用的字节.如果参数为Nil则返回0\n    **/\n\n    func class_getInstanceSize(_ cls: AnyClass?) -> Int\n    \n    \n    /*\n     返回给定类的一个指定实例变量\n     \n     cls: 想要获取实例变量的类\n     name: 去获取的实例变量名\n     返回值: 指定名字的实例变量的指针\n    **/\n\n    func class_getInstanceVariable(_ cls: AnyClass?, _ name: UnsafePointer<Int8>) -> Ivar?\n    \n    /*\n     返回某个类指定名字的类变量\n     \n     cls: 要获取类变量的类\n     name: 要获取的类变量名称\n     返回值: 指定名字的类变量的指针\n    **/\n\n    func class_getClassVariable(_ cls: AnyClass?, _ name: UnsagePointer<Int8>) ->Ivar?\n    \n    /*\n     给一个类添加一个实例变量\n     \n     返回值: 如果实例变量加入成功,返回true.否则返回false(比如该类已经包含一个相同名字的实例变量)\n     \n     讨论:\n     这个函数只能在objc_allocateClassPair(_:_:_:)之后调用.在objc_registerClassPair(_:)之前调用.不支持给一个已经注册过的类添加实例变量.\n     \n     操作的类不能使元类.不支持给一个元类添加实例变量.\n     \n     实例变量以字节的最小对齐方式为1<<align.实例变量的最小对齐方式取决于实例变量的类型和设备的架构.对于任意指针类型的变量,传log2(sizeof(pointer_type))\n    \n     **/\n\n    func class_addIvar(_ cls: AnyClass?,_ name: UnsagePointer<Int8>, _ size: Int, _ alignment: UInt8, _ types: UnsagePointer<Int8>?) -> Bool\n    \n    /*\n     获取类的实例变量列表\n     \n     cls: 需要拷贝属性列表的类\n     outCount: 在返回时,包含返回数组的长度.如果outCount是NULL,则不反悔该长度.\n     返回值: 一个指针数组描述类声明的实例变量.任何被父类声明的实例变量不包含在内.数组包含* outCount指针，后跟一个空终止符。您必须使用free()函数释放数组.\n     如果类声明中没有实例变量.或者cls为Nil,则返回NULL 并且*coutCount指针为0\n     **/\n\n    func class_copyIvarList(_ cls: AnyClass?, _ outCount: UnsafeMutablePointer<UInt32>?) -> UnsafeMutablePointer<Ivar>?\n    \n    //返回指定类实例变量布局的描述\n    func class_getIvarLayout(AnyClass?)\n    \n    //设置指定类实例变量布局\n    func class_setIvarLayout(AnyClass?, UnsafePointer<UInt8>?)\n    \n    //返回弱引用实例变量的布局描述\n    func class_getWeakIvarLayout(AnyClass?)\n    \n    //设置弱引用实例变量的布局\n    func class_setWeakIvarLayout(AnyClas?, UnsafePointer<UInt8>?)\n    \n    /*\n     返回指定类的指定名称的属性\n     \n     返回值: 一个objc_property_t类型的指针.如果类中并未声明该名称属性或者cls为Nil则返回NULL.\n     **/\n    func class_getProperty(_ cls: AnyClass?, _ name: UnsafePointer<Int8>) -> objc_property_t?\n    \n    /*\n     描述声明的一个类的属性\n     \n     cls: 想要检查的类\n     outCount: 在返回时,包含返回数组的长度.如果outCount 是NULL,数组长度不返回.\n     返回值: objc_property_t类型的指针数组.任何父类声明的属性不包含在内.数组包含* outCount指针，后跟一个空终止符。您必须使用free()函数释放数组.\n     如果类声明中没有实例变量.或者cls为Nil,则返回NULL 并且*coutCount指针为0\n     **/\n\n    func class_copyPropertyList(_ cls: AnyClass?, _ outCount: UnsageMutablePointer<UInt32>?) -> UnsafeMutablePointer<objc_property_t>?\n    \n    /*添加一个新方法给指定类.指定方法名和方法实现\n    \n      cls:需要添加方法的类 \n      name: 指定添加的方法名  \n      imp: 方法的实现的函数,该函数必须携带两个参数 self 和  _cmd\n      types: 一个字符数组,用来描述方法的参数类型.参考苹果官方文档 [Type Encodings](https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/ObjCRuntimeGuide/Articles/ocrtTypeEncodings.html#//apple_ref/doc/uid/TP40008048-CH100)\n      返回值: 如果添加成功,返回true 否则返回false(例如添加的方法已经存在)\n      \n      讨论:\n      该方法会重载父类的实现,但是并不会替换在这个类中已经存在的实现.想要改变已经存在的实现的话,使用method_setImplementation(_:_:)\n      一个OC方法仅仅是一个C的函数.该函数携带至少两个参数----self 和 _cmd.举例,给定下列函数\n    \n      void myMethodIMP(id self, SEL _cmd)\n      {\n        //implementation ...\n        \n      }\n      \n      您可以动态添加该函数到一个类中作为一个方法.(调用 resolveThisMethodDynamically) 像这样:\n      \n      class_addMethod([self class], @selector(resolveThisMethodDynamically), (IMP) myMethodIMP, \"v@:\");\n      \n     **/\n\n    func  class_addMethod(_ cls:AnyClass?,_ name:Selector,_ imp:IMP,_ types: UnsagePointer<Int8>?)\n    \n    /*\n     获取一个类的指定实例方法\n     \n     aClass: 要检查的类\n     aSelector: 要获取方法的选择器\n     返回值: 指定方法选择器所对应的方法实现,如果指定类或者它的父类不包含指定选择器的实例方法则返回NULL.\n     \n     讨论:\n     注意这个函数搜索父类的实现,而class_copyMethodList(_:_:)是不会的\n     **/\n\n    func class_getInstanceMethod(_ cls:AnyClass?,_ name: Selector) -> Method?\n    \n    /*\n     返回指定类指定名称的类方法\n     \n     aClass: 一个雷定义的指针.该类包含您想要获取的方法.\n     aSelector: 一个SEL类型的指针.该SEL包含你想要获取的方法.\n     返回值: Method的指针.对应指定类指定方法选择器的实现.如果该类或者它的父类不包含这个类方法,则返回NULL.\n     \n     讨论:\n     注意这个函数搜索父类的方法实现.class_copyMethodList(_:_:)不搜索\n     **/\n\n     func class_getClassMethod(_ cls: AnyClass?, _ name: Selector) -> Method?\n     \n    /*\n     返回一个类的实例方法列表\n     \n     cls: 想要检测的类\n     outCount: 在返回时,包含数组的长度.如果outCounte是NULL,则不返回.\n     返回值: Method类型的指针数组.表示该类所有的实例方法实现.\n     不包含父类的实例方法实现.该数组包含*outCount指针后面跟一个空终止符.您必须使用free()函数释放该数组.\n     \n     如果该类没有实例方法.或者该类为Nil,则返回NULL并且*outCount是0\n     \n     讨论:\n     \n     获取一个类的类方法列表.使用class_copyMethodList(object_getClass(cls), &count)\n     获取父类的方法列表,使用class_getInstanceMethod(_:_:)或者class_getClassMehtod(_:_:)\n     **/\n\n    func class_copyMethodList(_ cls: AnyClass?, _ outCount: UnsageMutablePointer<UInt32>?) -> UnsafeMutablePointer<Method>?\n\n    /*\n     替换指定类的方法的实现\n     \n     cls:要修改的类\n     name: 一个方法选择器用来确认哪个方法实现要被替换\n     imp:新的方法实现.\n     types: 一个字符串集合,用来描述参数的类型.必须至少携带两个参数, self 和_cmd, 第二个和第三个字符必须为\"@:\"(第一个参数为返回类型)\n     \n     返回值: 修改的类之前的方法实现.\n     \n     讨论:\n    可以通过两种方式实现该函数行为:\n    如果方法名不存在,通过call_addMethod(_:_:_:_:)方法的调用添加函数实现.按照types添加参数类型和返回值类型.\n    如果方法名存在,他的IMP通过method_setImplementation(_:_:)方法的调用来替换函数实现.types参数被忽略.\n    \n     **/\n\n    func class_replaceMethod(_ cls:AnyClass?, _ name: Selector,_ imp: IMP, _ types: UnsafePointer<Int8>?) -> IMP?\n    \n    /*\n     获取指定实例方法的实现\n    \n     cls: 指定类\n     name: 方法选择器\n     返回值: 返回函数指针,如果cls为Nil,则返回NULL.\n     \n     讨论:\n     \n     class_getMethodImplementation(_:_:)可能会比method_getImplementtation(class_getInstanceMethod(cls, name))更快一些.\n     \n     返回的函数指针可能是运行时的函数，而不是实际的方法实现。例如，如果类的实例不响应选择器，那么返回的函数指针将是运行时消息转发机制的一部分。\n     **/ \n\n    func class_getMethodImplementation(_ cls: AnyClass?,_ name: Selector) -> IMP?\n    \n    /*\n     返回将要被调用的指定消息的函数指针\n     \n     cls: 指定的类\n     name: 一个方法选择器\n     返回值: 返回函数指针,如果cls为Nil,则返回NULL.\n     **/ \n\n    func class_getMethodImplementation_stret(_ cls: AnyClass?,_ name: Selector) -> IMP?\n    \n    /*\n    返回一个布尔值表示是否一个实例响应了指定方法\n    \n    cls : 响应消息的类\n    sel : 一个方法选择器\n    返回值: 响应方法,则返回true,否则返回false\n    \n    讨论:\n    通常使用NSObject的responds(to:)或者instancesRespond(to:)方法来替换该方法.\n     **/\n    func class_respondsToSelector(AnyClass?, Selector)\n\n    /*\n     给一个类添加一个协议\n     \n     cls: 要改动的类\n     outCount: 要添加到该类的协议\n     返回值: 添加成功,返回ture;否则false(比如该类中已经存在该协议)\n    \n     **/\n    func class_addProtocol(_ cls: AnyClass?, _ protocol: Protocol) -> Bool\n    \n    /*\n     给一个类添加一个属性\n     \n     cls: 要改动的类\n     name: 属性名\n     attributes: 属性的描述(readonly, nonatomic, asign...)\n     attributeCount: 属性描述的数量\n     返回值: 添加成功,返回true,否则false(比如已经存在该属性)\n     **/\n\n    func class_addProperty(_ cls: AnyClass?, _ name: UnsagePointer<Int8>, _ attributes: UnsafePointer<objc_property_attribute_t>?, _ attributeCounte: UInt32) -> Bool\n    \n    /*\n     替换一个类的属性\n     **/\n    func class_replaceProperty(_ cls:AnyClass?, _ name: UnsafePointer<Int8>, _ attributes: UnsafePointer<objc_property_attribute_t>?, _ attrubuteCount: UInt32)\n    \n    /*\n     返回一个布尔值 表示是否一个类执行指定协议方法\n     \n     通常使用NSObject的conforms(to:) 来替换它\n     **/\n\n    func class_conformsToProtocol(_ cls: AnyClass?,_ protocol: Protocol?) -> Bool\n    /*\n     描述一个类包含的协议\n     cls: 指定的类\n     outCount: 返回数组的长度.如果outCount是NULL,返回值不包含数组的长度.\n     返回值: Protocol* 类型的指针数组.描述类中包含的协议.父类的协议不包含其中.数组中包含*outCount指针,并庚随一个空的终止符.必须使用free()函数释放数组.\n     \n     返回值: 如果cls中没有协议,或者cls为Nil,返回NULL并且*outCount为0\n     **/\n\n    func class_copyProtocolList(_ cls: AnyClass?,_ outCount: UnsafeMutablePointer<UInt32>?)  -> AutoreleasingUnsafeMutablePointer<Protocol>?\n    \n    //返回类定义的版本号\n    func class_getVersion(AnyClass?)\n    \n    //设置一个类定义的版本号\n    func class_setVersion(AnyClass, Int32)\n\n\n```\n\n### 添加Class\n\n```\n\n    /*\n     创建一个类和元类\n     \n     superclass: 新创建类的父类.如果创建一个根类则为Nil\n     name: 新创建类的类名.该字符串会被拷贝.\n     extraBytes: 类和元类末尾为索引实例变量而分配的字节数.通常为0\n     返回值: 新创建的类.或者为Nil如果该类无法被创建(比如使用的名字已经被使用)\n     \n     讨论:\n     可以获取新创建元类的指针通过调用object_getClass(newClass).\n     创建一个类.需要先调用objc_allocateClassPair(_:_:_:).然后设置类的特性使用诸如class_addMethod(_:_:_:_:)和class_addIvar(_:_:_:_:_:)这些方法.当你创建完该类后.调用objc_registerClassPair(_:)注册该类后才可以使用.\n     \n     实例方法和实例变量应该添加到自身类中.类方法应该添加到元类中.\n     \n     **/\n\n    func objc_allocateClassPair(_ superclass: AnyClass?, _ name: UnsafePointer<Int8>, _ extraBytes: Int) -> AnyClass?\n    \n    /*\n     销毁一个类和它关联的元类.\n     \n     讨论:\n     如果cls类实例或者它的任何子类存在的话,不要调用该函数.\n     **/\n\n    func objc_disposeClassPair(_ cls: AnyClass)\n    \n    //注册一个类 该类已使用objc_allocateClassPair(_:_:_:)方法创建\n    func objc_registerClassPair(AnyClass)\n    \n    /*\n     在Foundation框架下的KVO使用\n     \n     讨论:\n     自身不要调用该函数\n     **/\n\n    func objc_duplicateClass(AnyClass, UnsafePointer<Int8>, Int)\n\n```\n\n### 与实例一起使用\n\n```\n\n    /*\n     读取一个对象中实例变量的值\n     讨论:\n     如果实例变量名已知的话,object_getIvar(_:_:)比object_getInstanceVariable获取值更快一些.\n     **/\n\n    func object_getIvar(_ obj: Any?,_ ivar: Ivar) -> Any?\n    \n    //设置一个对象实例变量的值\n    func object_setIvar(_ obj: Any?,_ ivar: Ivar,_ varlue: Any?)\n    \n    //返回某对象的类名\n    func object_getClassName(_obj: Any?)\n    \n    //返回实例对象的类对象\n    func object_getClass(_ obj: Any?) -> AnyClass?\n    \n    //设置一个对象的类 返回值为对象之前所属的类对象.\n    func object_setClass(_ obj: Any?,_ cls: AnyClass) -> AnyClass?\n\n```\n\n### 获取类定义\n\n```\n    //获取已注册类定义的列表\n    func objc_getClassList(AutoreleasingUnsafeMutablePointer<AnyClass>?, Int32)\n    \n    //创建并且返回所有已注册的类定义的指针列表\n    func objc_copyClassList(UnsafeMutablePointer<UInt32>?)\n    \n    //返回某个类的类定义\n    func objc_lookUpClass(UnsafePointer<Int8>)\n    \n    //返回某个类的类定义\n    func objc_getClass(UnsafePointer<Int8>)\n    \n    //返回某个类的类定义\n    func objc_getRequiredClass(UnsafePointer<Int8>)\n    \n    //返回某个类的元类定义\n    func objc_getMetaClass(UnsafePointer<Int8>)\n\n```\n\n### 与实例变量一起使用\n\n```\n    //返回实例变量名称\n    func ivar_getName(Ivar)\n    \n    //返回实例变量的类型\n    func ivar_getTypeEncoding(Ivar)\n\n    //返回一个实例变量相对内存基址的偏移值\n    func ivar_getOffset(Ivar)\n\n```\n\n### 关联引用\n\n```\n    //使用指定key和关联策略设置某个对象的关联值\n    func objc_setAssociateObject(Any, UnsafeRawPointer, Any?, objc_AssociationPoicy)\n    \n    //返回某个对象该key下对应的关联值\n    func objc_getAssociateObject(Any, UnsafeRawPointer)\n    \n    //移除某个对象所有关联对象\n    func objc_removeAssociateObjects(Any)\n\n```\n\n### 与方法一起使用\n\n```\n    /*\n     返回方法的SEL\n     \n     讨论:\n     获取C字符串的方法名.调用sel_getName(method_getName(method))\n     **/\n\n    func method_getName(_ m: Method) -> Selector\n    \n    //返回IMP类型的函数指针\n    func method_getImplementation(_ m: Method) -> IMP\n    \n    //返回一个字符串描述方法的参数和返回类型\n    func method_getTypeEncoding(_ m: Method) -> UnsafePointer<Int8>?\n    \n    //返回一个字符串描述方法的返回类型\n    func method_copyReturnType(Method)\n    \n    //返回一个字符串描述方法的单个参数类型\n    func method_copyArgumentType(Method, UInt32)\n    \n    //通过引用返回一个字符串描述方法的返回值类型\n    func method_getReturnType(Method, UInt32)\n    \n    //返回一个方法接受的参数数量\n    func method_getNumberOfArguments(Method)\n    \n    //通过引用返回一个字符串描述方法单个参数的类型\n    func method_getArgumentType(Method, UInt32, UnsafeMutablePointer<Int8>?, Int)\n    \n    //返回某个方法的结构描述\n    func method_getDescription(Method)\n    \n    //设置某个方法的实现\n    func method_setImplementation(_ m: Method, _ imp: IMP) -> IMP\n    \n    /*\n     交换两个方法的实现\n     \n     IMP imp1 = method_getImplementation(m1);\n     IMP imp2 = method_getImplementation(m2);\n     method_setImplementation(m1, imp2);\n     method_setImplementation(m2, imp1);\n     \n     **/ \n    func method_exchangeImplementations(_m1: Method,_ m2: Method)\n\n```\n\n### 与库一起使用\n\n```\n    \n    //返回所有加载的OC框架和动态库名称  \n    func objc_copyImageNames(UnsafeMutablePointer<UInt32>?)\n    \n    //返回动态库中一个类的原始格式的名称\n    func objc_getImageName(AnyClass?)\n    \n    //返回某个库或者框架中所有类的名称\n    func objc_copyClassNameForImage(UnsafePointer<Int8>, UnsafeMutablePointer<UInt32>?)\n\n\n```\n\n### 与Selectors一起使用\n\n```\n\n    //返回某一方法的名称\n    func sel_getName(Selector)\n    \n    //在OC runtime系统中注册一个方法,映射方法名到一个selector,并且返回selector的值\n    func sel_registerName(UnsafePointer<Int8>)\n    \n    //注册一个方法名到 OC runtime系统中\n    func sel_getUid(UnsafePointer<Int8>)\n    \n    //返回一个布尔值 表示两个方法是否相等\n    func sel_isEqual(Selector, Selector)\n\n```\n\n### 与协议一起使用\n\n```\n    //返回指定协议\n    func objc_getProtocol(UnsafePointer<Int8>)\n    \n    //以数组形式返回runtime中所有已知协议\n    func objc_copyProtocolList(UnsafeMutablePointer<UInt32>)\n    \n    //创建一个协议实例\n    func objc_allocateProtocol(UnsafePointer<Int8>)\n    \n    //在OC运行时系统中注册一个新协议\n    func objc_registerProtocol(Protocol)\n    \n    //给协议添加一个方法\n    func protocol_addMethodDescription(Protocol, Selector, UnsafePointer<Int8>?, Bool, Bool)\n\n    //添加注册过的协议到正在构建的协议中\n    func protocol_addProtocol(Protocol, Protocol)\n    \n    //添加属性到正在构建的协议中\n    func protocol_addProperty(Protocol, UnsafePointer<Int8>, UnsafePointer<objc_property_attribute_t>?, UInt32, Bool, Bool)\n    \n    //返回协议名称\n    func protocol_getName(Protocol)\n    \n    //返回布尔值 表示是否两个协议相等\n    func protocol_isEqual(Protocol?, Protocol?)\n    \n    //返回满足给定协议的方法描述数组\n    func protocol_copyMethodDescriptionList(Protocol, Bool, Bool, UnsafeMutablePointer<UInt32>?)\n    \n    //返回满足给定协议的指定方法的方法描述\n    func protocol_getMethodDescription(Protocol, Selector, Bool, Bool)\n    \n    //返回一个协议声明的属性数组\n    func protocol_copyPropertyList(Protocol, UnsafeMutablePointer<UInt32>)\n    \n    //返回给定协议的指定属性\n    func protocol_getProperty(Protocol, UnsafePointer<Int8>, Bool, Bool)\n    \n    //返回适用某协议的协议数组\n    func protocol_copyProtocolList(Protocol, UnsafeMutablePointer<UInt32>)\n    \n    //返回一个布尔值 表示是否一个协议遵循另一个协议\n    func protocol_comformsToProtocol(Protocol?, Protocol?)\n\n```\n\n### 与属性一起使用\n\n```\n    //返回属性名\n    func property_getName(_ property: objc_property_t) -> UnsafePointer<Int8>\n    \n    //返回一个属性的的特征字符串\n    func property_getAttributes(_ property: objc_property_t) -> UnsafePointer<Int8>\n    \n    //返回指定特征名的属性值\n    func property_copyAttributeValue(_ property: objc_property_t,_ attributeName: UnsafePointer<Int8>) -> UnsafeMutablePointer<Int8>?\n    \n    //返回指定属性的属性特征数组\n    func property_copyAttributeList(_ property: objc_property_t, _ outCount: UnsafeMutablePointer<UInt32>?) -> UnsafeMutablePointer<objc_property_attribute_t>?\n\n```\n\n### OC语言特色的使用\n\n```\n    //当在foreach迭代中检测到一个突变时，由编译器插入。\n    func objc_enumerationMutation(Any)\n    \n    //设置当前的突变处理\n    func objc_setEnumerationMutationHandler(((Any) -> Void)?)\n    \n    //给一个函数创建一个指针  当方法被调用的使用调用指定Block\n    func imp_implementationWithBlock(Any)\n    \n    //返回与一个已经创建使用的IMP关联的Block\n    func imp_getBlock(IMP)\n    \n    //取消与已经创建使用的IMP关联的Block\n    func imp_removeBlock(IMP)\n    \n    //加载被弱引用的对象并返回它\n    func objc_loadWeak()\n    \n    //存储一个弱引用变量值\n    func objc_storeWeak(AutoreleasingUnsafeMutablePointer<AnyObject?>, Any?)\n\n```\n\n### 类定义数据结构\n\n```\n    //在类定义中表示一个方法类型\n    typealias Method\n    \n    //表示一个实例变量类型\n    typealias Ivar\n    \n    //表示一个分类类型\n    typealias Category\n    \n    //表示一个OC声明的属性类型\n    typealias objc_property_t\n    \n    //定义一个OC方法\n    struct objc_method_description\n    \n    //定义一个属性特性\n    struct objc_property_attribute_t\n\n```\n\n### 实例数据类型\n\n  这些是表示对象,类,父类的数据类型\n    \n -  objc_object 指向一个实例对象的指针\n -  objc_object 表示一个实例对象\n -  objc_super  一个实例对象的父类\n\n```\n    //一个类的实例的指针\n    struct objc_object\n    \n    //指定实例对象的父类\n    struct objc_super\n    \n```\n","source":"_posts/iOS/-Objective-C-Runtime.md","raw":"---\ntitle:   Objective-C Runtime\ndate: 2017-11-20 21:25\ncategories:\n- iOS \ntags: \n- runtime\n---\n描述macOS OC运行时库支持的函数和数据结构.\n\n## 通览\n\nOC运行时是一个运行时库,该库用来支持OC语言的动态属性.并且这种情况对所有的的Objectiv-C的app都有关系.OC运行时库支持的函数实现在 /usr/lib/libobjc.A.dylib中的分享库中可以查到.(自己测试是在资源库文件夹下面)\n\n在OC编程中,您完全没有必要直接地使用OC运行时库.这些Api的主要作用是作为OC和其他语言的桥接层.或者更底层的调试.\n\nOC运行时库在macOS 中的实现是特殊的.对于其他平台,GNU编译集合使用类似的Api提供了一种不同的的实现.这个文档只包含了macOS的实现.\n\n底层的OC运行时Api在OS X 版本10.5中做了显著更新.许多函数和所有现有的数据结构被替换为新的函数.老的函数和数据结构在32位模式下被弃用.64位模式下仍然存在.Api在64位模式下约束了一些在32位模式下表示的整型数据值.比如 class Count, protocol Count, methods per class, ivars per class, arguments per method, sizeof(all arguments) per method, class version number.另外,新的Objective-C ABI 对32位模式下的对象实例化约束更多.并且三个其他的24位模式下表示的一些值 methods per class, ivars per class, sizeof(a single ivar).最后,\n老式的NXHashTable和NXMapTable被限制到四百万项.\n\n> 字符串编码\n> 在运行时API中所有的字符指针应该\n 被看作UTF-8编码格式.\n\n## 该文档适用哪些人?\n\n这个文档适用那些对OC运行时有兴趣学习的读者.\n因为这不是关于C的文档.该文档仅当做对OC开发者的一些拓展.\n\n## Topics \n\n### 与Class一起使用\n\n```\n\n    /*\n     cls: 一个类对象\n     返回值: 类的名称,如果传Nil则为空字符串\n     **/\n\n    func class_getName(_ cls:AnyClass?) -> UnsafePointer<Int8>\n    \n    /*\n     cls: 一个类对象\n     返回值: 该类的父类. 如果cls为根类或者cls为Nil的话,返回值为Nil\n     \n     讨论:\n     你应该通常使用NSObject的 superclass()方法替换该方法\n     **/\n\n    func class_getSuperclass(_ cls: AnyClass?) -> AnyClass?\n    \n    /*\n     返回一个布尔值, 该值表示是否一个类对象是一个元类\n     \n     cls: 一个类对象\n     返回值: 如果参数是一个元类,则返回true. 如果非元类,则返回false,或者参数为Nil也返回false.\n    \n     **/\n\n    func class_isMetaClass(_ cls: AnyClass?) -> Bool\n\n    /*\n     返回一个类的实例占用内存的大小\n     \n     cls: 一个类对象\n     返回值: 类实例的占用的字节.如果参数为Nil则返回0\n    **/\n\n    func class_getInstanceSize(_ cls: AnyClass?) -> Int\n    \n    \n    /*\n     返回给定类的一个指定实例变量\n     \n     cls: 想要获取实例变量的类\n     name: 去获取的实例变量名\n     返回值: 指定名字的实例变量的指针\n    **/\n\n    func class_getInstanceVariable(_ cls: AnyClass?, _ name: UnsafePointer<Int8>) -> Ivar?\n    \n    /*\n     返回某个类指定名字的类变量\n     \n     cls: 要获取类变量的类\n     name: 要获取的类变量名称\n     返回值: 指定名字的类变量的指针\n    **/\n\n    func class_getClassVariable(_ cls: AnyClass?, _ name: UnsagePointer<Int8>) ->Ivar?\n    \n    /*\n     给一个类添加一个实例变量\n     \n     返回值: 如果实例变量加入成功,返回true.否则返回false(比如该类已经包含一个相同名字的实例变量)\n     \n     讨论:\n     这个函数只能在objc_allocateClassPair(_:_:_:)之后调用.在objc_registerClassPair(_:)之前调用.不支持给一个已经注册过的类添加实例变量.\n     \n     操作的类不能使元类.不支持给一个元类添加实例变量.\n     \n     实例变量以字节的最小对齐方式为1<<align.实例变量的最小对齐方式取决于实例变量的类型和设备的架构.对于任意指针类型的变量,传log2(sizeof(pointer_type))\n    \n     **/\n\n    func class_addIvar(_ cls: AnyClass?,_ name: UnsagePointer<Int8>, _ size: Int, _ alignment: UInt8, _ types: UnsagePointer<Int8>?) -> Bool\n    \n    /*\n     获取类的实例变量列表\n     \n     cls: 需要拷贝属性列表的类\n     outCount: 在返回时,包含返回数组的长度.如果outCount是NULL,则不反悔该长度.\n     返回值: 一个指针数组描述类声明的实例变量.任何被父类声明的实例变量不包含在内.数组包含* outCount指针，后跟一个空终止符。您必须使用free()函数释放数组.\n     如果类声明中没有实例变量.或者cls为Nil,则返回NULL 并且*coutCount指针为0\n     **/\n\n    func class_copyIvarList(_ cls: AnyClass?, _ outCount: UnsafeMutablePointer<UInt32>?) -> UnsafeMutablePointer<Ivar>?\n    \n    //返回指定类实例变量布局的描述\n    func class_getIvarLayout(AnyClass?)\n    \n    //设置指定类实例变量布局\n    func class_setIvarLayout(AnyClass?, UnsafePointer<UInt8>?)\n    \n    //返回弱引用实例变量的布局描述\n    func class_getWeakIvarLayout(AnyClass?)\n    \n    //设置弱引用实例变量的布局\n    func class_setWeakIvarLayout(AnyClas?, UnsafePointer<UInt8>?)\n    \n    /*\n     返回指定类的指定名称的属性\n     \n     返回值: 一个objc_property_t类型的指针.如果类中并未声明该名称属性或者cls为Nil则返回NULL.\n     **/\n    func class_getProperty(_ cls: AnyClass?, _ name: UnsafePointer<Int8>) -> objc_property_t?\n    \n    /*\n     描述声明的一个类的属性\n     \n     cls: 想要检查的类\n     outCount: 在返回时,包含返回数组的长度.如果outCount 是NULL,数组长度不返回.\n     返回值: objc_property_t类型的指针数组.任何父类声明的属性不包含在内.数组包含* outCount指针，后跟一个空终止符。您必须使用free()函数释放数组.\n     如果类声明中没有实例变量.或者cls为Nil,则返回NULL 并且*coutCount指针为0\n     **/\n\n    func class_copyPropertyList(_ cls: AnyClass?, _ outCount: UnsageMutablePointer<UInt32>?) -> UnsafeMutablePointer<objc_property_t>?\n    \n    /*添加一个新方法给指定类.指定方法名和方法实现\n    \n      cls:需要添加方法的类 \n      name: 指定添加的方法名  \n      imp: 方法的实现的函数,该函数必须携带两个参数 self 和  _cmd\n      types: 一个字符数组,用来描述方法的参数类型.参考苹果官方文档 [Type Encodings](https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/ObjCRuntimeGuide/Articles/ocrtTypeEncodings.html#//apple_ref/doc/uid/TP40008048-CH100)\n      返回值: 如果添加成功,返回true 否则返回false(例如添加的方法已经存在)\n      \n      讨论:\n      该方法会重载父类的实现,但是并不会替换在这个类中已经存在的实现.想要改变已经存在的实现的话,使用method_setImplementation(_:_:)\n      一个OC方法仅仅是一个C的函数.该函数携带至少两个参数----self 和 _cmd.举例,给定下列函数\n    \n      void myMethodIMP(id self, SEL _cmd)\n      {\n        //implementation ...\n        \n      }\n      \n      您可以动态添加该函数到一个类中作为一个方法.(调用 resolveThisMethodDynamically) 像这样:\n      \n      class_addMethod([self class], @selector(resolveThisMethodDynamically), (IMP) myMethodIMP, \"v@:\");\n      \n     **/\n\n    func  class_addMethod(_ cls:AnyClass?,_ name:Selector,_ imp:IMP,_ types: UnsagePointer<Int8>?)\n    \n    /*\n     获取一个类的指定实例方法\n     \n     aClass: 要检查的类\n     aSelector: 要获取方法的选择器\n     返回值: 指定方法选择器所对应的方法实现,如果指定类或者它的父类不包含指定选择器的实例方法则返回NULL.\n     \n     讨论:\n     注意这个函数搜索父类的实现,而class_copyMethodList(_:_:)是不会的\n     **/\n\n    func class_getInstanceMethod(_ cls:AnyClass?,_ name: Selector) -> Method?\n    \n    /*\n     返回指定类指定名称的类方法\n     \n     aClass: 一个雷定义的指针.该类包含您想要获取的方法.\n     aSelector: 一个SEL类型的指针.该SEL包含你想要获取的方法.\n     返回值: Method的指针.对应指定类指定方法选择器的实现.如果该类或者它的父类不包含这个类方法,则返回NULL.\n     \n     讨论:\n     注意这个函数搜索父类的方法实现.class_copyMethodList(_:_:)不搜索\n     **/\n\n     func class_getClassMethod(_ cls: AnyClass?, _ name: Selector) -> Method?\n     \n    /*\n     返回一个类的实例方法列表\n     \n     cls: 想要检测的类\n     outCount: 在返回时,包含数组的长度.如果outCounte是NULL,则不返回.\n     返回值: Method类型的指针数组.表示该类所有的实例方法实现.\n     不包含父类的实例方法实现.该数组包含*outCount指针后面跟一个空终止符.您必须使用free()函数释放该数组.\n     \n     如果该类没有实例方法.或者该类为Nil,则返回NULL并且*outCount是0\n     \n     讨论:\n     \n     获取一个类的类方法列表.使用class_copyMethodList(object_getClass(cls), &count)\n     获取父类的方法列表,使用class_getInstanceMethod(_:_:)或者class_getClassMehtod(_:_:)\n     **/\n\n    func class_copyMethodList(_ cls: AnyClass?, _ outCount: UnsageMutablePointer<UInt32>?) -> UnsafeMutablePointer<Method>?\n\n    /*\n     替换指定类的方法的实现\n     \n     cls:要修改的类\n     name: 一个方法选择器用来确认哪个方法实现要被替换\n     imp:新的方法实现.\n     types: 一个字符串集合,用来描述参数的类型.必须至少携带两个参数, self 和_cmd, 第二个和第三个字符必须为\"@:\"(第一个参数为返回类型)\n     \n     返回值: 修改的类之前的方法实现.\n     \n     讨论:\n    可以通过两种方式实现该函数行为:\n    如果方法名不存在,通过call_addMethod(_:_:_:_:)方法的调用添加函数实现.按照types添加参数类型和返回值类型.\n    如果方法名存在,他的IMP通过method_setImplementation(_:_:)方法的调用来替换函数实现.types参数被忽略.\n    \n     **/\n\n    func class_replaceMethod(_ cls:AnyClass?, _ name: Selector,_ imp: IMP, _ types: UnsafePointer<Int8>?) -> IMP?\n    \n    /*\n     获取指定实例方法的实现\n    \n     cls: 指定类\n     name: 方法选择器\n     返回值: 返回函数指针,如果cls为Nil,则返回NULL.\n     \n     讨论:\n     \n     class_getMethodImplementation(_:_:)可能会比method_getImplementtation(class_getInstanceMethod(cls, name))更快一些.\n     \n     返回的函数指针可能是运行时的函数，而不是实际的方法实现。例如，如果类的实例不响应选择器，那么返回的函数指针将是运行时消息转发机制的一部分。\n     **/ \n\n    func class_getMethodImplementation(_ cls: AnyClass?,_ name: Selector) -> IMP?\n    \n    /*\n     返回将要被调用的指定消息的函数指针\n     \n     cls: 指定的类\n     name: 一个方法选择器\n     返回值: 返回函数指针,如果cls为Nil,则返回NULL.\n     **/ \n\n    func class_getMethodImplementation_stret(_ cls: AnyClass?,_ name: Selector) -> IMP?\n    \n    /*\n    返回一个布尔值表示是否一个实例响应了指定方法\n    \n    cls : 响应消息的类\n    sel : 一个方法选择器\n    返回值: 响应方法,则返回true,否则返回false\n    \n    讨论:\n    通常使用NSObject的responds(to:)或者instancesRespond(to:)方法来替换该方法.\n     **/\n    func class_respondsToSelector(AnyClass?, Selector)\n\n    /*\n     给一个类添加一个协议\n     \n     cls: 要改动的类\n     outCount: 要添加到该类的协议\n     返回值: 添加成功,返回ture;否则false(比如该类中已经存在该协议)\n    \n     **/\n    func class_addProtocol(_ cls: AnyClass?, _ protocol: Protocol) -> Bool\n    \n    /*\n     给一个类添加一个属性\n     \n     cls: 要改动的类\n     name: 属性名\n     attributes: 属性的描述(readonly, nonatomic, asign...)\n     attributeCount: 属性描述的数量\n     返回值: 添加成功,返回true,否则false(比如已经存在该属性)\n     **/\n\n    func class_addProperty(_ cls: AnyClass?, _ name: UnsagePointer<Int8>, _ attributes: UnsafePointer<objc_property_attribute_t>?, _ attributeCounte: UInt32) -> Bool\n    \n    /*\n     替换一个类的属性\n     **/\n    func class_replaceProperty(_ cls:AnyClass?, _ name: UnsafePointer<Int8>, _ attributes: UnsafePointer<objc_property_attribute_t>?, _ attrubuteCount: UInt32)\n    \n    /*\n     返回一个布尔值 表示是否一个类执行指定协议方法\n     \n     通常使用NSObject的conforms(to:) 来替换它\n     **/\n\n    func class_conformsToProtocol(_ cls: AnyClass?,_ protocol: Protocol?) -> Bool\n    /*\n     描述一个类包含的协议\n     cls: 指定的类\n     outCount: 返回数组的长度.如果outCount是NULL,返回值不包含数组的长度.\n     返回值: Protocol* 类型的指针数组.描述类中包含的协议.父类的协议不包含其中.数组中包含*outCount指针,并庚随一个空的终止符.必须使用free()函数释放数组.\n     \n     返回值: 如果cls中没有协议,或者cls为Nil,返回NULL并且*outCount为0\n     **/\n\n    func class_copyProtocolList(_ cls: AnyClass?,_ outCount: UnsafeMutablePointer<UInt32>?)  -> AutoreleasingUnsafeMutablePointer<Protocol>?\n    \n    //返回类定义的版本号\n    func class_getVersion(AnyClass?)\n    \n    //设置一个类定义的版本号\n    func class_setVersion(AnyClass, Int32)\n\n\n```\n\n### 添加Class\n\n```\n\n    /*\n     创建一个类和元类\n     \n     superclass: 新创建类的父类.如果创建一个根类则为Nil\n     name: 新创建类的类名.该字符串会被拷贝.\n     extraBytes: 类和元类末尾为索引实例变量而分配的字节数.通常为0\n     返回值: 新创建的类.或者为Nil如果该类无法被创建(比如使用的名字已经被使用)\n     \n     讨论:\n     可以获取新创建元类的指针通过调用object_getClass(newClass).\n     创建一个类.需要先调用objc_allocateClassPair(_:_:_:).然后设置类的特性使用诸如class_addMethod(_:_:_:_:)和class_addIvar(_:_:_:_:_:)这些方法.当你创建完该类后.调用objc_registerClassPair(_:)注册该类后才可以使用.\n     \n     实例方法和实例变量应该添加到自身类中.类方法应该添加到元类中.\n     \n     **/\n\n    func objc_allocateClassPair(_ superclass: AnyClass?, _ name: UnsafePointer<Int8>, _ extraBytes: Int) -> AnyClass?\n    \n    /*\n     销毁一个类和它关联的元类.\n     \n     讨论:\n     如果cls类实例或者它的任何子类存在的话,不要调用该函数.\n     **/\n\n    func objc_disposeClassPair(_ cls: AnyClass)\n    \n    //注册一个类 该类已使用objc_allocateClassPair(_:_:_:)方法创建\n    func objc_registerClassPair(AnyClass)\n    \n    /*\n     在Foundation框架下的KVO使用\n     \n     讨论:\n     自身不要调用该函数\n     **/\n\n    func objc_duplicateClass(AnyClass, UnsafePointer<Int8>, Int)\n\n```\n\n### 与实例一起使用\n\n```\n\n    /*\n     读取一个对象中实例变量的值\n     讨论:\n     如果实例变量名已知的话,object_getIvar(_:_:)比object_getInstanceVariable获取值更快一些.\n     **/\n\n    func object_getIvar(_ obj: Any?,_ ivar: Ivar) -> Any?\n    \n    //设置一个对象实例变量的值\n    func object_setIvar(_ obj: Any?,_ ivar: Ivar,_ varlue: Any?)\n    \n    //返回某对象的类名\n    func object_getClassName(_obj: Any?)\n    \n    //返回实例对象的类对象\n    func object_getClass(_ obj: Any?) -> AnyClass?\n    \n    //设置一个对象的类 返回值为对象之前所属的类对象.\n    func object_setClass(_ obj: Any?,_ cls: AnyClass) -> AnyClass?\n\n```\n\n### 获取类定义\n\n```\n    //获取已注册类定义的列表\n    func objc_getClassList(AutoreleasingUnsafeMutablePointer<AnyClass>?, Int32)\n    \n    //创建并且返回所有已注册的类定义的指针列表\n    func objc_copyClassList(UnsafeMutablePointer<UInt32>?)\n    \n    //返回某个类的类定义\n    func objc_lookUpClass(UnsafePointer<Int8>)\n    \n    //返回某个类的类定义\n    func objc_getClass(UnsafePointer<Int8>)\n    \n    //返回某个类的类定义\n    func objc_getRequiredClass(UnsafePointer<Int8>)\n    \n    //返回某个类的元类定义\n    func objc_getMetaClass(UnsafePointer<Int8>)\n\n```\n\n### 与实例变量一起使用\n\n```\n    //返回实例变量名称\n    func ivar_getName(Ivar)\n    \n    //返回实例变量的类型\n    func ivar_getTypeEncoding(Ivar)\n\n    //返回一个实例变量相对内存基址的偏移值\n    func ivar_getOffset(Ivar)\n\n```\n\n### 关联引用\n\n```\n    //使用指定key和关联策略设置某个对象的关联值\n    func objc_setAssociateObject(Any, UnsafeRawPointer, Any?, objc_AssociationPoicy)\n    \n    //返回某个对象该key下对应的关联值\n    func objc_getAssociateObject(Any, UnsafeRawPointer)\n    \n    //移除某个对象所有关联对象\n    func objc_removeAssociateObjects(Any)\n\n```\n\n### 与方法一起使用\n\n```\n    /*\n     返回方法的SEL\n     \n     讨论:\n     获取C字符串的方法名.调用sel_getName(method_getName(method))\n     **/\n\n    func method_getName(_ m: Method) -> Selector\n    \n    //返回IMP类型的函数指针\n    func method_getImplementation(_ m: Method) -> IMP\n    \n    //返回一个字符串描述方法的参数和返回类型\n    func method_getTypeEncoding(_ m: Method) -> UnsafePointer<Int8>?\n    \n    //返回一个字符串描述方法的返回类型\n    func method_copyReturnType(Method)\n    \n    //返回一个字符串描述方法的单个参数类型\n    func method_copyArgumentType(Method, UInt32)\n    \n    //通过引用返回一个字符串描述方法的返回值类型\n    func method_getReturnType(Method, UInt32)\n    \n    //返回一个方法接受的参数数量\n    func method_getNumberOfArguments(Method)\n    \n    //通过引用返回一个字符串描述方法单个参数的类型\n    func method_getArgumentType(Method, UInt32, UnsafeMutablePointer<Int8>?, Int)\n    \n    //返回某个方法的结构描述\n    func method_getDescription(Method)\n    \n    //设置某个方法的实现\n    func method_setImplementation(_ m: Method, _ imp: IMP) -> IMP\n    \n    /*\n     交换两个方法的实现\n     \n     IMP imp1 = method_getImplementation(m1);\n     IMP imp2 = method_getImplementation(m2);\n     method_setImplementation(m1, imp2);\n     method_setImplementation(m2, imp1);\n     \n     **/ \n    func method_exchangeImplementations(_m1: Method,_ m2: Method)\n\n```\n\n### 与库一起使用\n\n```\n    \n    //返回所有加载的OC框架和动态库名称  \n    func objc_copyImageNames(UnsafeMutablePointer<UInt32>?)\n    \n    //返回动态库中一个类的原始格式的名称\n    func objc_getImageName(AnyClass?)\n    \n    //返回某个库或者框架中所有类的名称\n    func objc_copyClassNameForImage(UnsafePointer<Int8>, UnsafeMutablePointer<UInt32>?)\n\n\n```\n\n### 与Selectors一起使用\n\n```\n\n    //返回某一方法的名称\n    func sel_getName(Selector)\n    \n    //在OC runtime系统中注册一个方法,映射方法名到一个selector,并且返回selector的值\n    func sel_registerName(UnsafePointer<Int8>)\n    \n    //注册一个方法名到 OC runtime系统中\n    func sel_getUid(UnsafePointer<Int8>)\n    \n    //返回一个布尔值 表示两个方法是否相等\n    func sel_isEqual(Selector, Selector)\n\n```\n\n### 与协议一起使用\n\n```\n    //返回指定协议\n    func objc_getProtocol(UnsafePointer<Int8>)\n    \n    //以数组形式返回runtime中所有已知协议\n    func objc_copyProtocolList(UnsafeMutablePointer<UInt32>)\n    \n    //创建一个协议实例\n    func objc_allocateProtocol(UnsafePointer<Int8>)\n    \n    //在OC运行时系统中注册一个新协议\n    func objc_registerProtocol(Protocol)\n    \n    //给协议添加一个方法\n    func protocol_addMethodDescription(Protocol, Selector, UnsafePointer<Int8>?, Bool, Bool)\n\n    //添加注册过的协议到正在构建的协议中\n    func protocol_addProtocol(Protocol, Protocol)\n    \n    //添加属性到正在构建的协议中\n    func protocol_addProperty(Protocol, UnsafePointer<Int8>, UnsafePointer<objc_property_attribute_t>?, UInt32, Bool, Bool)\n    \n    //返回协议名称\n    func protocol_getName(Protocol)\n    \n    //返回布尔值 表示是否两个协议相等\n    func protocol_isEqual(Protocol?, Protocol?)\n    \n    //返回满足给定协议的方法描述数组\n    func protocol_copyMethodDescriptionList(Protocol, Bool, Bool, UnsafeMutablePointer<UInt32>?)\n    \n    //返回满足给定协议的指定方法的方法描述\n    func protocol_getMethodDescription(Protocol, Selector, Bool, Bool)\n    \n    //返回一个协议声明的属性数组\n    func protocol_copyPropertyList(Protocol, UnsafeMutablePointer<UInt32>)\n    \n    //返回给定协议的指定属性\n    func protocol_getProperty(Protocol, UnsafePointer<Int8>, Bool, Bool)\n    \n    //返回适用某协议的协议数组\n    func protocol_copyProtocolList(Protocol, UnsafeMutablePointer<UInt32>)\n    \n    //返回一个布尔值 表示是否一个协议遵循另一个协议\n    func protocol_comformsToProtocol(Protocol?, Protocol?)\n\n```\n\n### 与属性一起使用\n\n```\n    //返回属性名\n    func property_getName(_ property: objc_property_t) -> UnsafePointer<Int8>\n    \n    //返回一个属性的的特征字符串\n    func property_getAttributes(_ property: objc_property_t) -> UnsafePointer<Int8>\n    \n    //返回指定特征名的属性值\n    func property_copyAttributeValue(_ property: objc_property_t,_ attributeName: UnsafePointer<Int8>) -> UnsafeMutablePointer<Int8>?\n    \n    //返回指定属性的属性特征数组\n    func property_copyAttributeList(_ property: objc_property_t, _ outCount: UnsafeMutablePointer<UInt32>?) -> UnsafeMutablePointer<objc_property_attribute_t>?\n\n```\n\n### OC语言特色的使用\n\n```\n    //当在foreach迭代中检测到一个突变时，由编译器插入。\n    func objc_enumerationMutation(Any)\n    \n    //设置当前的突变处理\n    func objc_setEnumerationMutationHandler(((Any) -> Void)?)\n    \n    //给一个函数创建一个指针  当方法被调用的使用调用指定Block\n    func imp_implementationWithBlock(Any)\n    \n    //返回与一个已经创建使用的IMP关联的Block\n    func imp_getBlock(IMP)\n    \n    //取消与已经创建使用的IMP关联的Block\n    func imp_removeBlock(IMP)\n    \n    //加载被弱引用的对象并返回它\n    func objc_loadWeak()\n    \n    //存储一个弱引用变量值\n    func objc_storeWeak(AutoreleasingUnsafeMutablePointer<AnyObject?>, Any?)\n\n```\n\n### 类定义数据结构\n\n```\n    //在类定义中表示一个方法类型\n    typealias Method\n    \n    //表示一个实例变量类型\n    typealias Ivar\n    \n    //表示一个分类类型\n    typealias Category\n    \n    //表示一个OC声明的属性类型\n    typealias objc_property_t\n    \n    //定义一个OC方法\n    struct objc_method_description\n    \n    //定义一个属性特性\n    struct objc_property_attribute_t\n\n```\n\n### 实例数据类型\n\n  这些是表示对象,类,父类的数据类型\n    \n -  objc_object 指向一个实例对象的指针\n -  objc_object 表示一个实例对象\n -  objc_super  一个实例对象的父类\n\n```\n    //一个类的实例的指针\n    struct objc_object\n    \n    //指定实例对象的父类\n    struct objc_super\n    \n```\n","slug":"iOS/-Objective-C-Runtime","published":1,"updated":"2020-09-27T11:10:08.118Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgq6gnz2007yt29kdlsnbo4k","content":"<p>描述macOS OC运行时库支持的函数和数据结构.</p>\n<h2 id=\"通览\"><a href=\"#通览\" class=\"headerlink\" title=\"通览\"></a>通览</h2><p>OC运行时是一个运行时库,该库用来支持OC语言的动态属性.并且这种情况对所有的的Objectiv-C的app都有关系.OC运行时库支持的函数实现在 /usr/lib/libobjc.A.dylib中的分享库中可以查到.(自己测试是在资源库文件夹下面)</p>\n<p>在OC编程中,您完全没有必要直接地使用OC运行时库.这些Api的主要作用是作为OC和其他语言的桥接层.或者更底层的调试.</p>\n<p>OC运行时库在macOS 中的实现是特殊的.对于其他平台,GNU编译集合使用类似的Api提供了一种不同的的实现.这个文档只包含了macOS的实现.</p>\n<p>底层的OC运行时Api在OS X 版本10.5中做了显著更新.许多函数和所有现有的数据结构被替换为新的函数.老的函数和数据结构在32位模式下被弃用.64位模式下仍然存在.Api在64位模式下约束了一些在32位模式下表示的整型数据值.比如 class Count, protocol Count, methods per class, ivars per class, arguments per method, sizeof(all arguments) per method, class version number.另外,新的Objective-C ABI 对32位模式下的对象实例化约束更多.并且三个其他的24位模式下表示的一些值 methods per class, ivars per class, sizeof(a single ivar).最后,<br>老式的NXHashTable和NXMapTable被限制到四百万项.</p>\n<blockquote>\n<p>字符串编码<br>在运行时API中所有的字符指针应该<br> 被看作UTF-8编码格式.</p>\n</blockquote>\n<h2 id=\"该文档适用哪些人\"><a href=\"#该文档适用哪些人\" class=\"headerlink\" title=\"该文档适用哪些人?\"></a>该文档适用哪些人?</h2><p>这个文档适用那些对OC运行时有兴趣学习的读者.<br>因为这不是关于C的文档.该文档仅当做对OC开发者的一些拓展.</p>\n<h2 id=\"Topics\"><a href=\"#Topics\" class=\"headerlink\" title=\"Topics\"></a>Topics</h2><h3 id=\"与Class一起使用\"><a href=\"#与Class一起使用\" class=\"headerlink\" title=\"与Class一起使用\"></a>与Class一起使用</h3><pre><code class=\"hljs reasonml\">\n<span class=\"hljs-comment\">/*</span>\n<span class=\"hljs-comment\"> cls: 一个类对象</span>\n<span class=\"hljs-comment\"> 返回值: 类的名称,如果传Nil则为空字符串</span>\n<span class=\"hljs-comment\"> **/</span>\n\nfunc <span class=\"hljs-keyword\">class</span><span class=\"hljs-constructor\">_getName(<span class=\"hljs-params\">_</span> <span class=\"hljs-params\">cls</span>:AnyClass?)</span> -&gt; UnsafePointer&lt;Int8&gt;\n\n<span class=\"hljs-comment\">/*</span>\n<span class=\"hljs-comment\"> cls: 一个类对象</span>\n<span class=\"hljs-comment\"> 返回值: 该类的父类. 如果cls为根类或者cls为Nil的话,返回值为Nil</span>\n<span class=\"hljs-comment\"> </span>\n<span class=\"hljs-comment\"> 讨论:</span>\n<span class=\"hljs-comment\"> 你应该通常使用NSObject的 superclass()方法替换该方法</span>\n<span class=\"hljs-comment\"> **/</span>\n\nfunc <span class=\"hljs-keyword\">class</span><span class=\"hljs-constructor\">_getSuperclass(<span class=\"hljs-params\">_</span> <span class=\"hljs-params\">cls</span>: AnyClass?)</span> -&gt; AnyClass?\n\n<span class=\"hljs-comment\">/*</span>\n<span class=\"hljs-comment\"> 返回一个布尔值, 该值表示是否一个类对象是一个元类</span>\n<span class=\"hljs-comment\"> </span>\n<span class=\"hljs-comment\"> cls: 一个类对象</span>\n<span class=\"hljs-comment\"> 返回值: 如果参数是一个元类,则返回true. 如果非元类,则返回false,或者参数为Nil也返回false.</span>\n<span class=\"hljs-comment\"></span>\n<span class=\"hljs-comment\"> **/</span>\n\nfunc <span class=\"hljs-keyword\">class</span><span class=\"hljs-constructor\">_isMetaClass(<span class=\"hljs-params\">_</span> <span class=\"hljs-params\">cls</span>: AnyClass?)</span> -&gt; Bool\n\n<span class=\"hljs-comment\">/*</span>\n<span class=\"hljs-comment\"> 返回一个类的实例占用内存的大小</span>\n<span class=\"hljs-comment\"> </span>\n<span class=\"hljs-comment\"> cls: 一个类对象</span>\n<span class=\"hljs-comment\"> 返回值: 类实例的占用的字节.如果参数为Nil则返回0</span>\n<span class=\"hljs-comment\">**/</span>\n\nfunc <span class=\"hljs-keyword\">class</span><span class=\"hljs-constructor\">_getInstanceSize(<span class=\"hljs-params\">_</span> <span class=\"hljs-params\">cls</span>: AnyClass?)</span> -&gt; Int\n\n\n<span class=\"hljs-comment\">/*</span>\n<span class=\"hljs-comment\"> 返回给定类的一个指定实例变量</span>\n<span class=\"hljs-comment\"> </span>\n<span class=\"hljs-comment\"> cls: 想要获取实例变量的类</span>\n<span class=\"hljs-comment\"> name: 去获取的实例变量名</span>\n<span class=\"hljs-comment\"> 返回值: 指定名字的实例变量的指针</span>\n<span class=\"hljs-comment\">**/</span>\n\nfunc <span class=\"hljs-keyword\">class</span><span class=\"hljs-constructor\">_getInstanceVariable(<span class=\"hljs-params\">_</span> <span class=\"hljs-params\">cls</span>: AnyClass?, <span class=\"hljs-params\">_</span> <span class=\"hljs-params\">name</span>: UnsafePointer&lt;Int8&gt;)</span> -&gt; Ivar?\n\n<span class=\"hljs-comment\">/*</span>\n<span class=\"hljs-comment\"> 返回某个类指定名字的类变量</span>\n<span class=\"hljs-comment\"> </span>\n<span class=\"hljs-comment\"> cls: 要获取类变量的类</span>\n<span class=\"hljs-comment\"> name: 要获取的类变量名称</span>\n<span class=\"hljs-comment\"> 返回值: 指定名字的类变量的指针</span>\n<span class=\"hljs-comment\">**/</span>\n\nfunc <span class=\"hljs-keyword\">class</span><span class=\"hljs-constructor\">_getClassVariable(<span class=\"hljs-params\">_</span> <span class=\"hljs-params\">cls</span>: AnyClass?, <span class=\"hljs-params\">_</span> <span class=\"hljs-params\">name</span>: UnsagePointer&lt;Int8&gt;)</span> -&gt;Ivar?\n\n<span class=\"hljs-comment\">/*</span>\n<span class=\"hljs-comment\"> 给一个类添加一个实例变量</span>\n<span class=\"hljs-comment\"> </span>\n<span class=\"hljs-comment\"> 返回值: 如果实例变量加入成功,返回true.否则返回false(比如该类已经包含一个相同名字的实例变量)</span>\n<span class=\"hljs-comment\"> </span>\n<span class=\"hljs-comment\"> 讨论:</span>\n<span class=\"hljs-comment\"> 这个函数只能在objc_allocateClassPair(_:_:_:)之后调用.在objc_registerClassPair(_:)之前调用.不支持给一个已经注册过的类添加实例变量.</span>\n<span class=\"hljs-comment\"> </span>\n<span class=\"hljs-comment\"> 操作的类不能使元类.不支持给一个元类添加实例变量.</span>\n<span class=\"hljs-comment\"> </span>\n<span class=\"hljs-comment\"> 实例变量以字节的最小对齐方式为1&lt;&lt;align.实例变量的最小对齐方式取决于实例变量的类型和设备的架构.对于任意指针类型的变量,传log2(sizeof(pointer_type))</span>\n<span class=\"hljs-comment\"></span>\n<span class=\"hljs-comment\"> **/</span>\n\nfunc <span class=\"hljs-keyword\">class</span><span class=\"hljs-constructor\">_addIvar(<span class=\"hljs-params\">_</span> <span class=\"hljs-params\">cls</span>: AnyClass?,<span class=\"hljs-params\">_</span> <span class=\"hljs-params\">name</span>: UnsagePointer&lt;Int8&gt;, <span class=\"hljs-params\">_</span> <span class=\"hljs-params\">size</span>: Int, <span class=\"hljs-params\">_</span> <span class=\"hljs-params\">alignment</span>: UInt8, <span class=\"hljs-params\">_</span> <span class=\"hljs-params\">types</span>: UnsagePointer&lt;Int8&gt;?)</span> -&gt; Bool\n\n<span class=\"hljs-comment\">/*</span>\n<span class=\"hljs-comment\"> 获取类的实例变量列表</span>\n<span class=\"hljs-comment\"> </span>\n<span class=\"hljs-comment\"> cls: 需要拷贝属性列表的类</span>\n<span class=\"hljs-comment\"> outCount: 在返回时,包含返回数组的长度.如果outCount是NULL,则不反悔该长度.</span>\n<span class=\"hljs-comment\"> 返回值: 一个指针数组描述类声明的实例变量.任何被父类声明的实例变量不包含在内.数组包含* outCount指针，后跟一个空终止符。您必须使用free()函数释放数组.</span>\n<span class=\"hljs-comment\"> 如果类声明中没有实例变量.或者cls为Nil,则返回NULL 并且*coutCount指针为0</span>\n<span class=\"hljs-comment\"> **/</span>\n\nfunc <span class=\"hljs-keyword\">class</span><span class=\"hljs-constructor\">_copyIvarList(<span class=\"hljs-params\">_</span> <span class=\"hljs-params\">cls</span>: AnyClass?, <span class=\"hljs-params\">_</span> <span class=\"hljs-params\">outCount</span>: UnsafeMutablePointer&lt;UInt32&gt;?)</span> -&gt; UnsafeMutablePointer&lt;Ivar&gt;?\n\n<span class=\"hljs-comment\">//返回指定类实例变量布局的描述</span>\nfunc <span class=\"hljs-keyword\">class</span><span class=\"hljs-constructor\">_getIvarLayout(AnyClass?)</span>\n\n<span class=\"hljs-comment\">//设置指定类实例变量布局</span>\nfunc <span class=\"hljs-keyword\">class</span><span class=\"hljs-constructor\">_setIvarLayout(AnyClass?, UnsafePointer&lt;UInt8&gt;?)</span>\n\n<span class=\"hljs-comment\">//返回弱引用实例变量的布局描述</span>\nfunc <span class=\"hljs-keyword\">class</span><span class=\"hljs-constructor\">_getWeakIvarLayout(AnyClass?)</span>\n\n<span class=\"hljs-comment\">//设置弱引用实例变量的布局</span>\nfunc <span class=\"hljs-keyword\">class</span><span class=\"hljs-constructor\">_setWeakIvarLayout(AnyClas?, UnsafePointer&lt;UInt8&gt;?)</span>\n\n<span class=\"hljs-comment\">/*</span>\n<span class=\"hljs-comment\"> 返回指定类的指定名称的属性</span>\n<span class=\"hljs-comment\"> </span>\n<span class=\"hljs-comment\"> 返回值: 一个objc_property_t类型的指针.如果类中并未声明该名称属性或者cls为Nil则返回NULL.</span>\n<span class=\"hljs-comment\"> **/</span>\nfunc <span class=\"hljs-keyword\">class</span><span class=\"hljs-constructor\">_getProperty(<span class=\"hljs-params\">_</span> <span class=\"hljs-params\">cls</span>: AnyClass?, <span class=\"hljs-params\">_</span> <span class=\"hljs-params\">name</span>: UnsafePointer&lt;Int8&gt;)</span> -&gt; objc_property_t?\n\n<span class=\"hljs-comment\">/*</span>\n<span class=\"hljs-comment\"> 描述声明的一个类的属性</span>\n<span class=\"hljs-comment\"> </span>\n<span class=\"hljs-comment\"> cls: 想要检查的类</span>\n<span class=\"hljs-comment\"> outCount: 在返回时,包含返回数组的长度.如果outCount 是NULL,数组长度不返回.</span>\n<span class=\"hljs-comment\"> 返回值: objc_property_t类型的指针数组.任何父类声明的属性不包含在内.数组包含* outCount指针，后跟一个空终止符。您必须使用free()函数释放数组.</span>\n<span class=\"hljs-comment\"> 如果类声明中没有实例变量.或者cls为Nil,则返回NULL 并且*coutCount指针为0</span>\n<span class=\"hljs-comment\"> **/</span>\n\nfunc <span class=\"hljs-keyword\">class</span><span class=\"hljs-constructor\">_copyPropertyList(<span class=\"hljs-params\">_</span> <span class=\"hljs-params\">cls</span>: AnyClass?, <span class=\"hljs-params\">_</span> <span class=\"hljs-params\">outCount</span>: UnsageMutablePointer&lt;UInt32&gt;?)</span> -&gt; UnsafeMutablePointer&lt;objc_property_t&gt;?\n\n<span class=\"hljs-comment\">/*添加一个新方法给指定类.指定方法名和方法实现</span>\n<span class=\"hljs-comment\"></span>\n<span class=\"hljs-comment\">  cls:需要添加方法的类 </span>\n<span class=\"hljs-comment\">  name: 指定添加的方法名  </span>\n<span class=\"hljs-comment\">  imp: 方法的实现的函数,该函数必须携带两个参数 self 和  _cmd</span>\n<span class=\"hljs-comment\">  types: 一个字符数组,用来描述方法的参数类型.参考苹果官方文档 [Type Encodings](https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/ObjCRuntimeGuide/Articles/ocrtTypeEncodings.html#//apple_ref/doc/uid/TP40008048-CH100)</span>\n<span class=\"hljs-comment\">  返回值: 如果添加成功,返回true 否则返回false(例如添加的方法已经存在)</span>\n<span class=\"hljs-comment\">  </span>\n<span class=\"hljs-comment\">  讨论:</span>\n<span class=\"hljs-comment\">  该方法会重载父类的实现,但是并不会替换在这个类中已经存在的实现.想要改变已经存在的实现的话,使用method_setImplementation(_:_:)</span>\n<span class=\"hljs-comment\">  一个OC方法仅仅是一个C的函数.该函数携带至少两个参数----self 和 _cmd.举例,给定下列函数</span>\n<span class=\"hljs-comment\"></span>\n<span class=\"hljs-comment\">  void myMethodIMP(id self, SEL _cmd)</span>\n<span class=\"hljs-comment\">  &#123;</span>\n<span class=\"hljs-comment\">    //implementation ...</span>\n<span class=\"hljs-comment\">    </span>\n<span class=\"hljs-comment\">  &#125;</span>\n<span class=\"hljs-comment\">  </span>\n<span class=\"hljs-comment\">  您可以动态添加该函数到一个类中作为一个方法.(调用 resolveThisMethodDynamically) 像这样:</span>\n<span class=\"hljs-comment\">  </span>\n<span class=\"hljs-comment\">  class_addMethod([self class], @selector(resolveThisMethodDynamically), (IMP) myMethodIMP, &quot;v@:&quot;);</span>\n<span class=\"hljs-comment\">  </span>\n<span class=\"hljs-comment\"> **/</span>\n\nfunc  <span class=\"hljs-keyword\">class</span><span class=\"hljs-constructor\">_addMethod(<span class=\"hljs-params\">_</span> <span class=\"hljs-params\">cls</span>:AnyClass?,<span class=\"hljs-params\">_</span> <span class=\"hljs-params\">name</span>:Selector,<span class=\"hljs-params\">_</span> <span class=\"hljs-params\">imp</span>:IMP,<span class=\"hljs-params\">_</span> <span class=\"hljs-params\">types</span>: UnsagePointer&lt;Int8&gt;?)</span>\n\n<span class=\"hljs-comment\">/*</span>\n<span class=\"hljs-comment\"> 获取一个类的指定实例方法</span>\n<span class=\"hljs-comment\"> </span>\n<span class=\"hljs-comment\"> aClass: 要检查的类</span>\n<span class=\"hljs-comment\"> aSelector: 要获取方法的选择器</span>\n<span class=\"hljs-comment\"> 返回值: 指定方法选择器所对应的方法实现,如果指定类或者它的父类不包含指定选择器的实例方法则返回NULL.</span>\n<span class=\"hljs-comment\"> </span>\n<span class=\"hljs-comment\"> 讨论:</span>\n<span class=\"hljs-comment\"> 注意这个函数搜索父类的实现,而class_copyMethodList(_:_:)是不会的</span>\n<span class=\"hljs-comment\"> **/</span>\n\nfunc <span class=\"hljs-keyword\">class</span><span class=\"hljs-constructor\">_getInstanceMethod(<span class=\"hljs-params\">_</span> <span class=\"hljs-params\">cls</span>:AnyClass?,<span class=\"hljs-params\">_</span> <span class=\"hljs-params\">name</span>: Selector)</span> -&gt; Method?\n\n<span class=\"hljs-comment\">/*</span>\n<span class=\"hljs-comment\"> 返回指定类指定名称的类方法</span>\n<span class=\"hljs-comment\"> </span>\n<span class=\"hljs-comment\"> aClass: 一个雷定义的指针.该类包含您想要获取的方法.</span>\n<span class=\"hljs-comment\"> aSelector: 一个SEL类型的指针.该SEL包含你想要获取的方法.</span>\n<span class=\"hljs-comment\"> 返回值: Method的指针.对应指定类指定方法选择器的实现.如果该类或者它的父类不包含这个类方法,则返回NULL.</span>\n<span class=\"hljs-comment\"> </span>\n<span class=\"hljs-comment\"> 讨论:</span>\n<span class=\"hljs-comment\"> 注意这个函数搜索父类的方法实现.class_copyMethodList(_:_:)不搜索</span>\n<span class=\"hljs-comment\"> **/</span>\n\n func <span class=\"hljs-keyword\">class</span><span class=\"hljs-constructor\">_getClassMethod(<span class=\"hljs-params\">_</span> <span class=\"hljs-params\">cls</span>: AnyClass?, <span class=\"hljs-params\">_</span> <span class=\"hljs-params\">name</span>: Selector)</span> -&gt; Method?\n \n<span class=\"hljs-comment\">/*</span>\n<span class=\"hljs-comment\"> 返回一个类的实例方法列表</span>\n<span class=\"hljs-comment\"> </span>\n<span class=\"hljs-comment\"> cls: 想要检测的类</span>\n<span class=\"hljs-comment\"> outCount: 在返回时,包含数组的长度.如果outCounte是NULL,则不返回.</span>\n<span class=\"hljs-comment\"> 返回值: Method类型的指针数组.表示该类所有的实例方法实现.</span>\n<span class=\"hljs-comment\"> 不包含父类的实例方法实现.该数组包含*outCount指针后面跟一个空终止符.您必须使用free()函数释放该数组.</span>\n<span class=\"hljs-comment\"> </span>\n<span class=\"hljs-comment\"> 如果该类没有实例方法.或者该类为Nil,则返回NULL并且*outCount是0</span>\n<span class=\"hljs-comment\"> </span>\n<span class=\"hljs-comment\"> 讨论:</span>\n<span class=\"hljs-comment\"> </span>\n<span class=\"hljs-comment\"> 获取一个类的类方法列表.使用class_copyMethodList(object_getClass(cls), &amp;count)</span>\n<span class=\"hljs-comment\"> 获取父类的方法列表,使用class_getInstanceMethod(_:_:)或者class_getClassMehtod(_:_:)</span>\n<span class=\"hljs-comment\"> **/</span>\n\nfunc <span class=\"hljs-keyword\">class</span><span class=\"hljs-constructor\">_copyMethodList(<span class=\"hljs-params\">_</span> <span class=\"hljs-params\">cls</span>: AnyClass?, <span class=\"hljs-params\">_</span> <span class=\"hljs-params\">outCount</span>: UnsageMutablePointer&lt;UInt32&gt;?)</span> -&gt; UnsafeMutablePointer&lt;Method&gt;?\n\n<span class=\"hljs-comment\">/*</span>\n<span class=\"hljs-comment\"> 替换指定类的方法的实现</span>\n<span class=\"hljs-comment\"> </span>\n<span class=\"hljs-comment\"> cls:要修改的类</span>\n<span class=\"hljs-comment\"> name: 一个方法选择器用来确认哪个方法实现要被替换</span>\n<span class=\"hljs-comment\"> imp:新的方法实现.</span>\n<span class=\"hljs-comment\"> types: 一个字符串集合,用来描述参数的类型.必须至少携带两个参数, self 和_cmd, 第二个和第三个字符必须为&quot;@:&quot;(第一个参数为返回类型)</span>\n<span class=\"hljs-comment\"> </span>\n<span class=\"hljs-comment\"> 返回值: 修改的类之前的方法实现.</span>\n<span class=\"hljs-comment\"> </span>\n<span class=\"hljs-comment\"> 讨论:</span>\n<span class=\"hljs-comment\">可以通过两种方式实现该函数行为:</span>\n<span class=\"hljs-comment\">如果方法名不存在,通过call_addMethod(_:_:_:_:)方法的调用添加函数实现.按照types添加参数类型和返回值类型.</span>\n<span class=\"hljs-comment\">如果方法名存在,他的IMP通过method_setImplementation(_:_:)方法的调用来替换函数实现.types参数被忽略.</span>\n<span class=\"hljs-comment\"></span>\n<span class=\"hljs-comment\"> **/</span>\n\nfunc <span class=\"hljs-keyword\">class</span><span class=\"hljs-constructor\">_replaceMethod(<span class=\"hljs-params\">_</span> <span class=\"hljs-params\">cls</span>:AnyClass?, <span class=\"hljs-params\">_</span> <span class=\"hljs-params\">name</span>: Selector,<span class=\"hljs-params\">_</span> <span class=\"hljs-params\">imp</span>: IMP, <span class=\"hljs-params\">_</span> <span class=\"hljs-params\">types</span>: UnsafePointer&lt;Int8&gt;?)</span> -&gt; IMP?\n\n<span class=\"hljs-comment\">/*</span>\n<span class=\"hljs-comment\"> 获取指定实例方法的实现</span>\n<span class=\"hljs-comment\"></span>\n<span class=\"hljs-comment\"> cls: 指定类</span>\n<span class=\"hljs-comment\"> name: 方法选择器</span>\n<span class=\"hljs-comment\"> 返回值: 返回函数指针,如果cls为Nil,则返回NULL.</span>\n<span class=\"hljs-comment\"> </span>\n<span class=\"hljs-comment\"> 讨论:</span>\n<span class=\"hljs-comment\"> </span>\n<span class=\"hljs-comment\"> class_getMethodImplementation(_:_:)可能会比method_getImplementtation(class_getInstanceMethod(cls, name))更快一些.</span>\n<span class=\"hljs-comment\"> </span>\n<span class=\"hljs-comment\"> 返回的函数指针可能是运行时的函数，而不是实际的方法实现。例如，如果类的实例不响应选择器，那么返回的函数指针将是运行时消息转发机制的一部分。</span>\n<span class=\"hljs-comment\"> **/</span> \n\nfunc <span class=\"hljs-keyword\">class</span><span class=\"hljs-constructor\">_getMethodImplementation(<span class=\"hljs-params\">_</span> <span class=\"hljs-params\">cls</span>: AnyClass?,<span class=\"hljs-params\">_</span> <span class=\"hljs-params\">name</span>: Selector)</span> -&gt; IMP?\n\n<span class=\"hljs-comment\">/*</span>\n<span class=\"hljs-comment\"> 返回将要被调用的指定消息的函数指针</span>\n<span class=\"hljs-comment\"> </span>\n<span class=\"hljs-comment\"> cls: 指定的类</span>\n<span class=\"hljs-comment\"> name: 一个方法选择器</span>\n<span class=\"hljs-comment\"> 返回值: 返回函数指针,如果cls为Nil,则返回NULL.</span>\n<span class=\"hljs-comment\"> **/</span> \n\nfunc <span class=\"hljs-keyword\">class</span><span class=\"hljs-constructor\">_getMethodImplementation_stret(<span class=\"hljs-params\">_</span> <span class=\"hljs-params\">cls</span>: AnyClass?,<span class=\"hljs-params\">_</span> <span class=\"hljs-params\">name</span>: Selector)</span> -&gt; IMP?\n\n<span class=\"hljs-comment\">/*</span>\n<span class=\"hljs-comment\">返回一个布尔值表示是否一个实例响应了指定方法</span>\n<span class=\"hljs-comment\"></span>\n<span class=\"hljs-comment\">cls : 响应消息的类</span>\n<span class=\"hljs-comment\">sel : 一个方法选择器</span>\n<span class=\"hljs-comment\">返回值: 响应方法,则返回true,否则返回false</span>\n<span class=\"hljs-comment\"></span>\n<span class=\"hljs-comment\">讨论:</span>\n<span class=\"hljs-comment\">通常使用NSObject的responds(to:)或者instancesRespond(to:)方法来替换该方法.</span>\n<span class=\"hljs-comment\"> **/</span>\nfunc <span class=\"hljs-keyword\">class</span><span class=\"hljs-constructor\">_respondsToSelector(AnyClass?, Selector)</span>\n\n<span class=\"hljs-comment\">/*</span>\n<span class=\"hljs-comment\"> 给一个类添加一个协议</span>\n<span class=\"hljs-comment\"> </span>\n<span class=\"hljs-comment\"> cls: 要改动的类</span>\n<span class=\"hljs-comment\"> outCount: 要添加到该类的协议</span>\n<span class=\"hljs-comment\"> 返回值: 添加成功,返回ture;否则false(比如该类中已经存在该协议)</span>\n<span class=\"hljs-comment\"></span>\n<span class=\"hljs-comment\"> **/</span>\nfunc <span class=\"hljs-keyword\">class</span><span class=\"hljs-constructor\">_addProtocol(<span class=\"hljs-params\">_</span> <span class=\"hljs-params\">cls</span>: AnyClass?, <span class=\"hljs-params\">_</span> <span class=\"hljs-params\">protocol</span>: Protocol)</span> -&gt; Bool\n\n<span class=\"hljs-comment\">/*</span>\n<span class=\"hljs-comment\"> 给一个类添加一个属性</span>\n<span class=\"hljs-comment\"> </span>\n<span class=\"hljs-comment\"> cls: 要改动的类</span>\n<span class=\"hljs-comment\"> name: 属性名</span>\n<span class=\"hljs-comment\"> attributes: 属性的描述(readonly, nonatomic, asign...)</span>\n<span class=\"hljs-comment\"> attributeCount: 属性描述的数量</span>\n<span class=\"hljs-comment\"> 返回值: 添加成功,返回true,否则false(比如已经存在该属性)</span>\n<span class=\"hljs-comment\"> **/</span>\n\nfunc <span class=\"hljs-keyword\">class</span><span class=\"hljs-constructor\">_addProperty(<span class=\"hljs-params\">_</span> <span class=\"hljs-params\">cls</span>: AnyClass?, <span class=\"hljs-params\">_</span> <span class=\"hljs-params\">name</span>: UnsagePointer&lt;Int8&gt;, <span class=\"hljs-params\">_</span> <span class=\"hljs-params\">attributes</span>: UnsafePointer&lt;<span class=\"hljs-params\">objc_property_attribute_t</span>&gt;?, <span class=\"hljs-params\">_</span> <span class=\"hljs-params\">attributeCounte</span>: UInt32)</span> -&gt; Bool\n\n<span class=\"hljs-comment\">/*</span>\n<span class=\"hljs-comment\"> 替换一个类的属性</span>\n<span class=\"hljs-comment\"> **/</span>\nfunc <span class=\"hljs-keyword\">class</span><span class=\"hljs-constructor\">_replaceProperty(<span class=\"hljs-params\">_</span> <span class=\"hljs-params\">cls</span>:AnyClass?, <span class=\"hljs-params\">_</span> <span class=\"hljs-params\">name</span>: UnsafePointer&lt;Int8&gt;, <span class=\"hljs-params\">_</span> <span class=\"hljs-params\">attributes</span>: UnsafePointer&lt;<span class=\"hljs-params\">objc_property_attribute_t</span>&gt;?, <span class=\"hljs-params\">_</span> <span class=\"hljs-params\">attrubuteCount</span>: UInt32)</span>\n\n<span class=\"hljs-comment\">/*</span>\n<span class=\"hljs-comment\"> 返回一个布尔值 表示是否一个类执行指定协议方法</span>\n<span class=\"hljs-comment\"> </span>\n<span class=\"hljs-comment\"> 通常使用NSObject的conforms(to:) 来替换它</span>\n<span class=\"hljs-comment\"> **/</span>\n\nfunc <span class=\"hljs-keyword\">class</span><span class=\"hljs-constructor\">_conformsToProtocol(<span class=\"hljs-params\">_</span> <span class=\"hljs-params\">cls</span>: AnyClass?,<span class=\"hljs-params\">_</span> <span class=\"hljs-params\">protocol</span>: Protocol?)</span> -&gt; Bool\n<span class=\"hljs-comment\">/*</span>\n<span class=\"hljs-comment\"> 描述一个类包含的协议</span>\n<span class=\"hljs-comment\"> cls: 指定的类</span>\n<span class=\"hljs-comment\"> outCount: 返回数组的长度.如果outCount是NULL,返回值不包含数组的长度.</span>\n<span class=\"hljs-comment\"> 返回值: Protocol* 类型的指针数组.描述类中包含的协议.父类的协议不包含其中.数组中包含*outCount指针,并庚随一个空的终止符.必须使用free()函数释放数组.</span>\n<span class=\"hljs-comment\"> </span>\n<span class=\"hljs-comment\"> 返回值: 如果cls中没有协议,或者cls为Nil,返回NULL并且*outCount为0</span>\n<span class=\"hljs-comment\"> **/</span>\n\nfunc <span class=\"hljs-keyword\">class</span><span class=\"hljs-constructor\">_copyProtocolList(<span class=\"hljs-params\">_</span> <span class=\"hljs-params\">cls</span>: AnyClass?,<span class=\"hljs-params\">_</span> <span class=\"hljs-params\">outCount</span>: UnsafeMutablePointer&lt;UInt32&gt;?)</span>  -&gt; AutoreleasingUnsafeMutablePointer&lt;Protocol&gt;?\n\n<span class=\"hljs-comment\">//返回类定义的版本号</span>\nfunc <span class=\"hljs-keyword\">class</span><span class=\"hljs-constructor\">_getVersion(AnyClass?)</span>\n\n<span class=\"hljs-comment\">//设置一个类定义的版本号</span>\nfunc <span class=\"hljs-keyword\">class</span><span class=\"hljs-constructor\">_setVersion(AnyClass, Int32)</span>\n\n</code></pre>\n\n<h3 id=\"添加Class\"><a href=\"#添加Class\" class=\"headerlink\" title=\"添加Class\"></a>添加Class</h3><pre><code class=\"hljs swift\">\n<span class=\"hljs-comment\">/*</span>\n<span class=\"hljs-comment\"> 创建一个类和元类</span>\n<span class=\"hljs-comment\"> </span>\n<span class=\"hljs-comment\"> superclass: 新创建类的父类.如果创建一个根类则为Nil</span>\n<span class=\"hljs-comment\"> name: 新创建类的类名.该字符串会被拷贝.</span>\n<span class=\"hljs-comment\"> extraBytes: 类和元类末尾为索引实例变量而分配的字节数.通常为0</span>\n<span class=\"hljs-comment\"> 返回值: 新创建的类.或者为Nil如果该类无法被创建(比如使用的名字已经被使用)</span>\n<span class=\"hljs-comment\"> </span>\n<span class=\"hljs-comment\"> 讨论:</span>\n<span class=\"hljs-comment\"> 可以获取新创建元类的指针通过调用object_getClass(newClass).</span>\n<span class=\"hljs-comment\"> 创建一个类.需要先调用objc_allocateClassPair(_:_:_:).然后设置类的特性使用诸如class_addMethod(_:_:_:_:)和class_addIvar(_:_:_:_:_:)这些方法.当你创建完该类后.调用objc_registerClassPair(_:)注册该类后才可以使用.</span>\n<span class=\"hljs-comment\"> </span>\n<span class=\"hljs-comment\"> 实例方法和实例变量应该添加到自身类中.类方法应该添加到元类中.</span>\n<span class=\"hljs-comment\"> </span>\n<span class=\"hljs-comment\"> **/</span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">objc_allocateClassPair</span><span class=\"hljs-params\">(<span class=\"hljs-number\">_</span> superclass: AnyClass?, <span class=\"hljs-number\">_</span> name: UnsafePointer&lt;Int8&gt;, <span class=\"hljs-number\">_</span> extraBytes: Int)</span></span> -&gt; <span class=\"hljs-type\">AnyClass?</span>\n\n<span class=\"hljs-comment\">/*</span>\n<span class=\"hljs-comment\"> 销毁一个类和它关联的元类.</span>\n<span class=\"hljs-comment\"> </span>\n<span class=\"hljs-comment\"> 讨论:</span>\n<span class=\"hljs-comment\"> 如果cls类实例或者它的任何子类存在的话,不要调用该函数.</span>\n<span class=\"hljs-comment\"> **/</span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">objc_disposeClassPair</span><span class=\"hljs-params\">(<span class=\"hljs-number\">_</span> cls: AnyClass)</span></span>\n\n<span class=\"hljs-comment\">//注册一个类 该类已使用objc_allocateClassPair(_:_:_:)方法创建</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">objc_registerClassPair</span><span class=\"hljs-params\">(AnyClass)</span></span>\n\n<span class=\"hljs-comment\">/*</span>\n<span class=\"hljs-comment\"> 在Foundation框架下的KVO使用</span>\n<span class=\"hljs-comment\"> </span>\n<span class=\"hljs-comment\"> 讨论:</span>\n<span class=\"hljs-comment\"> 自身不要调用该函数</span>\n<span class=\"hljs-comment\"> **/</span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">objc_duplicateClass</span><span class=\"hljs-params\">(AnyClass, UnsafePointer&lt;Int8&gt;, Int)</span></span>\n</code></pre>\n\n<h3 id=\"与实例一起使用\"><a href=\"#与实例一起使用\" class=\"headerlink\" title=\"与实例一起使用\"></a>与实例一起使用</h3><pre><code class=\"hljs swift\">\n<span class=\"hljs-comment\">/*</span>\n<span class=\"hljs-comment\"> 读取一个对象中实例变量的值</span>\n<span class=\"hljs-comment\"> 讨论:</span>\n<span class=\"hljs-comment\"> 如果实例变量名已知的话,object_getIvar(_:_:)比object_getInstanceVariable获取值更快一些.</span>\n<span class=\"hljs-comment\"> **/</span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">object_getIvar</span><span class=\"hljs-params\">(<span class=\"hljs-number\">_</span> obj: <span class=\"hljs-keyword\">Any</span>?,<span class=\"hljs-number\">_</span> ivar: Ivar)</span></span> -&gt; <span class=\"hljs-type\">Any?</span>\n\n<span class=\"hljs-comment\">//设置一个对象实例变量的值</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">object_setIvar</span><span class=\"hljs-params\">(<span class=\"hljs-number\">_</span> obj: <span class=\"hljs-keyword\">Any</span>?,<span class=\"hljs-number\">_</span> ivar: Ivar,<span class=\"hljs-number\">_</span> varlue: <span class=\"hljs-keyword\">Any</span>?)</span></span>\n\n<span class=\"hljs-comment\">//返回某对象的类名</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">object_getClassName</span><span class=\"hljs-params\">(_obj: <span class=\"hljs-keyword\">Any</span>?)</span></span>\n\n<span class=\"hljs-comment\">//返回实例对象的类对象</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">object_getClass</span><span class=\"hljs-params\">(<span class=\"hljs-number\">_</span> obj: <span class=\"hljs-keyword\">Any</span>?)</span></span> -&gt; <span class=\"hljs-type\">AnyClass?</span>\n\n<span class=\"hljs-comment\">//设置一个对象的类 返回值为对象之前所属的类对象.</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">object_setClass</span><span class=\"hljs-params\">(<span class=\"hljs-number\">_</span> obj: <span class=\"hljs-keyword\">Any</span>?,<span class=\"hljs-number\">_</span> cls: AnyClass)</span></span> -&gt; <span class=\"hljs-type\">AnyClass?</span>\n</code></pre>\n\n<h3 id=\"获取类定义\"><a href=\"#获取类定义\" class=\"headerlink\" title=\"获取类定义\"></a>获取类定义</h3><pre><code class=\"hljs go\"><span class=\"hljs-comment\">//获取已注册类定义的列表</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">objc_getClassList</span><span class=\"hljs-params\">(AutoreleasingUnsafeMutablePointer&lt;AnyClass&gt;?, Int32)</span></span>\n\n<span class=\"hljs-comment\">//创建并且返回所有已注册的类定义的指针列表</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">objc_copyClassList</span><span class=\"hljs-params\">(UnsafeMutablePointer&lt;UInt32&gt;?)</span></span>\n\n<span class=\"hljs-comment\">//返回某个类的类定义</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">objc_lookUpClass</span><span class=\"hljs-params\">(UnsafePointer&lt;Int8&gt;)</span></span>\n\n<span class=\"hljs-comment\">//返回某个类的类定义</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">objc_getClass</span><span class=\"hljs-params\">(UnsafePointer&lt;Int8&gt;)</span></span>\n\n<span class=\"hljs-comment\">//返回某个类的类定义</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">objc_getRequiredClass</span><span class=\"hljs-params\">(UnsafePointer&lt;Int8&gt;)</span></span>\n\n<span class=\"hljs-comment\">//返回某个类的元类定义</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">objc_getMetaClass</span><span class=\"hljs-params\">(UnsafePointer&lt;Int8&gt;)</span></span>\n</code></pre>\n\n<h3 id=\"与实例变量一起使用\"><a href=\"#与实例变量一起使用\" class=\"headerlink\" title=\"与实例变量一起使用\"></a>与实例变量一起使用</h3><pre><code class=\"hljs go\"><span class=\"hljs-comment\">//返回实例变量名称</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">ivar_getName</span><span class=\"hljs-params\">(Ivar)</span></span>\n\n<span class=\"hljs-comment\">//返回实例变量的类型</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">ivar_getTypeEncoding</span><span class=\"hljs-params\">(Ivar)</span></span>\n\n<span class=\"hljs-comment\">//返回一个实例变量相对内存基址的偏移值</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">ivar_getOffset</span><span class=\"hljs-params\">(Ivar)</span></span>\n</code></pre>\n\n<h3 id=\"关联引用\"><a href=\"#关联引用\" class=\"headerlink\" title=\"关联引用\"></a>关联引用</h3><pre><code class=\"hljs swift\"><span class=\"hljs-comment\">//使用指定key和关联策略设置某个对象的关联值</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">objc_setAssociateObject</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">Any</span>, UnsafeRawPointer, <span class=\"hljs-keyword\">Any</span>?, objc_AssociationPoicy)</span></span>\n\n<span class=\"hljs-comment\">//返回某个对象该key下对应的关联值</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">objc_getAssociateObject</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">Any</span>, UnsafeRawPointer)</span></span>\n\n<span class=\"hljs-comment\">//移除某个对象所有关联对象</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">objc_removeAssociateObjects</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">Any</span>)</span></span>\n</code></pre>\n\n<h3 id=\"与方法一起使用\"><a href=\"#与方法一起使用\" class=\"headerlink\" title=\"与方法一起使用\"></a>与方法一起使用</h3><pre><code class=\"hljs swift\"><span class=\"hljs-comment\">/*</span>\n<span class=\"hljs-comment\"> 返回方法的SEL</span>\n<span class=\"hljs-comment\"> </span>\n<span class=\"hljs-comment\"> 讨论:</span>\n<span class=\"hljs-comment\"> 获取C字符串的方法名.调用sel_getName(method_getName(method))</span>\n<span class=\"hljs-comment\"> **/</span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">method_getName</span><span class=\"hljs-params\">(<span class=\"hljs-number\">_</span> m: Method)</span></span> -&gt; <span class=\"hljs-type\">Selector</span>\n\n<span class=\"hljs-comment\">//返回IMP类型的函数指针</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">method_getImplementation</span><span class=\"hljs-params\">(<span class=\"hljs-number\">_</span> m: Method)</span></span> -&gt; <span class=\"hljs-type\">IMP</span>\n\n<span class=\"hljs-comment\">//返回一个字符串描述方法的参数和返回类型</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">method_getTypeEncoding</span><span class=\"hljs-params\">(<span class=\"hljs-number\">_</span> m: Method)</span></span> -&gt; <span class=\"hljs-type\">UnsafePointer</span>&lt;<span class=\"hljs-type\">Int8</span>&gt;?\n\n<span class=\"hljs-comment\">//返回一个字符串描述方法的返回类型</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">method_copyReturnType</span><span class=\"hljs-params\">(Method)</span></span>\n\n<span class=\"hljs-comment\">//返回一个字符串描述方法的单个参数类型</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">method_copyArgumentType</span><span class=\"hljs-params\">(Method, UInt32)</span></span>\n\n<span class=\"hljs-comment\">//通过引用返回一个字符串描述方法的返回值类型</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">method_getReturnType</span><span class=\"hljs-params\">(Method, UInt32)</span></span>\n\n<span class=\"hljs-comment\">//返回一个方法接受的参数数量</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">method_getNumberOfArguments</span><span class=\"hljs-params\">(Method)</span></span>\n\n<span class=\"hljs-comment\">//通过引用返回一个字符串描述方法单个参数的类型</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">method_getArgumentType</span><span class=\"hljs-params\">(Method, UInt32, UnsafeMutablePointer&lt;Int8&gt;?, Int)</span></span>\n\n<span class=\"hljs-comment\">//返回某个方法的结构描述</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">method_getDescription</span><span class=\"hljs-params\">(Method)</span></span>\n\n<span class=\"hljs-comment\">//设置某个方法的实现</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">method_setImplementation</span><span class=\"hljs-params\">(<span class=\"hljs-number\">_</span> m: Method, <span class=\"hljs-number\">_</span> imp: IMP)</span></span> -&gt; <span class=\"hljs-type\">IMP</span>\n\n<span class=\"hljs-comment\">/*</span>\n<span class=\"hljs-comment\"> 交换两个方法的实现</span>\n<span class=\"hljs-comment\"> </span>\n<span class=\"hljs-comment\"> IMP imp1 = method_getImplementation(m1);</span>\n<span class=\"hljs-comment\"> IMP imp2 = method_getImplementation(m2);</span>\n<span class=\"hljs-comment\"> method_setImplementation(m1, imp2);</span>\n<span class=\"hljs-comment\"> method_setImplementation(m2, imp1);</span>\n<span class=\"hljs-comment\"> </span>\n<span class=\"hljs-comment\"> **/</span> \n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">method_exchangeImplementations</span><span class=\"hljs-params\">(_m1: Method,<span class=\"hljs-number\">_</span> m2: Method)</span></span>\n</code></pre>\n\n<h3 id=\"与库一起使用\"><a href=\"#与库一起使用\" class=\"headerlink\" title=\"与库一起使用\"></a>与库一起使用</h3><pre><code class=\"hljs go\">\n<span class=\"hljs-comment\">//返回所有加载的OC框架和动态库名称  </span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">objc_copyImageNames</span><span class=\"hljs-params\">(UnsafeMutablePointer&lt;UInt32&gt;?)</span></span>\n\n<span class=\"hljs-comment\">//返回动态库中一个类的原始格式的名称</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">objc_getImageName</span><span class=\"hljs-params\">(AnyClass?)</span></span>\n\n<span class=\"hljs-comment\">//返回某个库或者框架中所有类的名称</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">objc_copyClassNameForImage</span><span class=\"hljs-params\">(UnsafePointer&lt;Int8&gt;, UnsafeMutablePointer&lt;UInt32&gt;?)</span></span>\n\n</code></pre>\n\n<h3 id=\"与Selectors一起使用\"><a href=\"#与Selectors一起使用\" class=\"headerlink\" title=\"与Selectors一起使用\"></a>与Selectors一起使用</h3><pre><code class=\"hljs go\">\n<span class=\"hljs-comment\">//返回某一方法的名称</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">sel_getName</span><span class=\"hljs-params\">(Selector)</span></span>\n\n<span class=\"hljs-comment\">//在OC runtime系统中注册一个方法,映射方法名到一个selector,并且返回selector的值</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">sel_registerName</span><span class=\"hljs-params\">(UnsafePointer&lt;Int8&gt;)</span></span>\n\n<span class=\"hljs-comment\">//注册一个方法名到 OC runtime系统中</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">sel_getUid</span><span class=\"hljs-params\">(UnsafePointer&lt;Int8&gt;)</span></span>\n\n<span class=\"hljs-comment\">//返回一个布尔值 表示两个方法是否相等</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">sel_isEqual</span><span class=\"hljs-params\">(Selector, Selector)</span></span>\n</code></pre>\n\n<h3 id=\"与协议一起使用\"><a href=\"#与协议一起使用\" class=\"headerlink\" title=\"与协议一起使用\"></a>与协议一起使用</h3><pre><code class=\"hljs swift\"><span class=\"hljs-comment\">//返回指定协议</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">objc_getProtocol</span><span class=\"hljs-params\">(UnsafePointer&lt;Int8&gt;)</span></span>\n\n<span class=\"hljs-comment\">//以数组形式返回runtime中所有已知协议</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">objc_copyProtocolList</span><span class=\"hljs-params\">(UnsafeMutablePointer&lt;UInt32&gt;)</span></span>\n\n<span class=\"hljs-comment\">//创建一个协议实例</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">objc_allocateProtocol</span><span class=\"hljs-params\">(UnsafePointer&lt;Int8&gt;)</span></span>\n\n<span class=\"hljs-comment\">//在OC运行时系统中注册一个新协议</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">objc_registerProtocol</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">Protocol</span>)</span></span>\n\n<span class=\"hljs-comment\">//给协议添加一个方法</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">protocol_addMethodDescription</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">Protocol</span>, Selector, UnsafePointer&lt;Int8&gt;?, Bool, Bool)</span></span>\n\n<span class=\"hljs-comment\">//添加注册过的协议到正在构建的协议中</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">protocol_addProtocol</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">Protocol</span>, <span class=\"hljs-keyword\">Protocol</span>)</span></span>\n\n<span class=\"hljs-comment\">//添加属性到正在构建的协议中</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">protocol_addProperty</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">Protocol</span>, UnsafePointer&lt;Int8&gt;, UnsafePointer&lt;objc_property_attribute_t&gt;?, UInt32, Bool, Bool)</span></span>\n\n<span class=\"hljs-comment\">//返回协议名称</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">protocol_getName</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">Protocol</span>)</span></span>\n\n<span class=\"hljs-comment\">//返回布尔值 表示是否两个协议相等</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">protocol_isEqual</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">Protocol</span>?, <span class=\"hljs-keyword\">Protocol</span>?)</span></span>\n\n<span class=\"hljs-comment\">//返回满足给定协议的方法描述数组</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">protocol_copyMethodDescriptionList</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">Protocol</span>, Bool, Bool, UnsafeMutablePointer&lt;UInt32&gt;?)</span></span>\n\n<span class=\"hljs-comment\">//返回满足给定协议的指定方法的方法描述</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">protocol_getMethodDescription</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">Protocol</span>, Selector, Bool, Bool)</span></span>\n\n<span class=\"hljs-comment\">//返回一个协议声明的属性数组</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">protocol_copyPropertyList</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">Protocol</span>, UnsafeMutablePointer&lt;UInt32&gt;)</span></span>\n\n<span class=\"hljs-comment\">//返回给定协议的指定属性</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">protocol_getProperty</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">Protocol</span>, UnsafePointer&lt;Int8&gt;, Bool, Bool)</span></span>\n\n<span class=\"hljs-comment\">//返回适用某协议的协议数组</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">protocol_copyProtocolList</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">Protocol</span>, UnsafeMutablePointer&lt;UInt32&gt;)</span></span>\n\n<span class=\"hljs-comment\">//返回一个布尔值 表示是否一个协议遵循另一个协议</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">protocol_comformsToProtocol</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">Protocol</span>?, <span class=\"hljs-keyword\">Protocol</span>?)</span></span>\n</code></pre>\n\n<h3 id=\"与属性一起使用\"><a href=\"#与属性一起使用\" class=\"headerlink\" title=\"与属性一起使用\"></a>与属性一起使用</h3><pre><code class=\"hljs reasonml\"><span class=\"hljs-comment\">//返回属性名</span>\nfunc property<span class=\"hljs-constructor\">_getName(<span class=\"hljs-params\">_</span> <span class=\"hljs-params\">property</span>: <span class=\"hljs-params\">objc_property_t</span>)</span> -&gt; UnsafePointer&lt;Int8&gt;\n\n<span class=\"hljs-comment\">//返回一个属性的的特征字符串</span>\nfunc property<span class=\"hljs-constructor\">_getAttributes(<span class=\"hljs-params\">_</span> <span class=\"hljs-params\">property</span>: <span class=\"hljs-params\">objc_property_t</span>)</span> -&gt; UnsafePointer&lt;Int8&gt;\n\n<span class=\"hljs-comment\">//返回指定特征名的属性值</span>\nfunc property<span class=\"hljs-constructor\">_copyAttributeValue(<span class=\"hljs-params\">_</span> <span class=\"hljs-params\">property</span>: <span class=\"hljs-params\">objc_property_t</span>,<span class=\"hljs-params\">_</span> <span class=\"hljs-params\">attributeName</span>: UnsafePointer&lt;Int8&gt;)</span> -&gt; UnsafeMutablePointer&lt;Int8&gt;?\n\n<span class=\"hljs-comment\">//返回指定属性的属性特征数组</span>\nfunc property<span class=\"hljs-constructor\">_copyAttributeList(<span class=\"hljs-params\">_</span> <span class=\"hljs-params\">property</span>: <span class=\"hljs-params\">objc_property_t</span>, <span class=\"hljs-params\">_</span> <span class=\"hljs-params\">outCount</span>: UnsafeMutablePointer&lt;UInt32&gt;?)</span> -&gt; UnsafeMutablePointer&lt;objc_property_attribute_t&gt;?\n</code></pre>\n\n<h3 id=\"OC语言特色的使用\"><a href=\"#OC语言特色的使用\" class=\"headerlink\" title=\"OC语言特色的使用\"></a>OC语言特色的使用</h3><pre><code class=\"hljs swift\"><span class=\"hljs-comment\">//当在foreach迭代中检测到一个突变时，由编译器插入。</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">objc_enumerationMutation</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">Any</span>)</span></span>\n\n<span class=\"hljs-comment\">//设置当前的突变处理</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">objc_setEnumerationMutationHandler</span><span class=\"hljs-params\">(<span class=\"hljs-params\">(<span class=\"hljs-params\">(<span class=\"hljs-keyword\">Any</span>)</span></span></span></span> -&gt; <span class=\"hljs-type\">Void</span>)?)\n\n<span class=\"hljs-comment\">//给一个函数创建一个指针  当方法被调用的使用调用指定Block</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">imp_implementationWithBlock</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">Any</span>)</span></span>\n\n<span class=\"hljs-comment\">//返回与一个已经创建使用的IMP关联的Block</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">imp_getBlock</span><span class=\"hljs-params\">(IMP)</span></span>\n\n<span class=\"hljs-comment\">//取消与已经创建使用的IMP关联的Block</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">imp_removeBlock</span><span class=\"hljs-params\">(IMP)</span></span>\n\n<span class=\"hljs-comment\">//加载被弱引用的对象并返回它</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">objc_loadWeak</span><span class=\"hljs-params\">()</span></span>\n\n<span class=\"hljs-comment\">//存储一个弱引用变量值</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">objc_storeWeak</span><span class=\"hljs-params\">(AutoreleasingUnsafeMutablePointer&lt;AnyObject?&gt;, <span class=\"hljs-keyword\">Any</span>?)</span></span>\n</code></pre>\n\n<h3 id=\"类定义数据结构\"><a href=\"#类定义数据结构\" class=\"headerlink\" title=\"类定义数据结构\"></a>类定义数据结构</h3><pre><code class=\"hljs awk\"><span class=\"hljs-regexp\">//</span>在类定义中表示一个方法类型\ntypealias Method\n\n<span class=\"hljs-regexp\">//</span>表示一个实例变量类型\ntypealias Ivar\n\n<span class=\"hljs-regexp\">//</span>表示一个分类类型\ntypealias Category\n\n<span class=\"hljs-regexp\">//</span>表示一个OC声明的属性类型\ntypealias objc_property_t\n\n<span class=\"hljs-regexp\">//</span>定义一个OC方法\nstruct objc_method_description\n\n<span class=\"hljs-regexp\">//</span>定义一个属性特性\nstruct objc_property_attribute_t\n</code></pre>\n\n<h3 id=\"实例数据类型\"><a href=\"#实例数据类型\" class=\"headerlink\" title=\"实例数据类型\"></a>实例数据类型</h3><p>  这些是表示对象,类,父类的数据类型</p>\n<ul>\n<li>objc_object 指向一个实例对象的指针</li>\n<li>objc_object 表示一个实例对象</li>\n<li>objc_super  一个实例对象的父类</li>\n</ul>\n<pre><code class=\"hljs gauss\"><span class=\"hljs-comment\">//一个类的实例的指针</span>\n<span class=\"hljs-keyword\">struct</span> <span class=\"hljs-type\">objc_object</span>\n\n//指定实例对象的父类\n<span class=\"hljs-type\">struct</span> objc_super\n</code></pre>\n","site":{"data":{"fluid_static_prefix":{"internal_js":"/js","internal_css":"/css","internal_img":"/img","iconfont":"//at.alicdn.com/t/font_1736178_kmeydafke9r.css","anchor":"https://cdn.staticfile.org/anchor-js/4.2.2/","github_markdown":"https://cdn.staticfile.org/github-markdown-css/4.0.0/","jquery":"https://cdn.staticfile.org/jquery/3.4.1/","bootstrap":"https://cdn.staticfile.org/twitter-bootstrap/4.4.1/","highlightjs":"https://cdn.staticfile.org/highlight.js/10.0.0/","prismjs":"https://cdn.staticfile.org/prism/1.21.0/","tocbot":"https://cdn.staticfile.org/tocbot/4.11.1/","typed":"https://cdn.staticfile.org/typed.js/2.0.11/","fancybox":"https://cdn.staticfile.org/fancybox/3.5.7/","mathjax":"https://cdn.staticfile.org/mathjax/3.0.5/es5/","katex":"https://cdn.staticfile.org/KaTeX/0.11.1/","aplayer":"https://cdn.staticfile.org/aplayer/1.10.1/","busuanzi":"https://busuanzi.ibruce.info/busuanzi/2.3/","clipboard":"https://cdn.staticfile.org/clipboard.js/2.0.6/","mermaid":"https://cdn.staticfile.org/mermaid/8.5.0/","valine":"https://cdn.staticfile.org/valine/1.4.14/","gitalk":"https://cdn.staticfile.org/gitalk/1.6.2/","blueimp_md5":"https://cdn.staticfile.org/blueimp-md5/2.13.0/","disqusjs":"https://cdn.jsdelivr.net/npm/disqusjs@1.0/dist/","hint":"/lib/hint/"},"fluid_config":{"favicon":"/img/favicon.png","apple_touch_icon":"/img/favicon.png","title_join_string":" - ","force_https":false,"code":{"copy_btn":true,"highlight":{"enable":true,"lib":"highlightjs","highlightjs":{"style":"Github Gist","bg_color":false},"prismjs":{"style":"default","preprocess":true}}},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"_","loop":false},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"right","visible":"hover","icon":""},"mouse_click":{"enable":false,"style":"values"}},"dark_mode":{"enable":true,"default":"auto"},"color":{"body_bg_color":"#eee","body_bg_color_dark":"#181c27","navbar_bg_color":"#2f4154","navbar_bg_color_dark":"#1f3144","navbar_text_color":"#fff","navbar_text_color_dark":"#d0d0d0","text_color":"#3c4858","text_color_dark":"#c4c6c9","sec_text_color":"#718096","sec_text_color_dark":"#a7a9ad","post_text_color":"#2c3e50","post_text_color_dark":"#c4c6c9","post_heading_color":"#1a202c","post_heading_color_dark":"#c4c6c9","post_link_color":"#0366d6","post_link_color_dark":"#1589e9","link_hover_color":"#30a9de","link_hover_color_dark":"#30a9de","link_hover_bg_color":"#f8f9fa","link_hover_bg_color_dark":"#364151","board_color":"#fff","board_color_dark":"#252d38"},"font":{"font_size":"16px","font_family":null,"code_font_size":"85%"},"custom_js":null,"custom_css":null,"custom_html":"","web_analytics":{"enable":false,"baidu":null,"google":null,"gtag":null,"tencent":{"sid":null,"cid":null},"woyaola":null,"cnzz":null,"leancloud":{"app_id":null,"app_key":null,"server_url":null}},"lazyload":{"enable":true,"onlypost":false},"daovoice":{"enable":false,"appid":""},"aplayer":{"enable":false,"autoplay":false,"loop":"all","order":"random","theme":"#b7daff","songs":[{"name":"name","artist":"artist","url":"/songs/test.mp3","cover":"/img/cover.jpg"},{"name":"name","artist":"artist","url":"https://...url.mp3","cover":"https://...cover.jpg"}]},"version":{"check":false},"navbar":{"blog_title":"吃面多放葱","ground_glass":{"enable":false,"px":3,"alpha":0.7},"menu":[{"key":"home","link":"/","icon":"iconfont icon-home-fill"},{"key":"category","link":"/categories/","icon":"iconfont icon-category-fill"},{"key":"tag","link":"/tags/","icon":"iconfont icon-tags-fill"},{"key":"about","link":"/about/","icon":"iconfont icon-user-fill"}]},"search":{"enable":true,"path":"/local-search.xml","generate_path":"/local-search.xml","field":"post","content":true},"scroll_down_arrow":{"enable":true,"banner_height_limit":90,"scroll_after_turning_page":true},"banner_parallax":true,"footer":{"statistics":{"enable":false,"source":"busuanzi","pv_format":"总访问量 {} 次","uv_format":"总访客数 {} 人"},"beian":{"enable":false,"icp_text":"京ICP证123456号","police_text":"京公网安备12345678号","police_code":12345678,"police_icon":"/img/police_beian.png"}},"scroll_top_arrow":{"enable":true},"index":{"banner_img":"/img/default.png","banner_img_height":100,"banner_mask_alpha":0.3,"post_default_img":"","slogan":{"enable":true,"text":"像蚂蚁一样工作，像蝴蝶一样生活"},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"category":true,"tag":true}},"page":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3},"post":{"banner_img":"/img/default.png","banner_img_height":70,"banner_mask_alpha":0.3,"meta":{"author":{"enable":false},"date":{"enable":true,"format":"LL a"},"wordcount":{"enable":true,"format":"{} 字"},"min2read":{"enable":true,"format":"{} 分钟","words":100},"views":{"enable":false,"source":"busuanzi","format":"{} 次"}},"updated":{"enable":false,"content":"本文最后更新于：","relative":false},"toc":{"enable":true,"headingSelector":"h1,h2,h3,h4,h5,h6","collapseDepth":0},"copyright":{"enable":true,"content":"本博客所有文章除特别声明外，均采用 <a href=\"https://creativecommons.org/licenses/by-sa/4.0/deed.zh\" rel=\"nofollow noopener\">CC BY-SA 4.0 协议</a> ，转载请注明出处！"},"prev_next":{"enable":true},"custom":{"enable":false,"content":"<img src=\"https://octodex.github.com/images/jetpacktocat.png\" class=\"rounded mx-auto d-block mt-5\" style=\"width:150px; height:150px;\">"},"image_zoom":{"enable":true},"footnote":{"enable":true,"header":""},"math":{"enable":false,"specific":false,"engine":"mathjax"},"mermaid":{"enable":false,"specific":false,"options":{"theme":"default"}},"comments":{"enable":false,"type":"disqus"}},"utterances":{"repo":null,"issue_term":"pathname","label":"utterances","theme":"github-light","theme_dark":"github-dark","crossorigin":"anonymous"},"disqus":{"shortname":null,"disqusjs":false,"apikey":null},"gitalk":{"clientID":null,"clientSecret":null,"repo":null,"owner":null,"admin":["name"],"id":"location.pathname","language":"zh-CN","labels":["Gitalk"],"perPage":10,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true},"valine":{"appid":null,"appkey":null,"placeholder":"说点什么","path":"window.location.pathname","avatar":"retro","meta":["nick","mail","link"],"pageSize":10,"lang":"zh-CN","highlight":false,"recordIP":false,"serverURLs":null},"changyan":{"appid":"","appkey":""},"livere":{"uid":""},"remark42":{"host":"https://remark.haoyizebo.com","site_id":"haoyizebo","max_shown_comments":10,"locale":"zh"},"archive":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null},"category":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"post_limit":10,"order_by":"-length","collapse_depth":0},"tag":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null,"tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"avatar":"/img/avatar.png","name":"蔺国防","introduce":"移动应用开发者，历史文学爱好者","icons":[{"class":"iconfont icon-github-fill","link":"https://github.com","tip":"GitHub"},{"class":"iconfont icon-douban-fill","link":"https://douban.com","tip":"豆瓣"},{"class":"iconfont icon-wechat-fill","qrcode":"/img/favicon.png"}]},"page404":{"banner_img":"/img/default.png","banner_img_height":85,"banner_mask_alpha":0.3,"subtitle":"Page not found"},"links":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"items":[{"title":"Fluid Docs","intro":"主题使用指南","link":"https://hexo.fluid-dev.com/docs/","image":"/img/favicon.png"},{"title":"Fluid Repo","intro":"主题 GitHub 仓库","link":"https://github.com/fluid-dev/hexo-theme-fluid","image":"/img/favicon.png"},{"title":"Fluid Example","intro":"主题操作示例","link":"https://hexo.fluid-dev.com/docs/example/","image":"/img/favicon.png"}]}}}},"excerpt":"","more":"<p>描述macOS OC运行时库支持的函数和数据结构.</p>\n<h2 id=\"通览\"><a href=\"#通览\" class=\"headerlink\" title=\"通览\"></a>通览</h2><p>OC运行时是一个运行时库,该库用来支持OC语言的动态属性.并且这种情况对所有的的Objectiv-C的app都有关系.OC运行时库支持的函数实现在 /usr/lib/libobjc.A.dylib中的分享库中可以查到.(自己测试是在资源库文件夹下面)</p>\n<p>在OC编程中,您完全没有必要直接地使用OC运行时库.这些Api的主要作用是作为OC和其他语言的桥接层.或者更底层的调试.</p>\n<p>OC运行时库在macOS 中的实现是特殊的.对于其他平台,GNU编译集合使用类似的Api提供了一种不同的的实现.这个文档只包含了macOS的实现.</p>\n<p>底层的OC运行时Api在OS X 版本10.5中做了显著更新.许多函数和所有现有的数据结构被替换为新的函数.老的函数和数据结构在32位模式下被弃用.64位模式下仍然存在.Api在64位模式下约束了一些在32位模式下表示的整型数据值.比如 class Count, protocol Count, methods per class, ivars per class, arguments per method, sizeof(all arguments) per method, class version number.另外,新的Objective-C ABI 对32位模式下的对象实例化约束更多.并且三个其他的24位模式下表示的一些值 methods per class, ivars per class, sizeof(a single ivar).最后,<br>老式的NXHashTable和NXMapTable被限制到四百万项.</p>\n<blockquote>\n<p>字符串编码<br>在运行时API中所有的字符指针应该<br> 被看作UTF-8编码格式.</p>\n</blockquote>\n<h2 id=\"该文档适用哪些人\"><a href=\"#该文档适用哪些人\" class=\"headerlink\" title=\"该文档适用哪些人?\"></a>该文档适用哪些人?</h2><p>这个文档适用那些对OC运行时有兴趣学习的读者.<br>因为这不是关于C的文档.该文档仅当做对OC开发者的一些拓展.</p>\n<h2 id=\"Topics\"><a href=\"#Topics\" class=\"headerlink\" title=\"Topics\"></a>Topics</h2><h3 id=\"与Class一起使用\"><a href=\"#与Class一起使用\" class=\"headerlink\" title=\"与Class一起使用\"></a>与Class一起使用</h3><pre><code class=\"hljs reasonml\">\n<span class=\"hljs-comment\">/*</span>\n<span class=\"hljs-comment\"> cls: 一个类对象</span>\n<span class=\"hljs-comment\"> 返回值: 类的名称,如果传Nil则为空字符串</span>\n<span class=\"hljs-comment\"> **/</span>\n\nfunc <span class=\"hljs-keyword\">class</span><span class=\"hljs-constructor\">_getName(<span class=\"hljs-params\">_</span> <span class=\"hljs-params\">cls</span>:AnyClass?)</span> -&gt; UnsafePointer&lt;Int8&gt;\n\n<span class=\"hljs-comment\">/*</span>\n<span class=\"hljs-comment\"> cls: 一个类对象</span>\n<span class=\"hljs-comment\"> 返回值: 该类的父类. 如果cls为根类或者cls为Nil的话,返回值为Nil</span>\n<span class=\"hljs-comment\"> </span>\n<span class=\"hljs-comment\"> 讨论:</span>\n<span class=\"hljs-comment\"> 你应该通常使用NSObject的 superclass()方法替换该方法</span>\n<span class=\"hljs-comment\"> **/</span>\n\nfunc <span class=\"hljs-keyword\">class</span><span class=\"hljs-constructor\">_getSuperclass(<span class=\"hljs-params\">_</span> <span class=\"hljs-params\">cls</span>: AnyClass?)</span> -&gt; AnyClass?\n\n<span class=\"hljs-comment\">/*</span>\n<span class=\"hljs-comment\"> 返回一个布尔值, 该值表示是否一个类对象是一个元类</span>\n<span class=\"hljs-comment\"> </span>\n<span class=\"hljs-comment\"> cls: 一个类对象</span>\n<span class=\"hljs-comment\"> 返回值: 如果参数是一个元类,则返回true. 如果非元类,则返回false,或者参数为Nil也返回false.</span>\n<span class=\"hljs-comment\"></span>\n<span class=\"hljs-comment\"> **/</span>\n\nfunc <span class=\"hljs-keyword\">class</span><span class=\"hljs-constructor\">_isMetaClass(<span class=\"hljs-params\">_</span> <span class=\"hljs-params\">cls</span>: AnyClass?)</span> -&gt; Bool\n\n<span class=\"hljs-comment\">/*</span>\n<span class=\"hljs-comment\"> 返回一个类的实例占用内存的大小</span>\n<span class=\"hljs-comment\"> </span>\n<span class=\"hljs-comment\"> cls: 一个类对象</span>\n<span class=\"hljs-comment\"> 返回值: 类实例的占用的字节.如果参数为Nil则返回0</span>\n<span class=\"hljs-comment\">**/</span>\n\nfunc <span class=\"hljs-keyword\">class</span><span class=\"hljs-constructor\">_getInstanceSize(<span class=\"hljs-params\">_</span> <span class=\"hljs-params\">cls</span>: AnyClass?)</span> -&gt; Int\n\n\n<span class=\"hljs-comment\">/*</span>\n<span class=\"hljs-comment\"> 返回给定类的一个指定实例变量</span>\n<span class=\"hljs-comment\"> </span>\n<span class=\"hljs-comment\"> cls: 想要获取实例变量的类</span>\n<span class=\"hljs-comment\"> name: 去获取的实例变量名</span>\n<span class=\"hljs-comment\"> 返回值: 指定名字的实例变量的指针</span>\n<span class=\"hljs-comment\">**/</span>\n\nfunc <span class=\"hljs-keyword\">class</span><span class=\"hljs-constructor\">_getInstanceVariable(<span class=\"hljs-params\">_</span> <span class=\"hljs-params\">cls</span>: AnyClass?, <span class=\"hljs-params\">_</span> <span class=\"hljs-params\">name</span>: UnsafePointer&lt;Int8&gt;)</span> -&gt; Ivar?\n\n<span class=\"hljs-comment\">/*</span>\n<span class=\"hljs-comment\"> 返回某个类指定名字的类变量</span>\n<span class=\"hljs-comment\"> </span>\n<span class=\"hljs-comment\"> cls: 要获取类变量的类</span>\n<span class=\"hljs-comment\"> name: 要获取的类变量名称</span>\n<span class=\"hljs-comment\"> 返回值: 指定名字的类变量的指针</span>\n<span class=\"hljs-comment\">**/</span>\n\nfunc <span class=\"hljs-keyword\">class</span><span class=\"hljs-constructor\">_getClassVariable(<span class=\"hljs-params\">_</span> <span class=\"hljs-params\">cls</span>: AnyClass?, <span class=\"hljs-params\">_</span> <span class=\"hljs-params\">name</span>: UnsagePointer&lt;Int8&gt;)</span> -&gt;Ivar?\n\n<span class=\"hljs-comment\">/*</span>\n<span class=\"hljs-comment\"> 给一个类添加一个实例变量</span>\n<span class=\"hljs-comment\"> </span>\n<span class=\"hljs-comment\"> 返回值: 如果实例变量加入成功,返回true.否则返回false(比如该类已经包含一个相同名字的实例变量)</span>\n<span class=\"hljs-comment\"> </span>\n<span class=\"hljs-comment\"> 讨论:</span>\n<span class=\"hljs-comment\"> 这个函数只能在objc_allocateClassPair(_:_:_:)之后调用.在objc_registerClassPair(_:)之前调用.不支持给一个已经注册过的类添加实例变量.</span>\n<span class=\"hljs-comment\"> </span>\n<span class=\"hljs-comment\"> 操作的类不能使元类.不支持给一个元类添加实例变量.</span>\n<span class=\"hljs-comment\"> </span>\n<span class=\"hljs-comment\"> 实例变量以字节的最小对齐方式为1&lt;&lt;align.实例变量的最小对齐方式取决于实例变量的类型和设备的架构.对于任意指针类型的变量,传log2(sizeof(pointer_type))</span>\n<span class=\"hljs-comment\"></span>\n<span class=\"hljs-comment\"> **/</span>\n\nfunc <span class=\"hljs-keyword\">class</span><span class=\"hljs-constructor\">_addIvar(<span class=\"hljs-params\">_</span> <span class=\"hljs-params\">cls</span>: AnyClass?,<span class=\"hljs-params\">_</span> <span class=\"hljs-params\">name</span>: UnsagePointer&lt;Int8&gt;, <span class=\"hljs-params\">_</span> <span class=\"hljs-params\">size</span>: Int, <span class=\"hljs-params\">_</span> <span class=\"hljs-params\">alignment</span>: UInt8, <span class=\"hljs-params\">_</span> <span class=\"hljs-params\">types</span>: UnsagePointer&lt;Int8&gt;?)</span> -&gt; Bool\n\n<span class=\"hljs-comment\">/*</span>\n<span class=\"hljs-comment\"> 获取类的实例变量列表</span>\n<span class=\"hljs-comment\"> </span>\n<span class=\"hljs-comment\"> cls: 需要拷贝属性列表的类</span>\n<span class=\"hljs-comment\"> outCount: 在返回时,包含返回数组的长度.如果outCount是NULL,则不反悔该长度.</span>\n<span class=\"hljs-comment\"> 返回值: 一个指针数组描述类声明的实例变量.任何被父类声明的实例变量不包含在内.数组包含* outCount指针，后跟一个空终止符。您必须使用free()函数释放数组.</span>\n<span class=\"hljs-comment\"> 如果类声明中没有实例变量.或者cls为Nil,则返回NULL 并且*coutCount指针为0</span>\n<span class=\"hljs-comment\"> **/</span>\n\nfunc <span class=\"hljs-keyword\">class</span><span class=\"hljs-constructor\">_copyIvarList(<span class=\"hljs-params\">_</span> <span class=\"hljs-params\">cls</span>: AnyClass?, <span class=\"hljs-params\">_</span> <span class=\"hljs-params\">outCount</span>: UnsafeMutablePointer&lt;UInt32&gt;?)</span> -&gt; UnsafeMutablePointer&lt;Ivar&gt;?\n\n<span class=\"hljs-comment\">//返回指定类实例变量布局的描述</span>\nfunc <span class=\"hljs-keyword\">class</span><span class=\"hljs-constructor\">_getIvarLayout(AnyClass?)</span>\n\n<span class=\"hljs-comment\">//设置指定类实例变量布局</span>\nfunc <span class=\"hljs-keyword\">class</span><span class=\"hljs-constructor\">_setIvarLayout(AnyClass?, UnsafePointer&lt;UInt8&gt;?)</span>\n\n<span class=\"hljs-comment\">//返回弱引用实例变量的布局描述</span>\nfunc <span class=\"hljs-keyword\">class</span><span class=\"hljs-constructor\">_getWeakIvarLayout(AnyClass?)</span>\n\n<span class=\"hljs-comment\">//设置弱引用实例变量的布局</span>\nfunc <span class=\"hljs-keyword\">class</span><span class=\"hljs-constructor\">_setWeakIvarLayout(AnyClas?, UnsafePointer&lt;UInt8&gt;?)</span>\n\n<span class=\"hljs-comment\">/*</span>\n<span class=\"hljs-comment\"> 返回指定类的指定名称的属性</span>\n<span class=\"hljs-comment\"> </span>\n<span class=\"hljs-comment\"> 返回值: 一个objc_property_t类型的指针.如果类中并未声明该名称属性或者cls为Nil则返回NULL.</span>\n<span class=\"hljs-comment\"> **/</span>\nfunc <span class=\"hljs-keyword\">class</span><span class=\"hljs-constructor\">_getProperty(<span class=\"hljs-params\">_</span> <span class=\"hljs-params\">cls</span>: AnyClass?, <span class=\"hljs-params\">_</span> <span class=\"hljs-params\">name</span>: UnsafePointer&lt;Int8&gt;)</span> -&gt; objc_property_t?\n\n<span class=\"hljs-comment\">/*</span>\n<span class=\"hljs-comment\"> 描述声明的一个类的属性</span>\n<span class=\"hljs-comment\"> </span>\n<span class=\"hljs-comment\"> cls: 想要检查的类</span>\n<span class=\"hljs-comment\"> outCount: 在返回时,包含返回数组的长度.如果outCount 是NULL,数组长度不返回.</span>\n<span class=\"hljs-comment\"> 返回值: objc_property_t类型的指针数组.任何父类声明的属性不包含在内.数组包含* outCount指针，后跟一个空终止符。您必须使用free()函数释放数组.</span>\n<span class=\"hljs-comment\"> 如果类声明中没有实例变量.或者cls为Nil,则返回NULL 并且*coutCount指针为0</span>\n<span class=\"hljs-comment\"> **/</span>\n\nfunc <span class=\"hljs-keyword\">class</span><span class=\"hljs-constructor\">_copyPropertyList(<span class=\"hljs-params\">_</span> <span class=\"hljs-params\">cls</span>: AnyClass?, <span class=\"hljs-params\">_</span> <span class=\"hljs-params\">outCount</span>: UnsageMutablePointer&lt;UInt32&gt;?)</span> -&gt; UnsafeMutablePointer&lt;objc_property_t&gt;?\n\n<span class=\"hljs-comment\">/*添加一个新方法给指定类.指定方法名和方法实现</span>\n<span class=\"hljs-comment\"></span>\n<span class=\"hljs-comment\">  cls:需要添加方法的类 </span>\n<span class=\"hljs-comment\">  name: 指定添加的方法名  </span>\n<span class=\"hljs-comment\">  imp: 方法的实现的函数,该函数必须携带两个参数 self 和  _cmd</span>\n<span class=\"hljs-comment\">  types: 一个字符数组,用来描述方法的参数类型.参考苹果官方文档 [Type Encodings](https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/ObjCRuntimeGuide/Articles/ocrtTypeEncodings.html#//apple_ref/doc/uid/TP40008048-CH100)</span>\n<span class=\"hljs-comment\">  返回值: 如果添加成功,返回true 否则返回false(例如添加的方法已经存在)</span>\n<span class=\"hljs-comment\">  </span>\n<span class=\"hljs-comment\">  讨论:</span>\n<span class=\"hljs-comment\">  该方法会重载父类的实现,但是并不会替换在这个类中已经存在的实现.想要改变已经存在的实现的话,使用method_setImplementation(_:_:)</span>\n<span class=\"hljs-comment\">  一个OC方法仅仅是一个C的函数.该函数携带至少两个参数----self 和 _cmd.举例,给定下列函数</span>\n<span class=\"hljs-comment\"></span>\n<span class=\"hljs-comment\">  void myMethodIMP(id self, SEL _cmd)</span>\n<span class=\"hljs-comment\">  &#123;</span>\n<span class=\"hljs-comment\">    //implementation ...</span>\n<span class=\"hljs-comment\">    </span>\n<span class=\"hljs-comment\">  &#125;</span>\n<span class=\"hljs-comment\">  </span>\n<span class=\"hljs-comment\">  您可以动态添加该函数到一个类中作为一个方法.(调用 resolveThisMethodDynamically) 像这样:</span>\n<span class=\"hljs-comment\">  </span>\n<span class=\"hljs-comment\">  class_addMethod([self class], @selector(resolveThisMethodDynamically), (IMP) myMethodIMP, &quot;v@:&quot;);</span>\n<span class=\"hljs-comment\">  </span>\n<span class=\"hljs-comment\"> **/</span>\n\nfunc  <span class=\"hljs-keyword\">class</span><span class=\"hljs-constructor\">_addMethod(<span class=\"hljs-params\">_</span> <span class=\"hljs-params\">cls</span>:AnyClass?,<span class=\"hljs-params\">_</span> <span class=\"hljs-params\">name</span>:Selector,<span class=\"hljs-params\">_</span> <span class=\"hljs-params\">imp</span>:IMP,<span class=\"hljs-params\">_</span> <span class=\"hljs-params\">types</span>: UnsagePointer&lt;Int8&gt;?)</span>\n\n<span class=\"hljs-comment\">/*</span>\n<span class=\"hljs-comment\"> 获取一个类的指定实例方法</span>\n<span class=\"hljs-comment\"> </span>\n<span class=\"hljs-comment\"> aClass: 要检查的类</span>\n<span class=\"hljs-comment\"> aSelector: 要获取方法的选择器</span>\n<span class=\"hljs-comment\"> 返回值: 指定方法选择器所对应的方法实现,如果指定类或者它的父类不包含指定选择器的实例方法则返回NULL.</span>\n<span class=\"hljs-comment\"> </span>\n<span class=\"hljs-comment\"> 讨论:</span>\n<span class=\"hljs-comment\"> 注意这个函数搜索父类的实现,而class_copyMethodList(_:_:)是不会的</span>\n<span class=\"hljs-comment\"> **/</span>\n\nfunc <span class=\"hljs-keyword\">class</span><span class=\"hljs-constructor\">_getInstanceMethod(<span class=\"hljs-params\">_</span> <span class=\"hljs-params\">cls</span>:AnyClass?,<span class=\"hljs-params\">_</span> <span class=\"hljs-params\">name</span>: Selector)</span> -&gt; Method?\n\n<span class=\"hljs-comment\">/*</span>\n<span class=\"hljs-comment\"> 返回指定类指定名称的类方法</span>\n<span class=\"hljs-comment\"> </span>\n<span class=\"hljs-comment\"> aClass: 一个雷定义的指针.该类包含您想要获取的方法.</span>\n<span class=\"hljs-comment\"> aSelector: 一个SEL类型的指针.该SEL包含你想要获取的方法.</span>\n<span class=\"hljs-comment\"> 返回值: Method的指针.对应指定类指定方法选择器的实现.如果该类或者它的父类不包含这个类方法,则返回NULL.</span>\n<span class=\"hljs-comment\"> </span>\n<span class=\"hljs-comment\"> 讨论:</span>\n<span class=\"hljs-comment\"> 注意这个函数搜索父类的方法实现.class_copyMethodList(_:_:)不搜索</span>\n<span class=\"hljs-comment\"> **/</span>\n\n func <span class=\"hljs-keyword\">class</span><span class=\"hljs-constructor\">_getClassMethod(<span class=\"hljs-params\">_</span> <span class=\"hljs-params\">cls</span>: AnyClass?, <span class=\"hljs-params\">_</span> <span class=\"hljs-params\">name</span>: Selector)</span> -&gt; Method?\n \n<span class=\"hljs-comment\">/*</span>\n<span class=\"hljs-comment\"> 返回一个类的实例方法列表</span>\n<span class=\"hljs-comment\"> </span>\n<span class=\"hljs-comment\"> cls: 想要检测的类</span>\n<span class=\"hljs-comment\"> outCount: 在返回时,包含数组的长度.如果outCounte是NULL,则不返回.</span>\n<span class=\"hljs-comment\"> 返回值: Method类型的指针数组.表示该类所有的实例方法实现.</span>\n<span class=\"hljs-comment\"> 不包含父类的实例方法实现.该数组包含*outCount指针后面跟一个空终止符.您必须使用free()函数释放该数组.</span>\n<span class=\"hljs-comment\"> </span>\n<span class=\"hljs-comment\"> 如果该类没有实例方法.或者该类为Nil,则返回NULL并且*outCount是0</span>\n<span class=\"hljs-comment\"> </span>\n<span class=\"hljs-comment\"> 讨论:</span>\n<span class=\"hljs-comment\"> </span>\n<span class=\"hljs-comment\"> 获取一个类的类方法列表.使用class_copyMethodList(object_getClass(cls), &amp;count)</span>\n<span class=\"hljs-comment\"> 获取父类的方法列表,使用class_getInstanceMethod(_:_:)或者class_getClassMehtod(_:_:)</span>\n<span class=\"hljs-comment\"> **/</span>\n\nfunc <span class=\"hljs-keyword\">class</span><span class=\"hljs-constructor\">_copyMethodList(<span class=\"hljs-params\">_</span> <span class=\"hljs-params\">cls</span>: AnyClass?, <span class=\"hljs-params\">_</span> <span class=\"hljs-params\">outCount</span>: UnsageMutablePointer&lt;UInt32&gt;?)</span> -&gt; UnsafeMutablePointer&lt;Method&gt;?\n\n<span class=\"hljs-comment\">/*</span>\n<span class=\"hljs-comment\"> 替换指定类的方法的实现</span>\n<span class=\"hljs-comment\"> </span>\n<span class=\"hljs-comment\"> cls:要修改的类</span>\n<span class=\"hljs-comment\"> name: 一个方法选择器用来确认哪个方法实现要被替换</span>\n<span class=\"hljs-comment\"> imp:新的方法实现.</span>\n<span class=\"hljs-comment\"> types: 一个字符串集合,用来描述参数的类型.必须至少携带两个参数, self 和_cmd, 第二个和第三个字符必须为&quot;@:&quot;(第一个参数为返回类型)</span>\n<span class=\"hljs-comment\"> </span>\n<span class=\"hljs-comment\"> 返回值: 修改的类之前的方法实现.</span>\n<span class=\"hljs-comment\"> </span>\n<span class=\"hljs-comment\"> 讨论:</span>\n<span class=\"hljs-comment\">可以通过两种方式实现该函数行为:</span>\n<span class=\"hljs-comment\">如果方法名不存在,通过call_addMethod(_:_:_:_:)方法的调用添加函数实现.按照types添加参数类型和返回值类型.</span>\n<span class=\"hljs-comment\">如果方法名存在,他的IMP通过method_setImplementation(_:_:)方法的调用来替换函数实现.types参数被忽略.</span>\n<span class=\"hljs-comment\"></span>\n<span class=\"hljs-comment\"> **/</span>\n\nfunc <span class=\"hljs-keyword\">class</span><span class=\"hljs-constructor\">_replaceMethod(<span class=\"hljs-params\">_</span> <span class=\"hljs-params\">cls</span>:AnyClass?, <span class=\"hljs-params\">_</span> <span class=\"hljs-params\">name</span>: Selector,<span class=\"hljs-params\">_</span> <span class=\"hljs-params\">imp</span>: IMP, <span class=\"hljs-params\">_</span> <span class=\"hljs-params\">types</span>: UnsafePointer&lt;Int8&gt;?)</span> -&gt; IMP?\n\n<span class=\"hljs-comment\">/*</span>\n<span class=\"hljs-comment\"> 获取指定实例方法的实现</span>\n<span class=\"hljs-comment\"></span>\n<span class=\"hljs-comment\"> cls: 指定类</span>\n<span class=\"hljs-comment\"> name: 方法选择器</span>\n<span class=\"hljs-comment\"> 返回值: 返回函数指针,如果cls为Nil,则返回NULL.</span>\n<span class=\"hljs-comment\"> </span>\n<span class=\"hljs-comment\"> 讨论:</span>\n<span class=\"hljs-comment\"> </span>\n<span class=\"hljs-comment\"> class_getMethodImplementation(_:_:)可能会比method_getImplementtation(class_getInstanceMethod(cls, name))更快一些.</span>\n<span class=\"hljs-comment\"> </span>\n<span class=\"hljs-comment\"> 返回的函数指针可能是运行时的函数，而不是实际的方法实现。例如，如果类的实例不响应选择器，那么返回的函数指针将是运行时消息转发机制的一部分。</span>\n<span class=\"hljs-comment\"> **/</span> \n\nfunc <span class=\"hljs-keyword\">class</span><span class=\"hljs-constructor\">_getMethodImplementation(<span class=\"hljs-params\">_</span> <span class=\"hljs-params\">cls</span>: AnyClass?,<span class=\"hljs-params\">_</span> <span class=\"hljs-params\">name</span>: Selector)</span> -&gt; IMP?\n\n<span class=\"hljs-comment\">/*</span>\n<span class=\"hljs-comment\"> 返回将要被调用的指定消息的函数指针</span>\n<span class=\"hljs-comment\"> </span>\n<span class=\"hljs-comment\"> cls: 指定的类</span>\n<span class=\"hljs-comment\"> name: 一个方法选择器</span>\n<span class=\"hljs-comment\"> 返回值: 返回函数指针,如果cls为Nil,则返回NULL.</span>\n<span class=\"hljs-comment\"> **/</span> \n\nfunc <span class=\"hljs-keyword\">class</span><span class=\"hljs-constructor\">_getMethodImplementation_stret(<span class=\"hljs-params\">_</span> <span class=\"hljs-params\">cls</span>: AnyClass?,<span class=\"hljs-params\">_</span> <span class=\"hljs-params\">name</span>: Selector)</span> -&gt; IMP?\n\n<span class=\"hljs-comment\">/*</span>\n<span class=\"hljs-comment\">返回一个布尔值表示是否一个实例响应了指定方法</span>\n<span class=\"hljs-comment\"></span>\n<span class=\"hljs-comment\">cls : 响应消息的类</span>\n<span class=\"hljs-comment\">sel : 一个方法选择器</span>\n<span class=\"hljs-comment\">返回值: 响应方法,则返回true,否则返回false</span>\n<span class=\"hljs-comment\"></span>\n<span class=\"hljs-comment\">讨论:</span>\n<span class=\"hljs-comment\">通常使用NSObject的responds(to:)或者instancesRespond(to:)方法来替换该方法.</span>\n<span class=\"hljs-comment\"> **/</span>\nfunc <span class=\"hljs-keyword\">class</span><span class=\"hljs-constructor\">_respondsToSelector(AnyClass?, Selector)</span>\n\n<span class=\"hljs-comment\">/*</span>\n<span class=\"hljs-comment\"> 给一个类添加一个协议</span>\n<span class=\"hljs-comment\"> </span>\n<span class=\"hljs-comment\"> cls: 要改动的类</span>\n<span class=\"hljs-comment\"> outCount: 要添加到该类的协议</span>\n<span class=\"hljs-comment\"> 返回值: 添加成功,返回ture;否则false(比如该类中已经存在该协议)</span>\n<span class=\"hljs-comment\"></span>\n<span class=\"hljs-comment\"> **/</span>\nfunc <span class=\"hljs-keyword\">class</span><span class=\"hljs-constructor\">_addProtocol(<span class=\"hljs-params\">_</span> <span class=\"hljs-params\">cls</span>: AnyClass?, <span class=\"hljs-params\">_</span> <span class=\"hljs-params\">protocol</span>: Protocol)</span> -&gt; Bool\n\n<span class=\"hljs-comment\">/*</span>\n<span class=\"hljs-comment\"> 给一个类添加一个属性</span>\n<span class=\"hljs-comment\"> </span>\n<span class=\"hljs-comment\"> cls: 要改动的类</span>\n<span class=\"hljs-comment\"> name: 属性名</span>\n<span class=\"hljs-comment\"> attributes: 属性的描述(readonly, nonatomic, asign...)</span>\n<span class=\"hljs-comment\"> attributeCount: 属性描述的数量</span>\n<span class=\"hljs-comment\"> 返回值: 添加成功,返回true,否则false(比如已经存在该属性)</span>\n<span class=\"hljs-comment\"> **/</span>\n\nfunc <span class=\"hljs-keyword\">class</span><span class=\"hljs-constructor\">_addProperty(<span class=\"hljs-params\">_</span> <span class=\"hljs-params\">cls</span>: AnyClass?, <span class=\"hljs-params\">_</span> <span class=\"hljs-params\">name</span>: UnsagePointer&lt;Int8&gt;, <span class=\"hljs-params\">_</span> <span class=\"hljs-params\">attributes</span>: UnsafePointer&lt;<span class=\"hljs-params\">objc_property_attribute_t</span>&gt;?, <span class=\"hljs-params\">_</span> <span class=\"hljs-params\">attributeCounte</span>: UInt32)</span> -&gt; Bool\n\n<span class=\"hljs-comment\">/*</span>\n<span class=\"hljs-comment\"> 替换一个类的属性</span>\n<span class=\"hljs-comment\"> **/</span>\nfunc <span class=\"hljs-keyword\">class</span><span class=\"hljs-constructor\">_replaceProperty(<span class=\"hljs-params\">_</span> <span class=\"hljs-params\">cls</span>:AnyClass?, <span class=\"hljs-params\">_</span> <span class=\"hljs-params\">name</span>: UnsafePointer&lt;Int8&gt;, <span class=\"hljs-params\">_</span> <span class=\"hljs-params\">attributes</span>: UnsafePointer&lt;<span class=\"hljs-params\">objc_property_attribute_t</span>&gt;?, <span class=\"hljs-params\">_</span> <span class=\"hljs-params\">attrubuteCount</span>: UInt32)</span>\n\n<span class=\"hljs-comment\">/*</span>\n<span class=\"hljs-comment\"> 返回一个布尔值 表示是否一个类执行指定协议方法</span>\n<span class=\"hljs-comment\"> </span>\n<span class=\"hljs-comment\"> 通常使用NSObject的conforms(to:) 来替换它</span>\n<span class=\"hljs-comment\"> **/</span>\n\nfunc <span class=\"hljs-keyword\">class</span><span class=\"hljs-constructor\">_conformsToProtocol(<span class=\"hljs-params\">_</span> <span class=\"hljs-params\">cls</span>: AnyClass?,<span class=\"hljs-params\">_</span> <span class=\"hljs-params\">protocol</span>: Protocol?)</span> -&gt; Bool\n<span class=\"hljs-comment\">/*</span>\n<span class=\"hljs-comment\"> 描述一个类包含的协议</span>\n<span class=\"hljs-comment\"> cls: 指定的类</span>\n<span class=\"hljs-comment\"> outCount: 返回数组的长度.如果outCount是NULL,返回值不包含数组的长度.</span>\n<span class=\"hljs-comment\"> 返回值: Protocol* 类型的指针数组.描述类中包含的协议.父类的协议不包含其中.数组中包含*outCount指针,并庚随一个空的终止符.必须使用free()函数释放数组.</span>\n<span class=\"hljs-comment\"> </span>\n<span class=\"hljs-comment\"> 返回值: 如果cls中没有协议,或者cls为Nil,返回NULL并且*outCount为0</span>\n<span class=\"hljs-comment\"> **/</span>\n\nfunc <span class=\"hljs-keyword\">class</span><span class=\"hljs-constructor\">_copyProtocolList(<span class=\"hljs-params\">_</span> <span class=\"hljs-params\">cls</span>: AnyClass?,<span class=\"hljs-params\">_</span> <span class=\"hljs-params\">outCount</span>: UnsafeMutablePointer&lt;UInt32&gt;?)</span>  -&gt; AutoreleasingUnsafeMutablePointer&lt;Protocol&gt;?\n\n<span class=\"hljs-comment\">//返回类定义的版本号</span>\nfunc <span class=\"hljs-keyword\">class</span><span class=\"hljs-constructor\">_getVersion(AnyClass?)</span>\n\n<span class=\"hljs-comment\">//设置一个类定义的版本号</span>\nfunc <span class=\"hljs-keyword\">class</span><span class=\"hljs-constructor\">_setVersion(AnyClass, Int32)</span>\n\n</code></pre>\n\n<h3 id=\"添加Class\"><a href=\"#添加Class\" class=\"headerlink\" title=\"添加Class\"></a>添加Class</h3><pre><code class=\"hljs swift\">\n<span class=\"hljs-comment\">/*</span>\n<span class=\"hljs-comment\"> 创建一个类和元类</span>\n<span class=\"hljs-comment\"> </span>\n<span class=\"hljs-comment\"> superclass: 新创建类的父类.如果创建一个根类则为Nil</span>\n<span class=\"hljs-comment\"> name: 新创建类的类名.该字符串会被拷贝.</span>\n<span class=\"hljs-comment\"> extraBytes: 类和元类末尾为索引实例变量而分配的字节数.通常为0</span>\n<span class=\"hljs-comment\"> 返回值: 新创建的类.或者为Nil如果该类无法被创建(比如使用的名字已经被使用)</span>\n<span class=\"hljs-comment\"> </span>\n<span class=\"hljs-comment\"> 讨论:</span>\n<span class=\"hljs-comment\"> 可以获取新创建元类的指针通过调用object_getClass(newClass).</span>\n<span class=\"hljs-comment\"> 创建一个类.需要先调用objc_allocateClassPair(_:_:_:).然后设置类的特性使用诸如class_addMethod(_:_:_:_:)和class_addIvar(_:_:_:_:_:)这些方法.当你创建完该类后.调用objc_registerClassPair(_:)注册该类后才可以使用.</span>\n<span class=\"hljs-comment\"> </span>\n<span class=\"hljs-comment\"> 实例方法和实例变量应该添加到自身类中.类方法应该添加到元类中.</span>\n<span class=\"hljs-comment\"> </span>\n<span class=\"hljs-comment\"> **/</span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">objc_allocateClassPair</span><span class=\"hljs-params\">(<span class=\"hljs-number\">_</span> superclass: AnyClass?, <span class=\"hljs-number\">_</span> name: UnsafePointer&lt;Int8&gt;, <span class=\"hljs-number\">_</span> extraBytes: Int)</span></span> -&gt; <span class=\"hljs-type\">AnyClass?</span>\n\n<span class=\"hljs-comment\">/*</span>\n<span class=\"hljs-comment\"> 销毁一个类和它关联的元类.</span>\n<span class=\"hljs-comment\"> </span>\n<span class=\"hljs-comment\"> 讨论:</span>\n<span class=\"hljs-comment\"> 如果cls类实例或者它的任何子类存在的话,不要调用该函数.</span>\n<span class=\"hljs-comment\"> **/</span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">objc_disposeClassPair</span><span class=\"hljs-params\">(<span class=\"hljs-number\">_</span> cls: AnyClass)</span></span>\n\n<span class=\"hljs-comment\">//注册一个类 该类已使用objc_allocateClassPair(_:_:_:)方法创建</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">objc_registerClassPair</span><span class=\"hljs-params\">(AnyClass)</span></span>\n\n<span class=\"hljs-comment\">/*</span>\n<span class=\"hljs-comment\"> 在Foundation框架下的KVO使用</span>\n<span class=\"hljs-comment\"> </span>\n<span class=\"hljs-comment\"> 讨论:</span>\n<span class=\"hljs-comment\"> 自身不要调用该函数</span>\n<span class=\"hljs-comment\"> **/</span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">objc_duplicateClass</span><span class=\"hljs-params\">(AnyClass, UnsafePointer&lt;Int8&gt;, Int)</span></span>\n</code></pre>\n\n<h3 id=\"与实例一起使用\"><a href=\"#与实例一起使用\" class=\"headerlink\" title=\"与实例一起使用\"></a>与实例一起使用</h3><pre><code class=\"hljs swift\">\n<span class=\"hljs-comment\">/*</span>\n<span class=\"hljs-comment\"> 读取一个对象中实例变量的值</span>\n<span class=\"hljs-comment\"> 讨论:</span>\n<span class=\"hljs-comment\"> 如果实例变量名已知的话,object_getIvar(_:_:)比object_getInstanceVariable获取值更快一些.</span>\n<span class=\"hljs-comment\"> **/</span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">object_getIvar</span><span class=\"hljs-params\">(<span class=\"hljs-number\">_</span> obj: <span class=\"hljs-keyword\">Any</span>?,<span class=\"hljs-number\">_</span> ivar: Ivar)</span></span> -&gt; <span class=\"hljs-type\">Any?</span>\n\n<span class=\"hljs-comment\">//设置一个对象实例变量的值</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">object_setIvar</span><span class=\"hljs-params\">(<span class=\"hljs-number\">_</span> obj: <span class=\"hljs-keyword\">Any</span>?,<span class=\"hljs-number\">_</span> ivar: Ivar,<span class=\"hljs-number\">_</span> varlue: <span class=\"hljs-keyword\">Any</span>?)</span></span>\n\n<span class=\"hljs-comment\">//返回某对象的类名</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">object_getClassName</span><span class=\"hljs-params\">(_obj: <span class=\"hljs-keyword\">Any</span>?)</span></span>\n\n<span class=\"hljs-comment\">//返回实例对象的类对象</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">object_getClass</span><span class=\"hljs-params\">(<span class=\"hljs-number\">_</span> obj: <span class=\"hljs-keyword\">Any</span>?)</span></span> -&gt; <span class=\"hljs-type\">AnyClass?</span>\n\n<span class=\"hljs-comment\">//设置一个对象的类 返回值为对象之前所属的类对象.</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">object_setClass</span><span class=\"hljs-params\">(<span class=\"hljs-number\">_</span> obj: <span class=\"hljs-keyword\">Any</span>?,<span class=\"hljs-number\">_</span> cls: AnyClass)</span></span> -&gt; <span class=\"hljs-type\">AnyClass?</span>\n</code></pre>\n\n<h3 id=\"获取类定义\"><a href=\"#获取类定义\" class=\"headerlink\" title=\"获取类定义\"></a>获取类定义</h3><pre><code class=\"hljs go\"><span class=\"hljs-comment\">//获取已注册类定义的列表</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">objc_getClassList</span><span class=\"hljs-params\">(AutoreleasingUnsafeMutablePointer&lt;AnyClass&gt;?, Int32)</span></span>\n\n<span class=\"hljs-comment\">//创建并且返回所有已注册的类定义的指针列表</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">objc_copyClassList</span><span class=\"hljs-params\">(UnsafeMutablePointer&lt;UInt32&gt;?)</span></span>\n\n<span class=\"hljs-comment\">//返回某个类的类定义</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">objc_lookUpClass</span><span class=\"hljs-params\">(UnsafePointer&lt;Int8&gt;)</span></span>\n\n<span class=\"hljs-comment\">//返回某个类的类定义</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">objc_getClass</span><span class=\"hljs-params\">(UnsafePointer&lt;Int8&gt;)</span></span>\n\n<span class=\"hljs-comment\">//返回某个类的类定义</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">objc_getRequiredClass</span><span class=\"hljs-params\">(UnsafePointer&lt;Int8&gt;)</span></span>\n\n<span class=\"hljs-comment\">//返回某个类的元类定义</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">objc_getMetaClass</span><span class=\"hljs-params\">(UnsafePointer&lt;Int8&gt;)</span></span>\n</code></pre>\n\n<h3 id=\"与实例变量一起使用\"><a href=\"#与实例变量一起使用\" class=\"headerlink\" title=\"与实例变量一起使用\"></a>与实例变量一起使用</h3><pre><code class=\"hljs go\"><span class=\"hljs-comment\">//返回实例变量名称</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">ivar_getName</span><span class=\"hljs-params\">(Ivar)</span></span>\n\n<span class=\"hljs-comment\">//返回实例变量的类型</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">ivar_getTypeEncoding</span><span class=\"hljs-params\">(Ivar)</span></span>\n\n<span class=\"hljs-comment\">//返回一个实例变量相对内存基址的偏移值</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">ivar_getOffset</span><span class=\"hljs-params\">(Ivar)</span></span>\n</code></pre>\n\n<h3 id=\"关联引用\"><a href=\"#关联引用\" class=\"headerlink\" title=\"关联引用\"></a>关联引用</h3><pre><code class=\"hljs swift\"><span class=\"hljs-comment\">//使用指定key和关联策略设置某个对象的关联值</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">objc_setAssociateObject</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">Any</span>, UnsafeRawPointer, <span class=\"hljs-keyword\">Any</span>?, objc_AssociationPoicy)</span></span>\n\n<span class=\"hljs-comment\">//返回某个对象该key下对应的关联值</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">objc_getAssociateObject</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">Any</span>, UnsafeRawPointer)</span></span>\n\n<span class=\"hljs-comment\">//移除某个对象所有关联对象</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">objc_removeAssociateObjects</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">Any</span>)</span></span>\n</code></pre>\n\n<h3 id=\"与方法一起使用\"><a href=\"#与方法一起使用\" class=\"headerlink\" title=\"与方法一起使用\"></a>与方法一起使用</h3><pre><code class=\"hljs swift\"><span class=\"hljs-comment\">/*</span>\n<span class=\"hljs-comment\"> 返回方法的SEL</span>\n<span class=\"hljs-comment\"> </span>\n<span class=\"hljs-comment\"> 讨论:</span>\n<span class=\"hljs-comment\"> 获取C字符串的方法名.调用sel_getName(method_getName(method))</span>\n<span class=\"hljs-comment\"> **/</span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">method_getName</span><span class=\"hljs-params\">(<span class=\"hljs-number\">_</span> m: Method)</span></span> -&gt; <span class=\"hljs-type\">Selector</span>\n\n<span class=\"hljs-comment\">//返回IMP类型的函数指针</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">method_getImplementation</span><span class=\"hljs-params\">(<span class=\"hljs-number\">_</span> m: Method)</span></span> -&gt; <span class=\"hljs-type\">IMP</span>\n\n<span class=\"hljs-comment\">//返回一个字符串描述方法的参数和返回类型</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">method_getTypeEncoding</span><span class=\"hljs-params\">(<span class=\"hljs-number\">_</span> m: Method)</span></span> -&gt; <span class=\"hljs-type\">UnsafePointer</span>&lt;<span class=\"hljs-type\">Int8</span>&gt;?\n\n<span class=\"hljs-comment\">//返回一个字符串描述方法的返回类型</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">method_copyReturnType</span><span class=\"hljs-params\">(Method)</span></span>\n\n<span class=\"hljs-comment\">//返回一个字符串描述方法的单个参数类型</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">method_copyArgumentType</span><span class=\"hljs-params\">(Method, UInt32)</span></span>\n\n<span class=\"hljs-comment\">//通过引用返回一个字符串描述方法的返回值类型</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">method_getReturnType</span><span class=\"hljs-params\">(Method, UInt32)</span></span>\n\n<span class=\"hljs-comment\">//返回一个方法接受的参数数量</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">method_getNumberOfArguments</span><span class=\"hljs-params\">(Method)</span></span>\n\n<span class=\"hljs-comment\">//通过引用返回一个字符串描述方法单个参数的类型</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">method_getArgumentType</span><span class=\"hljs-params\">(Method, UInt32, UnsafeMutablePointer&lt;Int8&gt;?, Int)</span></span>\n\n<span class=\"hljs-comment\">//返回某个方法的结构描述</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">method_getDescription</span><span class=\"hljs-params\">(Method)</span></span>\n\n<span class=\"hljs-comment\">//设置某个方法的实现</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">method_setImplementation</span><span class=\"hljs-params\">(<span class=\"hljs-number\">_</span> m: Method, <span class=\"hljs-number\">_</span> imp: IMP)</span></span> -&gt; <span class=\"hljs-type\">IMP</span>\n\n<span class=\"hljs-comment\">/*</span>\n<span class=\"hljs-comment\"> 交换两个方法的实现</span>\n<span class=\"hljs-comment\"> </span>\n<span class=\"hljs-comment\"> IMP imp1 = method_getImplementation(m1);</span>\n<span class=\"hljs-comment\"> IMP imp2 = method_getImplementation(m2);</span>\n<span class=\"hljs-comment\"> method_setImplementation(m1, imp2);</span>\n<span class=\"hljs-comment\"> method_setImplementation(m2, imp1);</span>\n<span class=\"hljs-comment\"> </span>\n<span class=\"hljs-comment\"> **/</span> \n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">method_exchangeImplementations</span><span class=\"hljs-params\">(_m1: Method,<span class=\"hljs-number\">_</span> m2: Method)</span></span>\n</code></pre>\n\n<h3 id=\"与库一起使用\"><a href=\"#与库一起使用\" class=\"headerlink\" title=\"与库一起使用\"></a>与库一起使用</h3><pre><code class=\"hljs go\">\n<span class=\"hljs-comment\">//返回所有加载的OC框架和动态库名称  </span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">objc_copyImageNames</span><span class=\"hljs-params\">(UnsafeMutablePointer&lt;UInt32&gt;?)</span></span>\n\n<span class=\"hljs-comment\">//返回动态库中一个类的原始格式的名称</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">objc_getImageName</span><span class=\"hljs-params\">(AnyClass?)</span></span>\n\n<span class=\"hljs-comment\">//返回某个库或者框架中所有类的名称</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">objc_copyClassNameForImage</span><span class=\"hljs-params\">(UnsafePointer&lt;Int8&gt;, UnsafeMutablePointer&lt;UInt32&gt;?)</span></span>\n\n</code></pre>\n\n<h3 id=\"与Selectors一起使用\"><a href=\"#与Selectors一起使用\" class=\"headerlink\" title=\"与Selectors一起使用\"></a>与Selectors一起使用</h3><pre><code class=\"hljs go\">\n<span class=\"hljs-comment\">//返回某一方法的名称</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">sel_getName</span><span class=\"hljs-params\">(Selector)</span></span>\n\n<span class=\"hljs-comment\">//在OC runtime系统中注册一个方法,映射方法名到一个selector,并且返回selector的值</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">sel_registerName</span><span class=\"hljs-params\">(UnsafePointer&lt;Int8&gt;)</span></span>\n\n<span class=\"hljs-comment\">//注册一个方法名到 OC runtime系统中</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">sel_getUid</span><span class=\"hljs-params\">(UnsafePointer&lt;Int8&gt;)</span></span>\n\n<span class=\"hljs-comment\">//返回一个布尔值 表示两个方法是否相等</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">sel_isEqual</span><span class=\"hljs-params\">(Selector, Selector)</span></span>\n</code></pre>\n\n<h3 id=\"与协议一起使用\"><a href=\"#与协议一起使用\" class=\"headerlink\" title=\"与协议一起使用\"></a>与协议一起使用</h3><pre><code class=\"hljs swift\"><span class=\"hljs-comment\">//返回指定协议</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">objc_getProtocol</span><span class=\"hljs-params\">(UnsafePointer&lt;Int8&gt;)</span></span>\n\n<span class=\"hljs-comment\">//以数组形式返回runtime中所有已知协议</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">objc_copyProtocolList</span><span class=\"hljs-params\">(UnsafeMutablePointer&lt;UInt32&gt;)</span></span>\n\n<span class=\"hljs-comment\">//创建一个协议实例</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">objc_allocateProtocol</span><span class=\"hljs-params\">(UnsafePointer&lt;Int8&gt;)</span></span>\n\n<span class=\"hljs-comment\">//在OC运行时系统中注册一个新协议</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">objc_registerProtocol</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">Protocol</span>)</span></span>\n\n<span class=\"hljs-comment\">//给协议添加一个方法</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">protocol_addMethodDescription</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">Protocol</span>, Selector, UnsafePointer&lt;Int8&gt;?, Bool, Bool)</span></span>\n\n<span class=\"hljs-comment\">//添加注册过的协议到正在构建的协议中</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">protocol_addProtocol</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">Protocol</span>, <span class=\"hljs-keyword\">Protocol</span>)</span></span>\n\n<span class=\"hljs-comment\">//添加属性到正在构建的协议中</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">protocol_addProperty</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">Protocol</span>, UnsafePointer&lt;Int8&gt;, UnsafePointer&lt;objc_property_attribute_t&gt;?, UInt32, Bool, Bool)</span></span>\n\n<span class=\"hljs-comment\">//返回协议名称</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">protocol_getName</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">Protocol</span>)</span></span>\n\n<span class=\"hljs-comment\">//返回布尔值 表示是否两个协议相等</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">protocol_isEqual</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">Protocol</span>?, <span class=\"hljs-keyword\">Protocol</span>?)</span></span>\n\n<span class=\"hljs-comment\">//返回满足给定协议的方法描述数组</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">protocol_copyMethodDescriptionList</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">Protocol</span>, Bool, Bool, UnsafeMutablePointer&lt;UInt32&gt;?)</span></span>\n\n<span class=\"hljs-comment\">//返回满足给定协议的指定方法的方法描述</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">protocol_getMethodDescription</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">Protocol</span>, Selector, Bool, Bool)</span></span>\n\n<span class=\"hljs-comment\">//返回一个协议声明的属性数组</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">protocol_copyPropertyList</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">Protocol</span>, UnsafeMutablePointer&lt;UInt32&gt;)</span></span>\n\n<span class=\"hljs-comment\">//返回给定协议的指定属性</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">protocol_getProperty</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">Protocol</span>, UnsafePointer&lt;Int8&gt;, Bool, Bool)</span></span>\n\n<span class=\"hljs-comment\">//返回适用某协议的协议数组</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">protocol_copyProtocolList</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">Protocol</span>, UnsafeMutablePointer&lt;UInt32&gt;)</span></span>\n\n<span class=\"hljs-comment\">//返回一个布尔值 表示是否一个协议遵循另一个协议</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">protocol_comformsToProtocol</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">Protocol</span>?, <span class=\"hljs-keyword\">Protocol</span>?)</span></span>\n</code></pre>\n\n<h3 id=\"与属性一起使用\"><a href=\"#与属性一起使用\" class=\"headerlink\" title=\"与属性一起使用\"></a>与属性一起使用</h3><pre><code class=\"hljs reasonml\"><span class=\"hljs-comment\">//返回属性名</span>\nfunc property<span class=\"hljs-constructor\">_getName(<span class=\"hljs-params\">_</span> <span class=\"hljs-params\">property</span>: <span class=\"hljs-params\">objc_property_t</span>)</span> -&gt; UnsafePointer&lt;Int8&gt;\n\n<span class=\"hljs-comment\">//返回一个属性的的特征字符串</span>\nfunc property<span class=\"hljs-constructor\">_getAttributes(<span class=\"hljs-params\">_</span> <span class=\"hljs-params\">property</span>: <span class=\"hljs-params\">objc_property_t</span>)</span> -&gt; UnsafePointer&lt;Int8&gt;\n\n<span class=\"hljs-comment\">//返回指定特征名的属性值</span>\nfunc property<span class=\"hljs-constructor\">_copyAttributeValue(<span class=\"hljs-params\">_</span> <span class=\"hljs-params\">property</span>: <span class=\"hljs-params\">objc_property_t</span>,<span class=\"hljs-params\">_</span> <span class=\"hljs-params\">attributeName</span>: UnsafePointer&lt;Int8&gt;)</span> -&gt; UnsafeMutablePointer&lt;Int8&gt;?\n\n<span class=\"hljs-comment\">//返回指定属性的属性特征数组</span>\nfunc property<span class=\"hljs-constructor\">_copyAttributeList(<span class=\"hljs-params\">_</span> <span class=\"hljs-params\">property</span>: <span class=\"hljs-params\">objc_property_t</span>, <span class=\"hljs-params\">_</span> <span class=\"hljs-params\">outCount</span>: UnsafeMutablePointer&lt;UInt32&gt;?)</span> -&gt; UnsafeMutablePointer&lt;objc_property_attribute_t&gt;?\n</code></pre>\n\n<h3 id=\"OC语言特色的使用\"><a href=\"#OC语言特色的使用\" class=\"headerlink\" title=\"OC语言特色的使用\"></a>OC语言特色的使用</h3><pre><code class=\"hljs swift\"><span class=\"hljs-comment\">//当在foreach迭代中检测到一个突变时，由编译器插入。</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">objc_enumerationMutation</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">Any</span>)</span></span>\n\n<span class=\"hljs-comment\">//设置当前的突变处理</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">objc_setEnumerationMutationHandler</span><span class=\"hljs-params\">(<span class=\"hljs-params\">(<span class=\"hljs-params\">(<span class=\"hljs-keyword\">Any</span>)</span></span></span></span> -&gt; <span class=\"hljs-type\">Void</span>)?)\n\n<span class=\"hljs-comment\">//给一个函数创建一个指针  当方法被调用的使用调用指定Block</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">imp_implementationWithBlock</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">Any</span>)</span></span>\n\n<span class=\"hljs-comment\">//返回与一个已经创建使用的IMP关联的Block</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">imp_getBlock</span><span class=\"hljs-params\">(IMP)</span></span>\n\n<span class=\"hljs-comment\">//取消与已经创建使用的IMP关联的Block</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">imp_removeBlock</span><span class=\"hljs-params\">(IMP)</span></span>\n\n<span class=\"hljs-comment\">//加载被弱引用的对象并返回它</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">objc_loadWeak</span><span class=\"hljs-params\">()</span></span>\n\n<span class=\"hljs-comment\">//存储一个弱引用变量值</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">objc_storeWeak</span><span class=\"hljs-params\">(AutoreleasingUnsafeMutablePointer&lt;AnyObject?&gt;, <span class=\"hljs-keyword\">Any</span>?)</span></span>\n</code></pre>\n\n<h3 id=\"类定义数据结构\"><a href=\"#类定义数据结构\" class=\"headerlink\" title=\"类定义数据结构\"></a>类定义数据结构</h3><pre><code class=\"hljs awk\"><span class=\"hljs-regexp\">//</span>在类定义中表示一个方法类型\ntypealias Method\n\n<span class=\"hljs-regexp\">//</span>表示一个实例变量类型\ntypealias Ivar\n\n<span class=\"hljs-regexp\">//</span>表示一个分类类型\ntypealias Category\n\n<span class=\"hljs-regexp\">//</span>表示一个OC声明的属性类型\ntypealias objc_property_t\n\n<span class=\"hljs-regexp\">//</span>定义一个OC方法\nstruct objc_method_description\n\n<span class=\"hljs-regexp\">//</span>定义一个属性特性\nstruct objc_property_attribute_t\n</code></pre>\n\n<h3 id=\"实例数据类型\"><a href=\"#实例数据类型\" class=\"headerlink\" title=\"实例数据类型\"></a>实例数据类型</h3><p>  这些是表示对象,类,父类的数据类型</p>\n<ul>\n<li>objc_object 指向一个实例对象的指针</li>\n<li>objc_object 表示一个实例对象</li>\n<li>objc_super  一个实例对象的父类</li>\n</ul>\n<pre><code class=\"hljs gauss\"><span class=\"hljs-comment\">//一个类的实例的指针</span>\n<span class=\"hljs-keyword\">struct</span> <span class=\"hljs-type\">objc_object</span>\n\n//指定实例对象的父类\n<span class=\"hljs-type\">struct</span> objc_super\n</code></pre>\n"},{"title":"Block编程","date":"2017-12-19T08:39:00.000Z","_content":"\n## 介绍\n\nBlock对象是一个C语言层面的语法和运行时特色.Block类似于标准的C函数,但是除了包含可执行代码之外，它们还可以包含变量绑定到自动(栈)或托管(堆)内存。因此，Block可以维护一组状态(数据)，以便在执行时影响行为。\n\n可以使用block组成函数表达式.这些表达式可以传递给API,可选地存储,并且通过多线程使用.Block作为一个回调非常有用.因为Block不仅可以包含在回调上执行的代码,还可以包含执行过程中需要用到的数据.\n\n在OS X v10.6 和 iOS 4.0 之后可以使用block. block runtime 是 开源的,并且在 [LLVM's compiler-rt subproject respository](http://llvm.org/svn/llvm-project/compiler-rt/trunk/)中可以找到\nBlock同样被表示为标准的C语言工作组.由于Objective-C 和 C ++ 都是派生自C. Block在这三种语言中都能使用.\n\n通过阅读这个文档去学习什么是block对象,如何在C,C++,OC中使用.\n\n这篇文档的组成\n\n这个文档包含以下章节:\n\n- [开始使用Block]() 提供关于Block的介绍一个快速.实用的使用.\n- [概念通览]() 提供关于Block概念方面的介绍\n- [声明和创建Block]() 展示如何声明block变量和如何实现block\n- [Block 和 变量]() 描述了Block和变量之间的交互,还有定义__block存储类型的修改者.\n- [使用Block]() 阐述了Block的多种使用方式\n\n\n# 开始使用Block\n\n下面内容帮助您使用实用的例子开始使用Block.\n\n## 声明和使用一个Block\n\n使用^操作符去声明一个block变量并且去表示一个block字面量的开始.Block内容包含在{}中.正如这个例子中展示的(跟在C语言中一样, ;表示声明的结束):\n\n```\nint multiplier = 7;\n\nint (^myBlock)(int)  = ^(int num){\n    \n    return num * multiplier;\n};\n\n```\n\n示例可以用下图来阐述:\n\n![示例](http://upload-images.jianshu.io/upload_images/3340896-2b3f81f0fddab136.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n注意block能够在它定义域内作为变量使用.如果你声明一个block变量,你可以像使用函数一样使用它.\n\n```\nint multiplier = 7;\n\nint (^myBlock)(int) = ^(int num) {\n    \n  return num * multiplier;  \n};\n\nprintf(\"%d\", myBlock(3));\n\n// prints \"21\"\n```\n\n## 直接使用一个Block\n\n在许多情况下,您不需要声明block变量;只需要在需要作为参数的地方简单写一个block字面量即可.下面的例子使用 qsort_b 函数.qsort_b 函数类似于标准的 qsort_r 函数,但是携带一个block作为最后的参数.\n\n```\nchar *myCharacters[3] = {\"TomJohn\", \"George\", \"Charles codomine\"};\n\nqsort_b(myCharacters, 3, sizeof(char *), ^(const void *l, const void *r){\n    \n   char *left = * (char **)l;\n   char *right = *(cahr **)r;\n   \n   return strncmp(left, right, l);\n    \n});\n\n// myCharacters is now {\"Charles Condomine\", \"George\", \"TomJohn\"}\n```\n\n## Blocks with Cocoa\n\n在Cocoa框架下的一些方法会携带一个block作为参数,通常用来在一个集合内对象执行操作,或者作为一个操作结束后的回调来使用.下面的例子展示了如何在NSArray的`sortedArrayUsingComparator:`方法中使用一个Block.该方法携带单个参数-Block.为了方面阐述.在这个例子中,block被定义为一个NSComparator类型的本地变量:\n\n```\nNSArray *stringsArray = @[@\"string 1\", @\"String 21\", @\"string 12\", @\"String 11\", @\"String 02\"];\n\nstatic NSStringCompareOptions comparisonOptions = NSCaseInsensitiveSearch | NSNumericSearch | NSWidthInsensitiveSearch | NSForceOrderingSearch;\n\nNSLocale *currentLocale = [NSLocale currentLocale];\n\nNSComparator finderSortBlock = ^(id string1, id stirng2) {\n    \n    NSRange string1Range = NSMakeRange(0, [string1 length]);\n    return [stirng1 compare:string2 options:comparisonOptions range:string1Range locale:currentLocale];\n};\n\nNSArray *finderSortArray = [stringsArray sortedArrayUsingComparator:finderSortBlock];\n\nNSLog(@\"finderSortArray:%@\", finderSortArray);\n\n/*\n \n output:\n \n finderSortArray: (\n \n    \"string 1\",\n    \"String 02\",\n    \"String 11\",\n    \"string 12\",\n    \"String 21\"\n )\n */\n\n```\n\n## __block 变量\n\nblock的一个强大的特性是在同一作用域内,它们能够修改变量.使用__block存储类型修饰符标记一个在block中可以修改的外部变量. 改变 **Blocks with Cocoa**中的示例,可以使用一个block变量去计算多少个字符串被用来比较. 为了阐述方便,在这个例子中直接使用block,使用**currentLocale**作为block中的一个只读变量.\n\n```\nNSArray *stringsArray = @[ @\"string 1\",\n                          @\"String 21\", // <-\n                          @\"string 12\",\n                          @\"String 11\",\n                          @\"Strîng 21\", // <-\n                          @\"Striñg 21\", // <-\n                          @\"String 02\" ];\n \nNSLocale *currentLocale = [NSLocale currentLocale];\n__block NSUInteger orderedSameCount = 0;\n \nNSArray *diacriticInsensitiveSortArray = [stringsArray sortedArrayUsingComparator:^(id string1, id string2) {\n \n    NSRange string1Range = NSMakeRange(0, [string1 length]);\n    NSComparisonResult comparisonResult = [string1 compare:string2 options:NSDiacriticInsensitiveSearch range:string1Range locale:currentLocale];\n \n    if (comparisonResult == NSOrderedSame) {\n        orderedSameCount++;\n    }\n    return comparisonResult;\n}];\n \nNSLog(@\"diacriticInsensitiveSortArray: %@\", diacriticInsensitiveSortArray);\nNSLog(@\"orderedSameCount: %d\", orderedSameCount);\n \n/*\nOutput:\n \ndiacriticInsensitiveSortArray: (\n    \"String 02\",\n    \"string 1\",\n    \"String 11\",\n    \"string 12\",\n    \"String 21\",\n    \"Str\\U00eeng 21\",\n    \"Stri\\U00f1g 21\"\n)\norderedSameCount: 2\n*/\n\n```\n详细内容请看 **Blocks 和 变量** 这一章节\n\n# 概念通览\n\nBlock对象为您提供一种方式去创建一个ad hoc函数体作为在C,和C的衍生语言中的表达方式.在其他的语言和环境中.一个block对象有时也叫做闭包.\n\n## Block功能\n\nblock是一个内联的匿名代码集合:\n\n- 像函数一样有一个类型参数列表\n- 拥有推导的或者声明的返回类型\n- 能够捕获定义作用域内的状态\n- 能够可选地修改作用域内的状态\n- 能够与在同一作用域内定义的其他Block共享修改的可能性\n- 能够在(栈结构)已经被销毁后,仍然可以继续分享和修改(栈结构)下定义的状态.\n\n您可以拷贝一个block甚至传递它到其他线程用来延迟执行.在生命周期内编译器和运行时将所有被引用的变量保存副本。\n\n## 使用\n\nBlock 表示一个小的,内部包含的代码片段.正因为这样,他们常被用来作为执行并行工作单元的一种方式.或者作为集合中的项目,或者作为一个操作结束后的回调.\n\nBlocks作为传统的回调函数主要有两个原因:\n\n1. 它们允许您在方法实现的上下文中执行编写的代码.\n   Block通常作为框架方法的参数\n2. 它们允许作为方法的局部变量.\n   与其使用需要一个包含所有需要执行操作的上下文信息的数据结构的回调函数，您只需直接使用该局部变量.\n\n# 声明和创建 Blocks\n\n## 声明一个Block 引用\n\nBlock变量持有Block的引用.使用声明一个函数指针类似的语法声明它们.除了使用^代替*.block类型和C类型系统兼容.下面的block变量声明都是有效的:\n\n```\nvoid (^blockReturningVoidWithVoidArgument)(void);\nint (^blockReturningIntWithIntAndCharArguments)(int, char);\nvoid (^arrayOfTenBlocksReturningVoidWithIntArgument[10])(int);\n\n```\nBlock同样支持可变参数.一个block如果不含参数必须在参数列表中指明void.\n\n在许多地方,使用一个类型别名声明一个Block类型能够更好地使用block.\n\n```\ntypedef float (MyBlockType)(float, float);\n\nMyBlockType myFirstBlock = // ...;\nMyBlockType mySecondBlock = // ...;\n\n```\n\n## 创建一个Block\n\n使用^操作符表示一个block字面量的开始.它后面通常使用()来包含一个参数列表.block体包含在{}中.下面的例子定义了一个简单的block,block末尾用;结尾.\n\n```\nfloat (^oneFrom)(float);\n\noneFrom = ^(float aFloat) {\n  \n  float result = aFloat - 1.0;\n  return result;\n    \n};\n\n```\n\n如果没有明确声明一个Block表达式的返回值类型,它会自动推导其类型.如果返回值是被推导的并且参数列表是void,您也可以忽略void参数.当出现多个返回语句时，它们必须完全匹配(在必要时使用转换)。\n\n## 全局Block\n\n在文件层面,您可以使用一个block作为全局字面量\n\n```\n\n#import <stdio.h>\n\nint GlobalInt = 0;\n\nint (^getGlobalInt)(void) = ^(return GlobalInt;);\n\n```\n\n# Blocks 和 变量\n\n本节主要描述blocks和变量之间的交互,包括内存管理.\n\n## 变量类型\n\n在block体的代码内,变量可以用5种不同方式处理.\n您可以参考三种标准的变量类型,就像从函数中得到的那样.\n\n- 全局变量,包含静态局部变量\n- 全局函数(技术上来讲不是变量)\n- 来自作用域内的局部变量和参数\n\nBlocks同样支持两种其他类型的变量:\n\n1.在函数层面是__block 变量.__block变量在block内是可变的,如果正在引用的block被拷贝到堆上,__block变量会被保存起来.\n2.**const** 导入的变量.\n\n最后,在一个方法实现内,block可能会引用OC实例变量---请看下面的 [对象和Block变量]() 章节.\n\n下面的规则适用于block中使用的变量:\n\n1. 全局变量是可访问的,包含作用域内存在的静态变量.\n2. 传递到block中的参数是可访问的(就像函数的参数一样)\n3. 作用域内的栈变量(非静态变量)被捕获作为常量.       (block内使用的外部栈存储的变量(非静态变量)在block内部会作为常量来使用)\n变量的值在程序中block表达式的位置上捕获的.在嵌套block中,该值从最近的作用域内被捕获.\n4. __block修饰的局部变量是通过引用来提供访问的,并且这些变量在block内部是可修改的.\n任何作用域内的改变都会被映射,包括在同一作用域内其他定义的block的改变同样也会被映射.这些内容在\"__block 存储类型\"中被详细讨论.\n5. block作用域内声明的局部变量,其行为跟函数内的局部变量几乎相同.\nblock的每次调用都会提供那个变量的新的副本. 这些变量依次作为在block内的常量或者引用变量来使用.\n\n下面的例子阐述了非静态局部变量的使用:\n\n```\nint x = 123;\n\nvooid (^printXAndY)(int) = ^(int y) {\n\n  printf(\"%d %d\\n\", x,y);  \n};\n\nprintXAndY(456); //prints: 123 456\n```\n如上所述, 试着在blocke内给x赋值会造成错误:\n\n```\nint x = 123;\n\nvoid (^printXAndY)(int) = ^(int y) {\n    \n    x = x + y; // error\n    printf(\"%d %d\", x, y);  \n};\n\n```\n\n想要在block内部对外部变量进行修改,您可以使用__block存储类型修饰符.\n\n## __block 存储类型\n\n您可以使用__block 修饰符使block外部导入的变量在其内部可修改.__block存储类似于局部变量的寄存器,内部的自动,静态存储类型。\n存储区域内的__block变量会与作用域内的变量、所有的block、block副本之间共享.因此,在末尾声明的block副本存在,那么在栈结构销毁时,这块内存将会幸存.同一作用域内的多个block可以同时使用一个共享变量.\n作为优化.block存储从栈开始,就像block本身一样.如果使用Block_copy复制,则会将变量复制到堆中.因此,__block变量的地址可能随时变化.\n对于__block变量有两个进一步的限制:它们不能是可变数组，也不能是包含C99可变长度数组的结构体。\n\n下面的例子阐述了一个__block变量的使用:\n\n```\n__block int x = 123; // x lives in block storage\n\nvoid (^printXAndY)(int) = ^(int y) {\n    \n    x = x + y;\n    printf(\"%d %D\\n\", x, y);\n};\n\nprintXAndY(456); // prints: 579 456\n\n// x is now 579\n\n```\n\n下面的例子展示了block和几种类型变量的交互:\n\n```\n\nextern NSInteger CounterGlobal;\nstatic NSInteger CounterStatic;\n\n{\n    NSInteger localCounter = 42;\n    __block char localCharacter;\n    \n    void (^aBlock)(void) = ^(void) {\n      ++CounterGlobal;  \n      ++CounterStatic;\n      CounterGlobal = localCounter; // localCounter fixed at block creation\n      localCharacter = 'a'; // sets localCharacter in enclosing scope    \n    };\n    \n    ++localCounter; //unseen by the block\n    localCharacter = 'b';\n    \n    aBlock();  // execute the block \n    // localCharacter now 'a'\n}\n\n```\n\n## 对象和Block变量\n\n### Objective-C 对象\n\n当一个block被复制,它会对block内的对象变量创建强引用.如果在方法实现内使用一个block:\n- 如果您通过引用访问一个实例变量,会创建一个强引用指向self;\n- 如果您通过值访问一个对象变量,会创建一个强引用指向该变量.\n\n下面的例子阐述了两个不同的情况:\n\n```\ndispathch_async(queue, ^{\n   \n   // instanceVariable is userd by reference, a strong reference is made to self \n   \n   doSomethingWithObject(instanceVariable);\n    \n});\n\nid localVariable = instanceVariable;\n\ndispatch_async(queue, ^{\n   /*\n   \n    localVariable is used by value, a strong reference is made to localvariable (and not to self)\n   \n   */ \n   doSomethingWithObject(localVariable);\n    \n});\n\n```\n如果想要在block内修改外部的局部对象变量,您可以使用__block标记该变量.\n\n### C++对象\n\n一般来说，可以在一个block中使用c++对象。在成员函数中，对成员变量和函数的引用通过隐式导入该指针，因此看起来是可变的。如果一个block被复制，有两个考虑因素:\n\n如果您有一个__block存储类，它是一个基于堆栈的c++对象，那么通常使用的是copy构造函数。\n如果您在一个block中使用任何其他c++基于堆栈的对象，那么它必须有一个const copy构造函数。然后使用该构造函数复制c++对象。\n\n### Blocks\n\n当您拷贝一个block时,在block内的其他block引用都会被拷贝如果必要的话.如果您在block内拥有一个block变量或者引用了一个block,那个block将会被拷贝.\n\n# 使用Blocks\n\n## 调用一个Block\n\n声明一个block变量,将其作为一个函数,如下所示:\n\n```\n\nint (^oneFrom)(int) = ^(int anInt){\n    \n    return anInt - 1;\n};\n\nprintf(\"1 from 10 is %d\", oneFrom(10));\n\n// Prints \"1 from 10 is 9\"\n\nfloat (^distanceTraveled)(float, float, float) = ^(float startingSpeed, float acceleration, float time) {\n    \n    float distance = (startingSpeed * time) + (0.5 * acceleration * time * time);\n    return distance;\n};\n\nfloat howFar = distanceTraveled(0.0, 9.8, 1.0);\n// howFar = 4.9\n```\n## 使用Block作为函数参数\n\n```\nchar *myCharacters[3] = { \"TomJohn\", \"George\", \"Charles Condomine\" };\n \nqsort_b(myCharacters, 3, sizeof(char *), ^(const void *l, const void *r) {\n    char *left = *(char **)l;\n    char *right = *(char **)r;\n    return strncmp(left, right, 1);\n});\n// Block implementation ends at \"}\"\n \n// myCharacters is now { \"Charles Condomine\", \"George\", \"TomJohn\" }\n```\n注意block包含在函数的参数列表中.\n\n## 使用Block作为方法参数\n\nCocoa 提供了许多使用block的方法. 您将一个block作为方法参数使用就像使用其他参数一样. \n\n```\nNSArray *array = @[@\"A\", @\"B\", @\"C\", @\"A\", @\"B\", @\"Z\", @\"G\", @\"are\", @\"Q\"];\nNSSet *filterSet = [NSSet setWithObjects: @\"A\", @\"Z\", @\"Q\", nil];\n \nBOOL (^test)(id obj, NSUInteger idx, BOOL *stop);\n \ntest = ^(id obj, NSUInteger idx, BOOL *stop) {\n \n    if (idx < 5) {\n        if ([filterSet containsObject: obj]) {\n            return YES;\n        }\n    }\n    return NO;\n};\n \nNSIndexSet *indexes = [array indexesOfObjectsPassingTest:test];\n \nNSLog(@\"indexes: %@\", indexes);\n \n/*\nOutput:\nindexes: <NSIndexSet: 0x10236f0>[number of indexes: 2 (in 2 ranges), indexes: (0 3)]\n*/\n\n```\n\n```\n__block BOOL found = NO;\nNSSet *aSet = [NSSet setWithObjects: @\"Alpha\", @\"Beta\", @\"Gamma\", @\"X\", nil];\nNSString *string = @\"gamma\";\n \n[aSet enumerateObjectsUsingBlock:^(id obj, BOOL *stop) {\n    if ([obj localizedCaseInsensitiveCompare:string] == NSOrderedSame) {\n        *stop = YES;\n        found = YES;\n    }\n}];\n \n// At this point, found == YES\n\n```\n\n## 拷贝Blocks\n\n通常下,不需要copy或者retain一个block.当想要在block销毁后仍使用block时，才需要copy这个block.拷贝会将一个block移到堆中.\n\n可以使用c函数拷贝和释放block\"\n\n```\n\nBlock_copy();\nBlock_release();\n\n```\n为避免内存泄露,Block_copy()和Block_release()必须成对出现.\n\n## 格式注意\n\nblock字面量是通过一个局部栈数据结构的地址来表示一个block,因此局部栈数据结构的作用域仅限于大括号内。所以应避免以下方式的使用：\n```\nvoid dontDoThis() {\n    void (^blockArray[3])(void);  // an array of 3 block references\n \n    for (int i = 0; i < 3; ++i) {\n        blockArray[i] = ^{ printf(\"hello, %d\\n\", i); };\n        // WRONG: The block literal scope is the \"for\" loop.\n    }\n}\n\nvoid dontDoThisEither() {\n    void (^block)(void);\n \n    int i = random():\n    if (i > 1000) {\n        block = ^{ printf(\"got i at: %d\\n\", i); };\n        // WRONG: The block literal scope is the \"then\" clause.\n    }\n    //...\n}\n```\n\n## 调试\n\n您可以设置断点来执行block中的单步操作.也可以在一个GDB会话中使用invoke-block调用一个block.如下所述:\n\n```\n\n$ invoke-block myBlock 10 20\n\n```\n如果您想要传一个c字符串,必须引用它.举例来说,传递一个 this string 给 doSomethingWithString block,按下面方式去写:\n\n```\n$ invoke-block doSomethingWithString \"\\\"this string \\\"\"\n```\n\n# 总结\n在Objective-C中,使用block,注意以下几点:\n\n- 使用类型别名来定义一个Block类型,使用起来更方便.\n- __block修饰的外部变量,在block内部可以被修改.（修饰的变量不能是可变数组，也不能是包含C99可变长度数组的结构体）\n- 每次调用block,都会拷贝该block一次,如果嵌套block,那么内部的block也会被拷贝.\n- block进行拷贝操作时,会给内部对象创建一个强引用.如果该对象是实例变量,则创建self的强引用,如果是对象变量,则创建该对象变量的强引用.\n\n# 参考资料\n[Blocks Programming Topics](https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/Blocks/Articles/00_Introduction.html#//apple_ref/doc/uid/TP40007502-CH1-SW1)\n\n\n\n","source":"_posts/iOS/Block-编程.md","raw":"\n---\ntitle:  Block编程\ndate: 2017-12-19 16:39\ncategories:\n- iOS\ntags: \n- Block\n---\n\n## 介绍\n\nBlock对象是一个C语言层面的语法和运行时特色.Block类似于标准的C函数,但是除了包含可执行代码之外，它们还可以包含变量绑定到自动(栈)或托管(堆)内存。因此，Block可以维护一组状态(数据)，以便在执行时影响行为。\n\n可以使用block组成函数表达式.这些表达式可以传递给API,可选地存储,并且通过多线程使用.Block作为一个回调非常有用.因为Block不仅可以包含在回调上执行的代码,还可以包含执行过程中需要用到的数据.\n\n在OS X v10.6 和 iOS 4.0 之后可以使用block. block runtime 是 开源的,并且在 [LLVM's compiler-rt subproject respository](http://llvm.org/svn/llvm-project/compiler-rt/trunk/)中可以找到\nBlock同样被表示为标准的C语言工作组.由于Objective-C 和 C ++ 都是派生自C. Block在这三种语言中都能使用.\n\n通过阅读这个文档去学习什么是block对象,如何在C,C++,OC中使用.\n\n这篇文档的组成\n\n这个文档包含以下章节:\n\n- [开始使用Block]() 提供关于Block的介绍一个快速.实用的使用.\n- [概念通览]() 提供关于Block概念方面的介绍\n- [声明和创建Block]() 展示如何声明block变量和如何实现block\n- [Block 和 变量]() 描述了Block和变量之间的交互,还有定义__block存储类型的修改者.\n- [使用Block]() 阐述了Block的多种使用方式\n\n\n# 开始使用Block\n\n下面内容帮助您使用实用的例子开始使用Block.\n\n## 声明和使用一个Block\n\n使用^操作符去声明一个block变量并且去表示一个block字面量的开始.Block内容包含在{}中.正如这个例子中展示的(跟在C语言中一样, ;表示声明的结束):\n\n```\nint multiplier = 7;\n\nint (^myBlock)(int)  = ^(int num){\n    \n    return num * multiplier;\n};\n\n```\n\n示例可以用下图来阐述:\n\n![示例](http://upload-images.jianshu.io/upload_images/3340896-2b3f81f0fddab136.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n注意block能够在它定义域内作为变量使用.如果你声明一个block变量,你可以像使用函数一样使用它.\n\n```\nint multiplier = 7;\n\nint (^myBlock)(int) = ^(int num) {\n    \n  return num * multiplier;  \n};\n\nprintf(\"%d\", myBlock(3));\n\n// prints \"21\"\n```\n\n## 直接使用一个Block\n\n在许多情况下,您不需要声明block变量;只需要在需要作为参数的地方简单写一个block字面量即可.下面的例子使用 qsort_b 函数.qsort_b 函数类似于标准的 qsort_r 函数,但是携带一个block作为最后的参数.\n\n```\nchar *myCharacters[3] = {\"TomJohn\", \"George\", \"Charles codomine\"};\n\nqsort_b(myCharacters, 3, sizeof(char *), ^(const void *l, const void *r){\n    \n   char *left = * (char **)l;\n   char *right = *(cahr **)r;\n   \n   return strncmp(left, right, l);\n    \n});\n\n// myCharacters is now {\"Charles Condomine\", \"George\", \"TomJohn\"}\n```\n\n## Blocks with Cocoa\n\n在Cocoa框架下的一些方法会携带一个block作为参数,通常用来在一个集合内对象执行操作,或者作为一个操作结束后的回调来使用.下面的例子展示了如何在NSArray的`sortedArrayUsingComparator:`方法中使用一个Block.该方法携带单个参数-Block.为了方面阐述.在这个例子中,block被定义为一个NSComparator类型的本地变量:\n\n```\nNSArray *stringsArray = @[@\"string 1\", @\"String 21\", @\"string 12\", @\"String 11\", @\"String 02\"];\n\nstatic NSStringCompareOptions comparisonOptions = NSCaseInsensitiveSearch | NSNumericSearch | NSWidthInsensitiveSearch | NSForceOrderingSearch;\n\nNSLocale *currentLocale = [NSLocale currentLocale];\n\nNSComparator finderSortBlock = ^(id string1, id stirng2) {\n    \n    NSRange string1Range = NSMakeRange(0, [string1 length]);\n    return [stirng1 compare:string2 options:comparisonOptions range:string1Range locale:currentLocale];\n};\n\nNSArray *finderSortArray = [stringsArray sortedArrayUsingComparator:finderSortBlock];\n\nNSLog(@\"finderSortArray:%@\", finderSortArray);\n\n/*\n \n output:\n \n finderSortArray: (\n \n    \"string 1\",\n    \"String 02\",\n    \"String 11\",\n    \"string 12\",\n    \"String 21\"\n )\n */\n\n```\n\n## __block 变量\n\nblock的一个强大的特性是在同一作用域内,它们能够修改变量.使用__block存储类型修饰符标记一个在block中可以修改的外部变量. 改变 **Blocks with Cocoa**中的示例,可以使用一个block变量去计算多少个字符串被用来比较. 为了阐述方便,在这个例子中直接使用block,使用**currentLocale**作为block中的一个只读变量.\n\n```\nNSArray *stringsArray = @[ @\"string 1\",\n                          @\"String 21\", // <-\n                          @\"string 12\",\n                          @\"String 11\",\n                          @\"Strîng 21\", // <-\n                          @\"Striñg 21\", // <-\n                          @\"String 02\" ];\n \nNSLocale *currentLocale = [NSLocale currentLocale];\n__block NSUInteger orderedSameCount = 0;\n \nNSArray *diacriticInsensitiveSortArray = [stringsArray sortedArrayUsingComparator:^(id string1, id string2) {\n \n    NSRange string1Range = NSMakeRange(0, [string1 length]);\n    NSComparisonResult comparisonResult = [string1 compare:string2 options:NSDiacriticInsensitiveSearch range:string1Range locale:currentLocale];\n \n    if (comparisonResult == NSOrderedSame) {\n        orderedSameCount++;\n    }\n    return comparisonResult;\n}];\n \nNSLog(@\"diacriticInsensitiveSortArray: %@\", diacriticInsensitiveSortArray);\nNSLog(@\"orderedSameCount: %d\", orderedSameCount);\n \n/*\nOutput:\n \ndiacriticInsensitiveSortArray: (\n    \"String 02\",\n    \"string 1\",\n    \"String 11\",\n    \"string 12\",\n    \"String 21\",\n    \"Str\\U00eeng 21\",\n    \"Stri\\U00f1g 21\"\n)\norderedSameCount: 2\n*/\n\n```\n详细内容请看 **Blocks 和 变量** 这一章节\n\n# 概念通览\n\nBlock对象为您提供一种方式去创建一个ad hoc函数体作为在C,和C的衍生语言中的表达方式.在其他的语言和环境中.一个block对象有时也叫做闭包.\n\n## Block功能\n\nblock是一个内联的匿名代码集合:\n\n- 像函数一样有一个类型参数列表\n- 拥有推导的或者声明的返回类型\n- 能够捕获定义作用域内的状态\n- 能够可选地修改作用域内的状态\n- 能够与在同一作用域内定义的其他Block共享修改的可能性\n- 能够在(栈结构)已经被销毁后,仍然可以继续分享和修改(栈结构)下定义的状态.\n\n您可以拷贝一个block甚至传递它到其他线程用来延迟执行.在生命周期内编译器和运行时将所有被引用的变量保存副本。\n\n## 使用\n\nBlock 表示一个小的,内部包含的代码片段.正因为这样,他们常被用来作为执行并行工作单元的一种方式.或者作为集合中的项目,或者作为一个操作结束后的回调.\n\nBlocks作为传统的回调函数主要有两个原因:\n\n1. 它们允许您在方法实现的上下文中执行编写的代码.\n   Block通常作为框架方法的参数\n2. 它们允许作为方法的局部变量.\n   与其使用需要一个包含所有需要执行操作的上下文信息的数据结构的回调函数，您只需直接使用该局部变量.\n\n# 声明和创建 Blocks\n\n## 声明一个Block 引用\n\nBlock变量持有Block的引用.使用声明一个函数指针类似的语法声明它们.除了使用^代替*.block类型和C类型系统兼容.下面的block变量声明都是有效的:\n\n```\nvoid (^blockReturningVoidWithVoidArgument)(void);\nint (^blockReturningIntWithIntAndCharArguments)(int, char);\nvoid (^arrayOfTenBlocksReturningVoidWithIntArgument[10])(int);\n\n```\nBlock同样支持可变参数.一个block如果不含参数必须在参数列表中指明void.\n\n在许多地方,使用一个类型别名声明一个Block类型能够更好地使用block.\n\n```\ntypedef float (MyBlockType)(float, float);\n\nMyBlockType myFirstBlock = // ...;\nMyBlockType mySecondBlock = // ...;\n\n```\n\n## 创建一个Block\n\n使用^操作符表示一个block字面量的开始.它后面通常使用()来包含一个参数列表.block体包含在{}中.下面的例子定义了一个简单的block,block末尾用;结尾.\n\n```\nfloat (^oneFrom)(float);\n\noneFrom = ^(float aFloat) {\n  \n  float result = aFloat - 1.0;\n  return result;\n    \n};\n\n```\n\n如果没有明确声明一个Block表达式的返回值类型,它会自动推导其类型.如果返回值是被推导的并且参数列表是void,您也可以忽略void参数.当出现多个返回语句时，它们必须完全匹配(在必要时使用转换)。\n\n## 全局Block\n\n在文件层面,您可以使用一个block作为全局字面量\n\n```\n\n#import <stdio.h>\n\nint GlobalInt = 0;\n\nint (^getGlobalInt)(void) = ^(return GlobalInt;);\n\n```\n\n# Blocks 和 变量\n\n本节主要描述blocks和变量之间的交互,包括内存管理.\n\n## 变量类型\n\n在block体的代码内,变量可以用5种不同方式处理.\n您可以参考三种标准的变量类型,就像从函数中得到的那样.\n\n- 全局变量,包含静态局部变量\n- 全局函数(技术上来讲不是变量)\n- 来自作用域内的局部变量和参数\n\nBlocks同样支持两种其他类型的变量:\n\n1.在函数层面是__block 变量.__block变量在block内是可变的,如果正在引用的block被拷贝到堆上,__block变量会被保存起来.\n2.**const** 导入的变量.\n\n最后,在一个方法实现内,block可能会引用OC实例变量---请看下面的 [对象和Block变量]() 章节.\n\n下面的规则适用于block中使用的变量:\n\n1. 全局变量是可访问的,包含作用域内存在的静态变量.\n2. 传递到block中的参数是可访问的(就像函数的参数一样)\n3. 作用域内的栈变量(非静态变量)被捕获作为常量.       (block内使用的外部栈存储的变量(非静态变量)在block内部会作为常量来使用)\n变量的值在程序中block表达式的位置上捕获的.在嵌套block中,该值从最近的作用域内被捕获.\n4. __block修饰的局部变量是通过引用来提供访问的,并且这些变量在block内部是可修改的.\n任何作用域内的改变都会被映射,包括在同一作用域内其他定义的block的改变同样也会被映射.这些内容在\"__block 存储类型\"中被详细讨论.\n5. block作用域内声明的局部变量,其行为跟函数内的局部变量几乎相同.\nblock的每次调用都会提供那个变量的新的副本. 这些变量依次作为在block内的常量或者引用变量来使用.\n\n下面的例子阐述了非静态局部变量的使用:\n\n```\nint x = 123;\n\nvooid (^printXAndY)(int) = ^(int y) {\n\n  printf(\"%d %d\\n\", x,y);  \n};\n\nprintXAndY(456); //prints: 123 456\n```\n如上所述, 试着在blocke内给x赋值会造成错误:\n\n```\nint x = 123;\n\nvoid (^printXAndY)(int) = ^(int y) {\n    \n    x = x + y; // error\n    printf(\"%d %d\", x, y);  \n};\n\n```\n\n想要在block内部对外部变量进行修改,您可以使用__block存储类型修饰符.\n\n## __block 存储类型\n\n您可以使用__block 修饰符使block外部导入的变量在其内部可修改.__block存储类似于局部变量的寄存器,内部的自动,静态存储类型。\n存储区域内的__block变量会与作用域内的变量、所有的block、block副本之间共享.因此,在末尾声明的block副本存在,那么在栈结构销毁时,这块内存将会幸存.同一作用域内的多个block可以同时使用一个共享变量.\n作为优化.block存储从栈开始,就像block本身一样.如果使用Block_copy复制,则会将变量复制到堆中.因此,__block变量的地址可能随时变化.\n对于__block变量有两个进一步的限制:它们不能是可变数组，也不能是包含C99可变长度数组的结构体。\n\n下面的例子阐述了一个__block变量的使用:\n\n```\n__block int x = 123; // x lives in block storage\n\nvoid (^printXAndY)(int) = ^(int y) {\n    \n    x = x + y;\n    printf(\"%d %D\\n\", x, y);\n};\n\nprintXAndY(456); // prints: 579 456\n\n// x is now 579\n\n```\n\n下面的例子展示了block和几种类型变量的交互:\n\n```\n\nextern NSInteger CounterGlobal;\nstatic NSInteger CounterStatic;\n\n{\n    NSInteger localCounter = 42;\n    __block char localCharacter;\n    \n    void (^aBlock)(void) = ^(void) {\n      ++CounterGlobal;  \n      ++CounterStatic;\n      CounterGlobal = localCounter; // localCounter fixed at block creation\n      localCharacter = 'a'; // sets localCharacter in enclosing scope    \n    };\n    \n    ++localCounter; //unseen by the block\n    localCharacter = 'b';\n    \n    aBlock();  // execute the block \n    // localCharacter now 'a'\n}\n\n```\n\n## 对象和Block变量\n\n### Objective-C 对象\n\n当一个block被复制,它会对block内的对象变量创建强引用.如果在方法实现内使用一个block:\n- 如果您通过引用访问一个实例变量,会创建一个强引用指向self;\n- 如果您通过值访问一个对象变量,会创建一个强引用指向该变量.\n\n下面的例子阐述了两个不同的情况:\n\n```\ndispathch_async(queue, ^{\n   \n   // instanceVariable is userd by reference, a strong reference is made to self \n   \n   doSomethingWithObject(instanceVariable);\n    \n});\n\nid localVariable = instanceVariable;\n\ndispatch_async(queue, ^{\n   /*\n   \n    localVariable is used by value, a strong reference is made to localvariable (and not to self)\n   \n   */ \n   doSomethingWithObject(localVariable);\n    \n});\n\n```\n如果想要在block内修改外部的局部对象变量,您可以使用__block标记该变量.\n\n### C++对象\n\n一般来说，可以在一个block中使用c++对象。在成员函数中，对成员变量和函数的引用通过隐式导入该指针，因此看起来是可变的。如果一个block被复制，有两个考虑因素:\n\n如果您有一个__block存储类，它是一个基于堆栈的c++对象，那么通常使用的是copy构造函数。\n如果您在一个block中使用任何其他c++基于堆栈的对象，那么它必须有一个const copy构造函数。然后使用该构造函数复制c++对象。\n\n### Blocks\n\n当您拷贝一个block时,在block内的其他block引用都会被拷贝如果必要的话.如果您在block内拥有一个block变量或者引用了一个block,那个block将会被拷贝.\n\n# 使用Blocks\n\n## 调用一个Block\n\n声明一个block变量,将其作为一个函数,如下所示:\n\n```\n\nint (^oneFrom)(int) = ^(int anInt){\n    \n    return anInt - 1;\n};\n\nprintf(\"1 from 10 is %d\", oneFrom(10));\n\n// Prints \"1 from 10 is 9\"\n\nfloat (^distanceTraveled)(float, float, float) = ^(float startingSpeed, float acceleration, float time) {\n    \n    float distance = (startingSpeed * time) + (0.5 * acceleration * time * time);\n    return distance;\n};\n\nfloat howFar = distanceTraveled(0.0, 9.8, 1.0);\n// howFar = 4.9\n```\n## 使用Block作为函数参数\n\n```\nchar *myCharacters[3] = { \"TomJohn\", \"George\", \"Charles Condomine\" };\n \nqsort_b(myCharacters, 3, sizeof(char *), ^(const void *l, const void *r) {\n    char *left = *(char **)l;\n    char *right = *(char **)r;\n    return strncmp(left, right, 1);\n});\n// Block implementation ends at \"}\"\n \n// myCharacters is now { \"Charles Condomine\", \"George\", \"TomJohn\" }\n```\n注意block包含在函数的参数列表中.\n\n## 使用Block作为方法参数\n\nCocoa 提供了许多使用block的方法. 您将一个block作为方法参数使用就像使用其他参数一样. \n\n```\nNSArray *array = @[@\"A\", @\"B\", @\"C\", @\"A\", @\"B\", @\"Z\", @\"G\", @\"are\", @\"Q\"];\nNSSet *filterSet = [NSSet setWithObjects: @\"A\", @\"Z\", @\"Q\", nil];\n \nBOOL (^test)(id obj, NSUInteger idx, BOOL *stop);\n \ntest = ^(id obj, NSUInteger idx, BOOL *stop) {\n \n    if (idx < 5) {\n        if ([filterSet containsObject: obj]) {\n            return YES;\n        }\n    }\n    return NO;\n};\n \nNSIndexSet *indexes = [array indexesOfObjectsPassingTest:test];\n \nNSLog(@\"indexes: %@\", indexes);\n \n/*\nOutput:\nindexes: <NSIndexSet: 0x10236f0>[number of indexes: 2 (in 2 ranges), indexes: (0 3)]\n*/\n\n```\n\n```\n__block BOOL found = NO;\nNSSet *aSet = [NSSet setWithObjects: @\"Alpha\", @\"Beta\", @\"Gamma\", @\"X\", nil];\nNSString *string = @\"gamma\";\n \n[aSet enumerateObjectsUsingBlock:^(id obj, BOOL *stop) {\n    if ([obj localizedCaseInsensitiveCompare:string] == NSOrderedSame) {\n        *stop = YES;\n        found = YES;\n    }\n}];\n \n// At this point, found == YES\n\n```\n\n## 拷贝Blocks\n\n通常下,不需要copy或者retain一个block.当想要在block销毁后仍使用block时，才需要copy这个block.拷贝会将一个block移到堆中.\n\n可以使用c函数拷贝和释放block\"\n\n```\n\nBlock_copy();\nBlock_release();\n\n```\n为避免内存泄露,Block_copy()和Block_release()必须成对出现.\n\n## 格式注意\n\nblock字面量是通过一个局部栈数据结构的地址来表示一个block,因此局部栈数据结构的作用域仅限于大括号内。所以应避免以下方式的使用：\n```\nvoid dontDoThis() {\n    void (^blockArray[3])(void);  // an array of 3 block references\n \n    for (int i = 0; i < 3; ++i) {\n        blockArray[i] = ^{ printf(\"hello, %d\\n\", i); };\n        // WRONG: The block literal scope is the \"for\" loop.\n    }\n}\n\nvoid dontDoThisEither() {\n    void (^block)(void);\n \n    int i = random():\n    if (i > 1000) {\n        block = ^{ printf(\"got i at: %d\\n\", i); };\n        // WRONG: The block literal scope is the \"then\" clause.\n    }\n    //...\n}\n```\n\n## 调试\n\n您可以设置断点来执行block中的单步操作.也可以在一个GDB会话中使用invoke-block调用一个block.如下所述:\n\n```\n\n$ invoke-block myBlock 10 20\n\n```\n如果您想要传一个c字符串,必须引用它.举例来说,传递一个 this string 给 doSomethingWithString block,按下面方式去写:\n\n```\n$ invoke-block doSomethingWithString \"\\\"this string \\\"\"\n```\n\n# 总结\n在Objective-C中,使用block,注意以下几点:\n\n- 使用类型别名来定义一个Block类型,使用起来更方便.\n- __block修饰的外部变量,在block内部可以被修改.（修饰的变量不能是可变数组，也不能是包含C99可变长度数组的结构体）\n- 每次调用block,都会拷贝该block一次,如果嵌套block,那么内部的block也会被拷贝.\n- block进行拷贝操作时,会给内部对象创建一个强引用.如果该对象是实例变量,则创建self的强引用,如果是对象变量,则创建该对象变量的强引用.\n\n# 参考资料\n[Blocks Programming Topics](https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/Blocks/Articles/00_Introduction.html#//apple_ref/doc/uid/TP40007502-CH1-SW1)\n\n\n\n","slug":"iOS/Block-编程","published":1,"updated":"2020-09-27T11:13:00.609Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgq6gnz8007zt29kcz3lbgdx","content":"<h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><p>Block对象是一个C语言层面的语法和运行时特色.Block类似于标准的C函数,但是除了包含可执行代码之外，它们还可以包含变量绑定到自动(栈)或托管(堆)内存。因此，Block可以维护一组状态(数据)，以便在执行时影响行为。</p>\n<p>可以使用block组成函数表达式.这些表达式可以传递给API,可选地存储,并且通过多线程使用.Block作为一个回调非常有用.因为Block不仅可以包含在回调上执行的代码,还可以包含执行过程中需要用到的数据.</p>\n<p>在OS X v10.6 和 iOS 4.0 之后可以使用block. block runtime 是 开源的,并且在 <a href=\"http://llvm.org/svn/llvm-project/compiler-rt/trunk/\">LLVM’s compiler-rt subproject respository</a>中可以找到<br>Block同样被表示为标准的C语言工作组.由于Objective-C 和 C ++ 都是派生自C. Block在这三种语言中都能使用.</p>\n<p>通过阅读这个文档去学习什么是block对象,如何在C,C++,OC中使用.</p>\n<p>这篇文档的组成</p>\n<p>这个文档包含以下章节:</p>\n<ul>\n<li><a href=\"\">开始使用Block</a> 提供关于Block的介绍一个快速.实用的使用.</li>\n<li><a href=\"\">概念通览</a> 提供关于Block概念方面的介绍</li>\n<li><a href=\"\">声明和创建Block</a> 展示如何声明block变量和如何实现block</li>\n<li><a href=\"\">Block 和 变量</a> 描述了Block和变量之间的交互,还有定义__block存储类型的修改者.</li>\n<li><a href=\"\">使用Block</a> 阐述了Block的多种使用方式</li>\n</ul>\n<h1 id=\"开始使用Block\"><a href=\"#开始使用Block\" class=\"headerlink\" title=\"开始使用Block\"></a>开始使用Block</h1><p>下面内容帮助您使用实用的例子开始使用Block.</p>\n<h2 id=\"声明和使用一个Block\"><a href=\"#声明和使用一个Block\" class=\"headerlink\" title=\"声明和使用一个Block\"></a>声明和使用一个Block</h2><p>使用^操作符去声明一个block变量并且去表示一个block字面量的开始.Block内容包含在{}中.正如这个例子中展示的(跟在C语言中一样, ;表示声明的结束):</p>\n<pre><code class=\"hljs dart\"><span class=\"hljs-built_in\">int</span> multiplier = <span class=\"hljs-number\">7</span>;\n\n<span class=\"hljs-built_in\">int</span> (^myBlock)(<span class=\"hljs-built_in\">int</span>)  = ^(<span class=\"hljs-built_in\">int</span> <span class=\"hljs-built_in\">num</span>)&#123;\n    \n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">num</span> * multiplier;\n&#125;;\n</code></pre>\n\n<p>示例可以用下图来阐述:</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/3340896-2b3f81f0fddab136.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"示例\"></p>\n<p>注意block能够在它定义域内作为变量使用.如果你声明一个block变量,你可以像使用函数一样使用它.</p>\n<pre><code class=\"hljs dart\"><span class=\"hljs-built_in\">int</span> multiplier = <span class=\"hljs-number\">7</span>;\n\n<span class=\"hljs-built_in\">int</span> (^myBlock)(<span class=\"hljs-built_in\">int</span>) = ^(<span class=\"hljs-built_in\">int</span> <span class=\"hljs-built_in\">num</span>) &#123;\n    \n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">num</span> * multiplier;  \n&#125;;\n\nprintf(<span class=\"hljs-string\">&quot;%d&quot;</span>, myBlock(<span class=\"hljs-number\">3</span>));\n\n<span class=\"hljs-comment\">// prints &quot;21&quot;</span></code></pre>\n\n<h2 id=\"直接使用一个Block\"><a href=\"#直接使用一个Block\" class=\"headerlink\" title=\"直接使用一个Block\"></a>直接使用一个Block</h2><p>在许多情况下,您不需要声明block变量;只需要在需要作为参数的地方简单写一个block字面量即可.下面的例子使用 qsort_b 函数.qsort_b 函数类似于标准的 qsort_r 函数,但是携带一个block作为最后的参数.</p>\n<pre><code class=\"hljs nim\"><span class=\"hljs-built_in\">char</span> *myCharacters[<span class=\"hljs-number\">3</span>] = &#123;<span class=\"hljs-string\">&quot;TomJohn&quot;</span>, <span class=\"hljs-string\">&quot;George&quot;</span>, <span class=\"hljs-string\">&quot;Charles codomine&quot;</span>&#125;;\n\nqsort_b(myCharacters, <span class=\"hljs-number\">3</span>, sizeof(<span class=\"hljs-built_in\">char</span> *), ^(<span class=\"hljs-keyword\">const</span> <span class=\"hljs-built_in\">void</span> *l, <span class=\"hljs-keyword\">const</span> <span class=\"hljs-built_in\">void</span> *r)&#123;\n    \n   <span class=\"hljs-built_in\">char</span> *left = * (<span class=\"hljs-built_in\">char</span> **)l;\n   <span class=\"hljs-built_in\">char</span> *right = *(cahr **)r;\n   \n   <span class=\"hljs-keyword\">return</span> strncmp(left, right, l);\n    \n&#125;);\n\n// myCharacters <span class=\"hljs-keyword\">is</span> now &#123;<span class=\"hljs-string\">&quot;Charles Condomine&quot;</span>, <span class=\"hljs-string\">&quot;George&quot;</span>, <span class=\"hljs-string\">&quot;TomJohn&quot;</span>&#125;</code></pre>\n\n<h2 id=\"Blocks-with-Cocoa\"><a href=\"#Blocks-with-Cocoa\" class=\"headerlink\" title=\"Blocks with Cocoa\"></a>Blocks with Cocoa</h2><p>在Cocoa框架下的一些方法会携带一个block作为参数,通常用来在一个集合内对象执行操作,或者作为一个操作结束后的回调来使用.下面的例子展示了如何在NSArray的<code>sortedArrayUsingComparator:</code>方法中使用一个Block.该方法携带单个参数-Block.为了方面阐述.在这个例子中,block被定义为一个NSComparator类型的本地变量:</p>\n<pre><code class=\"hljs objectivec\"><span class=\"hljs-built_in\">NSArray</span> *stringsArray = @[<span class=\"hljs-string\">@&quot;string 1&quot;</span>, <span class=\"hljs-string\">@&quot;String 21&quot;</span>, <span class=\"hljs-string\">@&quot;string 12&quot;</span>, <span class=\"hljs-string\">@&quot;String 11&quot;</span>, <span class=\"hljs-string\">@&quot;String 02&quot;</span>];\n\n<span class=\"hljs-keyword\">static</span> <span class=\"hljs-built_in\">NSStringCompareOptions</span> comparisonOptions = <span class=\"hljs-built_in\">NSCaseInsensitiveSearch</span> | <span class=\"hljs-built_in\">NSNumericSearch</span> | <span class=\"hljs-built_in\">NSWidthInsensitiveSearch</span> | <span class=\"hljs-built_in\">NSForceOrderingSearch</span>;\n\n<span class=\"hljs-built_in\">NSLocale</span> *currentLocale = [<span class=\"hljs-built_in\">NSLocale</span> currentLocale];\n\n<span class=\"hljs-built_in\">NSComparator</span> finderSortBlock = ^(<span class=\"hljs-keyword\">id</span> string1, <span class=\"hljs-keyword\">id</span> stirng2) &#123;\n    \n    <span class=\"hljs-built_in\">NSRange</span> string1Range = <span class=\"hljs-built_in\">NSMakeRange</span>(<span class=\"hljs-number\">0</span>, [string1 length]);\n    <span class=\"hljs-keyword\">return</span> [stirng1 compare:string2 options:comparisonOptions range:string1Range locale:currentLocale];\n&#125;;\n\n<span class=\"hljs-built_in\">NSArray</span> *finderSortArray = [stringsArray sortedArrayUsingComparator:finderSortBlock];\n\n<span class=\"hljs-built_in\">NSLog</span>(<span class=\"hljs-string\">@&quot;finderSortArray:%@&quot;</span>, finderSortArray);\n\n<span class=\"hljs-comment\">/*</span>\n<span class=\"hljs-comment\"> </span>\n<span class=\"hljs-comment\"> output:</span>\n<span class=\"hljs-comment\"> </span>\n<span class=\"hljs-comment\"> finderSortArray: (</span>\n<span class=\"hljs-comment\"> </span>\n<span class=\"hljs-comment\">    &quot;string 1&quot;,</span>\n<span class=\"hljs-comment\">    &quot;String 02&quot;,</span>\n<span class=\"hljs-comment\">    &quot;String 11&quot;,</span>\n<span class=\"hljs-comment\">    &quot;string 12&quot;,</span>\n<span class=\"hljs-comment\">    &quot;String 21&quot;</span>\n<span class=\"hljs-comment\"> )</span>\n<span class=\"hljs-comment\"> */</span>\n</code></pre>\n\n<h2 id=\"block-变量\"><a href=\"#block-变量\" class=\"headerlink\" title=\"__block 变量\"></a>__block 变量</h2><p>block的一个强大的特性是在同一作用域内,它们能够修改变量.使用__block存储类型修饰符标记一个在block中可以修改的外部变量. 改变 <strong>Blocks with Cocoa</strong>中的示例,可以使用一个block变量去计算多少个字符串被用来比较. 为了阐述方便,在这个例子中直接使用block,使用<strong>currentLocale</strong>作为block中的一个只读变量.</p>\n<pre><code class=\"hljs objectivec\"><span class=\"hljs-built_in\">NSArray</span> *stringsArray = @[ <span class=\"hljs-string\">@&quot;string 1&quot;</span>,\n                          <span class=\"hljs-string\">@&quot;String 21&quot;</span>, <span class=\"hljs-comment\">// &lt;-</span>\n                          <span class=\"hljs-string\">@&quot;string 12&quot;</span>,\n                          <span class=\"hljs-string\">@&quot;String 11&quot;</span>,\n                          <span class=\"hljs-string\">@&quot;Strîng 21&quot;</span>, <span class=\"hljs-comment\">// &lt;-</span>\n                          <span class=\"hljs-string\">@&quot;Striñg 21&quot;</span>, <span class=\"hljs-comment\">// &lt;-</span>\n                          <span class=\"hljs-string\">@&quot;String 02&quot;</span> ];\n \n<span class=\"hljs-built_in\">NSLocale</span> *currentLocale = [<span class=\"hljs-built_in\">NSLocale</span> currentLocale];\n__block <span class=\"hljs-built_in\">NSUInteger</span> orderedSameCount = <span class=\"hljs-number\">0</span>;\n \n<span class=\"hljs-built_in\">NSArray</span> *diacriticInsensitiveSortArray = [stringsArray sortedArrayUsingComparator:^(<span class=\"hljs-keyword\">id</span> string1, <span class=\"hljs-keyword\">id</span> string2) &#123;\n \n    <span class=\"hljs-built_in\">NSRange</span> string1Range = <span class=\"hljs-built_in\">NSMakeRange</span>(<span class=\"hljs-number\">0</span>, [string1 length]);\n    <span class=\"hljs-built_in\">NSComparisonResult</span> comparisonResult = [string1 compare:string2 options:<span class=\"hljs-built_in\">NSDiacriticInsensitiveSearch</span> range:string1Range locale:currentLocale];\n \n    <span class=\"hljs-keyword\">if</span> (comparisonResult == <span class=\"hljs-built_in\">NSOrderedSame</span>) &#123;\n        orderedSameCount++;\n    &#125;\n    <span class=\"hljs-keyword\">return</span> comparisonResult;\n&#125;];\n \n<span class=\"hljs-built_in\">NSLog</span>(<span class=\"hljs-string\">@&quot;diacriticInsensitiveSortArray: %@&quot;</span>, diacriticInsensitiveSortArray);\n<span class=\"hljs-built_in\">NSLog</span>(<span class=\"hljs-string\">@&quot;orderedSameCount: %d&quot;</span>, orderedSameCount);\n \n<span class=\"hljs-comment\">/*</span>\n<span class=\"hljs-comment\">Output:</span>\n<span class=\"hljs-comment\"> </span>\n<span class=\"hljs-comment\">diacriticInsensitiveSortArray: (</span>\n<span class=\"hljs-comment\">    &quot;String 02&quot;,</span>\n<span class=\"hljs-comment\">    &quot;string 1&quot;,</span>\n<span class=\"hljs-comment\">    &quot;String 11&quot;,</span>\n<span class=\"hljs-comment\">    &quot;string 12&quot;,</span>\n<span class=\"hljs-comment\">    &quot;String 21&quot;,</span>\n<span class=\"hljs-comment\">    &quot;Str\\U00eeng 21&quot;,</span>\n<span class=\"hljs-comment\">    &quot;Stri\\U00f1g 21&quot;</span>\n<span class=\"hljs-comment\">)</span>\n<span class=\"hljs-comment\">orderedSameCount: 2</span>\n<span class=\"hljs-comment\">*/</span>\n</code></pre>\n<p>详细内容请看 <strong>Blocks 和 变量</strong> 这一章节</p>\n<h1 id=\"概念通览\"><a href=\"#概念通览\" class=\"headerlink\" title=\"概念通览\"></a>概念通览</h1><p>Block对象为您提供一种方式去创建一个ad hoc函数体作为在C,和C的衍生语言中的表达方式.在其他的语言和环境中.一个block对象有时也叫做闭包.</p>\n<h2 id=\"Block功能\"><a href=\"#Block功能\" class=\"headerlink\" title=\"Block功能\"></a>Block功能</h2><p>block是一个内联的匿名代码集合:</p>\n<ul>\n<li>像函数一样有一个类型参数列表</li>\n<li>拥有推导的或者声明的返回类型</li>\n<li>能够捕获定义作用域内的状态</li>\n<li>能够可选地修改作用域内的状态</li>\n<li>能够与在同一作用域内定义的其他Block共享修改的可能性</li>\n<li>能够在(栈结构)已经被销毁后,仍然可以继续分享和修改(栈结构)下定义的状态.</li>\n</ul>\n<p>您可以拷贝一个block甚至传递它到其他线程用来延迟执行.在生命周期内编译器和运行时将所有被引用的变量保存副本。</p>\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><p>Block 表示一个小的,内部包含的代码片段.正因为这样,他们常被用来作为执行并行工作单元的一种方式.或者作为集合中的项目,或者作为一个操作结束后的回调.</p>\n<p>Blocks作为传统的回调函数主要有两个原因:</p>\n<ol>\n<li>它们允许您在方法实现的上下文中执行编写的代码.<br>Block通常作为框架方法的参数</li>\n<li>它们允许作为方法的局部变量.<br>与其使用需要一个包含所有需要执行操作的上下文信息的数据结构的回调函数，您只需直接使用该局部变量.</li>\n</ol>\n<h1 id=\"声明和创建-Blocks\"><a href=\"#声明和创建-Blocks\" class=\"headerlink\" title=\"声明和创建 Blocks\"></a>声明和创建 Blocks</h1><h2 id=\"声明一个Block-引用\"><a href=\"#声明一个Block-引用\" class=\"headerlink\" title=\"声明一个Block 引用\"></a>声明一个Block 引用</h2><p>Block变量持有Block的引用.使用声明一个函数指针类似的语法声明它们.除了使用^代替*.block类型和C类型系统兼容.下面的block变量声明都是有效的:</p>\n<pre><code class=\"hljs lisp\">void (^blockReturningVoidWithVoidArgument)(<span class=\"hljs-name\">void</span>)<span class=\"hljs-comment\">;</span>\nint (^blockReturningIntWithIntAndCharArguments)(<span class=\"hljs-name\">int</span>, char)<span class=\"hljs-comment\">;</span>\nvoid (^arrayOfTenBlocksReturningVoidWithIntArgument[<span class=\"hljs-number\">10</span>])(<span class=\"hljs-name\">int</span>)<span class=\"hljs-comment\">;</span>\n</code></pre>\n<p>Block同样支持可变参数.一个block如果不含参数必须在参数列表中指明void.</p>\n<p>在许多地方,使用一个类型别名声明一个Block类型能够更好地使用block.</p>\n<pre><code class=\"hljs protobuf\">typedef <span class=\"hljs-built_in\">float</span> (MyBlockType)(<span class=\"hljs-built_in\">float</span>, <span class=\"hljs-built_in\">float</span>);\n\nMyBlockType myFirstBlock = <span class=\"hljs-comment\">// ...;</span>\nMyBlockType mySecondBlock = <span class=\"hljs-comment\">// ...;</span>\n</code></pre>\n\n<h2 id=\"创建一个Block\"><a href=\"#创建一个Block\" class=\"headerlink\" title=\"创建一个Block\"></a>创建一个Block</h2><p>使用^操作符表示一个block字面量的开始.它后面通常使用()来包含一个参数列表.block体包含在{}中.下面的例子定义了一个简单的block,block末尾用;结尾.</p>\n<pre><code class=\"hljs nim\"><span class=\"hljs-built_in\">float</span> (^oneFrom)(<span class=\"hljs-built_in\">float</span>);\n\noneFrom = ^(<span class=\"hljs-built_in\">float</span> aFloat) &#123;\n  \n  <span class=\"hljs-built_in\">float</span> <span class=\"hljs-literal\">result</span> = aFloat - <span class=\"hljs-number\">1</span>.<span class=\"hljs-number\">0</span>;\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">result</span>;\n    \n&#125;;\n</code></pre>\n\n<p>如果没有明确声明一个Block表达式的返回值类型,它会自动推导其类型.如果返回值是被推导的并且参数列表是void,您也可以忽略void参数.当出现多个返回语句时，它们必须完全匹配(在必要时使用转换)。</p>\n<h2 id=\"全局Block\"><a href=\"#全局Block\" class=\"headerlink\" title=\"全局Block\"></a>全局Block</h2><p>在文件层面,您可以使用一个block作为全局字面量</p>\n<pre><code class=\"hljs angelscript\">\n#<span class=\"hljs-keyword\">import</span> &lt;stdio.h&gt;\n\n<span class=\"hljs-built_in\">int</span> GlobalInt = <span class=\"hljs-number\">0</span>;\n\n<span class=\"hljs-built_in\">int</span> (^getGlobalInt)(<span class=\"hljs-built_in\">void</span>) = ^(<span class=\"hljs-keyword\">return</span> GlobalInt;);\n</code></pre>\n\n<h1 id=\"Blocks-和-变量\"><a href=\"#Blocks-和-变量\" class=\"headerlink\" title=\"Blocks 和 变量\"></a>Blocks 和 变量</h1><p>本节主要描述blocks和变量之间的交互,包括内存管理.</p>\n<h2 id=\"变量类型\"><a href=\"#变量类型\" class=\"headerlink\" title=\"变量类型\"></a>变量类型</h2><p>在block体的代码内,变量可以用5种不同方式处理.<br>您可以参考三种标准的变量类型,就像从函数中得到的那样.</p>\n<ul>\n<li>全局变量,包含静态局部变量</li>\n<li>全局函数(技术上来讲不是变量)</li>\n<li>来自作用域内的局部变量和参数</li>\n</ul>\n<p>Blocks同样支持两种其他类型的变量:</p>\n<p>1.在函数层面是__block 变量.__block变量在block内是可变的,如果正在引用的block被拷贝到堆上,__block变量会被保存起来.<br>2.<strong>const</strong> 导入的变量.</p>\n<p>最后,在一个方法实现内,block可能会引用OC实例变量—请看下面的 <a href=\"\">对象和Block变量</a> 章节.</p>\n<p>下面的规则适用于block中使用的变量:</p>\n<ol>\n<li>全局变量是可访问的,包含作用域内存在的静态变量.</li>\n<li>传递到block中的参数是可访问的(就像函数的参数一样)</li>\n<li>作用域内的栈变量(非静态变量)被捕获作为常量.       (block内使用的外部栈存储的变量(非静态变量)在block内部会作为常量来使用)<br>变量的值在程序中block表达式的位置上捕获的.在嵌套block中,该值从最近的作用域内被捕获.</li>\n<li>__block修饰的局部变量是通过引用来提供访问的,并且这些变量在block内部是可修改的.<br>任何作用域内的改变都会被映射,包括在同一作用域内其他定义的block的改变同样也会被映射.这些内容在”__block 存储类型”中被详细讨论.</li>\n<li>block作用域内声明的局部变量,其行为跟函数内的局部变量几乎相同.<br>block的每次调用都会提供那个变量的新的副本. 这些变量依次作为在block内的常量或者引用变量来使用.</li>\n</ol>\n<p>下面的例子阐述了非静态局部变量的使用:</p>\n<pre><code class=\"hljs perl\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-keyword\">x</span> = <span class=\"hljs-number\">123</span>;\n\nvooid (^printXAndY)(<span class=\"hljs-keyword\">int</span>) = ^(<span class=\"hljs-keyword\">int</span> <span class=\"hljs-keyword\">y</span>) &#123;\n\n  <span class=\"hljs-keyword\">printf</span>(<span class=\"hljs-string\">&quot;%d %d\\n&quot;</span>, <span class=\"hljs-keyword\">x</span>,<span class=\"hljs-keyword\">y</span>);  \n&#125;;\n\nprintXAndY(<span class=\"hljs-number\">456</span>); <span class=\"hljs-regexp\">//prints</span>: <span class=\"hljs-number\">123</span> <span class=\"hljs-number\">456</span></code></pre>\n<p>如上所述, 试着在blocke内给x赋值会造成错误:</p>\n<pre><code class=\"hljs gml\">int <span class=\"hljs-symbol\">x</span> = <span class=\"hljs-number\">123</span>;\n\nvoid (^printXAndY)(int) = ^(int <span class=\"hljs-symbol\">y</span>) &#123;\n    \n    <span class=\"hljs-symbol\">x</span> = <span class=\"hljs-symbol\">x</span> + <span class=\"hljs-symbol\">y</span>; <span class=\"hljs-comment\">// error</span>\n    printf(<span class=\"hljs-string\">&quot;%d %d&quot;</span>, <span class=\"hljs-symbol\">x</span>, <span class=\"hljs-symbol\">y</span>);  \n&#125;;\n</code></pre>\n\n<p>想要在block内部对外部变量进行修改,您可以使用__block存储类型修饰符.</p>\n<h2 id=\"block-存储类型\"><a href=\"#block-存储类型\" class=\"headerlink\" title=\"__block 存储类型\"></a>__block 存储类型</h2><p>您可以使用__block 修饰符使block外部导入的变量在其内部可修改.__block存储类似于局部变量的寄存器,内部的自动,静态存储类型。<br>存储区域内的__block变量会与作用域内的变量、所有的block、block副本之间共享.因此,在末尾声明的block副本存在,那么在栈结构销毁时,这块内存将会幸存.同一作用域内的多个block可以同时使用一个共享变量.<br>作为优化.block存储从栈开始,就像block本身一样.如果使用Block_copy复制,则会将变量复制到堆中.因此,__block变量的地址可能随时变化.<br>对于__block变量有两个进一步的限制:它们不能是可变数组，也不能是包含C99可变长度数组的结构体。</p>\n<p>下面的例子阐述了一个__block变量的使用:</p>\n<pre><code class=\"hljs gml\">__block int <span class=\"hljs-symbol\">x</span> = <span class=\"hljs-number\">123</span>; <span class=\"hljs-comment\">// x lives in block storage</span>\n\nvoid (^printXAndY)(int) = ^(int <span class=\"hljs-symbol\">y</span>) &#123;\n    \n    <span class=\"hljs-symbol\">x</span> = <span class=\"hljs-symbol\">x</span> + <span class=\"hljs-symbol\">y</span>;\n    printf(<span class=\"hljs-string\">&quot;%d %D\\n&quot;</span>, <span class=\"hljs-symbol\">x</span>, <span class=\"hljs-symbol\">y</span>);\n&#125;;\n\nprintXAndY(<span class=\"hljs-number\">456</span>); <span class=\"hljs-comment\">// prints: 579 456</span>\n\n<span class=\"hljs-comment\">// x is now 579</span>\n</code></pre>\n\n<p>下面的例子展示了block和几种类型变量的交互:</p>\n<pre><code class=\"hljs objectivec\">\n<span class=\"hljs-keyword\">extern</span> <span class=\"hljs-built_in\">NSInteger</span> CounterGlobal;\n<span class=\"hljs-keyword\">static</span> <span class=\"hljs-built_in\">NSInteger</span> CounterStatic;\n\n&#123;\n    <span class=\"hljs-built_in\">NSInteger</span> localCounter = <span class=\"hljs-number\">42</span>;\n    __block <span class=\"hljs-keyword\">char</span> localCharacter;\n    \n    <span class=\"hljs-keyword\">void</span> (^aBlock)(<span class=\"hljs-keyword\">void</span>) = ^(<span class=\"hljs-keyword\">void</span>) &#123;\n      ++CounterGlobal;  \n      ++CounterStatic;\n      CounterGlobal = localCounter; <span class=\"hljs-comment\">// localCounter fixed at block creation</span>\n      localCharacter = <span class=\"hljs-string\">&#x27;a&#x27;</span>; <span class=\"hljs-comment\">// sets localCharacter in enclosing scope    </span>\n    &#125;;\n    \n    ++localCounter; <span class=\"hljs-comment\">//unseen by the block</span>\n    localCharacter = <span class=\"hljs-string\">&#x27;b&#x27;</span>;\n    \n    aBlock();  <span class=\"hljs-comment\">// execute the block </span>\n    <span class=\"hljs-comment\">// localCharacter now &#x27;a&#x27;</span>\n&#125;\n</code></pre>\n\n<h2 id=\"对象和Block变量\"><a href=\"#对象和Block变量\" class=\"headerlink\" title=\"对象和Block变量\"></a>对象和Block变量</h2><h3 id=\"Objective-C-对象\"><a href=\"#Objective-C-对象\" class=\"headerlink\" title=\"Objective-C 对象\"></a>Objective-C 对象</h3><p>当一个block被复制,它会对block内的对象变量创建强引用.如果在方法实现内使用一个block:</p>\n<ul>\n<li>如果您通过引用访问一个实例变量,会创建一个强引用指向self;</li>\n<li>如果您通过值访问一个对象变量,会创建一个强引用指向该变量.</li>\n</ul>\n<p>下面的例子阐述了两个不同的情况:</p>\n<pre><code class=\"hljs xquery\">dispathch_async(queue, ^&#123;\n   \n   // instanceVariable <span class=\"hljs-literal\">is</span> userd <span class=\"hljs-keyword\">by</span> reference, a strong reference <span class=\"hljs-literal\">is</span> made <span class=\"hljs-keyword\">to</span> self \n   \n   doSomethingWithObject(instanceVariable);\n    \n&#125;);\n\nid localVariable = instanceVariable;\n\ndispatch_async(queue, ^&#123;\n   /*\n   \n    localVariable <span class=\"hljs-literal\">is</span> used <span class=\"hljs-keyword\">by</span> <span class=\"hljs-keyword\">value</span>, a strong reference <span class=\"hljs-literal\">is</span> made <span class=\"hljs-keyword\">to</span> localvariable (<span class=\"hljs-keyword\">and</span><span class=\"hljs-built_in\"> not</span> <span class=\"hljs-keyword\">to</span> self)\n   \n   */ \n   doSomethingWithObject(localVariable);\n    \n&#125;);\n</code></pre>\n<p>如果想要在block内修改外部的局部对象变量,您可以使用__block标记该变量.</p>\n<h3 id=\"C-对象\"><a href=\"#C-对象\" class=\"headerlink\" title=\"C++对象\"></a>C++对象</h3><p>一般来说，可以在一个block中使用c++对象。在成员函数中，对成员变量和函数的引用通过隐式导入该指针，因此看起来是可变的。如果一个block被复制，有两个考虑因素:</p>\n<p>如果您有一个__block存储类，它是一个基于堆栈的c++对象，那么通常使用的是copy构造函数。<br>如果您在一个block中使用任何其他c++基于堆栈的对象，那么它必须有一个const copy构造函数。然后使用该构造函数复制c++对象。</p>\n<h3 id=\"Blocks\"><a href=\"#Blocks\" class=\"headerlink\" title=\"Blocks\"></a>Blocks</h3><p>当您拷贝一个block时,在block内的其他block引用都会被拷贝如果必要的话.如果您在block内拥有一个block变量或者引用了一个block,那个block将会被拷贝.</p>\n<h1 id=\"使用Blocks\"><a href=\"#使用Blocks\" class=\"headerlink\" title=\"使用Blocks\"></a>使用Blocks</h1><h2 id=\"调用一个Block\"><a href=\"#调用一个Block\" class=\"headerlink\" title=\"调用一个Block\"></a>调用一个Block</h2><p>声明一个block变量,将其作为一个函数,如下所示:</p>\n<pre><code class=\"hljs angelscript\">\n<span class=\"hljs-built_in\">int</span> (^oneFrom)(<span class=\"hljs-built_in\">int</span>) = ^(<span class=\"hljs-built_in\">int</span> anInt)&#123;\n    \n    <span class=\"hljs-keyword\">return</span> anInt - <span class=\"hljs-number\">1</span>;\n&#125;;\n\nprintf(<span class=\"hljs-string\">&quot;1 from 10 is %d&quot;</span>, oneFrom(<span class=\"hljs-number\">10</span>));\n\n<span class=\"hljs-comment\">// Prints &quot;1 from 10 is 9&quot;</span>\n\n<span class=\"hljs-built_in\">float</span> (^distanceTraveled)(<span class=\"hljs-built_in\">float</span>, <span class=\"hljs-built_in\">float</span>, <span class=\"hljs-built_in\">float</span>) = ^(<span class=\"hljs-built_in\">float</span> startingSpeed, <span class=\"hljs-built_in\">float</span> acceleration, <span class=\"hljs-built_in\">float</span> time) &#123;\n    \n    <span class=\"hljs-built_in\">float</span> distance = (startingSpeed * time) + (<span class=\"hljs-number\">0.5</span> * acceleration * time * time);\n    <span class=\"hljs-keyword\">return</span> distance;\n&#125;;\n\n<span class=\"hljs-built_in\">float</span> howFar = distanceTraveled(<span class=\"hljs-number\">0.0</span>, <span class=\"hljs-number\">9.8</span>, <span class=\"hljs-number\">1.0</span>);\n<span class=\"hljs-comment\">// howFar = 4.9</span></code></pre>\n<h2 id=\"使用Block作为函数参数\"><a href=\"#使用Block作为函数参数\" class=\"headerlink\" title=\"使用Block作为函数参数\"></a>使用Block作为函数参数</h2><pre><code class=\"hljs nim\"><span class=\"hljs-built_in\">char</span> *myCharacters[<span class=\"hljs-number\">3</span>] = &#123; <span class=\"hljs-string\">&quot;TomJohn&quot;</span>, <span class=\"hljs-string\">&quot;George&quot;</span>, <span class=\"hljs-string\">&quot;Charles Condomine&quot;</span> &#125;;\n \nqsort_b(myCharacters, <span class=\"hljs-number\">3</span>, sizeof(<span class=\"hljs-built_in\">char</span> *), ^(<span class=\"hljs-keyword\">const</span> <span class=\"hljs-built_in\">void</span> *l, <span class=\"hljs-keyword\">const</span> <span class=\"hljs-built_in\">void</span> *r) &#123;\n    <span class=\"hljs-built_in\">char</span> *left = *(<span class=\"hljs-built_in\">char</span> **)l;\n    <span class=\"hljs-built_in\">char</span> *right = *(<span class=\"hljs-built_in\">char</span> **)r;\n    <span class=\"hljs-keyword\">return</span> strncmp(left, right, <span class=\"hljs-number\">1</span>);\n&#125;);\n// <span class=\"hljs-type\">Block</span> implementation ends at <span class=\"hljs-string\">&quot;&#125;&quot;</span>\n \n// myCharacters <span class=\"hljs-keyword\">is</span> now &#123; <span class=\"hljs-string\">&quot;Charles Condomine&quot;</span>, <span class=\"hljs-string\">&quot;George&quot;</span>, <span class=\"hljs-string\">&quot;TomJohn&quot;</span> &#125;</code></pre>\n<p>注意block包含在函数的参数列表中.</p>\n<h2 id=\"使用Block作为方法参数\"><a href=\"#使用Block作为方法参数\" class=\"headerlink\" title=\"使用Block作为方法参数\"></a>使用Block作为方法参数</h2><p>Cocoa 提供了许多使用block的方法. 您将一个block作为方法参数使用就像使用其他参数一样. </p>\n<pre><code class=\"hljs objectivec\"><span class=\"hljs-built_in\">NSArray</span> *array = @[<span class=\"hljs-string\">@&quot;A&quot;</span>, <span class=\"hljs-string\">@&quot;B&quot;</span>, <span class=\"hljs-string\">@&quot;C&quot;</span>, <span class=\"hljs-string\">@&quot;A&quot;</span>, <span class=\"hljs-string\">@&quot;B&quot;</span>, <span class=\"hljs-string\">@&quot;Z&quot;</span>, <span class=\"hljs-string\">@&quot;G&quot;</span>, <span class=\"hljs-string\">@&quot;are&quot;</span>, <span class=\"hljs-string\">@&quot;Q&quot;</span>];\n<span class=\"hljs-built_in\">NSSet</span> *filterSet = [<span class=\"hljs-built_in\">NSSet</span> setWithObjects: <span class=\"hljs-string\">@&quot;A&quot;</span>, <span class=\"hljs-string\">@&quot;Z&quot;</span>, <span class=\"hljs-string\">@&quot;Q&quot;</span>, <span class=\"hljs-literal\">nil</span>];\n \n<span class=\"hljs-built_in\">BOOL</span> (^test)(<span class=\"hljs-keyword\">id</span> obj, <span class=\"hljs-built_in\">NSUInteger</span> idx, <span class=\"hljs-built_in\">BOOL</span> *stop);\n \ntest = ^(<span class=\"hljs-keyword\">id</span> obj, <span class=\"hljs-built_in\">NSUInteger</span> idx, <span class=\"hljs-built_in\">BOOL</span> *stop) &#123;\n \n    <span class=\"hljs-keyword\">if</span> (idx &lt; <span class=\"hljs-number\">5</span>) &#123;\n        <span class=\"hljs-keyword\">if</span> ([filterSet containsObject: obj]) &#123;\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">YES</span>;\n        &#125;\n    &#125;\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">NO</span>;\n&#125;;\n \n<span class=\"hljs-built_in\">NSIndexSet</span> *indexes = [array indexesOfObjectsPassingTest:test];\n \n<span class=\"hljs-built_in\">NSLog</span>(<span class=\"hljs-string\">@&quot;indexes: %@&quot;</span>, indexes);\n \n<span class=\"hljs-comment\">/*</span>\n<span class=\"hljs-comment\">Output:</span>\n<span class=\"hljs-comment\">indexes: &lt;NSIndexSet: 0x10236f0&gt;[number of indexes: 2 (in 2 ranges), indexes: (0 3)]</span>\n<span class=\"hljs-comment\">*/</span>\n</code></pre>\n\n<pre><code class=\"hljs objectivec\">__block <span class=\"hljs-built_in\">BOOL</span> found = <span class=\"hljs-literal\">NO</span>;\n<span class=\"hljs-built_in\">NSSet</span> *aSet = [<span class=\"hljs-built_in\">NSSet</span> setWithObjects: <span class=\"hljs-string\">@&quot;Alpha&quot;</span>, <span class=\"hljs-string\">@&quot;Beta&quot;</span>, <span class=\"hljs-string\">@&quot;Gamma&quot;</span>, <span class=\"hljs-string\">@&quot;X&quot;</span>, <span class=\"hljs-literal\">nil</span>];\n<span class=\"hljs-built_in\">NSString</span> *string = <span class=\"hljs-string\">@&quot;gamma&quot;</span>;\n \n[aSet enumerateObjectsUsingBlock:^(<span class=\"hljs-keyword\">id</span> obj, <span class=\"hljs-built_in\">BOOL</span> *stop) &#123;\n    <span class=\"hljs-keyword\">if</span> ([obj localizedCaseInsensitiveCompare:string] == <span class=\"hljs-built_in\">NSOrderedSame</span>) &#123;\n        *stop = <span class=\"hljs-literal\">YES</span>;\n        found = <span class=\"hljs-literal\">YES</span>;\n    &#125;\n&#125;];\n \n<span class=\"hljs-comment\">// At this point, found == YES</span>\n</code></pre>\n\n<h2 id=\"拷贝Blocks\"><a href=\"#拷贝Blocks\" class=\"headerlink\" title=\"拷贝Blocks\"></a>拷贝Blocks</h2><p>通常下,不需要copy或者retain一个block.当想要在block销毁后仍使用block时，才需要copy这个block.拷贝会将一个block移到堆中.</p>\n<p>可以使用c函数拷贝和释放block”</p>\n<pre><code class=\"hljs abnf\">\nBlock_copy()<span class=\"hljs-comment\">;</span>\nBlock_release()<span class=\"hljs-comment\">;</span>\n</code></pre>\n<p>为避免内存泄露,Block_copy()和Block_release()必须成对出现.</p>\n<h2 id=\"格式注意\"><a href=\"#格式注意\" class=\"headerlink\" title=\"格式注意\"></a>格式注意</h2><p>block字面量是通过一个局部栈数据结构的地址来表示一个block,因此局部栈数据结构的作用域仅限于大括号内。所以应避免以下方式的使用：</p>\n<pre><code class=\"hljs arduino\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">dontDoThis</span><span class=\"hljs-params\">()</span> </span>&#123;\n    <span class=\"hljs-keyword\">void</span> (^blockArray[<span class=\"hljs-number\">3</span>])(<span class=\"hljs-keyword\">void</span>);  <span class=\"hljs-comment\">// an array of 3 block references</span>\n \n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">3</span>; ++i) &#123;\n        blockArray[i] = ^&#123; <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;hello, %d\\n&quot;</span>, i); &#125;;\n        <span class=\"hljs-comment\">// WRONG: The block literal scope is the &quot;for&quot; loop.</span>\n    &#125;\n&#125;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">dontDoThisEither</span><span class=\"hljs-params\">()</span> </span>&#123;\n    <span class=\"hljs-keyword\">void</span> (^block)(<span class=\"hljs-keyword\">void</span>);\n \n    <span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-built_in\">random</span>():\n    <span class=\"hljs-keyword\">if</span> (i &gt; <span class=\"hljs-number\">1000</span>) &#123;\n        block = ^&#123; <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;got i at: %d\\n&quot;</span>, i); &#125;;\n        <span class=\"hljs-comment\">// WRONG: The block literal scope is the &quot;then&quot; clause.</span>\n    &#125;\n    <span class=\"hljs-comment\">//...</span>\n&#125;</code></pre>\n\n<h2 id=\"调试\"><a href=\"#调试\" class=\"headerlink\" title=\"调试\"></a>调试</h2><p>您可以设置断点来执行block中的单步操作.也可以在一个GDB会话中使用invoke-block调用一个block.如下所述:</p>\n<pre><code class=\"hljs smali\">\n$<span class=\"hljs-built_in\"> invoke-block </span>myBlock 10 20\n</code></pre>\n<p>如果您想要传一个c字符串,必须引用它.举例来说,传递一个 this string 给 doSomethingWithString block,按下面方式去写:</p>\n<pre><code class=\"hljs smali\">$<span class=\"hljs-built_in\"> invoke-block </span>doSomethingWithString <span class=\"hljs-string\">&quot;\\&quot;</span>this string \\<span class=\"hljs-string\">&quot;&quot;</span></code></pre>\n\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>在Objective-C中,使用block,注意以下几点:</p>\n<ul>\n<li>使用类型别名来定义一个Block类型,使用起来更方便.</li>\n<li>__block修饰的外部变量,在block内部可以被修改.（修饰的变量不能是可变数组，也不能是包含C99可变长度数组的结构体）</li>\n<li>每次调用block,都会拷贝该block一次,如果嵌套block,那么内部的block也会被拷贝.</li>\n<li>block进行拷贝操作时,会给内部对象创建一个强引用.如果该对象是实例变量,则创建self的强引用,如果是对象变量,则创建该对象变量的强引用.</li>\n</ul>\n<h1 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h1><p><a href=\"https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/Blocks/Articles/00_Introduction.html#//apple_ref/doc/uid/TP40007502-CH1-SW1\">Blocks Programming Topics</a></p>\n","site":{"data":{"fluid_static_prefix":{"internal_js":"/js","internal_css":"/css","internal_img":"/img","iconfont":"//at.alicdn.com/t/font_1736178_kmeydafke9r.css","anchor":"https://cdn.staticfile.org/anchor-js/4.2.2/","github_markdown":"https://cdn.staticfile.org/github-markdown-css/4.0.0/","jquery":"https://cdn.staticfile.org/jquery/3.4.1/","bootstrap":"https://cdn.staticfile.org/twitter-bootstrap/4.4.1/","highlightjs":"https://cdn.staticfile.org/highlight.js/10.0.0/","prismjs":"https://cdn.staticfile.org/prism/1.21.0/","tocbot":"https://cdn.staticfile.org/tocbot/4.11.1/","typed":"https://cdn.staticfile.org/typed.js/2.0.11/","fancybox":"https://cdn.staticfile.org/fancybox/3.5.7/","mathjax":"https://cdn.staticfile.org/mathjax/3.0.5/es5/","katex":"https://cdn.staticfile.org/KaTeX/0.11.1/","aplayer":"https://cdn.staticfile.org/aplayer/1.10.1/","busuanzi":"https://busuanzi.ibruce.info/busuanzi/2.3/","clipboard":"https://cdn.staticfile.org/clipboard.js/2.0.6/","mermaid":"https://cdn.staticfile.org/mermaid/8.5.0/","valine":"https://cdn.staticfile.org/valine/1.4.14/","gitalk":"https://cdn.staticfile.org/gitalk/1.6.2/","blueimp_md5":"https://cdn.staticfile.org/blueimp-md5/2.13.0/","disqusjs":"https://cdn.jsdelivr.net/npm/disqusjs@1.0/dist/","hint":"/lib/hint/"},"fluid_config":{"favicon":"/img/favicon.png","apple_touch_icon":"/img/favicon.png","title_join_string":" - ","force_https":false,"code":{"copy_btn":true,"highlight":{"enable":true,"lib":"highlightjs","highlightjs":{"style":"Github Gist","bg_color":false},"prismjs":{"style":"default","preprocess":true}}},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"_","loop":false},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"right","visible":"hover","icon":""},"mouse_click":{"enable":false,"style":"values"}},"dark_mode":{"enable":true,"default":"auto"},"color":{"body_bg_color":"#eee","body_bg_color_dark":"#181c27","navbar_bg_color":"#2f4154","navbar_bg_color_dark":"#1f3144","navbar_text_color":"#fff","navbar_text_color_dark":"#d0d0d0","text_color":"#3c4858","text_color_dark":"#c4c6c9","sec_text_color":"#718096","sec_text_color_dark":"#a7a9ad","post_text_color":"#2c3e50","post_text_color_dark":"#c4c6c9","post_heading_color":"#1a202c","post_heading_color_dark":"#c4c6c9","post_link_color":"#0366d6","post_link_color_dark":"#1589e9","link_hover_color":"#30a9de","link_hover_color_dark":"#30a9de","link_hover_bg_color":"#f8f9fa","link_hover_bg_color_dark":"#364151","board_color":"#fff","board_color_dark":"#252d38"},"font":{"font_size":"16px","font_family":null,"code_font_size":"85%"},"custom_js":null,"custom_css":null,"custom_html":"","web_analytics":{"enable":false,"baidu":null,"google":null,"gtag":null,"tencent":{"sid":null,"cid":null},"woyaola":null,"cnzz":null,"leancloud":{"app_id":null,"app_key":null,"server_url":null}},"lazyload":{"enable":true,"onlypost":false},"daovoice":{"enable":false,"appid":""},"aplayer":{"enable":false,"autoplay":false,"loop":"all","order":"random","theme":"#b7daff","songs":[{"name":"name","artist":"artist","url":"/songs/test.mp3","cover":"/img/cover.jpg"},{"name":"name","artist":"artist","url":"https://...url.mp3","cover":"https://...cover.jpg"}]},"version":{"check":false},"navbar":{"blog_title":"吃面多放葱","ground_glass":{"enable":false,"px":3,"alpha":0.7},"menu":[{"key":"home","link":"/","icon":"iconfont icon-home-fill"},{"key":"category","link":"/categories/","icon":"iconfont icon-category-fill"},{"key":"tag","link":"/tags/","icon":"iconfont icon-tags-fill"},{"key":"about","link":"/about/","icon":"iconfont icon-user-fill"}]},"search":{"enable":true,"path":"/local-search.xml","generate_path":"/local-search.xml","field":"post","content":true},"scroll_down_arrow":{"enable":true,"banner_height_limit":90,"scroll_after_turning_page":true},"banner_parallax":true,"footer":{"statistics":{"enable":false,"source":"busuanzi","pv_format":"总访问量 {} 次","uv_format":"总访客数 {} 人"},"beian":{"enable":false,"icp_text":"京ICP证123456号","police_text":"京公网安备12345678号","police_code":12345678,"police_icon":"/img/police_beian.png"}},"scroll_top_arrow":{"enable":true},"index":{"banner_img":"/img/default.png","banner_img_height":100,"banner_mask_alpha":0.3,"post_default_img":"","slogan":{"enable":true,"text":"像蚂蚁一样工作，像蝴蝶一样生活"},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"category":true,"tag":true}},"page":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3},"post":{"banner_img":"/img/default.png","banner_img_height":70,"banner_mask_alpha":0.3,"meta":{"author":{"enable":false},"date":{"enable":true,"format":"LL a"},"wordcount":{"enable":true,"format":"{} 字"},"min2read":{"enable":true,"format":"{} 分钟","words":100},"views":{"enable":false,"source":"busuanzi","format":"{} 次"}},"updated":{"enable":false,"content":"本文最后更新于：","relative":false},"toc":{"enable":true,"headingSelector":"h1,h2,h3,h4,h5,h6","collapseDepth":0},"copyright":{"enable":true,"content":"本博客所有文章除特别声明外，均采用 <a href=\"https://creativecommons.org/licenses/by-sa/4.0/deed.zh\" rel=\"nofollow noopener\">CC BY-SA 4.0 协议</a> ，转载请注明出处！"},"prev_next":{"enable":true},"custom":{"enable":false,"content":"<img src=\"https://octodex.github.com/images/jetpacktocat.png\" class=\"rounded mx-auto d-block mt-5\" style=\"width:150px; height:150px;\">"},"image_zoom":{"enable":true},"footnote":{"enable":true,"header":""},"math":{"enable":false,"specific":false,"engine":"mathjax"},"mermaid":{"enable":false,"specific":false,"options":{"theme":"default"}},"comments":{"enable":false,"type":"disqus"}},"utterances":{"repo":null,"issue_term":"pathname","label":"utterances","theme":"github-light","theme_dark":"github-dark","crossorigin":"anonymous"},"disqus":{"shortname":null,"disqusjs":false,"apikey":null},"gitalk":{"clientID":null,"clientSecret":null,"repo":null,"owner":null,"admin":["name"],"id":"location.pathname","language":"zh-CN","labels":["Gitalk"],"perPage":10,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true},"valine":{"appid":null,"appkey":null,"placeholder":"说点什么","path":"window.location.pathname","avatar":"retro","meta":["nick","mail","link"],"pageSize":10,"lang":"zh-CN","highlight":false,"recordIP":false,"serverURLs":null},"changyan":{"appid":"","appkey":""},"livere":{"uid":""},"remark42":{"host":"https://remark.haoyizebo.com","site_id":"haoyizebo","max_shown_comments":10,"locale":"zh"},"archive":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null},"category":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"post_limit":10,"order_by":"-length","collapse_depth":0},"tag":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null,"tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"avatar":"/img/avatar.png","name":"蔺国防","introduce":"移动应用开发者，历史文学爱好者","icons":[{"class":"iconfont icon-github-fill","link":"https://github.com","tip":"GitHub"},{"class":"iconfont icon-douban-fill","link":"https://douban.com","tip":"豆瓣"},{"class":"iconfont icon-wechat-fill","qrcode":"/img/favicon.png"}]},"page404":{"banner_img":"/img/default.png","banner_img_height":85,"banner_mask_alpha":0.3,"subtitle":"Page not found"},"links":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"items":[{"title":"Fluid Docs","intro":"主题使用指南","link":"https://hexo.fluid-dev.com/docs/","image":"/img/favicon.png"},{"title":"Fluid Repo","intro":"主题 GitHub 仓库","link":"https://github.com/fluid-dev/hexo-theme-fluid","image":"/img/favicon.png"},{"title":"Fluid Example","intro":"主题操作示例","link":"https://hexo.fluid-dev.com/docs/example/","image":"/img/favicon.png"}]}}}},"excerpt":"","more":"<h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><p>Block对象是一个C语言层面的语法和运行时特色.Block类似于标准的C函数,但是除了包含可执行代码之外，它们还可以包含变量绑定到自动(栈)或托管(堆)内存。因此，Block可以维护一组状态(数据)，以便在执行时影响行为。</p>\n<p>可以使用block组成函数表达式.这些表达式可以传递给API,可选地存储,并且通过多线程使用.Block作为一个回调非常有用.因为Block不仅可以包含在回调上执行的代码,还可以包含执行过程中需要用到的数据.</p>\n<p>在OS X v10.6 和 iOS 4.0 之后可以使用block. block runtime 是 开源的,并且在 <a href=\"http://llvm.org/svn/llvm-project/compiler-rt/trunk/\">LLVM’s compiler-rt subproject respository</a>中可以找到<br>Block同样被表示为标准的C语言工作组.由于Objective-C 和 C ++ 都是派生自C. Block在这三种语言中都能使用.</p>\n<p>通过阅读这个文档去学习什么是block对象,如何在C,C++,OC中使用.</p>\n<p>这篇文档的组成</p>\n<p>这个文档包含以下章节:</p>\n<ul>\n<li><a href=\"\">开始使用Block</a> 提供关于Block的介绍一个快速.实用的使用.</li>\n<li><a href=\"\">概念通览</a> 提供关于Block概念方面的介绍</li>\n<li><a href=\"\">声明和创建Block</a> 展示如何声明block变量和如何实现block</li>\n<li><a href=\"\">Block 和 变量</a> 描述了Block和变量之间的交互,还有定义__block存储类型的修改者.</li>\n<li><a href=\"\">使用Block</a> 阐述了Block的多种使用方式</li>\n</ul>\n<h1 id=\"开始使用Block\"><a href=\"#开始使用Block\" class=\"headerlink\" title=\"开始使用Block\"></a>开始使用Block</h1><p>下面内容帮助您使用实用的例子开始使用Block.</p>\n<h2 id=\"声明和使用一个Block\"><a href=\"#声明和使用一个Block\" class=\"headerlink\" title=\"声明和使用一个Block\"></a>声明和使用一个Block</h2><p>使用^操作符去声明一个block变量并且去表示一个block字面量的开始.Block内容包含在{}中.正如这个例子中展示的(跟在C语言中一样, ;表示声明的结束):</p>\n<pre><code class=\"hljs dart\"><span class=\"hljs-built_in\">int</span> multiplier = <span class=\"hljs-number\">7</span>;\n\n<span class=\"hljs-built_in\">int</span> (^myBlock)(<span class=\"hljs-built_in\">int</span>)  = ^(<span class=\"hljs-built_in\">int</span> <span class=\"hljs-built_in\">num</span>)&#123;\n    \n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">num</span> * multiplier;\n&#125;;\n</code></pre>\n\n<p>示例可以用下图来阐述:</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/3340896-2b3f81f0fddab136.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"示例\"></p>\n<p>注意block能够在它定义域内作为变量使用.如果你声明一个block变量,你可以像使用函数一样使用它.</p>\n<pre><code class=\"hljs dart\"><span class=\"hljs-built_in\">int</span> multiplier = <span class=\"hljs-number\">7</span>;\n\n<span class=\"hljs-built_in\">int</span> (^myBlock)(<span class=\"hljs-built_in\">int</span>) = ^(<span class=\"hljs-built_in\">int</span> <span class=\"hljs-built_in\">num</span>) &#123;\n    \n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">num</span> * multiplier;  \n&#125;;\n\nprintf(<span class=\"hljs-string\">&quot;%d&quot;</span>, myBlock(<span class=\"hljs-number\">3</span>));\n\n<span class=\"hljs-comment\">// prints &quot;21&quot;</span></code></pre>\n\n<h2 id=\"直接使用一个Block\"><a href=\"#直接使用一个Block\" class=\"headerlink\" title=\"直接使用一个Block\"></a>直接使用一个Block</h2><p>在许多情况下,您不需要声明block变量;只需要在需要作为参数的地方简单写一个block字面量即可.下面的例子使用 qsort_b 函数.qsort_b 函数类似于标准的 qsort_r 函数,但是携带一个block作为最后的参数.</p>\n<pre><code class=\"hljs nim\"><span class=\"hljs-built_in\">char</span> *myCharacters[<span class=\"hljs-number\">3</span>] = &#123;<span class=\"hljs-string\">&quot;TomJohn&quot;</span>, <span class=\"hljs-string\">&quot;George&quot;</span>, <span class=\"hljs-string\">&quot;Charles codomine&quot;</span>&#125;;\n\nqsort_b(myCharacters, <span class=\"hljs-number\">3</span>, sizeof(<span class=\"hljs-built_in\">char</span> *), ^(<span class=\"hljs-keyword\">const</span> <span class=\"hljs-built_in\">void</span> *l, <span class=\"hljs-keyword\">const</span> <span class=\"hljs-built_in\">void</span> *r)&#123;\n    \n   <span class=\"hljs-built_in\">char</span> *left = * (<span class=\"hljs-built_in\">char</span> **)l;\n   <span class=\"hljs-built_in\">char</span> *right = *(cahr **)r;\n   \n   <span class=\"hljs-keyword\">return</span> strncmp(left, right, l);\n    \n&#125;);\n\n// myCharacters <span class=\"hljs-keyword\">is</span> now &#123;<span class=\"hljs-string\">&quot;Charles Condomine&quot;</span>, <span class=\"hljs-string\">&quot;George&quot;</span>, <span class=\"hljs-string\">&quot;TomJohn&quot;</span>&#125;</code></pre>\n\n<h2 id=\"Blocks-with-Cocoa\"><a href=\"#Blocks-with-Cocoa\" class=\"headerlink\" title=\"Blocks with Cocoa\"></a>Blocks with Cocoa</h2><p>在Cocoa框架下的一些方法会携带一个block作为参数,通常用来在一个集合内对象执行操作,或者作为一个操作结束后的回调来使用.下面的例子展示了如何在NSArray的<code>sortedArrayUsingComparator:</code>方法中使用一个Block.该方法携带单个参数-Block.为了方面阐述.在这个例子中,block被定义为一个NSComparator类型的本地变量:</p>\n<pre><code class=\"hljs objectivec\"><span class=\"hljs-built_in\">NSArray</span> *stringsArray = @[<span class=\"hljs-string\">@&quot;string 1&quot;</span>, <span class=\"hljs-string\">@&quot;String 21&quot;</span>, <span class=\"hljs-string\">@&quot;string 12&quot;</span>, <span class=\"hljs-string\">@&quot;String 11&quot;</span>, <span class=\"hljs-string\">@&quot;String 02&quot;</span>];\n\n<span class=\"hljs-keyword\">static</span> <span class=\"hljs-built_in\">NSStringCompareOptions</span> comparisonOptions = <span class=\"hljs-built_in\">NSCaseInsensitiveSearch</span> | <span class=\"hljs-built_in\">NSNumericSearch</span> | <span class=\"hljs-built_in\">NSWidthInsensitiveSearch</span> | <span class=\"hljs-built_in\">NSForceOrderingSearch</span>;\n\n<span class=\"hljs-built_in\">NSLocale</span> *currentLocale = [<span class=\"hljs-built_in\">NSLocale</span> currentLocale];\n\n<span class=\"hljs-built_in\">NSComparator</span> finderSortBlock = ^(<span class=\"hljs-keyword\">id</span> string1, <span class=\"hljs-keyword\">id</span> stirng2) &#123;\n    \n    <span class=\"hljs-built_in\">NSRange</span> string1Range = <span class=\"hljs-built_in\">NSMakeRange</span>(<span class=\"hljs-number\">0</span>, [string1 length]);\n    <span class=\"hljs-keyword\">return</span> [stirng1 compare:string2 options:comparisonOptions range:string1Range locale:currentLocale];\n&#125;;\n\n<span class=\"hljs-built_in\">NSArray</span> *finderSortArray = [stringsArray sortedArrayUsingComparator:finderSortBlock];\n\n<span class=\"hljs-built_in\">NSLog</span>(<span class=\"hljs-string\">@&quot;finderSortArray:%@&quot;</span>, finderSortArray);\n\n<span class=\"hljs-comment\">/*</span>\n<span class=\"hljs-comment\"> </span>\n<span class=\"hljs-comment\"> output:</span>\n<span class=\"hljs-comment\"> </span>\n<span class=\"hljs-comment\"> finderSortArray: (</span>\n<span class=\"hljs-comment\"> </span>\n<span class=\"hljs-comment\">    &quot;string 1&quot;,</span>\n<span class=\"hljs-comment\">    &quot;String 02&quot;,</span>\n<span class=\"hljs-comment\">    &quot;String 11&quot;,</span>\n<span class=\"hljs-comment\">    &quot;string 12&quot;,</span>\n<span class=\"hljs-comment\">    &quot;String 21&quot;</span>\n<span class=\"hljs-comment\"> )</span>\n<span class=\"hljs-comment\"> */</span>\n</code></pre>\n\n<h2 id=\"block-变量\"><a href=\"#block-变量\" class=\"headerlink\" title=\"__block 变量\"></a>__block 变量</h2><p>block的一个强大的特性是在同一作用域内,它们能够修改变量.使用__block存储类型修饰符标记一个在block中可以修改的外部变量. 改变 <strong>Blocks with Cocoa</strong>中的示例,可以使用一个block变量去计算多少个字符串被用来比较. 为了阐述方便,在这个例子中直接使用block,使用<strong>currentLocale</strong>作为block中的一个只读变量.</p>\n<pre><code class=\"hljs objectivec\"><span class=\"hljs-built_in\">NSArray</span> *stringsArray = @[ <span class=\"hljs-string\">@&quot;string 1&quot;</span>,\n                          <span class=\"hljs-string\">@&quot;String 21&quot;</span>, <span class=\"hljs-comment\">// &lt;-</span>\n                          <span class=\"hljs-string\">@&quot;string 12&quot;</span>,\n                          <span class=\"hljs-string\">@&quot;String 11&quot;</span>,\n                          <span class=\"hljs-string\">@&quot;Strîng 21&quot;</span>, <span class=\"hljs-comment\">// &lt;-</span>\n                          <span class=\"hljs-string\">@&quot;Striñg 21&quot;</span>, <span class=\"hljs-comment\">// &lt;-</span>\n                          <span class=\"hljs-string\">@&quot;String 02&quot;</span> ];\n \n<span class=\"hljs-built_in\">NSLocale</span> *currentLocale = [<span class=\"hljs-built_in\">NSLocale</span> currentLocale];\n__block <span class=\"hljs-built_in\">NSUInteger</span> orderedSameCount = <span class=\"hljs-number\">0</span>;\n \n<span class=\"hljs-built_in\">NSArray</span> *diacriticInsensitiveSortArray = [stringsArray sortedArrayUsingComparator:^(<span class=\"hljs-keyword\">id</span> string1, <span class=\"hljs-keyword\">id</span> string2) &#123;\n \n    <span class=\"hljs-built_in\">NSRange</span> string1Range = <span class=\"hljs-built_in\">NSMakeRange</span>(<span class=\"hljs-number\">0</span>, [string1 length]);\n    <span class=\"hljs-built_in\">NSComparisonResult</span> comparisonResult = [string1 compare:string2 options:<span class=\"hljs-built_in\">NSDiacriticInsensitiveSearch</span> range:string1Range locale:currentLocale];\n \n    <span class=\"hljs-keyword\">if</span> (comparisonResult == <span class=\"hljs-built_in\">NSOrderedSame</span>) &#123;\n        orderedSameCount++;\n    &#125;\n    <span class=\"hljs-keyword\">return</span> comparisonResult;\n&#125;];\n \n<span class=\"hljs-built_in\">NSLog</span>(<span class=\"hljs-string\">@&quot;diacriticInsensitiveSortArray: %@&quot;</span>, diacriticInsensitiveSortArray);\n<span class=\"hljs-built_in\">NSLog</span>(<span class=\"hljs-string\">@&quot;orderedSameCount: %d&quot;</span>, orderedSameCount);\n \n<span class=\"hljs-comment\">/*</span>\n<span class=\"hljs-comment\">Output:</span>\n<span class=\"hljs-comment\"> </span>\n<span class=\"hljs-comment\">diacriticInsensitiveSortArray: (</span>\n<span class=\"hljs-comment\">    &quot;String 02&quot;,</span>\n<span class=\"hljs-comment\">    &quot;string 1&quot;,</span>\n<span class=\"hljs-comment\">    &quot;String 11&quot;,</span>\n<span class=\"hljs-comment\">    &quot;string 12&quot;,</span>\n<span class=\"hljs-comment\">    &quot;String 21&quot;,</span>\n<span class=\"hljs-comment\">    &quot;Str\\U00eeng 21&quot;,</span>\n<span class=\"hljs-comment\">    &quot;Stri\\U00f1g 21&quot;</span>\n<span class=\"hljs-comment\">)</span>\n<span class=\"hljs-comment\">orderedSameCount: 2</span>\n<span class=\"hljs-comment\">*/</span>\n</code></pre>\n<p>详细内容请看 <strong>Blocks 和 变量</strong> 这一章节</p>\n<h1 id=\"概念通览\"><a href=\"#概念通览\" class=\"headerlink\" title=\"概念通览\"></a>概念通览</h1><p>Block对象为您提供一种方式去创建一个ad hoc函数体作为在C,和C的衍生语言中的表达方式.在其他的语言和环境中.一个block对象有时也叫做闭包.</p>\n<h2 id=\"Block功能\"><a href=\"#Block功能\" class=\"headerlink\" title=\"Block功能\"></a>Block功能</h2><p>block是一个内联的匿名代码集合:</p>\n<ul>\n<li>像函数一样有一个类型参数列表</li>\n<li>拥有推导的或者声明的返回类型</li>\n<li>能够捕获定义作用域内的状态</li>\n<li>能够可选地修改作用域内的状态</li>\n<li>能够与在同一作用域内定义的其他Block共享修改的可能性</li>\n<li>能够在(栈结构)已经被销毁后,仍然可以继续分享和修改(栈结构)下定义的状态.</li>\n</ul>\n<p>您可以拷贝一个block甚至传递它到其他线程用来延迟执行.在生命周期内编译器和运行时将所有被引用的变量保存副本。</p>\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><p>Block 表示一个小的,内部包含的代码片段.正因为这样,他们常被用来作为执行并行工作单元的一种方式.或者作为集合中的项目,或者作为一个操作结束后的回调.</p>\n<p>Blocks作为传统的回调函数主要有两个原因:</p>\n<ol>\n<li>它们允许您在方法实现的上下文中执行编写的代码.<br>Block通常作为框架方法的参数</li>\n<li>它们允许作为方法的局部变量.<br>与其使用需要一个包含所有需要执行操作的上下文信息的数据结构的回调函数，您只需直接使用该局部变量.</li>\n</ol>\n<h1 id=\"声明和创建-Blocks\"><a href=\"#声明和创建-Blocks\" class=\"headerlink\" title=\"声明和创建 Blocks\"></a>声明和创建 Blocks</h1><h2 id=\"声明一个Block-引用\"><a href=\"#声明一个Block-引用\" class=\"headerlink\" title=\"声明一个Block 引用\"></a>声明一个Block 引用</h2><p>Block变量持有Block的引用.使用声明一个函数指针类似的语法声明它们.除了使用^代替*.block类型和C类型系统兼容.下面的block变量声明都是有效的:</p>\n<pre><code class=\"hljs lisp\">void (^blockReturningVoidWithVoidArgument)(<span class=\"hljs-name\">void</span>)<span class=\"hljs-comment\">;</span>\nint (^blockReturningIntWithIntAndCharArguments)(<span class=\"hljs-name\">int</span>, char)<span class=\"hljs-comment\">;</span>\nvoid (^arrayOfTenBlocksReturningVoidWithIntArgument[<span class=\"hljs-number\">10</span>])(<span class=\"hljs-name\">int</span>)<span class=\"hljs-comment\">;</span>\n</code></pre>\n<p>Block同样支持可变参数.一个block如果不含参数必须在参数列表中指明void.</p>\n<p>在许多地方,使用一个类型别名声明一个Block类型能够更好地使用block.</p>\n<pre><code class=\"hljs protobuf\">typedef <span class=\"hljs-built_in\">float</span> (MyBlockType)(<span class=\"hljs-built_in\">float</span>, <span class=\"hljs-built_in\">float</span>);\n\nMyBlockType myFirstBlock = <span class=\"hljs-comment\">// ...;</span>\nMyBlockType mySecondBlock = <span class=\"hljs-comment\">// ...;</span>\n</code></pre>\n\n<h2 id=\"创建一个Block\"><a href=\"#创建一个Block\" class=\"headerlink\" title=\"创建一个Block\"></a>创建一个Block</h2><p>使用^操作符表示一个block字面量的开始.它后面通常使用()来包含一个参数列表.block体包含在{}中.下面的例子定义了一个简单的block,block末尾用;结尾.</p>\n<pre><code class=\"hljs nim\"><span class=\"hljs-built_in\">float</span> (^oneFrom)(<span class=\"hljs-built_in\">float</span>);\n\noneFrom = ^(<span class=\"hljs-built_in\">float</span> aFloat) &#123;\n  \n  <span class=\"hljs-built_in\">float</span> <span class=\"hljs-literal\">result</span> = aFloat - <span class=\"hljs-number\">1</span>.<span class=\"hljs-number\">0</span>;\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">result</span>;\n    \n&#125;;\n</code></pre>\n\n<p>如果没有明确声明一个Block表达式的返回值类型,它会自动推导其类型.如果返回值是被推导的并且参数列表是void,您也可以忽略void参数.当出现多个返回语句时，它们必须完全匹配(在必要时使用转换)。</p>\n<h2 id=\"全局Block\"><a href=\"#全局Block\" class=\"headerlink\" title=\"全局Block\"></a>全局Block</h2><p>在文件层面,您可以使用一个block作为全局字面量</p>\n<pre><code class=\"hljs angelscript\">\n#<span class=\"hljs-keyword\">import</span> &lt;stdio.h&gt;\n\n<span class=\"hljs-built_in\">int</span> GlobalInt = <span class=\"hljs-number\">0</span>;\n\n<span class=\"hljs-built_in\">int</span> (^getGlobalInt)(<span class=\"hljs-built_in\">void</span>) = ^(<span class=\"hljs-keyword\">return</span> GlobalInt;);\n</code></pre>\n\n<h1 id=\"Blocks-和-变量\"><a href=\"#Blocks-和-变量\" class=\"headerlink\" title=\"Blocks 和 变量\"></a>Blocks 和 变量</h1><p>本节主要描述blocks和变量之间的交互,包括内存管理.</p>\n<h2 id=\"变量类型\"><a href=\"#变量类型\" class=\"headerlink\" title=\"变量类型\"></a>变量类型</h2><p>在block体的代码内,变量可以用5种不同方式处理.<br>您可以参考三种标准的变量类型,就像从函数中得到的那样.</p>\n<ul>\n<li>全局变量,包含静态局部变量</li>\n<li>全局函数(技术上来讲不是变量)</li>\n<li>来自作用域内的局部变量和参数</li>\n</ul>\n<p>Blocks同样支持两种其他类型的变量:</p>\n<p>1.在函数层面是__block 变量.__block变量在block内是可变的,如果正在引用的block被拷贝到堆上,__block变量会被保存起来.<br>2.<strong>const</strong> 导入的变量.</p>\n<p>最后,在一个方法实现内,block可能会引用OC实例变量—请看下面的 <a href=\"\">对象和Block变量</a> 章节.</p>\n<p>下面的规则适用于block中使用的变量:</p>\n<ol>\n<li>全局变量是可访问的,包含作用域内存在的静态变量.</li>\n<li>传递到block中的参数是可访问的(就像函数的参数一样)</li>\n<li>作用域内的栈变量(非静态变量)被捕获作为常量.       (block内使用的外部栈存储的变量(非静态变量)在block内部会作为常量来使用)<br>变量的值在程序中block表达式的位置上捕获的.在嵌套block中,该值从最近的作用域内被捕获.</li>\n<li>__block修饰的局部变量是通过引用来提供访问的,并且这些变量在block内部是可修改的.<br>任何作用域内的改变都会被映射,包括在同一作用域内其他定义的block的改变同样也会被映射.这些内容在”__block 存储类型”中被详细讨论.</li>\n<li>block作用域内声明的局部变量,其行为跟函数内的局部变量几乎相同.<br>block的每次调用都会提供那个变量的新的副本. 这些变量依次作为在block内的常量或者引用变量来使用.</li>\n</ol>\n<p>下面的例子阐述了非静态局部变量的使用:</p>\n<pre><code class=\"hljs perl\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-keyword\">x</span> = <span class=\"hljs-number\">123</span>;\n\nvooid (^printXAndY)(<span class=\"hljs-keyword\">int</span>) = ^(<span class=\"hljs-keyword\">int</span> <span class=\"hljs-keyword\">y</span>) &#123;\n\n  <span class=\"hljs-keyword\">printf</span>(<span class=\"hljs-string\">&quot;%d %d\\n&quot;</span>, <span class=\"hljs-keyword\">x</span>,<span class=\"hljs-keyword\">y</span>);  \n&#125;;\n\nprintXAndY(<span class=\"hljs-number\">456</span>); <span class=\"hljs-regexp\">//prints</span>: <span class=\"hljs-number\">123</span> <span class=\"hljs-number\">456</span></code></pre>\n<p>如上所述, 试着在blocke内给x赋值会造成错误:</p>\n<pre><code class=\"hljs gml\">int <span class=\"hljs-symbol\">x</span> = <span class=\"hljs-number\">123</span>;\n\nvoid (^printXAndY)(int) = ^(int <span class=\"hljs-symbol\">y</span>) &#123;\n    \n    <span class=\"hljs-symbol\">x</span> = <span class=\"hljs-symbol\">x</span> + <span class=\"hljs-symbol\">y</span>; <span class=\"hljs-comment\">// error</span>\n    printf(<span class=\"hljs-string\">&quot;%d %d&quot;</span>, <span class=\"hljs-symbol\">x</span>, <span class=\"hljs-symbol\">y</span>);  \n&#125;;\n</code></pre>\n\n<p>想要在block内部对外部变量进行修改,您可以使用__block存储类型修饰符.</p>\n<h2 id=\"block-存储类型\"><a href=\"#block-存储类型\" class=\"headerlink\" title=\"__block 存储类型\"></a>__block 存储类型</h2><p>您可以使用__block 修饰符使block外部导入的变量在其内部可修改.__block存储类似于局部变量的寄存器,内部的自动,静态存储类型。<br>存储区域内的__block变量会与作用域内的变量、所有的block、block副本之间共享.因此,在末尾声明的block副本存在,那么在栈结构销毁时,这块内存将会幸存.同一作用域内的多个block可以同时使用一个共享变量.<br>作为优化.block存储从栈开始,就像block本身一样.如果使用Block_copy复制,则会将变量复制到堆中.因此,__block变量的地址可能随时变化.<br>对于__block变量有两个进一步的限制:它们不能是可变数组，也不能是包含C99可变长度数组的结构体。</p>\n<p>下面的例子阐述了一个__block变量的使用:</p>\n<pre><code class=\"hljs gml\">__block int <span class=\"hljs-symbol\">x</span> = <span class=\"hljs-number\">123</span>; <span class=\"hljs-comment\">// x lives in block storage</span>\n\nvoid (^printXAndY)(int) = ^(int <span class=\"hljs-symbol\">y</span>) &#123;\n    \n    <span class=\"hljs-symbol\">x</span> = <span class=\"hljs-symbol\">x</span> + <span class=\"hljs-symbol\">y</span>;\n    printf(<span class=\"hljs-string\">&quot;%d %D\\n&quot;</span>, <span class=\"hljs-symbol\">x</span>, <span class=\"hljs-symbol\">y</span>);\n&#125;;\n\nprintXAndY(<span class=\"hljs-number\">456</span>); <span class=\"hljs-comment\">// prints: 579 456</span>\n\n<span class=\"hljs-comment\">// x is now 579</span>\n</code></pre>\n\n<p>下面的例子展示了block和几种类型变量的交互:</p>\n<pre><code class=\"hljs objectivec\">\n<span class=\"hljs-keyword\">extern</span> <span class=\"hljs-built_in\">NSInteger</span> CounterGlobal;\n<span class=\"hljs-keyword\">static</span> <span class=\"hljs-built_in\">NSInteger</span> CounterStatic;\n\n&#123;\n    <span class=\"hljs-built_in\">NSInteger</span> localCounter = <span class=\"hljs-number\">42</span>;\n    __block <span class=\"hljs-keyword\">char</span> localCharacter;\n    \n    <span class=\"hljs-keyword\">void</span> (^aBlock)(<span class=\"hljs-keyword\">void</span>) = ^(<span class=\"hljs-keyword\">void</span>) &#123;\n      ++CounterGlobal;  \n      ++CounterStatic;\n      CounterGlobal = localCounter; <span class=\"hljs-comment\">// localCounter fixed at block creation</span>\n      localCharacter = <span class=\"hljs-string\">&#x27;a&#x27;</span>; <span class=\"hljs-comment\">// sets localCharacter in enclosing scope    </span>\n    &#125;;\n    \n    ++localCounter; <span class=\"hljs-comment\">//unseen by the block</span>\n    localCharacter = <span class=\"hljs-string\">&#x27;b&#x27;</span>;\n    \n    aBlock();  <span class=\"hljs-comment\">// execute the block </span>\n    <span class=\"hljs-comment\">// localCharacter now &#x27;a&#x27;</span>\n&#125;\n</code></pre>\n\n<h2 id=\"对象和Block变量\"><a href=\"#对象和Block变量\" class=\"headerlink\" title=\"对象和Block变量\"></a>对象和Block变量</h2><h3 id=\"Objective-C-对象\"><a href=\"#Objective-C-对象\" class=\"headerlink\" title=\"Objective-C 对象\"></a>Objective-C 对象</h3><p>当一个block被复制,它会对block内的对象变量创建强引用.如果在方法实现内使用一个block:</p>\n<ul>\n<li>如果您通过引用访问一个实例变量,会创建一个强引用指向self;</li>\n<li>如果您通过值访问一个对象变量,会创建一个强引用指向该变量.</li>\n</ul>\n<p>下面的例子阐述了两个不同的情况:</p>\n<pre><code class=\"hljs xquery\">dispathch_async(queue, ^&#123;\n   \n   // instanceVariable <span class=\"hljs-literal\">is</span> userd <span class=\"hljs-keyword\">by</span> reference, a strong reference <span class=\"hljs-literal\">is</span> made <span class=\"hljs-keyword\">to</span> self \n   \n   doSomethingWithObject(instanceVariable);\n    \n&#125;);\n\nid localVariable = instanceVariable;\n\ndispatch_async(queue, ^&#123;\n   /*\n   \n    localVariable <span class=\"hljs-literal\">is</span> used <span class=\"hljs-keyword\">by</span> <span class=\"hljs-keyword\">value</span>, a strong reference <span class=\"hljs-literal\">is</span> made <span class=\"hljs-keyword\">to</span> localvariable (<span class=\"hljs-keyword\">and</span><span class=\"hljs-built_in\"> not</span> <span class=\"hljs-keyword\">to</span> self)\n   \n   */ \n   doSomethingWithObject(localVariable);\n    \n&#125;);\n</code></pre>\n<p>如果想要在block内修改外部的局部对象变量,您可以使用__block标记该变量.</p>\n<h3 id=\"C-对象\"><a href=\"#C-对象\" class=\"headerlink\" title=\"C++对象\"></a>C++对象</h3><p>一般来说，可以在一个block中使用c++对象。在成员函数中，对成员变量和函数的引用通过隐式导入该指针，因此看起来是可变的。如果一个block被复制，有两个考虑因素:</p>\n<p>如果您有一个__block存储类，它是一个基于堆栈的c++对象，那么通常使用的是copy构造函数。<br>如果您在一个block中使用任何其他c++基于堆栈的对象，那么它必须有一个const copy构造函数。然后使用该构造函数复制c++对象。</p>\n<h3 id=\"Blocks\"><a href=\"#Blocks\" class=\"headerlink\" title=\"Blocks\"></a>Blocks</h3><p>当您拷贝一个block时,在block内的其他block引用都会被拷贝如果必要的话.如果您在block内拥有一个block变量或者引用了一个block,那个block将会被拷贝.</p>\n<h1 id=\"使用Blocks\"><a href=\"#使用Blocks\" class=\"headerlink\" title=\"使用Blocks\"></a>使用Blocks</h1><h2 id=\"调用一个Block\"><a href=\"#调用一个Block\" class=\"headerlink\" title=\"调用一个Block\"></a>调用一个Block</h2><p>声明一个block变量,将其作为一个函数,如下所示:</p>\n<pre><code class=\"hljs angelscript\">\n<span class=\"hljs-built_in\">int</span> (^oneFrom)(<span class=\"hljs-built_in\">int</span>) = ^(<span class=\"hljs-built_in\">int</span> anInt)&#123;\n    \n    <span class=\"hljs-keyword\">return</span> anInt - <span class=\"hljs-number\">1</span>;\n&#125;;\n\nprintf(<span class=\"hljs-string\">&quot;1 from 10 is %d&quot;</span>, oneFrom(<span class=\"hljs-number\">10</span>));\n\n<span class=\"hljs-comment\">// Prints &quot;1 from 10 is 9&quot;</span>\n\n<span class=\"hljs-built_in\">float</span> (^distanceTraveled)(<span class=\"hljs-built_in\">float</span>, <span class=\"hljs-built_in\">float</span>, <span class=\"hljs-built_in\">float</span>) = ^(<span class=\"hljs-built_in\">float</span> startingSpeed, <span class=\"hljs-built_in\">float</span> acceleration, <span class=\"hljs-built_in\">float</span> time) &#123;\n    \n    <span class=\"hljs-built_in\">float</span> distance = (startingSpeed * time) + (<span class=\"hljs-number\">0.5</span> * acceleration * time * time);\n    <span class=\"hljs-keyword\">return</span> distance;\n&#125;;\n\n<span class=\"hljs-built_in\">float</span> howFar = distanceTraveled(<span class=\"hljs-number\">0.0</span>, <span class=\"hljs-number\">9.8</span>, <span class=\"hljs-number\">1.0</span>);\n<span class=\"hljs-comment\">// howFar = 4.9</span></code></pre>\n<h2 id=\"使用Block作为函数参数\"><a href=\"#使用Block作为函数参数\" class=\"headerlink\" title=\"使用Block作为函数参数\"></a>使用Block作为函数参数</h2><pre><code class=\"hljs nim\"><span class=\"hljs-built_in\">char</span> *myCharacters[<span class=\"hljs-number\">3</span>] = &#123; <span class=\"hljs-string\">&quot;TomJohn&quot;</span>, <span class=\"hljs-string\">&quot;George&quot;</span>, <span class=\"hljs-string\">&quot;Charles Condomine&quot;</span> &#125;;\n \nqsort_b(myCharacters, <span class=\"hljs-number\">3</span>, sizeof(<span class=\"hljs-built_in\">char</span> *), ^(<span class=\"hljs-keyword\">const</span> <span class=\"hljs-built_in\">void</span> *l, <span class=\"hljs-keyword\">const</span> <span class=\"hljs-built_in\">void</span> *r) &#123;\n    <span class=\"hljs-built_in\">char</span> *left = *(<span class=\"hljs-built_in\">char</span> **)l;\n    <span class=\"hljs-built_in\">char</span> *right = *(<span class=\"hljs-built_in\">char</span> **)r;\n    <span class=\"hljs-keyword\">return</span> strncmp(left, right, <span class=\"hljs-number\">1</span>);\n&#125;);\n// <span class=\"hljs-type\">Block</span> implementation ends at <span class=\"hljs-string\">&quot;&#125;&quot;</span>\n \n// myCharacters <span class=\"hljs-keyword\">is</span> now &#123; <span class=\"hljs-string\">&quot;Charles Condomine&quot;</span>, <span class=\"hljs-string\">&quot;George&quot;</span>, <span class=\"hljs-string\">&quot;TomJohn&quot;</span> &#125;</code></pre>\n<p>注意block包含在函数的参数列表中.</p>\n<h2 id=\"使用Block作为方法参数\"><a href=\"#使用Block作为方法参数\" class=\"headerlink\" title=\"使用Block作为方法参数\"></a>使用Block作为方法参数</h2><p>Cocoa 提供了许多使用block的方法. 您将一个block作为方法参数使用就像使用其他参数一样. </p>\n<pre><code class=\"hljs objectivec\"><span class=\"hljs-built_in\">NSArray</span> *array = @[<span class=\"hljs-string\">@&quot;A&quot;</span>, <span class=\"hljs-string\">@&quot;B&quot;</span>, <span class=\"hljs-string\">@&quot;C&quot;</span>, <span class=\"hljs-string\">@&quot;A&quot;</span>, <span class=\"hljs-string\">@&quot;B&quot;</span>, <span class=\"hljs-string\">@&quot;Z&quot;</span>, <span class=\"hljs-string\">@&quot;G&quot;</span>, <span class=\"hljs-string\">@&quot;are&quot;</span>, <span class=\"hljs-string\">@&quot;Q&quot;</span>];\n<span class=\"hljs-built_in\">NSSet</span> *filterSet = [<span class=\"hljs-built_in\">NSSet</span> setWithObjects: <span class=\"hljs-string\">@&quot;A&quot;</span>, <span class=\"hljs-string\">@&quot;Z&quot;</span>, <span class=\"hljs-string\">@&quot;Q&quot;</span>, <span class=\"hljs-literal\">nil</span>];\n \n<span class=\"hljs-built_in\">BOOL</span> (^test)(<span class=\"hljs-keyword\">id</span> obj, <span class=\"hljs-built_in\">NSUInteger</span> idx, <span class=\"hljs-built_in\">BOOL</span> *stop);\n \ntest = ^(<span class=\"hljs-keyword\">id</span> obj, <span class=\"hljs-built_in\">NSUInteger</span> idx, <span class=\"hljs-built_in\">BOOL</span> *stop) &#123;\n \n    <span class=\"hljs-keyword\">if</span> (idx &lt; <span class=\"hljs-number\">5</span>) &#123;\n        <span class=\"hljs-keyword\">if</span> ([filterSet containsObject: obj]) &#123;\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">YES</span>;\n        &#125;\n    &#125;\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">NO</span>;\n&#125;;\n \n<span class=\"hljs-built_in\">NSIndexSet</span> *indexes = [array indexesOfObjectsPassingTest:test];\n \n<span class=\"hljs-built_in\">NSLog</span>(<span class=\"hljs-string\">@&quot;indexes: %@&quot;</span>, indexes);\n \n<span class=\"hljs-comment\">/*</span>\n<span class=\"hljs-comment\">Output:</span>\n<span class=\"hljs-comment\">indexes: &lt;NSIndexSet: 0x10236f0&gt;[number of indexes: 2 (in 2 ranges), indexes: (0 3)]</span>\n<span class=\"hljs-comment\">*/</span>\n</code></pre>\n\n<pre><code class=\"hljs objectivec\">__block <span class=\"hljs-built_in\">BOOL</span> found = <span class=\"hljs-literal\">NO</span>;\n<span class=\"hljs-built_in\">NSSet</span> *aSet = [<span class=\"hljs-built_in\">NSSet</span> setWithObjects: <span class=\"hljs-string\">@&quot;Alpha&quot;</span>, <span class=\"hljs-string\">@&quot;Beta&quot;</span>, <span class=\"hljs-string\">@&quot;Gamma&quot;</span>, <span class=\"hljs-string\">@&quot;X&quot;</span>, <span class=\"hljs-literal\">nil</span>];\n<span class=\"hljs-built_in\">NSString</span> *string = <span class=\"hljs-string\">@&quot;gamma&quot;</span>;\n \n[aSet enumerateObjectsUsingBlock:^(<span class=\"hljs-keyword\">id</span> obj, <span class=\"hljs-built_in\">BOOL</span> *stop) &#123;\n    <span class=\"hljs-keyword\">if</span> ([obj localizedCaseInsensitiveCompare:string] == <span class=\"hljs-built_in\">NSOrderedSame</span>) &#123;\n        *stop = <span class=\"hljs-literal\">YES</span>;\n        found = <span class=\"hljs-literal\">YES</span>;\n    &#125;\n&#125;];\n \n<span class=\"hljs-comment\">// At this point, found == YES</span>\n</code></pre>\n\n<h2 id=\"拷贝Blocks\"><a href=\"#拷贝Blocks\" class=\"headerlink\" title=\"拷贝Blocks\"></a>拷贝Blocks</h2><p>通常下,不需要copy或者retain一个block.当想要在block销毁后仍使用block时，才需要copy这个block.拷贝会将一个block移到堆中.</p>\n<p>可以使用c函数拷贝和释放block”</p>\n<pre><code class=\"hljs abnf\">\nBlock_copy()<span class=\"hljs-comment\">;</span>\nBlock_release()<span class=\"hljs-comment\">;</span>\n</code></pre>\n<p>为避免内存泄露,Block_copy()和Block_release()必须成对出现.</p>\n<h2 id=\"格式注意\"><a href=\"#格式注意\" class=\"headerlink\" title=\"格式注意\"></a>格式注意</h2><p>block字面量是通过一个局部栈数据结构的地址来表示一个block,因此局部栈数据结构的作用域仅限于大括号内。所以应避免以下方式的使用：</p>\n<pre><code class=\"hljs arduino\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">dontDoThis</span><span class=\"hljs-params\">()</span> </span>&#123;\n    <span class=\"hljs-keyword\">void</span> (^blockArray[<span class=\"hljs-number\">3</span>])(<span class=\"hljs-keyword\">void</span>);  <span class=\"hljs-comment\">// an array of 3 block references</span>\n \n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">3</span>; ++i) &#123;\n        blockArray[i] = ^&#123; <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;hello, %d\\n&quot;</span>, i); &#125;;\n        <span class=\"hljs-comment\">// WRONG: The block literal scope is the &quot;for&quot; loop.</span>\n    &#125;\n&#125;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">dontDoThisEither</span><span class=\"hljs-params\">()</span> </span>&#123;\n    <span class=\"hljs-keyword\">void</span> (^block)(<span class=\"hljs-keyword\">void</span>);\n \n    <span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-built_in\">random</span>():\n    <span class=\"hljs-keyword\">if</span> (i &gt; <span class=\"hljs-number\">1000</span>) &#123;\n        block = ^&#123; <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;got i at: %d\\n&quot;</span>, i); &#125;;\n        <span class=\"hljs-comment\">// WRONG: The block literal scope is the &quot;then&quot; clause.</span>\n    &#125;\n    <span class=\"hljs-comment\">//...</span>\n&#125;</code></pre>\n\n<h2 id=\"调试\"><a href=\"#调试\" class=\"headerlink\" title=\"调试\"></a>调试</h2><p>您可以设置断点来执行block中的单步操作.也可以在一个GDB会话中使用invoke-block调用一个block.如下所述:</p>\n<pre><code class=\"hljs smali\">\n$<span class=\"hljs-built_in\"> invoke-block </span>myBlock 10 20\n</code></pre>\n<p>如果您想要传一个c字符串,必须引用它.举例来说,传递一个 this string 给 doSomethingWithString block,按下面方式去写:</p>\n<pre><code class=\"hljs smali\">$<span class=\"hljs-built_in\"> invoke-block </span>doSomethingWithString <span class=\"hljs-string\">&quot;\\&quot;</span>this string \\<span class=\"hljs-string\">&quot;&quot;</span></code></pre>\n\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>在Objective-C中,使用block,注意以下几点:</p>\n<ul>\n<li>使用类型别名来定义一个Block类型,使用起来更方便.</li>\n<li>__block修饰的外部变量,在block内部可以被修改.（修饰的变量不能是可变数组，也不能是包含C99可变长度数组的结构体）</li>\n<li>每次调用block,都会拷贝该block一次,如果嵌套block,那么内部的block也会被拷贝.</li>\n<li>block进行拷贝操作时,会给内部对象创建一个强引用.如果该对象是实例变量,则创建self的强引用,如果是对象变量,则创建该对象变量的强引用.</li>\n</ul>\n<h1 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h1><p><a href=\"https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/Blocks/Articles/00_Introduction.html#//apple_ref/doc/uid/TP40007502-CH1-SW1\">Blocks Programming Topics</a></p>\n"},{"title":"CoreBluetooth 编程指南","date":"2018-01-03T11:02:00.000Z","_content":"## 介绍\n\nCore Bluetooth 框架给iOS和Mac apps 提供与外部蓝牙设备交互的能力.例如,您的app能够发现,扫描,并且跟外部设备交互.比如心率计和数码恒温计.同样 Mac 和 iOS 设备也可以作为低功耗外部设备,给其他设备提供数据.\n\n在Core Bluetooth 中,中心设备和外部设备作为主要参与者.通常情况下我们通过一个app来实现中心设备角色,Core Bluetooth 也可以将我们的本地设备作为外部设备角色来实现.\n\n### iOS App 状态影响蓝牙行为\n\n当app处于后台或者挂起状态时,这种情况会影响蓝牙相关功能.默认情况下,app在后台或者挂起状态时,不能执行蓝牙任务.如果想要app在后台执行蓝牙任务,可以声明该app支持Core Bluetooth后台执行模式中的一项或者两项都支持.当app处于后台状态时,同一蓝牙任务的操作是不同的.在设计app时,要考虑这些差异.\n\n即使app支持后台操作,当内存不足时系统会随时终止后台应用,来给前台运行的app提供内存空间.iOS 7后,Core Bluetooth支持保存中心设备和外部设备管理者对象的状态.可以使用该特性去支持长时间调用蓝牙设备的操作.\n\n### 遵循最佳实践来提高用户体验\n\n由于无线广播会给设备电池造成不利影响.因此,设计app的时候尽可能减少无线广播的使用.遵循最佳实践来减少该方面的不利影响同时提高用户的体验.\n\n\n## Core Bluetooth 概述\n\n本章节主要介绍开始使用Core Bluetooth 开发时需要了解的专业词汇和概念.\n\n> 重要: 一个 iOS app 在 iOS 10.0 之后的版本,必须在info.plist 文件中描述需要访问的数据类型,否则会崩溃.访问外部设备的指定数据,在info.plist 文件中必须包含 NSBluetoothPeripheralUsageDescription.\n\n### 中心设备和外部设备,以及他们在蓝牙通信中的角色\n\n中心设备和外部设备是低功耗蓝牙通信中的来个主要参与者.中心设备使用来自与外部设备的信息去完成某项特定任务.下面的例子中,表示一个mac 或者 iOS app 用一种对用户来讲更友好的方式来展示来自于心率检测器的信息.\n\n![image.png](http://upload-images.jianshu.io/upload_images/3340896-c9641636941a7f71.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n#### 中心设备发现并连接外围正在广播的设备\n\n外部设备以 advertising packet 的格式来发送广播.广播数据中包含外部设备的名称和主要功能.一个中心设备可用浏览和听取正在广播的外部设备内容.一个中心设备可以请求连接任何发现正在广播的外部设备.\n\n![image.png](http://upload-images.jianshu.io/upload_images/3340896-5c28cac2a725ceed.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n#### 一个外部设备的数据如何构建\n\n外部设备包含一项或者多项服务.一个服务是一个数据集合.举例子,一个心率计的服务可以用来显示来自于心率传感器的的心率数据.\n\n服务本身由特性或者其中包含的其他服务组成.一个特性提供外部设备服务的详细信息.举例子,心率服务包含两个特性,一个特性描述设备传感器的监听位置.另外一个特性传输测量的数据.\n\n![image.png](http://upload-images.jianshu.io/upload_images/3340896-11772f3214f18ab9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n#### 中心设备扫描并且跟一个外部设备数据交互\n\n一个中心设备和外部设备成功建立连接后,可以发现外部设备提供的所有服务和特性.\n中心设备可以通过读写服务特性的值来跟外部设备的服务进行交互.举例来说,app 请求当前房间的室温.或者提供给恒温计一个值来设定室温.\n\n### 中心设备,外部设备,以及外部设备数据如何表示\n\n本地中心设备管理者通过 CBCentralManager 对象表示.这个对象用来管理远程外部设备的遍历,发现,连接正在发送广播的外部设备.\n\n![Core Bluetooth objects on the central side](http://upload-images.jianshu.io/upload_images/3340896-cc9e991217247c05.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n远程外部设备 用CBPeripheral对象来表示, 它的数据通过 CBService 和 CBCharacteristic 对象来表示.\n![image.png](http://upload-images.jianshu.io/upload_images/3340896-0fd143eeaa33aada.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n外部设备管理者 用CBPeripheralManager对象来表示. 这些对象用来管理发布的服务和相关特性.并且通过广播来给远程中心设备(CBCentral 对象)发送服务. Peripheral manager对象也用来响应远程中心设备的读写请求.\n![image.png](http://upload-images.jianshu.io/upload_images/3340896-3b76d790666594fe.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n外部设备管理者(CBPeripheralManger)的数据通过CBMutableService 和 CBMutableCharacteristic 对象来表示.\n![A local peripheral's tree of services and characteristics](http://upload-images.jianshu.io/upload_images/3340896-6bb597fc20300ec7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n## 执行中心角色任务\n\n本节学习内容:\n\n- 启动一个中心设备管理者对象\n- 发现并链接正在广播的外部设备\n- 扫描链接的外部设备数据\n- 给一个外部设备服务特性值发送读写请求\n- 订阅一个特性值的变动通知\n\n### 启动一个中心设备管理者\n\n创建CBCentralManager\n```\nmyCentralManager = [[CBCentralManager alloc] initWithDelegate: self queue:nil options:nil];\n```\nself 必须实现 centralMangerDidUpdateState: 代理方法.更多内容请看[CBCentralManagerDelegate Protocol Reference](https://developer.apple.com/documentation/corebluetooth/cbcentralmanagerdelegate)\n\n### 发现正在广播的外部设备\n\n```\n[myCentralManager scanForPeripheralsWithServices:nil options:nil];\n```\n\n> 注意: 如果给第一个参数指定为nil,central manager返回所有发现的外部设备.在真实情况中,一般会指定一个CBUUID对象组成的数组,每个对象表示一个服务的唯一标识.当指定好UUID对象数组后,central manager 仅返回正在广播相关服务的外部设备.浏览最感兴趣的外部设备.\nUUIDs,和CBUUID对象详细内容请看[Services and Characteristics Are Identified by UUIDs](https://developer.apple.com/library/content/documentation/NetworkingInternetWeb/Conceptual/CoreBluetooth_concepts/PerformingCommonPeripheralRoleTasks/PerformingCommonPeripheralRoleTasks.html#//apple_ref/doc/uid/TP40013257-CH4-SW8)\n\ncentral manager 每次发现外部设备,就会调用代理对象的  cetralManager:didDiscoverPeripheral:advertisementData:RSSI: 方法.新发现的外部设备以 CBPeripheral 对象返回.如果打算链接发现的外部设备,给该对象一个强引用,系统就不会释放它.\n\n```\n- (void)centralManager:(CBCentralManager *)central didDiscoverPeripheral:(CBPeripheral *)peripheral advertisementData:(NSDictionary *)advertisementData RSSI:(NSNUmber *)RSSI {\n    NSLog(@\"Discovered %@\", peripheral.name);\n    self.discoverdPeripheral = peripheral;\n    ...\n```\n\n如果希望链接多个设备,需要用一个NSArray来存储发现的外部设备.一旦所有想连接的设备都被发现,停止浏览其他设备来节省电量:\n\n```\n[myCentralManager stopScan];\n```\n\n### 链接发现的外部设备\n\n```\n[myCentralManager connectPeripheral:peripheral options:nil];\n```\n\n如果链接请求成功,central manager 调用代理对象的centralManager:didConnectPeripheral:方法.在跟外部设备交互前,设置它的代理来确保代理接受到了合适的回调:\n\n```\n- (void)centralManager:(CBCentralManager *)central didConnectPeripheral:(CBPeripheral *)peripheral {\n    \n    NSLog(@\"Peripheral connected\");\n    peripheral.delegate = self;\n    ...\n```\n\n### 发现链接外部设备的服务\n\n跟一个外部设备建立连接后,可以浏览它的数据.首先浏览外部设备提供的可用服务.由于外部设备发送广播的数据限制,会发现一个外部设备提供的服务比广播的更多.可以使用discoverServices: 方法来发现一个外部设备提供的所有服务.\n\n```\n[peripheral discoverServices:nil];\n```\n>注意: 在一个app中,一般不给参数传nil,因为这样会返回所有的可用服务.由于一个外部设备有许多不相关的服务,发现所有可用服务不仅浪费电量而且浪费时间.因此,指定服务的UUIDs来发现指定的服务.\n\n当指定的服务发现后,连接的外部设备(CBPeripheral对象)调用代理对象的 peripheral:didDiscoverServices: 方法.Core Bluetooth 创建一个CBService数组---\n\n```\n\n- (void)peripheral:(CBPeripheral *)peripheral didDiscoverServices:(NSerror *)error{\n    \n    for (CBService *service in peripheral.services) {\n        \n        NSLog(@\"Discovered service %@\", service);\n        ...\n    }\n    ...\n```\n\n### 发现一个服务的特性\n\n```\nNSLog (@\"Discovering characteristics for service %@\", interestingService);\n[peripheral discoverCharacteristics:nil forService:interestingService];\n```\n\n> 注意: 真实环境中,第一个参数一般不传nil,通常指定想要找的特性UUIDs\n\n当指定服务的特性被发现后,外部设备调用代理对象的 peripheral:didDiscoverCharacteristicsForService:error: 方法.Core Bluetooth创建一个包含CBCharacteristic对象的数组来包含所有发现的特性.\n\n```\n- (void)peripheral:(CBPeripheral *)peripheral didDiscoverCharacteristicsForService:(CBService *)service error:(NSError *)error {\n    \n    for (CBCharacteristic *characteristic in service.characteristics) {\n        \n        NSLog(@\"Discovered characteristic %@\", characteristic);\n        ...\n    }\n    ...\n```\n### 获取一个特性的值\n\n直接读取特性的value或者订阅它来获取特性的值.\n\n#### 读取特性值\n\n```\nNSLog(@\"Reading value for characteristic %@\", interestingCharacteristic);\n[peripheral readValueForCharacteristic:interestingCharacteristic];\n```\n\n当尝试读取特性值时,外部设备调用代理对象的 peripheral:didUpdateValueForCharacteristic:error:方法来获取特性值.\n\n```\n- (void)peripheral: (CBPeripheral *)peripheral didUpdateValueForCharacteristic:(CBCharacteristic *)characteristic error:(NSError *)error {\n    \n    NSData *data = characteristic.value;\n    //parse the data as needed \n    ...\n```\n\n> 注意:不是所有的特性都是可读的.通过CBCharacteristicPropertyRead属性常量来检测特性是否可读.如果不可读,会返回适当的错误.\n\n#### 订阅一个特性值\n\n```\n[peripheral setNotifyValue:YES forCharacteristic: interestingCharacteristic];\n```\n\n```\n当订阅失败时,可以实现下面方法来获取订阅失败原因.\n- (void)peripheral:(CBPeripheral *)peripheral didUpdateNotificationStateForCharacteristic:(CBCharacteristic *)characteristic error:(NSError *)error {\n    \n    if (error) {\n        \n       NSLog(@\"Error changing notification state: %@\", [error localizedDescription]) ;\n    }\n    ...\n```\n\n> 注意:不是所有的特性都可订阅.可以通过属性的CBCharacteristicPropertyNotify或者CBCharacteristicPropertyIndicate常量来检测属性是否可被订阅.\n\n### 给一个特性写入值\n\n```\n\nNSLog(@\"Wrriting value for characteristic %@\", interestingCharacteristic);\n[peripheral writeValue:dataToWrite forCharacteristic:interestingCharacteristic type:CBCharacteristicWriteWithResponse];\n\n```\n代理对象调用下面方法,通过CBCharacteristicWriteWithResponse来告诉app写入是否成功.\n```\n- (void)peripheral:(CBPeripheral *)peripheral\ndidWriteValueForCharacteristic:(CBCharacteristic *)characteristic\n             error:(NSError *)error {\n \n    if (error) {\n        NSLog(@\"Error writing characteristic value: %@\",\n            [error localizedDescription]);\n    }\n    ...\n```\n\n> 注意:特性仅支持特定的写入类型.可以通过一个特性的CBCharacteristicPropertyWriteWithoutResponse 或者 CBCharacteristicPropertyWrite 常量来检查支持的写入类型.\n\n## 执行外部角色任务\n\n本节学习内容:\n\n- 启动一个外部设备管理对象\n- 设置本地外部设备的服务和特性\n- 给设备的本地数据库发布服务和特性\n- 广播服务\n- 响应一个连接的中心设备的读写请求\n- 给订阅的中心设备发送更新后的特性值\n\n\n### 启动一个外部设备管理者\n\n```\nmyPeripheralManager = [[CBPeripheralManager alloc] initWithDelegate:self queue:nil options: nil];\n```\n\n创建CBPeripheralManager对象后 self 必须实现 peripheralMangagerDidUpdateState: 方法.  详细内容请看 [CBPeripheralManagerDelegate Protocol Reference]() \n\n### 设置外部设备管理者的服务和特性\n\n一个本地外部设备服务和特性的数据库以类似于树状的方式组成.必须以这种方式去组织本地外部设备的服务和特性. 在执行这些任务中首先要理解如何识别这些服务和特性.\n\n#### 服务和特性通过UUIDs来识别\n\niOS中通过CBUUID对象来表示外部设备指定的服务和特性.比如,128位的UUID心率服务可以使用CBUUID 对象的 UUIDWithString 方法来表示预定义的16位UUID.\n\n```\nCBUUID *heartRateServiceUUID = [CBUUID UUIDWithString: @\"180D\"];\n```\n\n当从一个预定义的16位UUID中创建一个CBUUID对象时,Core Bluetooth 会用Bluetooth base UUID 预填128位UUID的剩下的部分.\n\n#### 创建自有的UUIDs来自定义服务和特性\n\n使用命令行实用工具 uuidgen 很容易生成一个128位的UUIDs.\n\n```\n$ uuidgen \n71DA3FD1-7E10-41C1-B16F-4430B506CDE7\n```\n然后使用这个UUID去创建一个CBUUID对象\n```\nCBUID *myCustomServiceUUID = [CBUUID UUIDWithString:@\"71DA3FD1-7E10-41C1-B16F-4430B506CDE7\"];\n```\n\n#### 创建服务和特性树\n\n```\nmyCharacteristic = [[CBMutableCharacteristic alloc] initWithType:myCharacteristicUUID properties:CBCharacteristicPropertyRead Value: myValue permissions:CBAttributePermissionsReadable];\n```\n> 注意:如果指定一个特性值.该值会缓存并且它的属性和许可被设置为可读.因此,如果你需要一个特性值可写,或者期望发布的服务特性能够被改变.必须指定value为nil.\n\n现在已经创建了一个可变特性,可以创建一个可变服务跟其相关联.按照下面方法做\n\n```\nmyService = [[CBMutableService alloc] initWithType:myServiceUUID primary:YES];\nmyService.characteristics = @[myCharacteristic];\n```\n### 发布服务和特性\n\n```\n[myPeripheralManager addService:myService];\n```\n\n当调用这个方法去发布服务时,外部设备管理者会通过他的代理对象调用 peripheralManager:didAddService:error: 方法.如果过发生错误或者无法发布服务,则实现该代理方法来获取错误原因.\n\n```\n- (void)peripheralManager:(CBPeripheralManager *)peripheral\n            didAddService:(CBService *)service\n                    error:(NSError *)error {\n \n    if (error) {\n        NSLog(@\"Error publishing service: %@\", [error localizedDescription]);\n    }\n    ...\n```\n\n> 当给外部设备的数据库发布一个服务和相关特性后,服务被缓存并且无法修改.\n\n\n### 广播服务\n\n```\n[myPeripheralManager startAdvertising:@{ CBAdvertisementDataServiceUUIDsKey : @[myFirstService.UUID, mySecondService.UUID]}];\n```\n\n当在本地外部设备发送广播时,外部设备管者的代理对象调用 peripheralManagerDidStartAdvertising:error: 方法.如果出现错误或者服务无法广播.实现该方法来获取错误信息.\n\n```\n- (void)peripheralManagerDidStartAdvertising:(CBPeripheralManager *)peripheral\n                                       error:(NSError *)error {\n \n    if (error) {\n        NSLog(@\"Error advertising: %@\", [error localizedDescription]);\n    }\n    ...\n```\n\n一旦广播数据开始,远程中心设备能够发现并和本地外部设备建立连接.\n\n### 响应中心设备的读写请求\n\n```\n- (void)peripheralManager:(CBPeripheralManager *)peripheral didReceiveReadRequest:(CBATTRequest *)request {\n    \n    if ([request.characteristic.UUID isEqual:myCharacteristic.UUID]) {\n        ...\n```\n\n如果特性的UUID匹配,下一步确定请求的索引位置是否超出特性值的边界.\n\n```\n    if (request.offset > myCharacteristic.value.length) {\n        \n        [myPeripheralManager respondToRequest:request withResult:CBATTErrorInvalidOffset];\n        \n        return;\n    }\n```\n\n加入请求的offset合格.现在给请求特性属性赋值.\n\n```\n    request.value = [myCharacteristic.value subdataWithRange:NSMakeRange(request.offset, myCharacteristic.value.length - request.offset)];\n```\n\n设置好值后,响应远程中心设备请求.\n\n```\n    [myPeripheralManager respondToRequest:request withResult:CBATTErrorSuccess];\n    ...\n```\n\n每调用 peripheralManager:didReceiveReadRequest: 方法一次,就会调用 respondToRequst:withResult: 一次.\n\n> 注意: 如果特性UUID不匹配或者无法完成读请求.调用 respondToRequest:withResult: 方法,并返回合适的错误原因.(CBATTError Constants)\n\n处理一个写入请求,直接将CBATTRequest 对象的值写入特性.\n\n```\n    myCharacteristic.value = request.value;\n```\n\n传入的写入请求数组中包含CBATTRequest 对象.每个对象写入特性都会调用  respondToRequest:withResult: 方法.\n\n```\n    [myPeripheralManager respondToRequest:[request objectAtIndeex:0] withResult:CBATTErrorSuccess];\n```\n\n### 给订阅的中心设备发送更新的特性值\n\n中心设备订阅通知后会调用该方法\n\n```\n- (void)peripheralManager:(CBPeripheralManager *)peripheral central:(CBCentral *)central didSubscribeToCharacteristic:(CBCharacteristic *)characteristic {\n    \n    NSLog(@\"Central subscribed to characteristic %@\", characteristic);\n    ...\n```\n\n```\n    NSData *updatedValue = //fetch the characteristic's new value \n    \n    BOOL didSendValue = [myPeripheralManager updateValue:updatedValue forCharacteristic:characteristic onSubscribedCentrals:nil];\n```\n\n## iOS Apps 中 Core Bluetooth 的后台处理\n\n对于iOS apps,了解app在后台还是前台运行非常重要.一个app在后台的行为必须不同于前台.因为系统提供的资源是有限的.对于在iOS上所有的后台操作讨论,请看[Background Execution](https://developer.apple.com/library/content/documentation/iPhone/Conceptual/iPhoneOSProgrammingGuide/BackgroundExecution/BackgroundExecution.html#//apple_ref/doc/uid/TP40007072-CH4) in [App Programming Guide for iOS](https://developer.apple.com/library/content/documentation/iPhone/Conceptual/iPhoneOSProgrammingGuide/Introduction/Introduction.html#//apple_ref/doc/uid/TP40007072)\n\n默认情况下,许多普通的Core Bluetooth 任务---中心设备和外部设备都有--- 在后台或者挂起模式下都是禁用的.也就是说,您需要声明您的app去支持Core Bluetooth后台执行模式,从而允许您的app能够从挂起状态中唤醒去处理某些蓝牙相关的事件.即使您的app不需要所有范围内的后台处理支持.当重要事件发生后仍然可以要求系统提示.\n\n即使您的app支持一种或者两种Core Bluetooth 后台执行模式,但是它也不能永远运行. 某些情况下,系统会中为了给前台运行的app释放内存从而终止您的app.从而使app激活的或者添加的链接丢失.\n\n### 只在前台使用Core Bluetooth的Apps\n\n绝大多数apps,除非您请求后台执行特定任务的许可,否则您的app短暂进入后台状态后就会转到挂起状态.在挂起状态下,您的app无法执行蓝牙相关任务.也不能感知任何蓝牙相关事件,直到它恢复到前台运行.\n\n在中心设备这边,只在前台执行的apps---那些没有声明支持Core Bluetooth后台执行模式任何一种的app,在后台状态或者挂起状态是无法浏览或者发现正在广播的外部设备. 在外部设备这边,当一个仅支持前台模式的app处于挂起状态时，所有蓝牙相关的事件发生时将通过系统添加到队列。并且当app恢复到前台时发送给它。也就是说，Core Bluetooth 提供一种方式，当某些中心设备角色事件发生时提醒用户。用户然后能够利用这些提示来决定是否一个特殊事件许可app返回到前台。\n您可以在调用CBCentralManager 类的 connectPeripheral:options: 方法使用下列的外部设备链接可选项，利用这些提示来链接一个远程外部设备。\n- CBConnectPeripheralOptionNotifyOnConnectionKey\n- CBConnectPeripheralOptionNotifyOnDisconnectionKey\n- CBConnectPeripheralOptionNotifyOnNotificationKey\n\n#### Core Bluetooth 后台执行模式\n\n当需要app在后台执行一些蓝牙相关任务时，必须在info.plist 文件中声明它支持一种蓝牙后台执行模式。\ninfo.plist 中文件 添加 key 为 UIBackgroundModes, 然后给一个数组中添加下面的字符串：\n- bluetooth-central\n- bluetooth-peripheral\n\n#### 蓝牙-中心设备后台执行模式\n\n记住在后台浏览外部设备的操作跟在前台时不同的。\n- CBCentralManagerScanOptionAllowDuplicatesKey 浏览可选键 被忽略，并且多个正在广播的外部设备发现合并成一个发现事件。\n- 如果所有正在扫描外部设备的app都在后台，中心设备的内部扫描广播的包也相继增长。结果，发现一个正在广播的外部设备的时间也会变长。\n这些变动帮助最小化无限广播的使用,并且提高电池使用寿命。\n\n#### 蓝牙-外部设备 后台执行模式\n当app处于后台状态 时，广播跟前台是不同的：\n- CBAdvertisementDataLocalNameKey 被忽略，本地外部设备的名字也不会被广播。\n- 所有包含在CBAdvertisementDataServiceUUIDsKey对应值下的服务UUIDs被放置在一个特殊的“溢出”区。只有一个iOS设备明确要求扫描特它们时，才能被发现。\n- 如果所有正在广播的apps在后台状态，外部设备发送广播的频率会降低。\n\n### 更好地使用后台执行模式\n\n由于处理蓝牙相关事件会使用无线电，无线电的使用会给电池寿命带来负面影响\n最小化在后台状态下的工作量。app被唤醒的蓝牙相关事件应该尽快处理以便它能再次挂起。\n任何声明支持核心蓝牙后台执行模式的app 必须遵循一些原则：\n- Apps 应该基于会话类 并且提供一个接口允许用户决定何时开始和结束蓝牙相关事件的发送。\n- 在被唤醒状态下，一个app有大约10秒时间去处理一项任务。 理想情况下，应该尽快处理任务并且允许再次进入后台。Apps 在后台执行过长时间会被系统限制或者杀死。\n- Apps 不应该将唤醒作为一个机会去处理跟唤醒不相关的任务。\n\n### 在后台执行长时间操作\n\n#### 状态保存和恢复\n对于一个给定的CBCentralManager对象， 系统记录下面内容：\n- 中心管理者的当时正在搜索的服务（并且包含开始扫描时所有指定扫描的可选项）\n- 中心管理者当时正在尝试连接或者已经连接的外部设备\n- 中心管理者当时订阅的特性\n\n对于CBPeripheralManager对象，系统记录下面内容：\n- 外部设备管理者当时正在广播的数据\n- 外部设备管理者发布给设备数据库的服务\n- 订阅外部设备服务特性值的中心设备。\n\n在创建中心管理者对象的时候就需要添加状态保存和恢复策略\n```\n   myCentralManager = [[CBCentralManager alloc] initWithDelegate:self queue:nil options:@{ CBCentralManagerOptionRestoreIdentifierKey : @“myCentralManagerIdentifer”}];\n```\n外部设备管理者使用CBPeripheralManagerOptionRestoreIdentiferKey 来初始化。\n\napp重新启动时，可以获取所有系统保存的唯一标识\n\n```\n- (BOOL)application:(UIApplication *)application\ndidFinishLaunchingWithOptions:(NSDictionary *)launchOptions {\n \n    NSArray *centralManagerIdentifiers =\n        launchOptions[UIApplicationLaunchOptionsBluetoothCentralsKey];\n    ...\n```\n\n#### 实现合适的恢复代理方法\n\n> 重要:对于存储状态并需要恢复状态的app,当app重启进入后台处理蓝牙相关事件时,先调用 centralManager:willRestoreState: 和 peripheralManager:willRestoreState: 方法.如果没有保存状态,则调用 centralManagerDidUpdateState: 和 peripheralManagerDidUpdateState: 代理方法.\n\n```\n- (void)centralManager:(CBCentralManager *)central willRestoreState:(NSDictionary *)state{\n    \n    NSArray *peripherals = state[CBCentralManagerRestoredStatePeripheralKey];\n    ...\n```\n\n#### 更新初始化进程\n\n```\n    NSUInteger serviceUUIDIndex =\n        [peripheral.services indexOfObjectPassingTest:^BOOL(CBService *obj,\n        NSUInteger index, BOOL *stop) {\n            return [obj.UUID isEqual:myServiceUUIDString];\n        }];\n \n    if (serviceUUIDIndex == NSNotFound) {\n        [peripheral discoverServices:@[myServiceUUIDString]];\n        ...\n```\n\n## 中心设备和远程外部设备交互最佳实践\n\n### 注意广播的使用和电量消耗\n\n尽可能最小化广播的使用.因为无线广播会给iOS设备硬件的电池寿命造成负面影响.\n\n- 只有需要的时候才扫描设备\n- 只有必要时才去指明CBCentralManagerScanOptionAllowDuplicatesKey Option\n- 正确地浏览外部设备数据\n```\n    [peripheral discoverServices:@[firstServiceUUID, secondServiceUUID]];\n```\n查找服务特性也同样适用这种方式.\n- 订阅经常变动的特性值\n- 所有需求数据满足时取消设备连接\n```\n    [myCentralManager cancelPeripheralConnection:peripheral];\n```\n\n### 外部设备重连\n\n使用下面三种方式去重连外部设备:\n\n- 取回已知外部设备列表 \n使用 retrievePeripheralsWithIdentifiers: 方法.\n- 取回当前系统连接的外部设备列表 \n使用 retriveConnectedPeripheralsWithServices: 方法.如果要查找的外部设备在列表中,连接它.\n- 扫描并查找外部设备. \n使用 scanForPeripheralsWithServices:options 方法.如果找到.连接它.\n\n下面是一个重连的流程示例:\n![重连流程](http://upload-images.jianshu.io/upload_images/3340896-6d4adcc223f2f43a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n## 设置本地设备作为外部设备最佳实践\n\n### 广播时要考虑的内容 \n\n遵循广播数据限制.\n当创建一个广播字典时,只能指定 CBAdvertisementDataLocalNameKey, CBAdvertisementDataServiceUUIDsKey.如果指定其他key会报错.\n同样广播数据占用的空间也要限制.至多使用28字节的空间来初始化广播数据.\n\n仅在需要的时候去广播数据,使用下面方法来停止广播\n```\n    [myPeripheralManager stopAdvetising];\n```\n让用户来决定何时广播\n### 配置外部设备特性\n\n下面两个分组帮助我们在需要执行以下任务是提供一些指导:\n- 允许链接的中心设备订阅您的特性\n- 保护敏特性值,防止未配对中心设备的访问\n\n配置特性来支持通知\n```\nmyCharacteristic = [[CBMutableCharacteristic alloc] initWithType:myCharacteristicUUID properties:CBCharacteristicPropertyRead | CBCharacteristicPropertyNotify value:nil permissions:CBAttributePermissionsReadable];\n\n```\n\n要求一个配对设备来访问敏感数据\n```\n    emailCharacterristic = [[CBMutableCharacteristic alloc] initWithType:emailCharacteristicUUID properties:CBCharacteristicPropertyRead | CBCharacteristicPropertyNotifyEncryptionRequired value:nil permission:CBAttributePermissionsReadEncryptionRequired];\n\n```\n\n# 项目Demo\n[蓝牙4.0 Core Bluetooth Demo](https://github.com/913868456/OCDemo)\n上面链接是 **Core Bluetooth** 编程的Demo，能够对**Core Bluetooth** 有一个基本的了解。本项目使用一个蓝牙手环作为测试设备，读取蓝牙手环内的一些服务。如果想要使用其他蓝牙设备运行项目，把 **\"MH08\"** 替换为自己的设备名称前缀即可。\n```\n if ([peripheral.name hasPrefix:@\"MH08\"] ) {\n        self.bandPeripheral = peripheral;        //强引用外部设备对象,否则会释放\n        [self.centralManager stopScan];          //发现指定外设后,为了保护电池寿命和节约电量,中心管理者停止扫描\n        NSLog(@\"链接外部设备: %@\", peripheral.name);\n        [self.centralManager connectPeripheral:peripheral options:nil];\n    }\n```\n# GitHub 优秀开源\n由于使用官方提供的API编程特别凌乱，所以Github上有优秀开发者对其进行了封装。\n详情请看[BabyBluetooth ](https://github.com/coolnameismy/BabyBluetooth)\n\n# 参考资料\n[Core Bluetooth Programming Guide](https://developer.apple.com/library/content/documentation/NetworkingInternetWeb/Conceptual/CoreBluetooth_concepts/AboutCoreBluetooth/Introduction.html#//apple_ref/doc/uid/TP40013257-CH1-SW1)\n","source":"_posts/iOS/Core-Bluetooth-编程指南.md","raw":"---\ntitle:  CoreBluetooth 编程指南\ndate: 2018-01-03 19:02\ncategories:\n- iOS\ntags: \n- CoreBluetooth \n---\n## 介绍\n\nCore Bluetooth 框架给iOS和Mac apps 提供与外部蓝牙设备交互的能力.例如,您的app能够发现,扫描,并且跟外部设备交互.比如心率计和数码恒温计.同样 Mac 和 iOS 设备也可以作为低功耗外部设备,给其他设备提供数据.\n\n在Core Bluetooth 中,中心设备和外部设备作为主要参与者.通常情况下我们通过一个app来实现中心设备角色,Core Bluetooth 也可以将我们的本地设备作为外部设备角色来实现.\n\n### iOS App 状态影响蓝牙行为\n\n当app处于后台或者挂起状态时,这种情况会影响蓝牙相关功能.默认情况下,app在后台或者挂起状态时,不能执行蓝牙任务.如果想要app在后台执行蓝牙任务,可以声明该app支持Core Bluetooth后台执行模式中的一项或者两项都支持.当app处于后台状态时,同一蓝牙任务的操作是不同的.在设计app时,要考虑这些差异.\n\n即使app支持后台操作,当内存不足时系统会随时终止后台应用,来给前台运行的app提供内存空间.iOS 7后,Core Bluetooth支持保存中心设备和外部设备管理者对象的状态.可以使用该特性去支持长时间调用蓝牙设备的操作.\n\n### 遵循最佳实践来提高用户体验\n\n由于无线广播会给设备电池造成不利影响.因此,设计app的时候尽可能减少无线广播的使用.遵循最佳实践来减少该方面的不利影响同时提高用户的体验.\n\n\n## Core Bluetooth 概述\n\n本章节主要介绍开始使用Core Bluetooth 开发时需要了解的专业词汇和概念.\n\n> 重要: 一个 iOS app 在 iOS 10.0 之后的版本,必须在info.plist 文件中描述需要访问的数据类型,否则会崩溃.访问外部设备的指定数据,在info.plist 文件中必须包含 NSBluetoothPeripheralUsageDescription.\n\n### 中心设备和外部设备,以及他们在蓝牙通信中的角色\n\n中心设备和外部设备是低功耗蓝牙通信中的来个主要参与者.中心设备使用来自与外部设备的信息去完成某项特定任务.下面的例子中,表示一个mac 或者 iOS app 用一种对用户来讲更友好的方式来展示来自于心率检测器的信息.\n\n![image.png](http://upload-images.jianshu.io/upload_images/3340896-c9641636941a7f71.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n#### 中心设备发现并连接外围正在广播的设备\n\n外部设备以 advertising packet 的格式来发送广播.广播数据中包含外部设备的名称和主要功能.一个中心设备可用浏览和听取正在广播的外部设备内容.一个中心设备可以请求连接任何发现正在广播的外部设备.\n\n![image.png](http://upload-images.jianshu.io/upload_images/3340896-5c28cac2a725ceed.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n#### 一个外部设备的数据如何构建\n\n外部设备包含一项或者多项服务.一个服务是一个数据集合.举例子,一个心率计的服务可以用来显示来自于心率传感器的的心率数据.\n\n服务本身由特性或者其中包含的其他服务组成.一个特性提供外部设备服务的详细信息.举例子,心率服务包含两个特性,一个特性描述设备传感器的监听位置.另外一个特性传输测量的数据.\n\n![image.png](http://upload-images.jianshu.io/upload_images/3340896-11772f3214f18ab9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n#### 中心设备扫描并且跟一个外部设备数据交互\n\n一个中心设备和外部设备成功建立连接后,可以发现外部设备提供的所有服务和特性.\n中心设备可以通过读写服务特性的值来跟外部设备的服务进行交互.举例来说,app 请求当前房间的室温.或者提供给恒温计一个值来设定室温.\n\n### 中心设备,外部设备,以及外部设备数据如何表示\n\n本地中心设备管理者通过 CBCentralManager 对象表示.这个对象用来管理远程外部设备的遍历,发现,连接正在发送广播的外部设备.\n\n![Core Bluetooth objects on the central side](http://upload-images.jianshu.io/upload_images/3340896-cc9e991217247c05.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n远程外部设备 用CBPeripheral对象来表示, 它的数据通过 CBService 和 CBCharacteristic 对象来表示.\n![image.png](http://upload-images.jianshu.io/upload_images/3340896-0fd143eeaa33aada.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n外部设备管理者 用CBPeripheralManager对象来表示. 这些对象用来管理发布的服务和相关特性.并且通过广播来给远程中心设备(CBCentral 对象)发送服务. Peripheral manager对象也用来响应远程中心设备的读写请求.\n![image.png](http://upload-images.jianshu.io/upload_images/3340896-3b76d790666594fe.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n外部设备管理者(CBPeripheralManger)的数据通过CBMutableService 和 CBMutableCharacteristic 对象来表示.\n![A local peripheral's tree of services and characteristics](http://upload-images.jianshu.io/upload_images/3340896-6bb597fc20300ec7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n## 执行中心角色任务\n\n本节学习内容:\n\n- 启动一个中心设备管理者对象\n- 发现并链接正在广播的外部设备\n- 扫描链接的外部设备数据\n- 给一个外部设备服务特性值发送读写请求\n- 订阅一个特性值的变动通知\n\n### 启动一个中心设备管理者\n\n创建CBCentralManager\n```\nmyCentralManager = [[CBCentralManager alloc] initWithDelegate: self queue:nil options:nil];\n```\nself 必须实现 centralMangerDidUpdateState: 代理方法.更多内容请看[CBCentralManagerDelegate Protocol Reference](https://developer.apple.com/documentation/corebluetooth/cbcentralmanagerdelegate)\n\n### 发现正在广播的外部设备\n\n```\n[myCentralManager scanForPeripheralsWithServices:nil options:nil];\n```\n\n> 注意: 如果给第一个参数指定为nil,central manager返回所有发现的外部设备.在真实情况中,一般会指定一个CBUUID对象组成的数组,每个对象表示一个服务的唯一标识.当指定好UUID对象数组后,central manager 仅返回正在广播相关服务的外部设备.浏览最感兴趣的外部设备.\nUUIDs,和CBUUID对象详细内容请看[Services and Characteristics Are Identified by UUIDs](https://developer.apple.com/library/content/documentation/NetworkingInternetWeb/Conceptual/CoreBluetooth_concepts/PerformingCommonPeripheralRoleTasks/PerformingCommonPeripheralRoleTasks.html#//apple_ref/doc/uid/TP40013257-CH4-SW8)\n\ncentral manager 每次发现外部设备,就会调用代理对象的  cetralManager:didDiscoverPeripheral:advertisementData:RSSI: 方法.新发现的外部设备以 CBPeripheral 对象返回.如果打算链接发现的外部设备,给该对象一个强引用,系统就不会释放它.\n\n```\n- (void)centralManager:(CBCentralManager *)central didDiscoverPeripheral:(CBPeripheral *)peripheral advertisementData:(NSDictionary *)advertisementData RSSI:(NSNUmber *)RSSI {\n    NSLog(@\"Discovered %@\", peripheral.name);\n    self.discoverdPeripheral = peripheral;\n    ...\n```\n\n如果希望链接多个设备,需要用一个NSArray来存储发现的外部设备.一旦所有想连接的设备都被发现,停止浏览其他设备来节省电量:\n\n```\n[myCentralManager stopScan];\n```\n\n### 链接发现的外部设备\n\n```\n[myCentralManager connectPeripheral:peripheral options:nil];\n```\n\n如果链接请求成功,central manager 调用代理对象的centralManager:didConnectPeripheral:方法.在跟外部设备交互前,设置它的代理来确保代理接受到了合适的回调:\n\n```\n- (void)centralManager:(CBCentralManager *)central didConnectPeripheral:(CBPeripheral *)peripheral {\n    \n    NSLog(@\"Peripheral connected\");\n    peripheral.delegate = self;\n    ...\n```\n\n### 发现链接外部设备的服务\n\n跟一个外部设备建立连接后,可以浏览它的数据.首先浏览外部设备提供的可用服务.由于外部设备发送广播的数据限制,会发现一个外部设备提供的服务比广播的更多.可以使用discoverServices: 方法来发现一个外部设备提供的所有服务.\n\n```\n[peripheral discoverServices:nil];\n```\n>注意: 在一个app中,一般不给参数传nil,因为这样会返回所有的可用服务.由于一个外部设备有许多不相关的服务,发现所有可用服务不仅浪费电量而且浪费时间.因此,指定服务的UUIDs来发现指定的服务.\n\n当指定的服务发现后,连接的外部设备(CBPeripheral对象)调用代理对象的 peripheral:didDiscoverServices: 方法.Core Bluetooth 创建一个CBService数组---\n\n```\n\n- (void)peripheral:(CBPeripheral *)peripheral didDiscoverServices:(NSerror *)error{\n    \n    for (CBService *service in peripheral.services) {\n        \n        NSLog(@\"Discovered service %@\", service);\n        ...\n    }\n    ...\n```\n\n### 发现一个服务的特性\n\n```\nNSLog (@\"Discovering characteristics for service %@\", interestingService);\n[peripheral discoverCharacteristics:nil forService:interestingService];\n```\n\n> 注意: 真实环境中,第一个参数一般不传nil,通常指定想要找的特性UUIDs\n\n当指定服务的特性被发现后,外部设备调用代理对象的 peripheral:didDiscoverCharacteristicsForService:error: 方法.Core Bluetooth创建一个包含CBCharacteristic对象的数组来包含所有发现的特性.\n\n```\n- (void)peripheral:(CBPeripheral *)peripheral didDiscoverCharacteristicsForService:(CBService *)service error:(NSError *)error {\n    \n    for (CBCharacteristic *characteristic in service.characteristics) {\n        \n        NSLog(@\"Discovered characteristic %@\", characteristic);\n        ...\n    }\n    ...\n```\n### 获取一个特性的值\n\n直接读取特性的value或者订阅它来获取特性的值.\n\n#### 读取特性值\n\n```\nNSLog(@\"Reading value for characteristic %@\", interestingCharacteristic);\n[peripheral readValueForCharacteristic:interestingCharacteristic];\n```\n\n当尝试读取特性值时,外部设备调用代理对象的 peripheral:didUpdateValueForCharacteristic:error:方法来获取特性值.\n\n```\n- (void)peripheral: (CBPeripheral *)peripheral didUpdateValueForCharacteristic:(CBCharacteristic *)characteristic error:(NSError *)error {\n    \n    NSData *data = characteristic.value;\n    //parse the data as needed \n    ...\n```\n\n> 注意:不是所有的特性都是可读的.通过CBCharacteristicPropertyRead属性常量来检测特性是否可读.如果不可读,会返回适当的错误.\n\n#### 订阅一个特性值\n\n```\n[peripheral setNotifyValue:YES forCharacteristic: interestingCharacteristic];\n```\n\n```\n当订阅失败时,可以实现下面方法来获取订阅失败原因.\n- (void)peripheral:(CBPeripheral *)peripheral didUpdateNotificationStateForCharacteristic:(CBCharacteristic *)characteristic error:(NSError *)error {\n    \n    if (error) {\n        \n       NSLog(@\"Error changing notification state: %@\", [error localizedDescription]) ;\n    }\n    ...\n```\n\n> 注意:不是所有的特性都可订阅.可以通过属性的CBCharacteristicPropertyNotify或者CBCharacteristicPropertyIndicate常量来检测属性是否可被订阅.\n\n### 给一个特性写入值\n\n```\n\nNSLog(@\"Wrriting value for characteristic %@\", interestingCharacteristic);\n[peripheral writeValue:dataToWrite forCharacteristic:interestingCharacteristic type:CBCharacteristicWriteWithResponse];\n\n```\n代理对象调用下面方法,通过CBCharacteristicWriteWithResponse来告诉app写入是否成功.\n```\n- (void)peripheral:(CBPeripheral *)peripheral\ndidWriteValueForCharacteristic:(CBCharacteristic *)characteristic\n             error:(NSError *)error {\n \n    if (error) {\n        NSLog(@\"Error writing characteristic value: %@\",\n            [error localizedDescription]);\n    }\n    ...\n```\n\n> 注意:特性仅支持特定的写入类型.可以通过一个特性的CBCharacteristicPropertyWriteWithoutResponse 或者 CBCharacteristicPropertyWrite 常量来检查支持的写入类型.\n\n## 执行外部角色任务\n\n本节学习内容:\n\n- 启动一个外部设备管理对象\n- 设置本地外部设备的服务和特性\n- 给设备的本地数据库发布服务和特性\n- 广播服务\n- 响应一个连接的中心设备的读写请求\n- 给订阅的中心设备发送更新后的特性值\n\n\n### 启动一个外部设备管理者\n\n```\nmyPeripheralManager = [[CBPeripheralManager alloc] initWithDelegate:self queue:nil options: nil];\n```\n\n创建CBPeripheralManager对象后 self 必须实现 peripheralMangagerDidUpdateState: 方法.  详细内容请看 [CBPeripheralManagerDelegate Protocol Reference]() \n\n### 设置外部设备管理者的服务和特性\n\n一个本地外部设备服务和特性的数据库以类似于树状的方式组成.必须以这种方式去组织本地外部设备的服务和特性. 在执行这些任务中首先要理解如何识别这些服务和特性.\n\n#### 服务和特性通过UUIDs来识别\n\niOS中通过CBUUID对象来表示外部设备指定的服务和特性.比如,128位的UUID心率服务可以使用CBUUID 对象的 UUIDWithString 方法来表示预定义的16位UUID.\n\n```\nCBUUID *heartRateServiceUUID = [CBUUID UUIDWithString: @\"180D\"];\n```\n\n当从一个预定义的16位UUID中创建一个CBUUID对象时,Core Bluetooth 会用Bluetooth base UUID 预填128位UUID的剩下的部分.\n\n#### 创建自有的UUIDs来自定义服务和特性\n\n使用命令行实用工具 uuidgen 很容易生成一个128位的UUIDs.\n\n```\n$ uuidgen \n71DA3FD1-7E10-41C1-B16F-4430B506CDE7\n```\n然后使用这个UUID去创建一个CBUUID对象\n```\nCBUID *myCustomServiceUUID = [CBUUID UUIDWithString:@\"71DA3FD1-7E10-41C1-B16F-4430B506CDE7\"];\n```\n\n#### 创建服务和特性树\n\n```\nmyCharacteristic = [[CBMutableCharacteristic alloc] initWithType:myCharacteristicUUID properties:CBCharacteristicPropertyRead Value: myValue permissions:CBAttributePermissionsReadable];\n```\n> 注意:如果指定一个特性值.该值会缓存并且它的属性和许可被设置为可读.因此,如果你需要一个特性值可写,或者期望发布的服务特性能够被改变.必须指定value为nil.\n\n现在已经创建了一个可变特性,可以创建一个可变服务跟其相关联.按照下面方法做\n\n```\nmyService = [[CBMutableService alloc] initWithType:myServiceUUID primary:YES];\nmyService.characteristics = @[myCharacteristic];\n```\n### 发布服务和特性\n\n```\n[myPeripheralManager addService:myService];\n```\n\n当调用这个方法去发布服务时,外部设备管理者会通过他的代理对象调用 peripheralManager:didAddService:error: 方法.如果过发生错误或者无法发布服务,则实现该代理方法来获取错误原因.\n\n```\n- (void)peripheralManager:(CBPeripheralManager *)peripheral\n            didAddService:(CBService *)service\n                    error:(NSError *)error {\n \n    if (error) {\n        NSLog(@\"Error publishing service: %@\", [error localizedDescription]);\n    }\n    ...\n```\n\n> 当给外部设备的数据库发布一个服务和相关特性后,服务被缓存并且无法修改.\n\n\n### 广播服务\n\n```\n[myPeripheralManager startAdvertising:@{ CBAdvertisementDataServiceUUIDsKey : @[myFirstService.UUID, mySecondService.UUID]}];\n```\n\n当在本地外部设备发送广播时,外部设备管者的代理对象调用 peripheralManagerDidStartAdvertising:error: 方法.如果出现错误或者服务无法广播.实现该方法来获取错误信息.\n\n```\n- (void)peripheralManagerDidStartAdvertising:(CBPeripheralManager *)peripheral\n                                       error:(NSError *)error {\n \n    if (error) {\n        NSLog(@\"Error advertising: %@\", [error localizedDescription]);\n    }\n    ...\n```\n\n一旦广播数据开始,远程中心设备能够发现并和本地外部设备建立连接.\n\n### 响应中心设备的读写请求\n\n```\n- (void)peripheralManager:(CBPeripheralManager *)peripheral didReceiveReadRequest:(CBATTRequest *)request {\n    \n    if ([request.characteristic.UUID isEqual:myCharacteristic.UUID]) {\n        ...\n```\n\n如果特性的UUID匹配,下一步确定请求的索引位置是否超出特性值的边界.\n\n```\n    if (request.offset > myCharacteristic.value.length) {\n        \n        [myPeripheralManager respondToRequest:request withResult:CBATTErrorInvalidOffset];\n        \n        return;\n    }\n```\n\n加入请求的offset合格.现在给请求特性属性赋值.\n\n```\n    request.value = [myCharacteristic.value subdataWithRange:NSMakeRange(request.offset, myCharacteristic.value.length - request.offset)];\n```\n\n设置好值后,响应远程中心设备请求.\n\n```\n    [myPeripheralManager respondToRequest:request withResult:CBATTErrorSuccess];\n    ...\n```\n\n每调用 peripheralManager:didReceiveReadRequest: 方法一次,就会调用 respondToRequst:withResult: 一次.\n\n> 注意: 如果特性UUID不匹配或者无法完成读请求.调用 respondToRequest:withResult: 方法,并返回合适的错误原因.(CBATTError Constants)\n\n处理一个写入请求,直接将CBATTRequest 对象的值写入特性.\n\n```\n    myCharacteristic.value = request.value;\n```\n\n传入的写入请求数组中包含CBATTRequest 对象.每个对象写入特性都会调用  respondToRequest:withResult: 方法.\n\n```\n    [myPeripheralManager respondToRequest:[request objectAtIndeex:0] withResult:CBATTErrorSuccess];\n```\n\n### 给订阅的中心设备发送更新的特性值\n\n中心设备订阅通知后会调用该方法\n\n```\n- (void)peripheralManager:(CBPeripheralManager *)peripheral central:(CBCentral *)central didSubscribeToCharacteristic:(CBCharacteristic *)characteristic {\n    \n    NSLog(@\"Central subscribed to characteristic %@\", characteristic);\n    ...\n```\n\n```\n    NSData *updatedValue = //fetch the characteristic's new value \n    \n    BOOL didSendValue = [myPeripheralManager updateValue:updatedValue forCharacteristic:characteristic onSubscribedCentrals:nil];\n```\n\n## iOS Apps 中 Core Bluetooth 的后台处理\n\n对于iOS apps,了解app在后台还是前台运行非常重要.一个app在后台的行为必须不同于前台.因为系统提供的资源是有限的.对于在iOS上所有的后台操作讨论,请看[Background Execution](https://developer.apple.com/library/content/documentation/iPhone/Conceptual/iPhoneOSProgrammingGuide/BackgroundExecution/BackgroundExecution.html#//apple_ref/doc/uid/TP40007072-CH4) in [App Programming Guide for iOS](https://developer.apple.com/library/content/documentation/iPhone/Conceptual/iPhoneOSProgrammingGuide/Introduction/Introduction.html#//apple_ref/doc/uid/TP40007072)\n\n默认情况下,许多普通的Core Bluetooth 任务---中心设备和外部设备都有--- 在后台或者挂起模式下都是禁用的.也就是说,您需要声明您的app去支持Core Bluetooth后台执行模式,从而允许您的app能够从挂起状态中唤醒去处理某些蓝牙相关的事件.即使您的app不需要所有范围内的后台处理支持.当重要事件发生后仍然可以要求系统提示.\n\n即使您的app支持一种或者两种Core Bluetooth 后台执行模式,但是它也不能永远运行. 某些情况下,系统会中为了给前台运行的app释放内存从而终止您的app.从而使app激活的或者添加的链接丢失.\n\n### 只在前台使用Core Bluetooth的Apps\n\n绝大多数apps,除非您请求后台执行特定任务的许可,否则您的app短暂进入后台状态后就会转到挂起状态.在挂起状态下,您的app无法执行蓝牙相关任务.也不能感知任何蓝牙相关事件,直到它恢复到前台运行.\n\n在中心设备这边,只在前台执行的apps---那些没有声明支持Core Bluetooth后台执行模式任何一种的app,在后台状态或者挂起状态是无法浏览或者发现正在广播的外部设备. 在外部设备这边,当一个仅支持前台模式的app处于挂起状态时，所有蓝牙相关的事件发生时将通过系统添加到队列。并且当app恢复到前台时发送给它。也就是说，Core Bluetooth 提供一种方式，当某些中心设备角色事件发生时提醒用户。用户然后能够利用这些提示来决定是否一个特殊事件许可app返回到前台。\n您可以在调用CBCentralManager 类的 connectPeripheral:options: 方法使用下列的外部设备链接可选项，利用这些提示来链接一个远程外部设备。\n- CBConnectPeripheralOptionNotifyOnConnectionKey\n- CBConnectPeripheralOptionNotifyOnDisconnectionKey\n- CBConnectPeripheralOptionNotifyOnNotificationKey\n\n#### Core Bluetooth 后台执行模式\n\n当需要app在后台执行一些蓝牙相关任务时，必须在info.plist 文件中声明它支持一种蓝牙后台执行模式。\ninfo.plist 中文件 添加 key 为 UIBackgroundModes, 然后给一个数组中添加下面的字符串：\n- bluetooth-central\n- bluetooth-peripheral\n\n#### 蓝牙-中心设备后台执行模式\n\n记住在后台浏览外部设备的操作跟在前台时不同的。\n- CBCentralManagerScanOptionAllowDuplicatesKey 浏览可选键 被忽略，并且多个正在广播的外部设备发现合并成一个发现事件。\n- 如果所有正在扫描外部设备的app都在后台，中心设备的内部扫描广播的包也相继增长。结果，发现一个正在广播的外部设备的时间也会变长。\n这些变动帮助最小化无限广播的使用,并且提高电池使用寿命。\n\n#### 蓝牙-外部设备 后台执行模式\n当app处于后台状态 时，广播跟前台是不同的：\n- CBAdvertisementDataLocalNameKey 被忽略，本地外部设备的名字也不会被广播。\n- 所有包含在CBAdvertisementDataServiceUUIDsKey对应值下的服务UUIDs被放置在一个特殊的“溢出”区。只有一个iOS设备明确要求扫描特它们时，才能被发现。\n- 如果所有正在广播的apps在后台状态，外部设备发送广播的频率会降低。\n\n### 更好地使用后台执行模式\n\n由于处理蓝牙相关事件会使用无线电，无线电的使用会给电池寿命带来负面影响\n最小化在后台状态下的工作量。app被唤醒的蓝牙相关事件应该尽快处理以便它能再次挂起。\n任何声明支持核心蓝牙后台执行模式的app 必须遵循一些原则：\n- Apps 应该基于会话类 并且提供一个接口允许用户决定何时开始和结束蓝牙相关事件的发送。\n- 在被唤醒状态下，一个app有大约10秒时间去处理一项任务。 理想情况下，应该尽快处理任务并且允许再次进入后台。Apps 在后台执行过长时间会被系统限制或者杀死。\n- Apps 不应该将唤醒作为一个机会去处理跟唤醒不相关的任务。\n\n### 在后台执行长时间操作\n\n#### 状态保存和恢复\n对于一个给定的CBCentralManager对象， 系统记录下面内容：\n- 中心管理者的当时正在搜索的服务（并且包含开始扫描时所有指定扫描的可选项）\n- 中心管理者当时正在尝试连接或者已经连接的外部设备\n- 中心管理者当时订阅的特性\n\n对于CBPeripheralManager对象，系统记录下面内容：\n- 外部设备管理者当时正在广播的数据\n- 外部设备管理者发布给设备数据库的服务\n- 订阅外部设备服务特性值的中心设备。\n\n在创建中心管理者对象的时候就需要添加状态保存和恢复策略\n```\n   myCentralManager = [[CBCentralManager alloc] initWithDelegate:self queue:nil options:@{ CBCentralManagerOptionRestoreIdentifierKey : @“myCentralManagerIdentifer”}];\n```\n外部设备管理者使用CBPeripheralManagerOptionRestoreIdentiferKey 来初始化。\n\napp重新启动时，可以获取所有系统保存的唯一标识\n\n```\n- (BOOL)application:(UIApplication *)application\ndidFinishLaunchingWithOptions:(NSDictionary *)launchOptions {\n \n    NSArray *centralManagerIdentifiers =\n        launchOptions[UIApplicationLaunchOptionsBluetoothCentralsKey];\n    ...\n```\n\n#### 实现合适的恢复代理方法\n\n> 重要:对于存储状态并需要恢复状态的app,当app重启进入后台处理蓝牙相关事件时,先调用 centralManager:willRestoreState: 和 peripheralManager:willRestoreState: 方法.如果没有保存状态,则调用 centralManagerDidUpdateState: 和 peripheralManagerDidUpdateState: 代理方法.\n\n```\n- (void)centralManager:(CBCentralManager *)central willRestoreState:(NSDictionary *)state{\n    \n    NSArray *peripherals = state[CBCentralManagerRestoredStatePeripheralKey];\n    ...\n```\n\n#### 更新初始化进程\n\n```\n    NSUInteger serviceUUIDIndex =\n        [peripheral.services indexOfObjectPassingTest:^BOOL(CBService *obj,\n        NSUInteger index, BOOL *stop) {\n            return [obj.UUID isEqual:myServiceUUIDString];\n        }];\n \n    if (serviceUUIDIndex == NSNotFound) {\n        [peripheral discoverServices:@[myServiceUUIDString]];\n        ...\n```\n\n## 中心设备和远程外部设备交互最佳实践\n\n### 注意广播的使用和电量消耗\n\n尽可能最小化广播的使用.因为无线广播会给iOS设备硬件的电池寿命造成负面影响.\n\n- 只有需要的时候才扫描设备\n- 只有必要时才去指明CBCentralManagerScanOptionAllowDuplicatesKey Option\n- 正确地浏览外部设备数据\n```\n    [peripheral discoverServices:@[firstServiceUUID, secondServiceUUID]];\n```\n查找服务特性也同样适用这种方式.\n- 订阅经常变动的特性值\n- 所有需求数据满足时取消设备连接\n```\n    [myCentralManager cancelPeripheralConnection:peripheral];\n```\n\n### 外部设备重连\n\n使用下面三种方式去重连外部设备:\n\n- 取回已知外部设备列表 \n使用 retrievePeripheralsWithIdentifiers: 方法.\n- 取回当前系统连接的外部设备列表 \n使用 retriveConnectedPeripheralsWithServices: 方法.如果要查找的外部设备在列表中,连接它.\n- 扫描并查找外部设备. \n使用 scanForPeripheralsWithServices:options 方法.如果找到.连接它.\n\n下面是一个重连的流程示例:\n![重连流程](http://upload-images.jianshu.io/upload_images/3340896-6d4adcc223f2f43a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n## 设置本地设备作为外部设备最佳实践\n\n### 广播时要考虑的内容 \n\n遵循广播数据限制.\n当创建一个广播字典时,只能指定 CBAdvertisementDataLocalNameKey, CBAdvertisementDataServiceUUIDsKey.如果指定其他key会报错.\n同样广播数据占用的空间也要限制.至多使用28字节的空间来初始化广播数据.\n\n仅在需要的时候去广播数据,使用下面方法来停止广播\n```\n    [myPeripheralManager stopAdvetising];\n```\n让用户来决定何时广播\n### 配置外部设备特性\n\n下面两个分组帮助我们在需要执行以下任务是提供一些指导:\n- 允许链接的中心设备订阅您的特性\n- 保护敏特性值,防止未配对中心设备的访问\n\n配置特性来支持通知\n```\nmyCharacteristic = [[CBMutableCharacteristic alloc] initWithType:myCharacteristicUUID properties:CBCharacteristicPropertyRead | CBCharacteristicPropertyNotify value:nil permissions:CBAttributePermissionsReadable];\n\n```\n\n要求一个配对设备来访问敏感数据\n```\n    emailCharacterristic = [[CBMutableCharacteristic alloc] initWithType:emailCharacteristicUUID properties:CBCharacteristicPropertyRead | CBCharacteristicPropertyNotifyEncryptionRequired value:nil permission:CBAttributePermissionsReadEncryptionRequired];\n\n```\n\n# 项目Demo\n[蓝牙4.0 Core Bluetooth Demo](https://github.com/913868456/OCDemo)\n上面链接是 **Core Bluetooth** 编程的Demo，能够对**Core Bluetooth** 有一个基本的了解。本项目使用一个蓝牙手环作为测试设备，读取蓝牙手环内的一些服务。如果想要使用其他蓝牙设备运行项目，把 **\"MH08\"** 替换为自己的设备名称前缀即可。\n```\n if ([peripheral.name hasPrefix:@\"MH08\"] ) {\n        self.bandPeripheral = peripheral;        //强引用外部设备对象,否则会释放\n        [self.centralManager stopScan];          //发现指定外设后,为了保护电池寿命和节约电量,中心管理者停止扫描\n        NSLog(@\"链接外部设备: %@\", peripheral.name);\n        [self.centralManager connectPeripheral:peripheral options:nil];\n    }\n```\n# GitHub 优秀开源\n由于使用官方提供的API编程特别凌乱，所以Github上有优秀开发者对其进行了封装。\n详情请看[BabyBluetooth ](https://github.com/coolnameismy/BabyBluetooth)\n\n# 参考资料\n[Core Bluetooth Programming Guide](https://developer.apple.com/library/content/documentation/NetworkingInternetWeb/Conceptual/CoreBluetooth_concepts/AboutCoreBluetooth/Introduction.html#//apple_ref/doc/uid/TP40013257-CH1-SW1)\n","slug":"iOS/Core-Bluetooth-编程指南","published":1,"updated":"2020-09-27T11:14:01.903Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgq6gnz90081t29k8jv36t97","content":"<h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><p>Core Bluetooth 框架给iOS和Mac apps 提供与外部蓝牙设备交互的能力.例如,您的app能够发现,扫描,并且跟外部设备交互.比如心率计和数码恒温计.同样 Mac 和 iOS 设备也可以作为低功耗外部设备,给其他设备提供数据.</p>\n<p>在Core Bluetooth 中,中心设备和外部设备作为主要参与者.通常情况下我们通过一个app来实现中心设备角色,Core Bluetooth 也可以将我们的本地设备作为外部设备角色来实现.</p>\n<h3 id=\"iOS-App-状态影响蓝牙行为\"><a href=\"#iOS-App-状态影响蓝牙行为\" class=\"headerlink\" title=\"iOS App 状态影响蓝牙行为\"></a>iOS App 状态影响蓝牙行为</h3><p>当app处于后台或者挂起状态时,这种情况会影响蓝牙相关功能.默认情况下,app在后台或者挂起状态时,不能执行蓝牙任务.如果想要app在后台执行蓝牙任务,可以声明该app支持Core Bluetooth后台执行模式中的一项或者两项都支持.当app处于后台状态时,同一蓝牙任务的操作是不同的.在设计app时,要考虑这些差异.</p>\n<p>即使app支持后台操作,当内存不足时系统会随时终止后台应用,来给前台运行的app提供内存空间.iOS 7后,Core Bluetooth支持保存中心设备和外部设备管理者对象的状态.可以使用该特性去支持长时间调用蓝牙设备的操作.</p>\n<h3 id=\"遵循最佳实践来提高用户体验\"><a href=\"#遵循最佳实践来提高用户体验\" class=\"headerlink\" title=\"遵循最佳实践来提高用户体验\"></a>遵循最佳实践来提高用户体验</h3><p>由于无线广播会给设备电池造成不利影响.因此,设计app的时候尽可能减少无线广播的使用.遵循最佳实践来减少该方面的不利影响同时提高用户的体验.</p>\n<h2 id=\"Core-Bluetooth-概述\"><a href=\"#Core-Bluetooth-概述\" class=\"headerlink\" title=\"Core Bluetooth 概述\"></a>Core Bluetooth 概述</h2><p>本章节主要介绍开始使用Core Bluetooth 开发时需要了解的专业词汇和概念.</p>\n<blockquote>\n<p>重要: 一个 iOS app 在 iOS 10.0 之后的版本,必须在info.plist 文件中描述需要访问的数据类型,否则会崩溃.访问外部设备的指定数据,在info.plist 文件中必须包含 NSBluetoothPeripheralUsageDescription.</p>\n</blockquote>\n<h3 id=\"中心设备和外部设备-以及他们在蓝牙通信中的角色\"><a href=\"#中心设备和外部设备-以及他们在蓝牙通信中的角色\" class=\"headerlink\" title=\"中心设备和外部设备,以及他们在蓝牙通信中的角色\"></a>中心设备和外部设备,以及他们在蓝牙通信中的角色</h3><p>中心设备和外部设备是低功耗蓝牙通信中的来个主要参与者.中心设备使用来自与外部设备的信息去完成某项特定任务.下面的例子中,表示一个mac 或者 iOS app 用一种对用户来讲更友好的方式来展示来自于心率检测器的信息.</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/3340896-c9641636941a7f71.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<h4 id=\"中心设备发现并连接外围正在广播的设备\"><a href=\"#中心设备发现并连接外围正在广播的设备\" class=\"headerlink\" title=\"中心设备发现并连接外围正在广播的设备\"></a>中心设备发现并连接外围正在广播的设备</h4><p>外部设备以 advertising packet 的格式来发送广播.广播数据中包含外部设备的名称和主要功能.一个中心设备可用浏览和听取正在广播的外部设备内容.一个中心设备可以请求连接任何发现正在广播的外部设备.</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/3340896-5c28cac2a725ceed.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<h4 id=\"一个外部设备的数据如何构建\"><a href=\"#一个外部设备的数据如何构建\" class=\"headerlink\" title=\"一个外部设备的数据如何构建\"></a>一个外部设备的数据如何构建</h4><p>外部设备包含一项或者多项服务.一个服务是一个数据集合.举例子,一个心率计的服务可以用来显示来自于心率传感器的的心率数据.</p>\n<p>服务本身由特性或者其中包含的其他服务组成.一个特性提供外部设备服务的详细信息.举例子,心率服务包含两个特性,一个特性描述设备传感器的监听位置.另外一个特性传输测量的数据.</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/3340896-11772f3214f18ab9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<h4 id=\"中心设备扫描并且跟一个外部设备数据交互\"><a href=\"#中心设备扫描并且跟一个外部设备数据交互\" class=\"headerlink\" title=\"中心设备扫描并且跟一个外部设备数据交互\"></a>中心设备扫描并且跟一个外部设备数据交互</h4><p>一个中心设备和外部设备成功建立连接后,可以发现外部设备提供的所有服务和特性.<br>中心设备可以通过读写服务特性的值来跟外部设备的服务进行交互.举例来说,app 请求当前房间的室温.或者提供给恒温计一个值来设定室温.</p>\n<h3 id=\"中心设备-外部设备-以及外部设备数据如何表示\"><a href=\"#中心设备-外部设备-以及外部设备数据如何表示\" class=\"headerlink\" title=\"中心设备,外部设备,以及外部设备数据如何表示\"></a>中心设备,外部设备,以及外部设备数据如何表示</h3><p>本地中心设备管理者通过 CBCentralManager 对象表示.这个对象用来管理远程外部设备的遍历,发现,连接正在发送广播的外部设备.</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/3340896-cc9e991217247c05.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Core Bluetooth objects on the central side\"></p>\n<p>远程外部设备 用CBPeripheral对象来表示, 它的数据通过 CBService 和 CBCharacteristic 对象来表示.<br><img src=\"http://upload-images.jianshu.io/upload_images/3340896-0fd143eeaa33aada.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<p>外部设备管理者 用CBPeripheralManager对象来表示. 这些对象用来管理发布的服务和相关特性.并且通过广播来给远程中心设备(CBCentral 对象)发送服务. Peripheral manager对象也用来响应远程中心设备的读写请求.<br><img src=\"http://upload-images.jianshu.io/upload_images/3340896-3b76d790666594fe.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<p>外部设备管理者(CBPeripheralManger)的数据通过CBMutableService 和 CBMutableCharacteristic 对象来表示.<br><img src=\"http://upload-images.jianshu.io/upload_images/3340896-6bb597fc20300ec7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"A local peripheral&#39;s tree of services and characteristics\"></p>\n<h2 id=\"执行中心角色任务\"><a href=\"#执行中心角色任务\" class=\"headerlink\" title=\"执行中心角色任务\"></a>执行中心角色任务</h2><p>本节学习内容:</p>\n<ul>\n<li>启动一个中心设备管理者对象</li>\n<li>发现并链接正在广播的外部设备</li>\n<li>扫描链接的外部设备数据</li>\n<li>给一个外部设备服务特性值发送读写请求</li>\n<li>订阅一个特性值的变动通知</li>\n</ul>\n<h3 id=\"启动一个中心设备管理者\"><a href=\"#启动一个中心设备管理者\" class=\"headerlink\" title=\"启动一个中心设备管理者\"></a>启动一个中心设备管理者</h3><p>创建CBCentralManager</p>\n<pre><code class=\"hljs crystal\">myCentralManager = [[CBCentralManager alloc] <span class=\"hljs-symbol\">initWithDelegate:</span> <span class=\"hljs-keyword\">self</span> <span class=\"hljs-symbol\">queue:</span><span class=\"hljs-literal\">nil</span> <span class=\"hljs-symbol\">options:</span><span class=\"hljs-literal\">nil</span>];</code></pre>\n<p>self 必须实现 centralMangerDidUpdateState: 代理方法.更多内容请看<a href=\"https://developer.apple.com/documentation/corebluetooth/cbcentralmanagerdelegate\">CBCentralManagerDelegate Protocol Reference</a></p>\n<h3 id=\"发现正在广播的外部设备\"><a href=\"#发现正在广播的外部设备\" class=\"headerlink\" title=\"发现正在广播的外部设备\"></a>发现正在广播的外部设备</h3><pre><code class=\"hljs crystal\">[myCentralManager <span class=\"hljs-symbol\">scanForPeripheralsWithServices:</span><span class=\"hljs-literal\">nil</span> <span class=\"hljs-symbol\">options:</span><span class=\"hljs-literal\">nil</span>];</code></pre>\n\n<blockquote>\n<p>注意: 如果给第一个参数指定为nil,central manager返回所有发现的外部设备.在真实情况中,一般会指定一个CBUUID对象组成的数组,每个对象表示一个服务的唯一标识.当指定好UUID对象数组后,central manager 仅返回正在广播相关服务的外部设备.浏览最感兴趣的外部设备.<br>UUIDs,和CBUUID对象详细内容请看<a href=\"https://developer.apple.com/library/content/documentation/NetworkingInternetWeb/Conceptual/CoreBluetooth_concepts/PerformingCommonPeripheralRoleTasks/PerformingCommonPeripheralRoleTasks.html#//apple_ref/doc/uid/TP40013257-CH4-SW8\">Services and Characteristics Are Identified by UUIDs</a></p>\n</blockquote>\n<p>central manager 每次发现外部设备,就会调用代理对象的  cetralManager:didDiscoverPeripheral:advertisementData:RSSI: 方法.新发现的外部设备以 CBPeripheral 对象返回.如果打算链接发现的外部设备,给该对象一个强引用,系统就不会释放它.</p>\n<pre><code class=\"hljs erlang\">- <span class=\"hljs-params\">(void)</span>centralManager:<span class=\"hljs-params\">(CBCentralManager *)</span>central didDiscoverPeripheral:<span class=\"hljs-params\">(CBPeripheral *)</span>peripheral advertisementData:<span class=\"hljs-params\">(NSDictionary *)</span>advertisementData RSSI:<span class=\"hljs-params\">(NSNUmber *)</span>RSSI &#123;\n    NSLog<span class=\"hljs-params\">(@<span class=\"hljs-string\">&quot;Discovered %@&quot;</span>, peripheral.name)</span>;\n    self.discoverdPeripheral = peripheral;\n    ...</code></pre>\n\n<p>如果希望链接多个设备,需要用一个NSArray来存储发现的外部设备.一旦所有想连接的设备都被发现,停止浏览其他设备来节省电量:</p>\n<pre><code class=\"hljs ini\"><span class=\"hljs-section\">[myCentralManager stopScan]</span><span class=\"hljs-comment\">;</span></code></pre>\n\n<h3 id=\"链接发现的外部设备\"><a href=\"#链接发现的外部设备\" class=\"headerlink\" title=\"链接发现的外部设备\"></a>链接发现的外部设备</h3><pre><code class=\"hljs groovy\">[myCentralManager <span class=\"hljs-attr\">connectPeripheral:</span>peripheral <span class=\"hljs-attr\">options:</span>nil];</code></pre>\n\n<p>如果链接请求成功,central manager 调用代理对象的centralManager:didConnectPeripheral:方法.在跟外部设备交互前,设置它的代理来确保代理接受到了合适的回调:</p>\n<pre><code class=\"hljs erlang\">- <span class=\"hljs-params\">(void)</span>centralManager:<span class=\"hljs-params\">(CBCentralManager *)</span>central didConnectPeripheral:<span class=\"hljs-params\">(CBPeripheral *)</span>peripheral &#123;\n    \n    NSLog<span class=\"hljs-params\">(@<span class=\"hljs-string\">&quot;Peripheral connected&quot;</span>)</span>;\n    peripheral.delegate = self;\n    ...</code></pre>\n\n<h3 id=\"发现链接外部设备的服务\"><a href=\"#发现链接外部设备的服务\" class=\"headerlink\" title=\"发现链接外部设备的服务\"></a>发现链接外部设备的服务</h3><p>跟一个外部设备建立连接后,可以浏览它的数据.首先浏览外部设备提供的可用服务.由于外部设备发送广播的数据限制,会发现一个外部设备提供的服务比广播的更多.可以使用discoverServices: 方法来发现一个外部设备提供的所有服务.</p>\n<pre><code class=\"hljs ini\"><span class=\"hljs-section\">[peripheral discoverServices:nil]</span><span class=\"hljs-comment\">;</span></code></pre>\n<blockquote>\n<p>注意: 在一个app中,一般不给参数传nil,因为这样会返回所有的可用服务.由于一个外部设备有许多不相关的服务,发现所有可用服务不仅浪费电量而且浪费时间.因此,指定服务的UUIDs来发现指定的服务.</p>\n</blockquote>\n<p>当指定的服务发现后,连接的外部设备(CBPeripheral对象)调用代理对象的 peripheral:didDiscoverServices: 方法.Core Bluetooth 创建一个CBService数组—</p>\n<pre><code class=\"hljs erlang\">\n- <span class=\"hljs-params\">(void)</span>peripheral:<span class=\"hljs-params\">(CBPeripheral *)</span>peripheral didDiscoverServices:<span class=\"hljs-params\">(NSerror *)</span>error&#123;\n    \n    for <span class=\"hljs-params\">(CBService *service in peripheral.services)</span> &#123;\n        \n        NSLog<span class=\"hljs-params\">(@<span class=\"hljs-string\">&quot;Discovered service %@&quot;</span>, service)</span>;\n        ...\n    &#125;\n    ...</code></pre>\n\n<h3 id=\"发现一个服务的特性\"><a href=\"#发现一个服务的特性\" class=\"headerlink\" title=\"发现一个服务的特性\"></a>发现一个服务的特性</h3><pre><code class=\"hljs groovy\">NSLog (@<span class=\"hljs-string\">&quot;Discovering characteristics for service %@&quot;</span>, interestingService);\n[peripheral <span class=\"hljs-attr\">discoverCharacteristics:</span>nil <span class=\"hljs-attr\">forService:</span>interestingService];</code></pre>\n\n<blockquote>\n<p>注意: 真实环境中,第一个参数一般不传nil,通常指定想要找的特性UUIDs</p>\n</blockquote>\n<p>当指定服务的特性被发现后,外部设备调用代理对象的 peripheral:didDiscoverCharacteristicsForService:error: 方法.Core Bluetooth创建一个包含CBCharacteristic对象的数组来包含所有发现的特性.</p>\n<pre><code class=\"hljs erlang\">- <span class=\"hljs-params\">(void)</span>peripheral:<span class=\"hljs-params\">(CBPeripheral *)</span>peripheral didDiscoverCharacteristicsForService:<span class=\"hljs-params\">(CBService *)</span>service error:<span class=\"hljs-params\">(NSError *)</span>error &#123;\n    \n    for <span class=\"hljs-params\">(CBCharacteristic *characteristic in service.characteristics)</span> &#123;\n        \n        NSLog<span class=\"hljs-params\">(@<span class=\"hljs-string\">&quot;Discovered characteristic %@&quot;</span>, characteristic)</span>;\n        ...\n    &#125;\n    ...</code></pre>\n<h3 id=\"获取一个特性的值\"><a href=\"#获取一个特性的值\" class=\"headerlink\" title=\"获取一个特性的值\"></a>获取一个特性的值</h3><p>直接读取特性的value或者订阅它来获取特性的值.</p>\n<h4 id=\"读取特性值\"><a href=\"#读取特性值\" class=\"headerlink\" title=\"读取特性值\"></a>读取特性值</h4><pre><code class=\"hljs less\"><span class=\"hljs-selector-tag\">NSLog</span>(@<span class=\"hljs-string\">&quot;Reading value for characteristic %@&quot;</span>, interestingCharacteristic);\n<span class=\"hljs-selector-attr\">[peripheral readValueForCharacteristic:interestingCharacteristic]</span>;</code></pre>\n\n<p>当尝试读取特性值时,外部设备调用代理对象的 peripheral:didUpdateValueForCharacteristic:error:方法来获取特性值.</p>\n<pre><code class=\"hljs groovy\">- (<span class=\"hljs-keyword\">void</span>)<span class=\"hljs-attr\">peripheral:</span> (CBPeripheral *)peripheral <span class=\"hljs-attr\">didUpdateValueForCharacteristic:</span>(CBCharacteristic *)characteristic <span class=\"hljs-attr\">error:</span>(NSError *)error &#123;\n    \n    NSData *data = characteristic.value;\n    <span class=\"hljs-comment\">//parse the data as needed </span>\n    ...</code></pre>\n\n<blockquote>\n<p>注意:不是所有的特性都是可读的.通过CBCharacteristicPropertyRead属性常量来检测特性是否可读.如果不可读,会返回适当的错误.</p>\n</blockquote>\n<h4 id=\"订阅一个特性值\"><a href=\"#订阅一个特性值\" class=\"headerlink\" title=\"订阅一个特性值\"></a>订阅一个特性值</h4><pre><code class=\"hljs groovy\">[peripheral <span class=\"hljs-attr\">setNotifyValue:</span>YES <span class=\"hljs-attr\">forCharacteristic:</span> interestingCharacteristic];</code></pre>\n\n<pre><code class=\"hljs erlang\">当订阅失败时,可以实现下面方法来获取订阅失败原因.\n- <span class=\"hljs-params\">(void)</span>peripheral:<span class=\"hljs-params\">(CBPeripheral *)</span>peripheral didUpdateNotificationStateForCharacteristic:<span class=\"hljs-params\">(CBCharacteristic *)</span>characteristic error:<span class=\"hljs-params\">(NSError *)</span>error &#123;\n    \n    if <span class=\"hljs-params\">(error)</span> &#123;\n        \n       NSLog<span class=\"hljs-params\">(@<span class=\"hljs-string\">&quot;Error changing notification state: %@&quot;</span>, [error localizedDescription])</span> ;\n    &#125;\n    ...</code></pre>\n\n<blockquote>\n<p>注意:不是所有的特性都可订阅.可以通过属性的CBCharacteristicPropertyNotify或者CBCharacteristicPropertyIndicate常量来检测属性是否可被订阅.</p>\n</blockquote>\n<h3 id=\"给一个特性写入值\"><a href=\"#给一个特性写入值\" class=\"headerlink\" title=\"给一个特性写入值\"></a>给一个特性写入值</h3><pre><code class=\"hljs groovy\">\nNSLog(@<span class=\"hljs-string\">&quot;Wrriting value for characteristic %@&quot;</span>, interestingCharacteristic);\n[peripheral <span class=\"hljs-attr\">writeValue:</span>dataToWrite <span class=\"hljs-attr\">forCharacteristic:</span>interestingCharacteristic <span class=\"hljs-attr\">type:</span>CBCharacteristicWriteWithResponse];\n</code></pre>\n<p>代理对象调用下面方法,通过CBCharacteristicWriteWithResponse来告诉app写入是否成功.</p>\n<pre><code class=\"hljs erlang\">- <span class=\"hljs-params\">(void)</span>peripheral:<span class=\"hljs-params\">(CBPeripheral *)</span>peripheral\ndidWriteValueForCharacteristic:<span class=\"hljs-params\">(CBCharacteristic *)</span>characteristic\n             error:<span class=\"hljs-params\">(NSError *)</span>error &#123;\n \n    if <span class=\"hljs-params\">(error)</span> &#123;\n        NSLog<span class=\"hljs-params\">(@<span class=\"hljs-string\">&quot;Error writing characteristic value: %@&quot;</span>,</span>\n<span class=\"hljs-params\">            [error localizedDescription])</span>;\n    &#125;\n    ...</code></pre>\n\n<blockquote>\n<p>注意:特性仅支持特定的写入类型.可以通过一个特性的CBCharacteristicPropertyWriteWithoutResponse 或者 CBCharacteristicPropertyWrite 常量来检查支持的写入类型.</p>\n</blockquote>\n<h2 id=\"执行外部角色任务\"><a href=\"#执行外部角色任务\" class=\"headerlink\" title=\"执行外部角色任务\"></a>执行外部角色任务</h2><p>本节学习内容:</p>\n<ul>\n<li>启动一个外部设备管理对象</li>\n<li>设置本地外部设备的服务和特性</li>\n<li>给设备的本地数据库发布服务和特性</li>\n<li>广播服务</li>\n<li>响应一个连接的中心设备的读写请求</li>\n<li>给订阅的中心设备发送更新后的特性值</li>\n</ul>\n<h3 id=\"启动一个外部设备管理者\"><a href=\"#启动一个外部设备管理者\" class=\"headerlink\" title=\"启动一个外部设备管理者\"></a>启动一个外部设备管理者</h3><pre><code class=\"hljs crystal\">myPeripheralManager = [[CBPeripheralManager alloc] <span class=\"hljs-symbol\">initWithDelegate:</span><span class=\"hljs-keyword\">self</span> <span class=\"hljs-symbol\">queue:</span><span class=\"hljs-literal\">nil</span> <span class=\"hljs-symbol\">options:</span> <span class=\"hljs-literal\">nil</span>];</code></pre>\n\n<p>创建CBPeripheralManager对象后 self 必须实现 peripheralMangagerDidUpdateState: 方法.  详细内容请看 <a href=\"\">CBPeripheralManagerDelegate Protocol Reference</a> </p>\n<h3 id=\"设置外部设备管理者的服务和特性\"><a href=\"#设置外部设备管理者的服务和特性\" class=\"headerlink\" title=\"设置外部设备管理者的服务和特性\"></a>设置外部设备管理者的服务和特性</h3><p>一个本地外部设备服务和特性的数据库以类似于树状的方式组成.必须以这种方式去组织本地外部设备的服务和特性. 在执行这些任务中首先要理解如何识别这些服务和特性.</p>\n<h4 id=\"服务和特性通过UUIDs来识别\"><a href=\"#服务和特性通过UUIDs来识别\" class=\"headerlink\" title=\"服务和特性通过UUIDs来识别\"></a>服务和特性通过UUIDs来识别</h4><p>iOS中通过CBUUID对象来表示外部设备指定的服务和特性.比如,128位的UUID心率服务可以使用CBUUID 对象的 UUIDWithString 方法来表示预定义的16位UUID.</p>\n<pre><code class=\"hljs groovy\">CBUUID *heartRateServiceUUID = [CBUUID <span class=\"hljs-attr\">UUIDWithString:</span> @<span class=\"hljs-string\">&quot;180D&quot;</span>];</code></pre>\n\n<p>当从一个预定义的16位UUID中创建一个CBUUID对象时,Core Bluetooth 会用Bluetooth base UUID 预填128位UUID的剩下的部分.</p>\n<h4 id=\"创建自有的UUIDs来自定义服务和特性\"><a href=\"#创建自有的UUIDs来自定义服务和特性\" class=\"headerlink\" title=\"创建自有的UUIDs来自定义服务和特性\"></a>创建自有的UUIDs来自定义服务和特性</h4><p>使用命令行实用工具 uuidgen 很容易生成一个128位的UUIDs.</p>\n<pre><code class=\"hljs angelscript\">$ uuidgen \n<span class=\"hljs-number\">71</span>DA3FD1<span class=\"hljs-number\">-7E10</span><span class=\"hljs-number\">-41</span>C1-B16F<span class=\"hljs-number\">-4430</span>B506CDE7</code></pre>\n<p>然后使用这个UUID去创建一个CBUUID对象</p>\n<pre><code class=\"hljs subunit\">CBUID *myCustomServiceUUID = [CBUUID UUIDWithString:@&quot;71DA3FD1<span class=\"hljs-string\">-7</span>E10<span class=\"hljs-string\">-41</span>C1-B16F<span class=\"hljs-string\">-4430</span>B506CDE7&quot;];</code></pre>\n\n<h4 id=\"创建服务和特性树\"><a href=\"#创建服务和特性树\" class=\"headerlink\" title=\"创建服务和特性树\"></a>创建服务和特性树</h4><pre><code class=\"hljs groovy\">myCharacteristic = [[CBMutableCharacteristic alloc] <span class=\"hljs-attr\">initWithType:</span>myCharacteristicUUID <span class=\"hljs-attr\">properties:</span>CBCharacteristicPropertyRead <span class=\"hljs-attr\">Value:</span> myValue <span class=\"hljs-attr\">permissions:</span>CBAttributePermissionsReadable];</code></pre>\n<blockquote>\n<p>注意:如果指定一个特性值.该值会缓存并且它的属性和许可被设置为可读.因此,如果你需要一个特性值可写,或者期望发布的服务特性能够被改变.必须指定value为nil.</p>\n</blockquote>\n<p>现在已经创建了一个可变特性,可以创建一个可变服务跟其相关联.按照下面方法做</p>\n<pre><code class=\"hljs ini\"><span class=\"hljs-attr\">myService</span> = [[CBMutableService alloc] initWithType:myServiceUUID primary:<span class=\"hljs-literal\">YES</span>]<span class=\"hljs-comment\">;</span>\n<span class=\"hljs-attr\">myService.characteristics</span> = @[myCharacteristic]<span class=\"hljs-comment\">;</span></code></pre>\n<h3 id=\"发布服务和特性\"><a href=\"#发布服务和特性\" class=\"headerlink\" title=\"发布服务和特性\"></a>发布服务和特性</h3><pre><code class=\"hljs ini\"><span class=\"hljs-section\">[myPeripheralManager addService:myService]</span><span class=\"hljs-comment\">;</span></code></pre>\n\n<p>当调用这个方法去发布服务时,外部设备管理者会通过他的代理对象调用 peripheralManager:didAddService:error: 方法.如果过发生错误或者无法发布服务,则实现该代理方法来获取错误原因.</p>\n<pre><code class=\"hljs erlang\">- <span class=\"hljs-params\">(void)</span>peripheralManager:<span class=\"hljs-params\">(CBPeripheralManager *)</span>peripheral\n            didAddService:<span class=\"hljs-params\">(CBService *)</span>service\n                    error:<span class=\"hljs-params\">(NSError *)</span>error &#123;\n \n    if <span class=\"hljs-params\">(error)</span> &#123;\n        NSLog<span class=\"hljs-params\">(@<span class=\"hljs-string\">&quot;Error publishing service: %@&quot;</span>, [error localizedDescription])</span>;\n    &#125;\n    ...</code></pre>\n\n<blockquote>\n<p>当给外部设备的数据库发布一个服务和相关特性后,服务被缓存并且无法修改.</p>\n</blockquote>\n<h3 id=\"广播服务\"><a href=\"#广播服务\" class=\"headerlink\" title=\"广播服务\"></a>广播服务</h3><pre><code class=\"hljs scheme\">[<span class=\"hljs-name\">myPeripheralManager</span> startAdvertising:@&#123; CBAdvertisementDataServiceUUIDsKey : @[<span class=\"hljs-name\">myFirstService.UUID</span>, mySecondService.UUID]&#125;]<span class=\"hljs-comment\">;</span></code></pre>\n\n<p>当在本地外部设备发送广播时,外部设备管者的代理对象调用 peripheralManagerDidStartAdvertising:error: 方法.如果出现错误或者服务无法广播.实现该方法来获取错误信息.</p>\n<pre><code class=\"hljs erlang\">- <span class=\"hljs-params\">(void)</span>peripheralManagerDidStartAdvertising:<span class=\"hljs-params\">(CBPeripheralManager *)</span>peripheral\n                                       error:<span class=\"hljs-params\">(NSError *)</span>error &#123;\n \n    if <span class=\"hljs-params\">(error)</span> &#123;\n        NSLog<span class=\"hljs-params\">(@<span class=\"hljs-string\">&quot;Error advertising: %@&quot;</span>, [error localizedDescription])</span>;\n    &#125;\n    ...</code></pre>\n\n<p>一旦广播数据开始,远程中心设备能够发现并和本地外部设备建立连接.</p>\n<h3 id=\"响应中心设备的读写请求\"><a href=\"#响应中心设备的读写请求\" class=\"headerlink\" title=\"响应中心设备的读写请求\"></a>响应中心设备的读写请求</h3><pre><code class=\"hljs erlang\">- <span class=\"hljs-params\">(void)</span>peripheralManager:<span class=\"hljs-params\">(CBPeripheralManager *)</span>peripheral didReceiveReadRequest:<span class=\"hljs-params\">(CBATTRequest *)</span>request &#123;\n    \n    if <span class=\"hljs-params\">([request.characteristic.UUID isEqual:myCharacteristic.UUID])</span> &#123;\n        ...</code></pre>\n\n<p>如果特性的UUID匹配,下一步确定请求的索引位置是否超出特性值的边界.</p>\n<pre><code class=\"hljs applescript\"><span class=\"hljs-keyword\">if</span> (request.<span class=\"hljs-built_in\">offset</span> &gt; myCharacteristic.value.<span class=\"hljs-built_in\">length</span>) &#123;\n    \n    [myPeripheralManager respondToRequest:request withResult:CBATTErrorInvalidOffset];\n    \n<span class=\"hljs-built_in\">    return</span>;\n&#125;</code></pre>\n\n<p>加入请求的offset合格.现在给请求特性属性赋值.</p>\n<pre><code class=\"hljs ini\"><span class=\"hljs-attr\">request.value</span> = [myCharacteristic.value subdataWithRange:NSMakeRange(request.<span class=\"hljs-literal\">off</span>set, myCharacteristic.value.length - request.<span class=\"hljs-literal\">off</span>set)]<span class=\"hljs-comment\">;</span></code></pre>\n\n<p>设置好值后,响应远程中心设备请求.</p>\n<pre><code class=\"hljs groovy\">[myPeripheralManager <span class=\"hljs-attr\">respondToRequest:</span>request <span class=\"hljs-attr\">withResult:</span>CBATTErrorSuccess];\n...</code></pre>\n\n<p>每调用 peripheralManager:didReceiveReadRequest: 方法一次,就会调用 respondToRequst:withResult: 一次.</p>\n<blockquote>\n<p>注意: 如果特性UUID不匹配或者无法完成读请求.调用 respondToRequest:withResult: 方法,并返回合适的错误原因.(CBATTError Constants)</p>\n</blockquote>\n<p>处理一个写入请求,直接将CBATTRequest 对象的值写入特性.</p>\n<pre><code class=\"hljs ini\"><span class=\"hljs-attr\">myCharacteristic.value</span> = request.value<span class=\"hljs-comment\">;</span></code></pre>\n\n<p>传入的写入请求数组中包含CBATTRequest 对象.每个对象写入特性都会调用  respondToRequest:withResult: 方法.</p>\n<pre><code class=\"hljs scheme\">[<span class=\"hljs-name\">myPeripheralManager</span> respondToRequest:[<span class=\"hljs-name\">request</span> objectAtIndeex:0] withResult:CBATTErrorSuccess]<span class=\"hljs-comment\">;</span></code></pre>\n\n<h3 id=\"给订阅的中心设备发送更新的特性值\"><a href=\"#给订阅的中心设备发送更新的特性值\" class=\"headerlink\" title=\"给订阅的中心设备发送更新的特性值\"></a>给订阅的中心设备发送更新的特性值</h3><p>中心设备订阅通知后会调用该方法</p>\n<pre><code class=\"hljs erlang\">- <span class=\"hljs-params\">(void)</span>peripheralManager:<span class=\"hljs-params\">(CBPeripheralManager *)</span>peripheral central:<span class=\"hljs-params\">(CBCentral *)</span>central didSubscribeToCharacteristic:<span class=\"hljs-params\">(CBCharacteristic *)</span>characteristic &#123;\n    \n    NSLog<span class=\"hljs-params\">(@<span class=\"hljs-string\">&quot;Central subscribed to characteristic %@&quot;</span>, characteristic)</span>;\n    ...</code></pre>\n\n<pre><code class=\"hljs groovy\">NSData *updatedValue = <span class=\"hljs-comment\">//fetch the characteristic&#x27;s new value </span>\n\nBOOL didSendValue = [myPeripheralManager <span class=\"hljs-attr\">updateValue:</span>updatedValue <span class=\"hljs-attr\">forCharacteristic:</span>characteristic <span class=\"hljs-attr\">onSubscribedCentrals:</span>nil];</code></pre>\n\n<h2 id=\"iOS-Apps-中-Core-Bluetooth-的后台处理\"><a href=\"#iOS-Apps-中-Core-Bluetooth-的后台处理\" class=\"headerlink\" title=\"iOS Apps 中 Core Bluetooth 的后台处理\"></a>iOS Apps 中 Core Bluetooth 的后台处理</h2><p>对于iOS apps,了解app在后台还是前台运行非常重要.一个app在后台的行为必须不同于前台.因为系统提供的资源是有限的.对于在iOS上所有的后台操作讨论,请看<a href=\"https://developer.apple.com/library/content/documentation/iPhone/Conceptual/iPhoneOSProgrammingGuide/BackgroundExecution/BackgroundExecution.html#//apple_ref/doc/uid/TP40007072-CH4\">Background Execution</a> in <a href=\"https://developer.apple.com/library/content/documentation/iPhone/Conceptual/iPhoneOSProgrammingGuide/Introduction/Introduction.html#//apple_ref/doc/uid/TP40007072\">App Programming Guide for iOS</a></p>\n<p>默认情况下,许多普通的Core Bluetooth 任务—中心设备和外部设备都有— 在后台或者挂起模式下都是禁用的.也就是说,您需要声明您的app去支持Core Bluetooth后台执行模式,从而允许您的app能够从挂起状态中唤醒去处理某些蓝牙相关的事件.即使您的app不需要所有范围内的后台处理支持.当重要事件发生后仍然可以要求系统提示.</p>\n<p>即使您的app支持一种或者两种Core Bluetooth 后台执行模式,但是它也不能永远运行. 某些情况下,系统会中为了给前台运行的app释放内存从而终止您的app.从而使app激活的或者添加的链接丢失.</p>\n<h3 id=\"只在前台使用Core-Bluetooth的Apps\"><a href=\"#只在前台使用Core-Bluetooth的Apps\" class=\"headerlink\" title=\"只在前台使用Core Bluetooth的Apps\"></a>只在前台使用Core Bluetooth的Apps</h3><p>绝大多数apps,除非您请求后台执行特定任务的许可,否则您的app短暂进入后台状态后就会转到挂起状态.在挂起状态下,您的app无法执行蓝牙相关任务.也不能感知任何蓝牙相关事件,直到它恢复到前台运行.</p>\n<p>在中心设备这边,只在前台执行的apps—那些没有声明支持Core Bluetooth后台执行模式任何一种的app,在后台状态或者挂起状态是无法浏览或者发现正在广播的外部设备. 在外部设备这边,当一个仅支持前台模式的app处于挂起状态时，所有蓝牙相关的事件发生时将通过系统添加到队列。并且当app恢复到前台时发送给它。也就是说，Core Bluetooth 提供一种方式，当某些中心设备角色事件发生时提醒用户。用户然后能够利用这些提示来决定是否一个特殊事件许可app返回到前台。<br>您可以在调用CBCentralManager 类的 connectPeripheral:options: 方法使用下列的外部设备链接可选项，利用这些提示来链接一个远程外部设备。</p>\n<ul>\n<li>CBConnectPeripheralOptionNotifyOnConnectionKey</li>\n<li>CBConnectPeripheralOptionNotifyOnDisconnectionKey</li>\n<li>CBConnectPeripheralOptionNotifyOnNotificationKey</li>\n</ul>\n<h4 id=\"Core-Bluetooth-后台执行模式\"><a href=\"#Core-Bluetooth-后台执行模式\" class=\"headerlink\" title=\"Core Bluetooth 后台执行模式\"></a>Core Bluetooth 后台执行模式</h4><p>当需要app在后台执行一些蓝牙相关任务时，必须在info.plist 文件中声明它支持一种蓝牙后台执行模式。<br>info.plist 中文件 添加 key 为 UIBackgroundModes, 然后给一个数组中添加下面的字符串：</p>\n<ul>\n<li>bluetooth-central</li>\n<li>bluetooth-peripheral</li>\n</ul>\n<h4 id=\"蓝牙-中心设备后台执行模式\"><a href=\"#蓝牙-中心设备后台执行模式\" class=\"headerlink\" title=\"蓝牙-中心设备后台执行模式\"></a>蓝牙-中心设备后台执行模式</h4><p>记住在后台浏览外部设备的操作跟在前台时不同的。</p>\n<ul>\n<li>CBCentralManagerScanOptionAllowDuplicatesKey 浏览可选键 被忽略，并且多个正在广播的外部设备发现合并成一个发现事件。</li>\n<li>如果所有正在扫描外部设备的app都在后台，中心设备的内部扫描广播的包也相继增长。结果，发现一个正在广播的外部设备的时间也会变长。<br>这些变动帮助最小化无限广播的使用,并且提高电池使用寿命。</li>\n</ul>\n<h4 id=\"蓝牙-外部设备-后台执行模式\"><a href=\"#蓝牙-外部设备-后台执行模式\" class=\"headerlink\" title=\"蓝牙-外部设备 后台执行模式\"></a>蓝牙-外部设备 后台执行模式</h4><p>当app处于后台状态 时，广播跟前台是不同的：</p>\n<ul>\n<li>CBAdvertisementDataLocalNameKey 被忽略，本地外部设备的名字也不会被广播。</li>\n<li>所有包含在CBAdvertisementDataServiceUUIDsKey对应值下的服务UUIDs被放置在一个特殊的“溢出”区。只有一个iOS设备明确要求扫描特它们时，才能被发现。</li>\n<li>如果所有正在广播的apps在后台状态，外部设备发送广播的频率会降低。</li>\n</ul>\n<h3 id=\"更好地使用后台执行模式\"><a href=\"#更好地使用后台执行模式\" class=\"headerlink\" title=\"更好地使用后台执行模式\"></a>更好地使用后台执行模式</h3><p>由于处理蓝牙相关事件会使用无线电，无线电的使用会给电池寿命带来负面影响<br>最小化在后台状态下的工作量。app被唤醒的蓝牙相关事件应该尽快处理以便它能再次挂起。<br>任何声明支持核心蓝牙后台执行模式的app 必须遵循一些原则：</p>\n<ul>\n<li>Apps 应该基于会话类 并且提供一个接口允许用户决定何时开始和结束蓝牙相关事件的发送。</li>\n<li>在被唤醒状态下，一个app有大约10秒时间去处理一项任务。 理想情况下，应该尽快处理任务并且允许再次进入后台。Apps 在后台执行过长时间会被系统限制或者杀死。</li>\n<li>Apps 不应该将唤醒作为一个机会去处理跟唤醒不相关的任务。</li>\n</ul>\n<h3 id=\"在后台执行长时间操作\"><a href=\"#在后台执行长时间操作\" class=\"headerlink\" title=\"在后台执行长时间操作\"></a>在后台执行长时间操作</h3><h4 id=\"状态保存和恢复\"><a href=\"#状态保存和恢复\" class=\"headerlink\" title=\"状态保存和恢复\"></a>状态保存和恢复</h4><p>对于一个给定的CBCentralManager对象， 系统记录下面内容：</p>\n<ul>\n<li>中心管理者的当时正在搜索的服务（并且包含开始扫描时所有指定扫描的可选项）</li>\n<li>中心管理者当时正在尝试连接或者已经连接的外部设备</li>\n<li>中心管理者当时订阅的特性</li>\n</ul>\n<p>对于CBPeripheralManager对象，系统记录下面内容：</p>\n<ul>\n<li>外部设备管理者当时正在广播的数据</li>\n<li>外部设备管理者发布给设备数据库的服务</li>\n<li>订阅外部设备服务特性值的中心设备。</li>\n</ul>\n<p>在创建中心管理者对象的时候就需要添加状态保存和恢复策略</p>\n<pre><code class=\"hljs groovy\">myCentralManager = [[CBCentralManager alloc] <span class=\"hljs-attr\">initWithDelegate:</span>self <span class=\"hljs-attr\">queue:</span>nil <span class=\"hljs-attr\">options:</span>@&#123; <span class=\"hljs-attr\">CBCentralManagerOptionRestoreIdentifierKey :</span> @“myCentralManagerIdentifer”&#125;];</code></pre>\n<p>外部设备管理者使用CBPeripheralManagerOptionRestoreIdentiferKey 来初始化。</p>\n<p>app重新启动时，可以获取所有系统保存的唯一标识</p>\n<pre><code class=\"hljs objectivec\">- (<span class=\"hljs-built_in\">BOOL</span>)application:(<span class=\"hljs-built_in\">UIApplication</span> *)application\ndidFinishLaunchingWithOptions:(<span class=\"hljs-built_in\">NSDictionary</span> *)launchOptions &#123;\n \n    <span class=\"hljs-built_in\">NSArray</span> *centralManagerIdentifiers =\n        launchOptions[<span class=\"hljs-built_in\">UIApplicationLaunchOptionsBluetoothCentralsKey</span>];\n    ...</code></pre>\n\n<h4 id=\"实现合适的恢复代理方法\"><a href=\"#实现合适的恢复代理方法\" class=\"headerlink\" title=\"实现合适的恢复代理方法\"></a>实现合适的恢复代理方法</h4><blockquote>\n<p>重要:对于存储状态并需要恢复状态的app,当app重启进入后台处理蓝牙相关事件时,先调用 centralManager:willRestoreState: 和 peripheralManager:willRestoreState: 方法.如果没有保存状态,则调用 centralManagerDidUpdateState: 和 peripheralManagerDidUpdateState: 代理方法.</p>\n</blockquote>\n<pre><code class=\"hljs pf\">- (void)centralManager:(CBCentralManager *)central willRestoreState:(NSDictionary *)<span class=\"hljs-keyword\">state</span>&#123;\n    \n    NSArray *peripherals = <span class=\"hljs-keyword\">state</span>[CBCentralManagerRestoredStatePeripheralKey];\n    ...</code></pre>\n\n<h4 id=\"更新初始化进程\"><a href=\"#更新初始化进程\" class=\"headerlink\" title=\"更新初始化进程\"></a>更新初始化进程</h4><pre><code class=\"hljs objectivec\"><span class=\"hljs-built_in\">NSUInteger</span> serviceUUIDIndex =\n    [peripheral.services indexOfObjectPassingTest:^<span class=\"hljs-built_in\">BOOL</span>(CBService *obj,\n    <span class=\"hljs-built_in\">NSUInteger</span> index, <span class=\"hljs-built_in\">BOOL</span> *stop) &#123;\n        <span class=\"hljs-keyword\">return</span> [obj.UUID isEqual:myServiceUUIDString];\n    &#125;];\n \n<span class=\"hljs-keyword\">if</span> (serviceUUIDIndex == <span class=\"hljs-built_in\">NSNotFound</span>) &#123;\n    [peripheral discoverServices:@[myServiceUUIDString]];\n    ...</code></pre>\n\n<h2 id=\"中心设备和远程外部设备交互最佳实践\"><a href=\"#中心设备和远程外部设备交互最佳实践\" class=\"headerlink\" title=\"中心设备和远程外部设备交互最佳实践\"></a>中心设备和远程外部设备交互最佳实践</h2><h3 id=\"注意广播的使用和电量消耗\"><a href=\"#注意广播的使用和电量消耗\" class=\"headerlink\" title=\"注意广播的使用和电量消耗\"></a>注意广播的使用和电量消耗</h3><p>尽可能最小化广播的使用.因为无线广播会给iOS设备硬件的电池寿命造成负面影响.</p>\n<ul>\n<li>只有需要的时候才扫描设备</li>\n<li>只有必要时才去指明CBCentralManagerScanOptionAllowDuplicatesKey Option</li>\n<li>正确地浏览外部设备数据<pre><code class=\"hljs scheme\">[<span class=\"hljs-name\">peripheral</span> discoverServices:@[<span class=\"hljs-name\">firstServiceUUID</span>, secondServiceUUID]]<span class=\"hljs-comment\">;</span></code></pre>\n查找服务特性也同样适用这种方式.</li>\n<li>订阅经常变动的特性值</li>\n<li>所有需求数据满足时取消设备连接<pre><code class=\"hljs ini\"><span class=\"hljs-section\">[myCentralManager cancelPeripheralConnection:peripheral]</span><span class=\"hljs-comment\">;</span></code></pre>\n\n</li>\n</ul>\n<h3 id=\"外部设备重连\"><a href=\"#外部设备重连\" class=\"headerlink\" title=\"外部设备重连\"></a>外部设备重连</h3><p>使用下面三种方式去重连外部设备:</p>\n<ul>\n<li>取回已知外部设备列表<br>使用 retrievePeripheralsWithIdentifiers: 方法.</li>\n<li>取回当前系统连接的外部设备列表<br>使用 retriveConnectedPeripheralsWithServices: 方法.如果要查找的外部设备在列表中,连接它.</li>\n<li>扫描并查找外部设备.<br>使用 scanForPeripheralsWithServices:options 方法.如果找到.连接它.</li>\n</ul>\n<p>下面是一个重连的流程示例:<br><img src=\"http://upload-images.jianshu.io/upload_images/3340896-6d4adcc223f2f43a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"重连流程\"></p>\n<h2 id=\"设置本地设备作为外部设备最佳实践\"><a href=\"#设置本地设备作为外部设备最佳实践\" class=\"headerlink\" title=\"设置本地设备作为外部设备最佳实践\"></a>设置本地设备作为外部设备最佳实践</h2><h3 id=\"广播时要考虑的内容\"><a href=\"#广播时要考虑的内容\" class=\"headerlink\" title=\"广播时要考虑的内容\"></a>广播时要考虑的内容</h3><p>遵循广播数据限制.<br>当创建一个广播字典时,只能指定 CBAdvertisementDataLocalNameKey, CBAdvertisementDataServiceUUIDsKey.如果指定其他key会报错.<br>同样广播数据占用的空间也要限制.至多使用28字节的空间来初始化广播数据.</p>\n<p>仅在需要的时候去广播数据,使用下面方法来停止广播</p>\n<pre><code class=\"hljs ini\"><span class=\"hljs-section\">[myPeripheralManager stopAdvetising]</span><span class=\"hljs-comment\">;</span></code></pre>\n<p>让用户来决定何时广播</p>\n<h3 id=\"配置外部设备特性\"><a href=\"#配置外部设备特性\" class=\"headerlink\" title=\"配置外部设备特性\"></a>配置外部设备特性</h3><p>下面两个分组帮助我们在需要执行以下任务是提供一些指导:</p>\n<ul>\n<li>允许链接的中心设备订阅您的特性</li>\n<li>保护敏特性值,防止未配对中心设备的访问</li>\n</ul>\n<p>配置特性来支持通知</p>\n<pre><code class=\"hljs groovy\">myCharacteristic = [[CBMutableCharacteristic alloc] <span class=\"hljs-attr\">initWithType:</span>myCharacteristicUUID <span class=\"hljs-attr\">properties:</span>CBCharacteristicPropertyRead | CBCharacteristicPropertyNotify <span class=\"hljs-attr\">value:</span>nil <span class=\"hljs-attr\">permissions:</span>CBAttributePermissionsReadable];\n</code></pre>\n\n<p>要求一个配对设备来访问敏感数据</p>\n<pre><code class=\"hljs groovy\">emailCharacterristic = [[CBMutableCharacteristic alloc] <span class=\"hljs-attr\">initWithType:</span>emailCharacteristicUUID <span class=\"hljs-attr\">properties:</span>CBCharacteristicPropertyRead | CBCharacteristicPropertyNotifyEncryptionRequired <span class=\"hljs-attr\">value:</span>nil <span class=\"hljs-attr\">permission:</span>CBAttributePermissionsReadEncryptionRequired];\n</code></pre>\n\n<h1 id=\"项目Demo\"><a href=\"#项目Demo\" class=\"headerlink\" title=\"项目Demo\"></a>项目Demo</h1><p><a href=\"https://github.com/913868456/OCDemo\">蓝牙4.0 Core Bluetooth Demo</a><br>上面链接是 <strong>Core Bluetooth</strong> 编程的Demo，能够对<strong>Core Bluetooth</strong> 有一个基本的了解。本项目使用一个蓝牙手环作为测试设备，读取蓝牙手环内的一些服务。如果想要使用其他蓝牙设备运行项目，把 <strong>“MH08”</strong> 替换为自己的设备名称前缀即可。</p>\n<pre><code class=\"hljs objectivec\"><span class=\"hljs-keyword\">if</span> ([peripheral.name hasPrefix:<span class=\"hljs-string\">@&quot;MH08&quot;</span>] ) &#123;\n       <span class=\"hljs-keyword\">self</span>.bandPeripheral = peripheral;        <span class=\"hljs-comment\">//强引用外部设备对象,否则会释放</span>\n       [<span class=\"hljs-keyword\">self</span>.centralManager stopScan];          <span class=\"hljs-comment\">//发现指定外设后,为了保护电池寿命和节约电量,中心管理者停止扫描</span>\n       <span class=\"hljs-built_in\">NSLog</span>(<span class=\"hljs-string\">@&quot;链接外部设备: %@&quot;</span>, peripheral.name);\n       [<span class=\"hljs-keyword\">self</span>.centralManager connectPeripheral:peripheral options:<span class=\"hljs-literal\">nil</span>];\n   &#125;</code></pre>\n<h1 id=\"GitHub-优秀开源\"><a href=\"#GitHub-优秀开源\" class=\"headerlink\" title=\"GitHub 优秀开源\"></a>GitHub 优秀开源</h1><p>由于使用官方提供的API编程特别凌乱，所以Github上有优秀开发者对其进行了封装。<br>详情请看<a href=\"https://github.com/coolnameismy/BabyBluetooth\">BabyBluetooth </a></p>\n<h1 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h1><p><a href=\"https://developer.apple.com/library/content/documentation/NetworkingInternetWeb/Conceptual/CoreBluetooth_concepts/AboutCoreBluetooth/Introduction.html#//apple_ref/doc/uid/TP40013257-CH1-SW1\">Core Bluetooth Programming Guide</a></p>\n","site":{"data":{"fluid_static_prefix":{"internal_js":"/js","internal_css":"/css","internal_img":"/img","iconfont":"//at.alicdn.com/t/font_1736178_kmeydafke9r.css","anchor":"https://cdn.staticfile.org/anchor-js/4.2.2/","github_markdown":"https://cdn.staticfile.org/github-markdown-css/4.0.0/","jquery":"https://cdn.staticfile.org/jquery/3.4.1/","bootstrap":"https://cdn.staticfile.org/twitter-bootstrap/4.4.1/","highlightjs":"https://cdn.staticfile.org/highlight.js/10.0.0/","prismjs":"https://cdn.staticfile.org/prism/1.21.0/","tocbot":"https://cdn.staticfile.org/tocbot/4.11.1/","typed":"https://cdn.staticfile.org/typed.js/2.0.11/","fancybox":"https://cdn.staticfile.org/fancybox/3.5.7/","mathjax":"https://cdn.staticfile.org/mathjax/3.0.5/es5/","katex":"https://cdn.staticfile.org/KaTeX/0.11.1/","aplayer":"https://cdn.staticfile.org/aplayer/1.10.1/","busuanzi":"https://busuanzi.ibruce.info/busuanzi/2.3/","clipboard":"https://cdn.staticfile.org/clipboard.js/2.0.6/","mermaid":"https://cdn.staticfile.org/mermaid/8.5.0/","valine":"https://cdn.staticfile.org/valine/1.4.14/","gitalk":"https://cdn.staticfile.org/gitalk/1.6.2/","blueimp_md5":"https://cdn.staticfile.org/blueimp-md5/2.13.0/","disqusjs":"https://cdn.jsdelivr.net/npm/disqusjs@1.0/dist/","hint":"/lib/hint/"},"fluid_config":{"favicon":"/img/favicon.png","apple_touch_icon":"/img/favicon.png","title_join_string":" - ","force_https":false,"code":{"copy_btn":true,"highlight":{"enable":true,"lib":"highlightjs","highlightjs":{"style":"Github Gist","bg_color":false},"prismjs":{"style":"default","preprocess":true}}},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"_","loop":false},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"right","visible":"hover","icon":""},"mouse_click":{"enable":false,"style":"values"}},"dark_mode":{"enable":true,"default":"auto"},"color":{"body_bg_color":"#eee","body_bg_color_dark":"#181c27","navbar_bg_color":"#2f4154","navbar_bg_color_dark":"#1f3144","navbar_text_color":"#fff","navbar_text_color_dark":"#d0d0d0","text_color":"#3c4858","text_color_dark":"#c4c6c9","sec_text_color":"#718096","sec_text_color_dark":"#a7a9ad","post_text_color":"#2c3e50","post_text_color_dark":"#c4c6c9","post_heading_color":"#1a202c","post_heading_color_dark":"#c4c6c9","post_link_color":"#0366d6","post_link_color_dark":"#1589e9","link_hover_color":"#30a9de","link_hover_color_dark":"#30a9de","link_hover_bg_color":"#f8f9fa","link_hover_bg_color_dark":"#364151","board_color":"#fff","board_color_dark":"#252d38"},"font":{"font_size":"16px","font_family":null,"code_font_size":"85%"},"custom_js":null,"custom_css":null,"custom_html":"","web_analytics":{"enable":false,"baidu":null,"google":null,"gtag":null,"tencent":{"sid":null,"cid":null},"woyaola":null,"cnzz":null,"leancloud":{"app_id":null,"app_key":null,"server_url":null}},"lazyload":{"enable":true,"onlypost":false},"daovoice":{"enable":false,"appid":""},"aplayer":{"enable":false,"autoplay":false,"loop":"all","order":"random","theme":"#b7daff","songs":[{"name":"name","artist":"artist","url":"/songs/test.mp3","cover":"/img/cover.jpg"},{"name":"name","artist":"artist","url":"https://...url.mp3","cover":"https://...cover.jpg"}]},"version":{"check":false},"navbar":{"blog_title":"吃面多放葱","ground_glass":{"enable":false,"px":3,"alpha":0.7},"menu":[{"key":"home","link":"/","icon":"iconfont icon-home-fill"},{"key":"category","link":"/categories/","icon":"iconfont icon-category-fill"},{"key":"tag","link":"/tags/","icon":"iconfont icon-tags-fill"},{"key":"about","link":"/about/","icon":"iconfont icon-user-fill"}]},"search":{"enable":true,"path":"/local-search.xml","generate_path":"/local-search.xml","field":"post","content":true},"scroll_down_arrow":{"enable":true,"banner_height_limit":90,"scroll_after_turning_page":true},"banner_parallax":true,"footer":{"statistics":{"enable":false,"source":"busuanzi","pv_format":"总访问量 {} 次","uv_format":"总访客数 {} 人"},"beian":{"enable":false,"icp_text":"京ICP证123456号","police_text":"京公网安备12345678号","police_code":12345678,"police_icon":"/img/police_beian.png"}},"scroll_top_arrow":{"enable":true},"index":{"banner_img":"/img/default.png","banner_img_height":100,"banner_mask_alpha":0.3,"post_default_img":"","slogan":{"enable":true,"text":"像蚂蚁一样工作，像蝴蝶一样生活"},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"category":true,"tag":true}},"page":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3},"post":{"banner_img":"/img/default.png","banner_img_height":70,"banner_mask_alpha":0.3,"meta":{"author":{"enable":false},"date":{"enable":true,"format":"LL a"},"wordcount":{"enable":true,"format":"{} 字"},"min2read":{"enable":true,"format":"{} 分钟","words":100},"views":{"enable":false,"source":"busuanzi","format":"{} 次"}},"updated":{"enable":false,"content":"本文最后更新于：","relative":false},"toc":{"enable":true,"headingSelector":"h1,h2,h3,h4,h5,h6","collapseDepth":0},"copyright":{"enable":true,"content":"本博客所有文章除特别声明外，均采用 <a href=\"https://creativecommons.org/licenses/by-sa/4.0/deed.zh\" rel=\"nofollow noopener\">CC BY-SA 4.0 协议</a> ，转载请注明出处！"},"prev_next":{"enable":true},"custom":{"enable":false,"content":"<img src=\"https://octodex.github.com/images/jetpacktocat.png\" class=\"rounded mx-auto d-block mt-5\" style=\"width:150px; height:150px;\">"},"image_zoom":{"enable":true},"footnote":{"enable":true,"header":""},"math":{"enable":false,"specific":false,"engine":"mathjax"},"mermaid":{"enable":false,"specific":false,"options":{"theme":"default"}},"comments":{"enable":false,"type":"disqus"}},"utterances":{"repo":null,"issue_term":"pathname","label":"utterances","theme":"github-light","theme_dark":"github-dark","crossorigin":"anonymous"},"disqus":{"shortname":null,"disqusjs":false,"apikey":null},"gitalk":{"clientID":null,"clientSecret":null,"repo":null,"owner":null,"admin":["name"],"id":"location.pathname","language":"zh-CN","labels":["Gitalk"],"perPage":10,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true},"valine":{"appid":null,"appkey":null,"placeholder":"说点什么","path":"window.location.pathname","avatar":"retro","meta":["nick","mail","link"],"pageSize":10,"lang":"zh-CN","highlight":false,"recordIP":false,"serverURLs":null},"changyan":{"appid":"","appkey":""},"livere":{"uid":""},"remark42":{"host":"https://remark.haoyizebo.com","site_id":"haoyizebo","max_shown_comments":10,"locale":"zh"},"archive":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null},"category":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"post_limit":10,"order_by":"-length","collapse_depth":0},"tag":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null,"tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"avatar":"/img/avatar.png","name":"蔺国防","introduce":"移动应用开发者，历史文学爱好者","icons":[{"class":"iconfont icon-github-fill","link":"https://github.com","tip":"GitHub"},{"class":"iconfont icon-douban-fill","link":"https://douban.com","tip":"豆瓣"},{"class":"iconfont icon-wechat-fill","qrcode":"/img/favicon.png"}]},"page404":{"banner_img":"/img/default.png","banner_img_height":85,"banner_mask_alpha":0.3,"subtitle":"Page not found"},"links":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"items":[{"title":"Fluid Docs","intro":"主题使用指南","link":"https://hexo.fluid-dev.com/docs/","image":"/img/favicon.png"},{"title":"Fluid Repo","intro":"主题 GitHub 仓库","link":"https://github.com/fluid-dev/hexo-theme-fluid","image":"/img/favicon.png"},{"title":"Fluid Example","intro":"主题操作示例","link":"https://hexo.fluid-dev.com/docs/example/","image":"/img/favicon.png"}]}}}},"excerpt":"","more":"<h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><p>Core Bluetooth 框架给iOS和Mac apps 提供与外部蓝牙设备交互的能力.例如,您的app能够发现,扫描,并且跟外部设备交互.比如心率计和数码恒温计.同样 Mac 和 iOS 设备也可以作为低功耗外部设备,给其他设备提供数据.</p>\n<p>在Core Bluetooth 中,中心设备和外部设备作为主要参与者.通常情况下我们通过一个app来实现中心设备角色,Core Bluetooth 也可以将我们的本地设备作为外部设备角色来实现.</p>\n<h3 id=\"iOS-App-状态影响蓝牙行为\"><a href=\"#iOS-App-状态影响蓝牙行为\" class=\"headerlink\" title=\"iOS App 状态影响蓝牙行为\"></a>iOS App 状态影响蓝牙行为</h3><p>当app处于后台或者挂起状态时,这种情况会影响蓝牙相关功能.默认情况下,app在后台或者挂起状态时,不能执行蓝牙任务.如果想要app在后台执行蓝牙任务,可以声明该app支持Core Bluetooth后台执行模式中的一项或者两项都支持.当app处于后台状态时,同一蓝牙任务的操作是不同的.在设计app时,要考虑这些差异.</p>\n<p>即使app支持后台操作,当内存不足时系统会随时终止后台应用,来给前台运行的app提供内存空间.iOS 7后,Core Bluetooth支持保存中心设备和外部设备管理者对象的状态.可以使用该特性去支持长时间调用蓝牙设备的操作.</p>\n<h3 id=\"遵循最佳实践来提高用户体验\"><a href=\"#遵循最佳实践来提高用户体验\" class=\"headerlink\" title=\"遵循最佳实践来提高用户体验\"></a>遵循最佳实践来提高用户体验</h3><p>由于无线广播会给设备电池造成不利影响.因此,设计app的时候尽可能减少无线广播的使用.遵循最佳实践来减少该方面的不利影响同时提高用户的体验.</p>\n<h2 id=\"Core-Bluetooth-概述\"><a href=\"#Core-Bluetooth-概述\" class=\"headerlink\" title=\"Core Bluetooth 概述\"></a>Core Bluetooth 概述</h2><p>本章节主要介绍开始使用Core Bluetooth 开发时需要了解的专业词汇和概念.</p>\n<blockquote>\n<p>重要: 一个 iOS app 在 iOS 10.0 之后的版本,必须在info.plist 文件中描述需要访问的数据类型,否则会崩溃.访问外部设备的指定数据,在info.plist 文件中必须包含 NSBluetoothPeripheralUsageDescription.</p>\n</blockquote>\n<h3 id=\"中心设备和外部设备-以及他们在蓝牙通信中的角色\"><a href=\"#中心设备和外部设备-以及他们在蓝牙通信中的角色\" class=\"headerlink\" title=\"中心设备和外部设备,以及他们在蓝牙通信中的角色\"></a>中心设备和外部设备,以及他们在蓝牙通信中的角色</h3><p>中心设备和外部设备是低功耗蓝牙通信中的来个主要参与者.中心设备使用来自与外部设备的信息去完成某项特定任务.下面的例子中,表示一个mac 或者 iOS app 用一种对用户来讲更友好的方式来展示来自于心率检测器的信息.</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/3340896-c9641636941a7f71.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<h4 id=\"中心设备发现并连接外围正在广播的设备\"><a href=\"#中心设备发现并连接外围正在广播的设备\" class=\"headerlink\" title=\"中心设备发现并连接外围正在广播的设备\"></a>中心设备发现并连接外围正在广播的设备</h4><p>外部设备以 advertising packet 的格式来发送广播.广播数据中包含外部设备的名称和主要功能.一个中心设备可用浏览和听取正在广播的外部设备内容.一个中心设备可以请求连接任何发现正在广播的外部设备.</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/3340896-5c28cac2a725ceed.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<h4 id=\"一个外部设备的数据如何构建\"><a href=\"#一个外部设备的数据如何构建\" class=\"headerlink\" title=\"一个外部设备的数据如何构建\"></a>一个外部设备的数据如何构建</h4><p>外部设备包含一项或者多项服务.一个服务是一个数据集合.举例子,一个心率计的服务可以用来显示来自于心率传感器的的心率数据.</p>\n<p>服务本身由特性或者其中包含的其他服务组成.一个特性提供外部设备服务的详细信息.举例子,心率服务包含两个特性,一个特性描述设备传感器的监听位置.另外一个特性传输测量的数据.</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/3340896-11772f3214f18ab9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<h4 id=\"中心设备扫描并且跟一个外部设备数据交互\"><a href=\"#中心设备扫描并且跟一个外部设备数据交互\" class=\"headerlink\" title=\"中心设备扫描并且跟一个外部设备数据交互\"></a>中心设备扫描并且跟一个外部设备数据交互</h4><p>一个中心设备和外部设备成功建立连接后,可以发现外部设备提供的所有服务和特性.<br>中心设备可以通过读写服务特性的值来跟外部设备的服务进行交互.举例来说,app 请求当前房间的室温.或者提供给恒温计一个值来设定室温.</p>\n<h3 id=\"中心设备-外部设备-以及外部设备数据如何表示\"><a href=\"#中心设备-外部设备-以及外部设备数据如何表示\" class=\"headerlink\" title=\"中心设备,外部设备,以及外部设备数据如何表示\"></a>中心设备,外部设备,以及外部设备数据如何表示</h3><p>本地中心设备管理者通过 CBCentralManager 对象表示.这个对象用来管理远程外部设备的遍历,发现,连接正在发送广播的外部设备.</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/3340896-cc9e991217247c05.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Core Bluetooth objects on the central side\"></p>\n<p>远程外部设备 用CBPeripheral对象来表示, 它的数据通过 CBService 和 CBCharacteristic 对象来表示.<br><img src=\"http://upload-images.jianshu.io/upload_images/3340896-0fd143eeaa33aada.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<p>外部设备管理者 用CBPeripheralManager对象来表示. 这些对象用来管理发布的服务和相关特性.并且通过广播来给远程中心设备(CBCentral 对象)发送服务. Peripheral manager对象也用来响应远程中心设备的读写请求.<br><img src=\"http://upload-images.jianshu.io/upload_images/3340896-3b76d790666594fe.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<p>外部设备管理者(CBPeripheralManger)的数据通过CBMutableService 和 CBMutableCharacteristic 对象来表示.<br><img src=\"http://upload-images.jianshu.io/upload_images/3340896-6bb597fc20300ec7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"A local peripheral&#39;s tree of services and characteristics\"></p>\n<h2 id=\"执行中心角色任务\"><a href=\"#执行中心角色任务\" class=\"headerlink\" title=\"执行中心角色任务\"></a>执行中心角色任务</h2><p>本节学习内容:</p>\n<ul>\n<li>启动一个中心设备管理者对象</li>\n<li>发现并链接正在广播的外部设备</li>\n<li>扫描链接的外部设备数据</li>\n<li>给一个外部设备服务特性值发送读写请求</li>\n<li>订阅一个特性值的变动通知</li>\n</ul>\n<h3 id=\"启动一个中心设备管理者\"><a href=\"#启动一个中心设备管理者\" class=\"headerlink\" title=\"启动一个中心设备管理者\"></a>启动一个中心设备管理者</h3><p>创建CBCentralManager</p>\n<pre><code class=\"hljs crystal\">myCentralManager = [[CBCentralManager alloc] <span class=\"hljs-symbol\">initWithDelegate:</span> <span class=\"hljs-keyword\">self</span> <span class=\"hljs-symbol\">queue:</span><span class=\"hljs-literal\">nil</span> <span class=\"hljs-symbol\">options:</span><span class=\"hljs-literal\">nil</span>];</code></pre>\n<p>self 必须实现 centralMangerDidUpdateState: 代理方法.更多内容请看<a href=\"https://developer.apple.com/documentation/corebluetooth/cbcentralmanagerdelegate\">CBCentralManagerDelegate Protocol Reference</a></p>\n<h3 id=\"发现正在广播的外部设备\"><a href=\"#发现正在广播的外部设备\" class=\"headerlink\" title=\"发现正在广播的外部设备\"></a>发现正在广播的外部设备</h3><pre><code class=\"hljs crystal\">[myCentralManager <span class=\"hljs-symbol\">scanForPeripheralsWithServices:</span><span class=\"hljs-literal\">nil</span> <span class=\"hljs-symbol\">options:</span><span class=\"hljs-literal\">nil</span>];</code></pre>\n\n<blockquote>\n<p>注意: 如果给第一个参数指定为nil,central manager返回所有发现的外部设备.在真实情况中,一般会指定一个CBUUID对象组成的数组,每个对象表示一个服务的唯一标识.当指定好UUID对象数组后,central manager 仅返回正在广播相关服务的外部设备.浏览最感兴趣的外部设备.<br>UUIDs,和CBUUID对象详细内容请看<a href=\"https://developer.apple.com/library/content/documentation/NetworkingInternetWeb/Conceptual/CoreBluetooth_concepts/PerformingCommonPeripheralRoleTasks/PerformingCommonPeripheralRoleTasks.html#//apple_ref/doc/uid/TP40013257-CH4-SW8\">Services and Characteristics Are Identified by UUIDs</a></p>\n</blockquote>\n<p>central manager 每次发现外部设备,就会调用代理对象的  cetralManager:didDiscoverPeripheral:advertisementData:RSSI: 方法.新发现的外部设备以 CBPeripheral 对象返回.如果打算链接发现的外部设备,给该对象一个强引用,系统就不会释放它.</p>\n<pre><code class=\"hljs erlang\">- <span class=\"hljs-params\">(void)</span>centralManager:<span class=\"hljs-params\">(CBCentralManager *)</span>central didDiscoverPeripheral:<span class=\"hljs-params\">(CBPeripheral *)</span>peripheral advertisementData:<span class=\"hljs-params\">(NSDictionary *)</span>advertisementData RSSI:<span class=\"hljs-params\">(NSNUmber *)</span>RSSI &#123;\n    NSLog<span class=\"hljs-params\">(@<span class=\"hljs-string\">&quot;Discovered %@&quot;</span>, peripheral.name)</span>;\n    self.discoverdPeripheral = peripheral;\n    ...</code></pre>\n\n<p>如果希望链接多个设备,需要用一个NSArray来存储发现的外部设备.一旦所有想连接的设备都被发现,停止浏览其他设备来节省电量:</p>\n<pre><code class=\"hljs ini\"><span class=\"hljs-section\">[myCentralManager stopScan]</span><span class=\"hljs-comment\">;</span></code></pre>\n\n<h3 id=\"链接发现的外部设备\"><a href=\"#链接发现的外部设备\" class=\"headerlink\" title=\"链接发现的外部设备\"></a>链接发现的外部设备</h3><pre><code class=\"hljs groovy\">[myCentralManager <span class=\"hljs-attr\">connectPeripheral:</span>peripheral <span class=\"hljs-attr\">options:</span>nil];</code></pre>\n\n<p>如果链接请求成功,central manager 调用代理对象的centralManager:didConnectPeripheral:方法.在跟外部设备交互前,设置它的代理来确保代理接受到了合适的回调:</p>\n<pre><code class=\"hljs erlang\">- <span class=\"hljs-params\">(void)</span>centralManager:<span class=\"hljs-params\">(CBCentralManager *)</span>central didConnectPeripheral:<span class=\"hljs-params\">(CBPeripheral *)</span>peripheral &#123;\n    \n    NSLog<span class=\"hljs-params\">(@<span class=\"hljs-string\">&quot;Peripheral connected&quot;</span>)</span>;\n    peripheral.delegate = self;\n    ...</code></pre>\n\n<h3 id=\"发现链接外部设备的服务\"><a href=\"#发现链接外部设备的服务\" class=\"headerlink\" title=\"发现链接外部设备的服务\"></a>发现链接外部设备的服务</h3><p>跟一个外部设备建立连接后,可以浏览它的数据.首先浏览外部设备提供的可用服务.由于外部设备发送广播的数据限制,会发现一个外部设备提供的服务比广播的更多.可以使用discoverServices: 方法来发现一个外部设备提供的所有服务.</p>\n<pre><code class=\"hljs ini\"><span class=\"hljs-section\">[peripheral discoverServices:nil]</span><span class=\"hljs-comment\">;</span></code></pre>\n<blockquote>\n<p>注意: 在一个app中,一般不给参数传nil,因为这样会返回所有的可用服务.由于一个外部设备有许多不相关的服务,发现所有可用服务不仅浪费电量而且浪费时间.因此,指定服务的UUIDs来发现指定的服务.</p>\n</blockquote>\n<p>当指定的服务发现后,连接的外部设备(CBPeripheral对象)调用代理对象的 peripheral:didDiscoverServices: 方法.Core Bluetooth 创建一个CBService数组—</p>\n<pre><code class=\"hljs erlang\">\n- <span class=\"hljs-params\">(void)</span>peripheral:<span class=\"hljs-params\">(CBPeripheral *)</span>peripheral didDiscoverServices:<span class=\"hljs-params\">(NSerror *)</span>error&#123;\n    \n    for <span class=\"hljs-params\">(CBService *service in peripheral.services)</span> &#123;\n        \n        NSLog<span class=\"hljs-params\">(@<span class=\"hljs-string\">&quot;Discovered service %@&quot;</span>, service)</span>;\n        ...\n    &#125;\n    ...</code></pre>\n\n<h3 id=\"发现一个服务的特性\"><a href=\"#发现一个服务的特性\" class=\"headerlink\" title=\"发现一个服务的特性\"></a>发现一个服务的特性</h3><pre><code class=\"hljs groovy\">NSLog (@<span class=\"hljs-string\">&quot;Discovering characteristics for service %@&quot;</span>, interestingService);\n[peripheral <span class=\"hljs-attr\">discoverCharacteristics:</span>nil <span class=\"hljs-attr\">forService:</span>interestingService];</code></pre>\n\n<blockquote>\n<p>注意: 真实环境中,第一个参数一般不传nil,通常指定想要找的特性UUIDs</p>\n</blockquote>\n<p>当指定服务的特性被发现后,外部设备调用代理对象的 peripheral:didDiscoverCharacteristicsForService:error: 方法.Core Bluetooth创建一个包含CBCharacteristic对象的数组来包含所有发现的特性.</p>\n<pre><code class=\"hljs erlang\">- <span class=\"hljs-params\">(void)</span>peripheral:<span class=\"hljs-params\">(CBPeripheral *)</span>peripheral didDiscoverCharacteristicsForService:<span class=\"hljs-params\">(CBService *)</span>service error:<span class=\"hljs-params\">(NSError *)</span>error &#123;\n    \n    for <span class=\"hljs-params\">(CBCharacteristic *characteristic in service.characteristics)</span> &#123;\n        \n        NSLog<span class=\"hljs-params\">(@<span class=\"hljs-string\">&quot;Discovered characteristic %@&quot;</span>, characteristic)</span>;\n        ...\n    &#125;\n    ...</code></pre>\n<h3 id=\"获取一个特性的值\"><a href=\"#获取一个特性的值\" class=\"headerlink\" title=\"获取一个特性的值\"></a>获取一个特性的值</h3><p>直接读取特性的value或者订阅它来获取特性的值.</p>\n<h4 id=\"读取特性值\"><a href=\"#读取特性值\" class=\"headerlink\" title=\"读取特性值\"></a>读取特性值</h4><pre><code class=\"hljs less\"><span class=\"hljs-selector-tag\">NSLog</span>(@<span class=\"hljs-string\">&quot;Reading value for characteristic %@&quot;</span>, interestingCharacteristic);\n<span class=\"hljs-selector-attr\">[peripheral readValueForCharacteristic:interestingCharacteristic]</span>;</code></pre>\n\n<p>当尝试读取特性值时,外部设备调用代理对象的 peripheral:didUpdateValueForCharacteristic:error:方法来获取特性值.</p>\n<pre><code class=\"hljs groovy\">- (<span class=\"hljs-keyword\">void</span>)<span class=\"hljs-attr\">peripheral:</span> (CBPeripheral *)peripheral <span class=\"hljs-attr\">didUpdateValueForCharacteristic:</span>(CBCharacteristic *)characteristic <span class=\"hljs-attr\">error:</span>(NSError *)error &#123;\n    \n    NSData *data = characteristic.value;\n    <span class=\"hljs-comment\">//parse the data as needed </span>\n    ...</code></pre>\n\n<blockquote>\n<p>注意:不是所有的特性都是可读的.通过CBCharacteristicPropertyRead属性常量来检测特性是否可读.如果不可读,会返回适当的错误.</p>\n</blockquote>\n<h4 id=\"订阅一个特性值\"><a href=\"#订阅一个特性值\" class=\"headerlink\" title=\"订阅一个特性值\"></a>订阅一个特性值</h4><pre><code class=\"hljs groovy\">[peripheral <span class=\"hljs-attr\">setNotifyValue:</span>YES <span class=\"hljs-attr\">forCharacteristic:</span> interestingCharacteristic];</code></pre>\n\n<pre><code class=\"hljs erlang\">当订阅失败时,可以实现下面方法来获取订阅失败原因.\n- <span class=\"hljs-params\">(void)</span>peripheral:<span class=\"hljs-params\">(CBPeripheral *)</span>peripheral didUpdateNotificationStateForCharacteristic:<span class=\"hljs-params\">(CBCharacteristic *)</span>characteristic error:<span class=\"hljs-params\">(NSError *)</span>error &#123;\n    \n    if <span class=\"hljs-params\">(error)</span> &#123;\n        \n       NSLog<span class=\"hljs-params\">(@<span class=\"hljs-string\">&quot;Error changing notification state: %@&quot;</span>, [error localizedDescription])</span> ;\n    &#125;\n    ...</code></pre>\n\n<blockquote>\n<p>注意:不是所有的特性都可订阅.可以通过属性的CBCharacteristicPropertyNotify或者CBCharacteristicPropertyIndicate常量来检测属性是否可被订阅.</p>\n</blockquote>\n<h3 id=\"给一个特性写入值\"><a href=\"#给一个特性写入值\" class=\"headerlink\" title=\"给一个特性写入值\"></a>给一个特性写入值</h3><pre><code class=\"hljs groovy\">\nNSLog(@<span class=\"hljs-string\">&quot;Wrriting value for characteristic %@&quot;</span>, interestingCharacteristic);\n[peripheral <span class=\"hljs-attr\">writeValue:</span>dataToWrite <span class=\"hljs-attr\">forCharacteristic:</span>interestingCharacteristic <span class=\"hljs-attr\">type:</span>CBCharacteristicWriteWithResponse];\n</code></pre>\n<p>代理对象调用下面方法,通过CBCharacteristicWriteWithResponse来告诉app写入是否成功.</p>\n<pre><code class=\"hljs erlang\">- <span class=\"hljs-params\">(void)</span>peripheral:<span class=\"hljs-params\">(CBPeripheral *)</span>peripheral\ndidWriteValueForCharacteristic:<span class=\"hljs-params\">(CBCharacteristic *)</span>characteristic\n             error:<span class=\"hljs-params\">(NSError *)</span>error &#123;\n \n    if <span class=\"hljs-params\">(error)</span> &#123;\n        NSLog<span class=\"hljs-params\">(@<span class=\"hljs-string\">&quot;Error writing characteristic value: %@&quot;</span>,</span>\n<span class=\"hljs-params\">            [error localizedDescription])</span>;\n    &#125;\n    ...</code></pre>\n\n<blockquote>\n<p>注意:特性仅支持特定的写入类型.可以通过一个特性的CBCharacteristicPropertyWriteWithoutResponse 或者 CBCharacteristicPropertyWrite 常量来检查支持的写入类型.</p>\n</blockquote>\n<h2 id=\"执行外部角色任务\"><a href=\"#执行外部角色任务\" class=\"headerlink\" title=\"执行外部角色任务\"></a>执行外部角色任务</h2><p>本节学习内容:</p>\n<ul>\n<li>启动一个外部设备管理对象</li>\n<li>设置本地外部设备的服务和特性</li>\n<li>给设备的本地数据库发布服务和特性</li>\n<li>广播服务</li>\n<li>响应一个连接的中心设备的读写请求</li>\n<li>给订阅的中心设备发送更新后的特性值</li>\n</ul>\n<h3 id=\"启动一个外部设备管理者\"><a href=\"#启动一个外部设备管理者\" class=\"headerlink\" title=\"启动一个外部设备管理者\"></a>启动一个外部设备管理者</h3><pre><code class=\"hljs crystal\">myPeripheralManager = [[CBPeripheralManager alloc] <span class=\"hljs-symbol\">initWithDelegate:</span><span class=\"hljs-keyword\">self</span> <span class=\"hljs-symbol\">queue:</span><span class=\"hljs-literal\">nil</span> <span class=\"hljs-symbol\">options:</span> <span class=\"hljs-literal\">nil</span>];</code></pre>\n\n<p>创建CBPeripheralManager对象后 self 必须实现 peripheralMangagerDidUpdateState: 方法.  详细内容请看 <a href=\"\">CBPeripheralManagerDelegate Protocol Reference</a> </p>\n<h3 id=\"设置外部设备管理者的服务和特性\"><a href=\"#设置外部设备管理者的服务和特性\" class=\"headerlink\" title=\"设置外部设备管理者的服务和特性\"></a>设置外部设备管理者的服务和特性</h3><p>一个本地外部设备服务和特性的数据库以类似于树状的方式组成.必须以这种方式去组织本地外部设备的服务和特性. 在执行这些任务中首先要理解如何识别这些服务和特性.</p>\n<h4 id=\"服务和特性通过UUIDs来识别\"><a href=\"#服务和特性通过UUIDs来识别\" class=\"headerlink\" title=\"服务和特性通过UUIDs来识别\"></a>服务和特性通过UUIDs来识别</h4><p>iOS中通过CBUUID对象来表示外部设备指定的服务和特性.比如,128位的UUID心率服务可以使用CBUUID 对象的 UUIDWithString 方法来表示预定义的16位UUID.</p>\n<pre><code class=\"hljs groovy\">CBUUID *heartRateServiceUUID = [CBUUID <span class=\"hljs-attr\">UUIDWithString:</span> @<span class=\"hljs-string\">&quot;180D&quot;</span>];</code></pre>\n\n<p>当从一个预定义的16位UUID中创建一个CBUUID对象时,Core Bluetooth 会用Bluetooth base UUID 预填128位UUID的剩下的部分.</p>\n<h4 id=\"创建自有的UUIDs来自定义服务和特性\"><a href=\"#创建自有的UUIDs来自定义服务和特性\" class=\"headerlink\" title=\"创建自有的UUIDs来自定义服务和特性\"></a>创建自有的UUIDs来自定义服务和特性</h4><p>使用命令行实用工具 uuidgen 很容易生成一个128位的UUIDs.</p>\n<pre><code class=\"hljs angelscript\">$ uuidgen \n<span class=\"hljs-number\">71</span>DA3FD1<span class=\"hljs-number\">-7E10</span><span class=\"hljs-number\">-41</span>C1-B16F<span class=\"hljs-number\">-4430</span>B506CDE7</code></pre>\n<p>然后使用这个UUID去创建一个CBUUID对象</p>\n<pre><code class=\"hljs subunit\">CBUID *myCustomServiceUUID = [CBUUID UUIDWithString:@&quot;71DA3FD1<span class=\"hljs-string\">-7</span>E10<span class=\"hljs-string\">-41</span>C1-B16F<span class=\"hljs-string\">-4430</span>B506CDE7&quot;];</code></pre>\n\n<h4 id=\"创建服务和特性树\"><a href=\"#创建服务和特性树\" class=\"headerlink\" title=\"创建服务和特性树\"></a>创建服务和特性树</h4><pre><code class=\"hljs groovy\">myCharacteristic = [[CBMutableCharacteristic alloc] <span class=\"hljs-attr\">initWithType:</span>myCharacteristicUUID <span class=\"hljs-attr\">properties:</span>CBCharacteristicPropertyRead <span class=\"hljs-attr\">Value:</span> myValue <span class=\"hljs-attr\">permissions:</span>CBAttributePermissionsReadable];</code></pre>\n<blockquote>\n<p>注意:如果指定一个特性值.该值会缓存并且它的属性和许可被设置为可读.因此,如果你需要一个特性值可写,或者期望发布的服务特性能够被改变.必须指定value为nil.</p>\n</blockquote>\n<p>现在已经创建了一个可变特性,可以创建一个可变服务跟其相关联.按照下面方法做</p>\n<pre><code class=\"hljs ini\"><span class=\"hljs-attr\">myService</span> = [[CBMutableService alloc] initWithType:myServiceUUID primary:<span class=\"hljs-literal\">YES</span>]<span class=\"hljs-comment\">;</span>\n<span class=\"hljs-attr\">myService.characteristics</span> = @[myCharacteristic]<span class=\"hljs-comment\">;</span></code></pre>\n<h3 id=\"发布服务和特性\"><a href=\"#发布服务和特性\" class=\"headerlink\" title=\"发布服务和特性\"></a>发布服务和特性</h3><pre><code class=\"hljs ini\"><span class=\"hljs-section\">[myPeripheralManager addService:myService]</span><span class=\"hljs-comment\">;</span></code></pre>\n\n<p>当调用这个方法去发布服务时,外部设备管理者会通过他的代理对象调用 peripheralManager:didAddService:error: 方法.如果过发生错误或者无法发布服务,则实现该代理方法来获取错误原因.</p>\n<pre><code class=\"hljs erlang\">- <span class=\"hljs-params\">(void)</span>peripheralManager:<span class=\"hljs-params\">(CBPeripheralManager *)</span>peripheral\n            didAddService:<span class=\"hljs-params\">(CBService *)</span>service\n                    error:<span class=\"hljs-params\">(NSError *)</span>error &#123;\n \n    if <span class=\"hljs-params\">(error)</span> &#123;\n        NSLog<span class=\"hljs-params\">(@<span class=\"hljs-string\">&quot;Error publishing service: %@&quot;</span>, [error localizedDescription])</span>;\n    &#125;\n    ...</code></pre>\n\n<blockquote>\n<p>当给外部设备的数据库发布一个服务和相关特性后,服务被缓存并且无法修改.</p>\n</blockquote>\n<h3 id=\"广播服务\"><a href=\"#广播服务\" class=\"headerlink\" title=\"广播服务\"></a>广播服务</h3><pre><code class=\"hljs scheme\">[<span class=\"hljs-name\">myPeripheralManager</span> startAdvertising:@&#123; CBAdvertisementDataServiceUUIDsKey : @[<span class=\"hljs-name\">myFirstService.UUID</span>, mySecondService.UUID]&#125;]<span class=\"hljs-comment\">;</span></code></pre>\n\n<p>当在本地外部设备发送广播时,外部设备管者的代理对象调用 peripheralManagerDidStartAdvertising:error: 方法.如果出现错误或者服务无法广播.实现该方法来获取错误信息.</p>\n<pre><code class=\"hljs erlang\">- <span class=\"hljs-params\">(void)</span>peripheralManagerDidStartAdvertising:<span class=\"hljs-params\">(CBPeripheralManager *)</span>peripheral\n                                       error:<span class=\"hljs-params\">(NSError *)</span>error &#123;\n \n    if <span class=\"hljs-params\">(error)</span> &#123;\n        NSLog<span class=\"hljs-params\">(@<span class=\"hljs-string\">&quot;Error advertising: %@&quot;</span>, [error localizedDescription])</span>;\n    &#125;\n    ...</code></pre>\n\n<p>一旦广播数据开始,远程中心设备能够发现并和本地外部设备建立连接.</p>\n<h3 id=\"响应中心设备的读写请求\"><a href=\"#响应中心设备的读写请求\" class=\"headerlink\" title=\"响应中心设备的读写请求\"></a>响应中心设备的读写请求</h3><pre><code class=\"hljs erlang\">- <span class=\"hljs-params\">(void)</span>peripheralManager:<span class=\"hljs-params\">(CBPeripheralManager *)</span>peripheral didReceiveReadRequest:<span class=\"hljs-params\">(CBATTRequest *)</span>request &#123;\n    \n    if <span class=\"hljs-params\">([request.characteristic.UUID isEqual:myCharacteristic.UUID])</span> &#123;\n        ...</code></pre>\n\n<p>如果特性的UUID匹配,下一步确定请求的索引位置是否超出特性值的边界.</p>\n<pre><code class=\"hljs applescript\"><span class=\"hljs-keyword\">if</span> (request.<span class=\"hljs-built_in\">offset</span> &gt; myCharacteristic.value.<span class=\"hljs-built_in\">length</span>) &#123;\n    \n    [myPeripheralManager respondToRequest:request withResult:CBATTErrorInvalidOffset];\n    \n<span class=\"hljs-built_in\">    return</span>;\n&#125;</code></pre>\n\n<p>加入请求的offset合格.现在给请求特性属性赋值.</p>\n<pre><code class=\"hljs ini\"><span class=\"hljs-attr\">request.value</span> = [myCharacteristic.value subdataWithRange:NSMakeRange(request.<span class=\"hljs-literal\">off</span>set, myCharacteristic.value.length - request.<span class=\"hljs-literal\">off</span>set)]<span class=\"hljs-comment\">;</span></code></pre>\n\n<p>设置好值后,响应远程中心设备请求.</p>\n<pre><code class=\"hljs groovy\">[myPeripheralManager <span class=\"hljs-attr\">respondToRequest:</span>request <span class=\"hljs-attr\">withResult:</span>CBATTErrorSuccess];\n...</code></pre>\n\n<p>每调用 peripheralManager:didReceiveReadRequest: 方法一次,就会调用 respondToRequst:withResult: 一次.</p>\n<blockquote>\n<p>注意: 如果特性UUID不匹配或者无法完成读请求.调用 respondToRequest:withResult: 方法,并返回合适的错误原因.(CBATTError Constants)</p>\n</blockquote>\n<p>处理一个写入请求,直接将CBATTRequest 对象的值写入特性.</p>\n<pre><code class=\"hljs ini\"><span class=\"hljs-attr\">myCharacteristic.value</span> = request.value<span class=\"hljs-comment\">;</span></code></pre>\n\n<p>传入的写入请求数组中包含CBATTRequest 对象.每个对象写入特性都会调用  respondToRequest:withResult: 方法.</p>\n<pre><code class=\"hljs scheme\">[<span class=\"hljs-name\">myPeripheralManager</span> respondToRequest:[<span class=\"hljs-name\">request</span> objectAtIndeex:0] withResult:CBATTErrorSuccess]<span class=\"hljs-comment\">;</span></code></pre>\n\n<h3 id=\"给订阅的中心设备发送更新的特性值\"><a href=\"#给订阅的中心设备发送更新的特性值\" class=\"headerlink\" title=\"给订阅的中心设备发送更新的特性值\"></a>给订阅的中心设备发送更新的特性值</h3><p>中心设备订阅通知后会调用该方法</p>\n<pre><code class=\"hljs erlang\">- <span class=\"hljs-params\">(void)</span>peripheralManager:<span class=\"hljs-params\">(CBPeripheralManager *)</span>peripheral central:<span class=\"hljs-params\">(CBCentral *)</span>central didSubscribeToCharacteristic:<span class=\"hljs-params\">(CBCharacteristic *)</span>characteristic &#123;\n    \n    NSLog<span class=\"hljs-params\">(@<span class=\"hljs-string\">&quot;Central subscribed to characteristic %@&quot;</span>, characteristic)</span>;\n    ...</code></pre>\n\n<pre><code class=\"hljs groovy\">NSData *updatedValue = <span class=\"hljs-comment\">//fetch the characteristic&#x27;s new value </span>\n\nBOOL didSendValue = [myPeripheralManager <span class=\"hljs-attr\">updateValue:</span>updatedValue <span class=\"hljs-attr\">forCharacteristic:</span>characteristic <span class=\"hljs-attr\">onSubscribedCentrals:</span>nil];</code></pre>\n\n<h2 id=\"iOS-Apps-中-Core-Bluetooth-的后台处理\"><a href=\"#iOS-Apps-中-Core-Bluetooth-的后台处理\" class=\"headerlink\" title=\"iOS Apps 中 Core Bluetooth 的后台处理\"></a>iOS Apps 中 Core Bluetooth 的后台处理</h2><p>对于iOS apps,了解app在后台还是前台运行非常重要.一个app在后台的行为必须不同于前台.因为系统提供的资源是有限的.对于在iOS上所有的后台操作讨论,请看<a href=\"https://developer.apple.com/library/content/documentation/iPhone/Conceptual/iPhoneOSProgrammingGuide/BackgroundExecution/BackgroundExecution.html#//apple_ref/doc/uid/TP40007072-CH4\">Background Execution</a> in <a href=\"https://developer.apple.com/library/content/documentation/iPhone/Conceptual/iPhoneOSProgrammingGuide/Introduction/Introduction.html#//apple_ref/doc/uid/TP40007072\">App Programming Guide for iOS</a></p>\n<p>默认情况下,许多普通的Core Bluetooth 任务—中心设备和外部设备都有— 在后台或者挂起模式下都是禁用的.也就是说,您需要声明您的app去支持Core Bluetooth后台执行模式,从而允许您的app能够从挂起状态中唤醒去处理某些蓝牙相关的事件.即使您的app不需要所有范围内的后台处理支持.当重要事件发生后仍然可以要求系统提示.</p>\n<p>即使您的app支持一种或者两种Core Bluetooth 后台执行模式,但是它也不能永远运行. 某些情况下,系统会中为了给前台运行的app释放内存从而终止您的app.从而使app激活的或者添加的链接丢失.</p>\n<h3 id=\"只在前台使用Core-Bluetooth的Apps\"><a href=\"#只在前台使用Core-Bluetooth的Apps\" class=\"headerlink\" title=\"只在前台使用Core Bluetooth的Apps\"></a>只在前台使用Core Bluetooth的Apps</h3><p>绝大多数apps,除非您请求后台执行特定任务的许可,否则您的app短暂进入后台状态后就会转到挂起状态.在挂起状态下,您的app无法执行蓝牙相关任务.也不能感知任何蓝牙相关事件,直到它恢复到前台运行.</p>\n<p>在中心设备这边,只在前台执行的apps—那些没有声明支持Core Bluetooth后台执行模式任何一种的app,在后台状态或者挂起状态是无法浏览或者发现正在广播的外部设备. 在外部设备这边,当一个仅支持前台模式的app处于挂起状态时，所有蓝牙相关的事件发生时将通过系统添加到队列。并且当app恢复到前台时发送给它。也就是说，Core Bluetooth 提供一种方式，当某些中心设备角色事件发生时提醒用户。用户然后能够利用这些提示来决定是否一个特殊事件许可app返回到前台。<br>您可以在调用CBCentralManager 类的 connectPeripheral:options: 方法使用下列的外部设备链接可选项，利用这些提示来链接一个远程外部设备。</p>\n<ul>\n<li>CBConnectPeripheralOptionNotifyOnConnectionKey</li>\n<li>CBConnectPeripheralOptionNotifyOnDisconnectionKey</li>\n<li>CBConnectPeripheralOptionNotifyOnNotificationKey</li>\n</ul>\n<h4 id=\"Core-Bluetooth-后台执行模式\"><a href=\"#Core-Bluetooth-后台执行模式\" class=\"headerlink\" title=\"Core Bluetooth 后台执行模式\"></a>Core Bluetooth 后台执行模式</h4><p>当需要app在后台执行一些蓝牙相关任务时，必须在info.plist 文件中声明它支持一种蓝牙后台执行模式。<br>info.plist 中文件 添加 key 为 UIBackgroundModes, 然后给一个数组中添加下面的字符串：</p>\n<ul>\n<li>bluetooth-central</li>\n<li>bluetooth-peripheral</li>\n</ul>\n<h4 id=\"蓝牙-中心设备后台执行模式\"><a href=\"#蓝牙-中心设备后台执行模式\" class=\"headerlink\" title=\"蓝牙-中心设备后台执行模式\"></a>蓝牙-中心设备后台执行模式</h4><p>记住在后台浏览外部设备的操作跟在前台时不同的。</p>\n<ul>\n<li>CBCentralManagerScanOptionAllowDuplicatesKey 浏览可选键 被忽略，并且多个正在广播的外部设备发现合并成一个发现事件。</li>\n<li>如果所有正在扫描外部设备的app都在后台，中心设备的内部扫描广播的包也相继增长。结果，发现一个正在广播的外部设备的时间也会变长。<br>这些变动帮助最小化无限广播的使用,并且提高电池使用寿命。</li>\n</ul>\n<h4 id=\"蓝牙-外部设备-后台执行模式\"><a href=\"#蓝牙-外部设备-后台执行模式\" class=\"headerlink\" title=\"蓝牙-外部设备 后台执行模式\"></a>蓝牙-外部设备 后台执行模式</h4><p>当app处于后台状态 时，广播跟前台是不同的：</p>\n<ul>\n<li>CBAdvertisementDataLocalNameKey 被忽略，本地外部设备的名字也不会被广播。</li>\n<li>所有包含在CBAdvertisementDataServiceUUIDsKey对应值下的服务UUIDs被放置在一个特殊的“溢出”区。只有一个iOS设备明确要求扫描特它们时，才能被发现。</li>\n<li>如果所有正在广播的apps在后台状态，外部设备发送广播的频率会降低。</li>\n</ul>\n<h3 id=\"更好地使用后台执行模式\"><a href=\"#更好地使用后台执行模式\" class=\"headerlink\" title=\"更好地使用后台执行模式\"></a>更好地使用后台执行模式</h3><p>由于处理蓝牙相关事件会使用无线电，无线电的使用会给电池寿命带来负面影响<br>最小化在后台状态下的工作量。app被唤醒的蓝牙相关事件应该尽快处理以便它能再次挂起。<br>任何声明支持核心蓝牙后台执行模式的app 必须遵循一些原则：</p>\n<ul>\n<li>Apps 应该基于会话类 并且提供一个接口允许用户决定何时开始和结束蓝牙相关事件的发送。</li>\n<li>在被唤醒状态下，一个app有大约10秒时间去处理一项任务。 理想情况下，应该尽快处理任务并且允许再次进入后台。Apps 在后台执行过长时间会被系统限制或者杀死。</li>\n<li>Apps 不应该将唤醒作为一个机会去处理跟唤醒不相关的任务。</li>\n</ul>\n<h3 id=\"在后台执行长时间操作\"><a href=\"#在后台执行长时间操作\" class=\"headerlink\" title=\"在后台执行长时间操作\"></a>在后台执行长时间操作</h3><h4 id=\"状态保存和恢复\"><a href=\"#状态保存和恢复\" class=\"headerlink\" title=\"状态保存和恢复\"></a>状态保存和恢复</h4><p>对于一个给定的CBCentralManager对象， 系统记录下面内容：</p>\n<ul>\n<li>中心管理者的当时正在搜索的服务（并且包含开始扫描时所有指定扫描的可选项）</li>\n<li>中心管理者当时正在尝试连接或者已经连接的外部设备</li>\n<li>中心管理者当时订阅的特性</li>\n</ul>\n<p>对于CBPeripheralManager对象，系统记录下面内容：</p>\n<ul>\n<li>外部设备管理者当时正在广播的数据</li>\n<li>外部设备管理者发布给设备数据库的服务</li>\n<li>订阅外部设备服务特性值的中心设备。</li>\n</ul>\n<p>在创建中心管理者对象的时候就需要添加状态保存和恢复策略</p>\n<pre><code class=\"hljs groovy\">myCentralManager = [[CBCentralManager alloc] <span class=\"hljs-attr\">initWithDelegate:</span>self <span class=\"hljs-attr\">queue:</span>nil <span class=\"hljs-attr\">options:</span>@&#123; <span class=\"hljs-attr\">CBCentralManagerOptionRestoreIdentifierKey :</span> @“myCentralManagerIdentifer”&#125;];</code></pre>\n<p>外部设备管理者使用CBPeripheralManagerOptionRestoreIdentiferKey 来初始化。</p>\n<p>app重新启动时，可以获取所有系统保存的唯一标识</p>\n<pre><code class=\"hljs objectivec\">- (<span class=\"hljs-built_in\">BOOL</span>)application:(<span class=\"hljs-built_in\">UIApplication</span> *)application\ndidFinishLaunchingWithOptions:(<span class=\"hljs-built_in\">NSDictionary</span> *)launchOptions &#123;\n \n    <span class=\"hljs-built_in\">NSArray</span> *centralManagerIdentifiers =\n        launchOptions[<span class=\"hljs-built_in\">UIApplicationLaunchOptionsBluetoothCentralsKey</span>];\n    ...</code></pre>\n\n<h4 id=\"实现合适的恢复代理方法\"><a href=\"#实现合适的恢复代理方法\" class=\"headerlink\" title=\"实现合适的恢复代理方法\"></a>实现合适的恢复代理方法</h4><blockquote>\n<p>重要:对于存储状态并需要恢复状态的app,当app重启进入后台处理蓝牙相关事件时,先调用 centralManager:willRestoreState: 和 peripheralManager:willRestoreState: 方法.如果没有保存状态,则调用 centralManagerDidUpdateState: 和 peripheralManagerDidUpdateState: 代理方法.</p>\n</blockquote>\n<pre><code class=\"hljs pf\">- (void)centralManager:(CBCentralManager *)central willRestoreState:(NSDictionary *)<span class=\"hljs-keyword\">state</span>&#123;\n    \n    NSArray *peripherals = <span class=\"hljs-keyword\">state</span>[CBCentralManagerRestoredStatePeripheralKey];\n    ...</code></pre>\n\n<h4 id=\"更新初始化进程\"><a href=\"#更新初始化进程\" class=\"headerlink\" title=\"更新初始化进程\"></a>更新初始化进程</h4><pre><code class=\"hljs objectivec\"><span class=\"hljs-built_in\">NSUInteger</span> serviceUUIDIndex =\n    [peripheral.services indexOfObjectPassingTest:^<span class=\"hljs-built_in\">BOOL</span>(CBService *obj,\n    <span class=\"hljs-built_in\">NSUInteger</span> index, <span class=\"hljs-built_in\">BOOL</span> *stop) &#123;\n        <span class=\"hljs-keyword\">return</span> [obj.UUID isEqual:myServiceUUIDString];\n    &#125;];\n \n<span class=\"hljs-keyword\">if</span> (serviceUUIDIndex == <span class=\"hljs-built_in\">NSNotFound</span>) &#123;\n    [peripheral discoverServices:@[myServiceUUIDString]];\n    ...</code></pre>\n\n<h2 id=\"中心设备和远程外部设备交互最佳实践\"><a href=\"#中心设备和远程外部设备交互最佳实践\" class=\"headerlink\" title=\"中心设备和远程外部设备交互最佳实践\"></a>中心设备和远程外部设备交互最佳实践</h2><h3 id=\"注意广播的使用和电量消耗\"><a href=\"#注意广播的使用和电量消耗\" class=\"headerlink\" title=\"注意广播的使用和电量消耗\"></a>注意广播的使用和电量消耗</h3><p>尽可能最小化广播的使用.因为无线广播会给iOS设备硬件的电池寿命造成负面影响.</p>\n<ul>\n<li>只有需要的时候才扫描设备</li>\n<li>只有必要时才去指明CBCentralManagerScanOptionAllowDuplicatesKey Option</li>\n<li>正确地浏览外部设备数据<pre><code class=\"hljs scheme\">[<span class=\"hljs-name\">peripheral</span> discoverServices:@[<span class=\"hljs-name\">firstServiceUUID</span>, secondServiceUUID]]<span class=\"hljs-comment\">;</span></code></pre>\n查找服务特性也同样适用这种方式.</li>\n<li>订阅经常变动的特性值</li>\n<li>所有需求数据满足时取消设备连接<pre><code class=\"hljs ini\"><span class=\"hljs-section\">[myCentralManager cancelPeripheralConnection:peripheral]</span><span class=\"hljs-comment\">;</span></code></pre>\n\n</li>\n</ul>\n<h3 id=\"外部设备重连\"><a href=\"#外部设备重连\" class=\"headerlink\" title=\"外部设备重连\"></a>外部设备重连</h3><p>使用下面三种方式去重连外部设备:</p>\n<ul>\n<li>取回已知外部设备列表<br>使用 retrievePeripheralsWithIdentifiers: 方法.</li>\n<li>取回当前系统连接的外部设备列表<br>使用 retriveConnectedPeripheralsWithServices: 方法.如果要查找的外部设备在列表中,连接它.</li>\n<li>扫描并查找外部设备.<br>使用 scanForPeripheralsWithServices:options 方法.如果找到.连接它.</li>\n</ul>\n<p>下面是一个重连的流程示例:<br><img src=\"http://upload-images.jianshu.io/upload_images/3340896-6d4adcc223f2f43a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"重连流程\"></p>\n<h2 id=\"设置本地设备作为外部设备最佳实践\"><a href=\"#设置本地设备作为外部设备最佳实践\" class=\"headerlink\" title=\"设置本地设备作为外部设备最佳实践\"></a>设置本地设备作为外部设备最佳实践</h2><h3 id=\"广播时要考虑的内容\"><a href=\"#广播时要考虑的内容\" class=\"headerlink\" title=\"广播时要考虑的内容\"></a>广播时要考虑的内容</h3><p>遵循广播数据限制.<br>当创建一个广播字典时,只能指定 CBAdvertisementDataLocalNameKey, CBAdvertisementDataServiceUUIDsKey.如果指定其他key会报错.<br>同样广播数据占用的空间也要限制.至多使用28字节的空间来初始化广播数据.</p>\n<p>仅在需要的时候去广播数据,使用下面方法来停止广播</p>\n<pre><code class=\"hljs ini\"><span class=\"hljs-section\">[myPeripheralManager stopAdvetising]</span><span class=\"hljs-comment\">;</span></code></pre>\n<p>让用户来决定何时广播</p>\n<h3 id=\"配置外部设备特性\"><a href=\"#配置外部设备特性\" class=\"headerlink\" title=\"配置外部设备特性\"></a>配置外部设备特性</h3><p>下面两个分组帮助我们在需要执行以下任务是提供一些指导:</p>\n<ul>\n<li>允许链接的中心设备订阅您的特性</li>\n<li>保护敏特性值,防止未配对中心设备的访问</li>\n</ul>\n<p>配置特性来支持通知</p>\n<pre><code class=\"hljs groovy\">myCharacteristic = [[CBMutableCharacteristic alloc] <span class=\"hljs-attr\">initWithType:</span>myCharacteristicUUID <span class=\"hljs-attr\">properties:</span>CBCharacteristicPropertyRead | CBCharacteristicPropertyNotify <span class=\"hljs-attr\">value:</span>nil <span class=\"hljs-attr\">permissions:</span>CBAttributePermissionsReadable];\n</code></pre>\n\n<p>要求一个配对设备来访问敏感数据</p>\n<pre><code class=\"hljs groovy\">emailCharacterristic = [[CBMutableCharacteristic alloc] <span class=\"hljs-attr\">initWithType:</span>emailCharacteristicUUID <span class=\"hljs-attr\">properties:</span>CBCharacteristicPropertyRead | CBCharacteristicPropertyNotifyEncryptionRequired <span class=\"hljs-attr\">value:</span>nil <span class=\"hljs-attr\">permission:</span>CBAttributePermissionsReadEncryptionRequired];\n</code></pre>\n\n<h1 id=\"项目Demo\"><a href=\"#项目Demo\" class=\"headerlink\" title=\"项目Demo\"></a>项目Demo</h1><p><a href=\"https://github.com/913868456/OCDemo\">蓝牙4.0 Core Bluetooth Demo</a><br>上面链接是 <strong>Core Bluetooth</strong> 编程的Demo，能够对<strong>Core Bluetooth</strong> 有一个基本的了解。本项目使用一个蓝牙手环作为测试设备，读取蓝牙手环内的一些服务。如果想要使用其他蓝牙设备运行项目，把 <strong>“MH08”</strong> 替换为自己的设备名称前缀即可。</p>\n<pre><code class=\"hljs objectivec\"><span class=\"hljs-keyword\">if</span> ([peripheral.name hasPrefix:<span class=\"hljs-string\">@&quot;MH08&quot;</span>] ) &#123;\n       <span class=\"hljs-keyword\">self</span>.bandPeripheral = peripheral;        <span class=\"hljs-comment\">//强引用外部设备对象,否则会释放</span>\n       [<span class=\"hljs-keyword\">self</span>.centralManager stopScan];          <span class=\"hljs-comment\">//发现指定外设后,为了保护电池寿命和节约电量,中心管理者停止扫描</span>\n       <span class=\"hljs-built_in\">NSLog</span>(<span class=\"hljs-string\">@&quot;链接外部设备: %@&quot;</span>, peripheral.name);\n       [<span class=\"hljs-keyword\">self</span>.centralManager connectPeripheral:peripheral options:<span class=\"hljs-literal\">nil</span>];\n   &#125;</code></pre>\n<h1 id=\"GitHub-优秀开源\"><a href=\"#GitHub-优秀开源\" class=\"headerlink\" title=\"GitHub 优秀开源\"></a>GitHub 优秀开源</h1><p>由于使用官方提供的API编程特别凌乱，所以Github上有优秀开发者对其进行了封装。<br>详情请看<a href=\"https://github.com/coolnameismy/BabyBluetooth\">BabyBluetooth </a></p>\n<h1 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h1><p><a href=\"https://developer.apple.com/library/content/documentation/NetworkingInternetWeb/Conceptual/CoreBluetooth_concepts/AboutCoreBluetooth/Introduction.html#//apple_ref/doc/uid/TP40013257-CH1-SW1\">Core Bluetooth Programming Guide</a></p>\n"},{"title":"KVC 编程指南","date":"2018-03-15T09:57:00.000Z","_content":"---\n## 关于Key-Value Coding\n\n键值编码是一种由NSKeyValueCoding非正式协议启用的机制，协议对象采用该协议来间接访问其属性。当一个对象兼容键值编码时，它的属性通过一个简洁的、统一的消息接口来使用字符串参数寻址。这种间接访问机制补充了实例变量及其相关访问方法所提供的直接访问。\n\n您通常使用访问器方法来获得对对象属性的访问。获取访问器(或getter)返回一个属性的值。设置访问器(或setter)设置属性的值。在objective-c中，还可以直接访问属性的底层实例变量。在任何一种方法中访问对象属性都很简单，但需要调用属性特定的方法或变量名。随着属性列表的增长或变化，也必须使用访问这些属性的代码。与此相反，一个键值编码兼容的对象提供了一个简单的消息接口，它在所有属性中都是一致的。\n\n键值编码是许多其他Cocoa技术的基础概念，如键值观察、Cocoa绑定、Core Data和applescript能力。在某些情况下，键值编码也有助于简化代码。\n\n### 使用服从Key-Value Coding 的对象\n\n对象通常在继承NSObject(直接或间接)时即采用了键值编码，它们都采用NSKeyValueCoding协议，并为基本方法提供默认实现。这样的对象通过一个紧凑的消息传递接口使其他对象能够执行以下操作:\n\n- 访问对象的属性。该协议指定了一些方法，例如通用的getter valueForKey:和通用的setter setValue:forKey:用于访问对象属性通过属性名(或键，参数化的字符串)。这些对象相关方法的默认实现使用键来定位和与底层数据交互。\n\n- 操作集合属性。与其他属性一样，访问方法的默认实现与对象的集合属性(例如NSArray对象)实现相同。此外，如果一个对象定义了一个属性的集合访问器方法，那么它可以使用键值访问获取到集合的内容。这通常比直接访问更有效，并允许您通过标准化接口使用自定义集合对象。\n\n- 在集合对象上调用集合操作符。当在键值编码兼容对象中访问集合属性时，可以将集合操作符插入到关键字字符串。集合操作符指示默认的NSKeyValueCoding getter实现对集合的取值操作，然后返回一个新的、经过筛选的集合版本，或者一个表示集合特征的单一值。\n\n- 访问非对象属性。协议的默认实现会检测非对象属性，包括标量和结构体，并自动将它们封装起来，作为在协议接口上使用的对象。此外，该协议声明了一种方法，允许一个服从协议的对象在通过键值编码给一个非对象类型赋值为nil时,提供一个合适的响应.\n\n- 通过keyPath访问属性。当您有一个符合键值编码的对象的层级结构时，您可以使用基于keyPath的方法在层次结构中调用单个方法来获取或来设置一个值。\n\n\n### 为对象采用键值编码\n\n为了使您自己的对象具有键值编码兼容，您确保他们采用了`NSKeyValueCoding`非正式协议并实现了相应的方法，例如`valueForKey:`作为通用的getter和 `setValue:forKey:` 作为通用的setter。幸运的是，如上所述，NSObject采用了这个协议，并为这些和其他基本方法提供了默认实现。因此，如果您从NSObject(或它的许多子类)派生对象，那么大部分工作已经为您完成了。\n\n为了使默认的方法能够执行它们的工作，您可以确保对象的访问器方法和实例变量遵循某些定义良好的格式。这允许默认实现在对键值编码消息的响应中找到对象的属性。然后，您通过提供的校验方法可选地去扩展和自定义键值编码并且处理某些特殊的情况.\n\n### Swift中的键值编码\n\n从NSObject继承的Swift对象或其子类的默认属性遵循键值编码协议。而在Objective - C中，属性的访问器和实例变量必须遵循特定的模式，Swift的标准属性声明会自动保证这一点。另一方面，许多协议的特性要么不相关，要么使用在objective - c中不存在的本地Swift构造或一些技术能够更好地处理。例如,所有的Swift属性都是对象,你不必再操心对非对象属性默认实现的特殊处理\n\n因此，虽然键值编码协议方法直接转换为Swift，但这个指南主要关注objective - c，在这里您需要做更多的工作以确保遵从性，在什么地方键值编码通常是最适合的。\n\n### 其他依赖键值编码的 Cocoa 技术\n\n一个符合键值编码的对象在Cocoa技术参与广泛，这些技术依赖于这种访问方式，包括:\n\n- 键-值观察。这个机制使对象能够注册异步通知，这是由另一个对象属性的变化所驱动的，如键值观察编程指南所述。\n\n- Cocoa 绑定。这个技术集合完全实现了一个模型-视图-控制器范例，模型封装应用程序数据，视图显示和编辑数据，控制器在两者之间进行协调。阅读Cocoa绑定编程主题，了解更多关于Cocoa绑定的知识。\n\n- Core Data。这个框架为对象生命周期和对象持久化相关的常见任务提供了通用的和自动化的解决方案。更多了解您可以阅读Core Data编程指南。\n\n- AppleScript。这种脚本语言可以直接控制脚本应用程序和macOS的许多部分。Cocoa的脚本支持利用了键值编码来获取和设置脚本对象中的信息。NSScriptKeyValueCoding非正式协议中的方法为使用键值编码提供了额外的功能，包括通过索引在多值密钥中获取和设置键值，并强制(或转换)键值到适当的数据类型。AppleScript概述提供了AppleScript及其相关技术的高级概述。\n\n---\n\n## 键值编码原理\n\n### 访问对象的属性\n\n一个对象在它的接口声明中明确属性.这些属性属于下面类别中的一种:\n\n- 属性(Attributes).这些属性是一些单一的值,例如一个标量,字符串,或者布尔类型的值.值对象诸如NSNumber和其他不可变类型比如NSColor也都被认为是属性.\n- 一对一关系.这些属性是可变对象并且拥有他们自己的属性.一个对象的属性可以改变而无需改变对象自身.举例来说,一个 `bank account` 对象可能有一个`owner`属性,该属性是一个`Person`类型的对象.而`person`对象又有一个`address`属性.`owner`的`address`可能改变而 `bank account` 却不需要改变对`owner`的引用持有.`bank account` 的` owner`没有改变,仅仅是它的地址改变了.\n\n- 一对多关系.这些属性是集合类型对象.尽管自定义集合类页可以实现,但是通常用一个NSArray或NSSet实例去持有该集合.\n\nBankAccount对象声明每种属性类型,如下:\n\n**Listing 2-1** ` BankAccount`对象的属性\n\n```\n\n@interface BankAccount : NSObject\n\n@property (nonatomic) NSNumber* currentBalance;   //An Attribute \n@property (nonatomic) Person*   owner;            //A to-one relation  一对一关系\n@property (nonatomic) NSArray< Transaction* >* transactions;//A to-many relation 一对多关系\n\n@end\n\n```\n\n为了持有包装的属性,一个对象在它的接口中为其属性提供了访问器方法.对象的创建者可以自定义访问器方法,或者依赖编译器去自动生成访问器方法.总之,代码的创建者使用这些访问器必须在编译前写明属性的名字.访问器方法的名字存储在静态存储区.举例来说,给定的 `bank account` 对象声明如** Listing 2-1 **,编译器会为`myAccount`对象生成一个setter方法来供你使用:\n\n```\n\n[myAccount setCurrentBalance:@(100.0)];\n\n```\n\n这种赋值方式直接,但是缺乏灵活性. 一个键值编码键值对象,提供一个更普遍的机制,使用字符串标签去访问一个对象的属性.\n\n#### 使用key和key Path来识别一个对象的属性\n\nkey 是一个字符串用来识别具体的属性.通俗地讲, key代表一个属性.key必须使用ASCII编码,不可用包含空格,并且通常以小写字母开头(尽管有例外,比如在许多类中的URL属性)\n\n因为`BankAccount`类兼容键值编码,它识别keys所对应的`owner`, `currentBalance`, `transactions`,这些对象的属性名.而不是调用 `setCurrentBalance: `方法,可以根据它的key来给其属性赋值:\n\n```\n\n[myAccount setValue:@(100.0) forKey:@\"currentBalance\"];\n\n```\n\n事实上,你可以给myAccount对象使用该方法设置所有属性的值.只需要替换不同的key参数就行.因为参数是一个字符串,使其可以作为一个变量在运行时中进行操作.\n\nkey path 是一个以.符号做为key分割标记,来遍历对象的属性.在遍历中第一个key对应的属性跟receiver关联.每个子遍历key都更它上一级的属性值关联.key path对于多层次结构对象的属性调用很有用.\n\n举例来说,keypath owner.address.street 应用于一个bank account实例对象.对应关联一个street字符串作为其值.假设Person和Address类也兼容键值编码,该字符串存储在bank account的owner属性所对应的address中.\n\n> 注意\n在 Swift 中, 你可以使用#keyPath表示方式来取代使用一个字符串去表示一个key或者keypath.这种方式提供了编译时检测的优点.\n\n#### 使用key获取属性值\n\n一个兼容键值编码的对象,该对象继承自NSObject,一个从NSObject继承的对象，它提供了协议的基本方法的默认实现，它会自动采用该协议，并带有某些默认行为。这样的对象至少实现了以下基本的key-bassed getters:\n\n- `valueForKey: `根据key参数返回属性的值.如果以key命名的属性根据 访问器搜索格式 中的规则无法找到,该对象会给自己发送一个 `valueForUndefinedKey:` 消息. `valueForUndefinedKey: `方法的默认实现会吊起一个`NSUndefinedKeyException`,但是子类可以重写,并且更优雅的处理这种情况.\n\n- `valueForKeyPath:` 返回对象指定键路径下的值.任何在键路径遍历下没有与之相匹配的键值编码兼容,意味着使用 `valueForKey: `的默认实现无法找到相对应的访问器方法.对象则调用 `valueForUndefinedKey:` 方法.\n\n- `dictionaryWithValuesForKeys:` 根据数组里面所有key返回相关的键值字典.数组中每个key都会调用` valueForKey: `方法.返回值为一个字典,包含数组中所有的key和与之相关的值.\n\n> 注意\n集合类型对象,比如NSArray,NSSet,NSDictionary,不能把nil作为值包含进去.可以使用NSNull对象代表一个空值.NSNull提供一个实例来表示对象属性的空值. `dictionaryWithValuesForKeys: `方法和相关的 `setValuesForKeysWithDictionary: `方法 的默认实现 自动在NSNull(在字典参数中)和nil(在存储属性中)之间转换\n\n当你使用一个键路径去寻址一个属性时,如过键路径下的最后的key对应的是一个一对多的属性(意味着关联一个集合),返回值是一个包含所有键对应的值的集合.举例来讲,请求` transactions.payee `路径下的值,返回在所有`transactions`下`payee`对象的数组.keypath中多个数组同样适用.`accounts.transactions.payee`返回在所有`accountes`对象下,所有`transactions`下的`payee`组成的数组.\n\n\n#### 使用key给属性赋值\n\n和getter方法一样,键值编码对象也提供了基于NSKeyValueCoding协议实现的一组setter方法:\n\n\n- `setValue: forkey:` 给对象指定键赋值.该方法默认自动解包表示标量和结构体的NSNumber和NSValue对象,并且将这些解包后的值赋给对应属性.\n如果将要赋值的键不存在,则对象调用 `setValue: forUndefinedKey:` 方法.默认会吊起`NSUndefinedKeyException.`然而,子类可以重写该方法,并且以自定义的方式处理.\n\n- `setValue: forKeyPath:` 设置指定键路径下的值.对象在键路径遍历下未找到相关属性,则调用`setValue:forUndefinedKey:`方法.\n\n- `setValuesForKeyswithDictionary: `给字典中所有key对应的属性赋值.默认实现是给每个键值对调用`setValue:forKey:`方法.如果有必要的话,用NSNull对象替换nil\n\n在默认实现中,当试图给一个非对象属性赋值nil时,键值编码兼容对象会给自身发送一个`setNilValueForKey:`消息.该方法默认会吊起`NSInvalidArgumentException`.但是一个对象可以重写该方法,去替代默认实现或者用一个标量值替代.\n\n\n#### 使用键去简化对象访问\n\n通过键值编码的setter和getter能够简化代码.在macOS中,NSTableView,NSOutlineView对象在他们的列中标记一个字符串id.如果模型对应的表格不兼容键值编码,表格数据源方法会去强制检查每一列的id找到相关属性并返回.未来,当添加一个属性给模型的时候,例如Person对象的那中情况,你必须重新访问数据源方法,为新属性的测试添加另一种条件,并且返回相关的值.\n\n**Listing 2-2** 不适用键值编码的数据源方法实现\n\n```\n- (id)tableView:(NSTableView *)tableview objectValueForTableColumn:(id)column row:(NSInteger)row\n{\n    id result = nil;\n    Person *person = [self.people objectAtIndex:row];\n \n    if ([[column identifier] isEqualToString:@\"name\"]) {\n        result = [person name];\n    } else if ([[column identifier] isEqualToString:@\"age\"]) {\n        result = @([person age]);  // Wrap age, a scalar, as an NSNumber\n    } else if ([[column identifier] isEqualToString:@\"favoriteColor\"]) {\n        result = [person favoriteColor];\n    } // And so on...\n \n    return result;\n}\n\n\n```\n\n**Listing 2-3** 展示了一个使用兼容键值编码的`Person`对象 更紧凑的数据源方法实现方式. 只需要使用 `valueForKey` getter方法,数据源方法就会使用列的标签作为key返回合适的值. 除了更简洁外,也更加通俗易懂,因为只要列标识符总是与模型对象的属性名匹配，它就会在稍后添加新列时保持不变。\n\n**Listing 2-3** 使用键值编码实现数据源方法\n\n```\n\n- (id)tableView:(NSTableView *)tableview objectValueForTableColumn:(id)column row:(NSInteger)row\n{\n    return [[self.people objectAtIndex:row] valueForKey:[column identifier]];\n}\n\n```\n\n---\n### 访问集合属性\n\n键值编码兼容对象像公开其他属性的方式一样公开它的一对多属性.可以使用` valueForKey: `和 `setValue: forKey:` (或者他们的 keyPath) 方法来给对象的集合属性赋值和访问. 然而,当想要对集合内容进行操作时,通常使用协议定义的可变代理方法是最有效的.\n\n协议定义了三个不同代理方法用来对集合对象进行访问:\n\n- `mutableArrayValueForKey:` 和 `mutableArrayValueForKeyPath:`\n\n方法返回一个代理对象,该对象是一个`NSMutableArray`对象.\n\n- `mutableSetValueForKey:` 和 `mutableSetValueForKeyPath:`\n\n方法返回一个代理对象,该对象是一个`NSMutableSet`对象.\n\n- `mutableOrderedSetValueForKey:` 和 `mutableOrderedSetValueForKeyPath:`\n\n方法返回一个代理对象,该对象是一个`NSMutableOrderedSet`对象.\n\n当操作一个代理对象时,从集合中添加.删除,替换对象,协议的默认实现会相应地修改对应的下标属性.这种方式比使用 valueForKey: 方法获取不可变集合效率更高,创建一个可变集合,然后使用setValue: forKey: 消息将元素存储到集合中. 在许多情况下, 与直接使用可变属性相比,这种方式效率更高.这些方法为集合中对象的键值观察提供了额外的好处.\n\n---\n\n### 使用集合运算符\n\n当发送一个`valueForKeyPaht:`消息给键值兼容对象时,可以在key path 中嵌入一个集合运算符,集合运算符是关键字列表中的一个.在它前面有一个@符号,来表示在getter返回前,以某种方式执行数据操作. valueForKeyPath:的默认实现由NSObject来提供.\n当一个 keyPath 包含一个集合运算符时,运算符前面的keyPath,称为left key path,表示该集合相对于消息接受者的操作. 如果将消息直接发送到集合对象,例如NSArray实例,则可以省略左边的key path.\n运算符后面的keypath部分,称为right key Path,指定运算符要操作的集合中的对象属性.处理@count所有的集合运算符都需要一个right key path. Figure 4-1 阐明了运算符keypath格式.\n\n下图为运算符 key path  格式\n\n![Figure 4-1](http://upload-images.jianshu.io/upload_images/3340896-63cef07595f087a5.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n---\n\n集合运算符的三种类型:\nAggregaion Operators, Array Operatiors, Nesting Operators\n\n下面这段代码演示了如何执行每个运算符的相关操作.\n```\n@interface Transaction : NSObject\n \n@property (nonatomic) NSString* payee;   // To whom\n@property (nonatomic) NSNumber* amount;  // How much\n@property (nonatomic) NSDate* date;      // When\n \n@end\n\n```\n\n#### Aggregation Operators\n\n@avg\n\n当使用@avg运算符时,`valueForKeyPaht:`会根据Right key Path中指定的属性读取集合中每个对象相关的值.并且计算他们的平均值.然后会返回一个包含结果的NSNumber实例.\n\n下面代码,可以获取集合中所有转账的平均值\n\n```\n\nNSNumber *transactionAverage = [self.transactions valueForKeyPath:@\"@avg.amount\"];\n\n```\n\n@count\n\n使用@count 运算符, `valueForKeyPath: `返回一个NSNumber实例表示集合中对象的数量. right key path忽略.\n\n获取转账的笔数:\n\n```\n\nNSNumber *numberOfTransactions = [self.transactions valueForKeyPath:@\"@count\"];\n\n```\n\n@max\n\n当使用@max运算符时, 返回集合中right key path 对应属性的最大值. 内部是使用 compare:方法比较集合中该属性对应的值.在搜索right key path对应属性值时,会忽略集合中的nil值.\n\n获取日期值的最大值,表示最近的转账日期.\n\n```\n\nNSDate *latestDate = [self.transactions valueForKeyPath:@\"@max.date\"];\n\n```\n\n@min\n\n使用@min 运算符时, `valueForKeyPath: `方法搜索集合中righ key path 对应属的值.并且返回最小的一个.\n\n返回转账日期中最早的日期.\n\n```\n\nNSDate *earliestDate = [self.transactions valueForKeyPath:@\"@min.date\"];\n\n```\n\n@sum\n\n使用 @sum 运算符,计算集合中所有keypath对应属性值的总和.\n\n```\n\nNSNumber *amountSum = [self.transacitons valueForKeyPath:@\"@sum.amount\"];\n\n```\n\n#### Array Operators \n\nArray 运算符使用valueForkeyPath: 返回right key path 对应的对象集合.\n\n> 重要\n如果使用数组运算符时,任何支对象是空值的话,valueForKeyPath: 方法会抛出异常,\n\n@distinctUnionOfObjects\n\n使用@distinctUnionOfObjects 运算符, valueForKeyPath: 方法会创建并返回一个数组,该数组包含集合中对象的并集,这些对象与right key path 指定的属性对应.\n\n获取 payee 属性值的集合.\n\n```\n\nNSArray *distincPayees = [self.transactions valueForKeyPath:@\"@distinctUnionOfObjects.payee\"];\n\n```\n\n> 注意\n@unionOfObjects 运算符提供相似的行为,但是不会移除重复的对象.\n\n@unionOfObjects\n\n```\nNSArray *payees = [self.transactions valueForKeyPath:@\"@unionOfObjects.payee\"];\n\n```\n\n\n#### Nesting Operators\n\n嵌套运算符在嵌套集合中使用.每个集合入口自身便包含一个集合.\n\n> 重要\n\n如果使用嵌套运算符时,任何支对象是nil的话,valueForKeyPath:方法会抛出一个异常.\n\n下面的arrayOfArrays是一个嵌套数组\n\n```\n\nNSArray * moreTransactions = @[<# transacion data #>];\nNSArray * arrayOfArrays    = @[self.transactions, moreTransactions];\n\n```\n\n@distinctUnionOfArrays\n\n使用该运算符时,返回一个数组,该数组包含所有集合中指定key path下所有属性对应的对象.\n\n```\n\nNSArray *collectedDistinctPayees = [arrayOfArrays valueForKeyPath:@\"@distinctUnionOfArrays.payee\"];\n\n```\n\n> 注意\n@unionOfArrays 运算符与@distictUnionOfArrays运算符功能类似,但是不会移除重复对象.\n\n\n@unionOfArrays\n\n```\n\nNSArray *collectedPayees = [arrayOfArrays valueForKeyPath:@\"unionOfArrays.payee\"];\n\n```\n\n@distincUnionOfSets\n\n与@distincUnionOfArrays类似,假如示例数据是以集合存储而不是数组,则返回的是一个NSSet集合对象.\n\n---\n\n### 表示非对象类型值 \n\nNSObject提供的键值编码协议方法的默认实现不仅适用于对象属性,在非对象属性中同样适用. 默认实现在对象参数,返回值,和非对象属性之间自动切换.这将允许基于key-based 签名的getter和setter方法保持一致,即使存储属性是一个标量或者结构体.\n\n> 注意\n在Swift中所有属性是对象类型.本节只在OC属性中适用.\n\n当调用协议中的getter方法时,比如 valueForKey:, 默认实现决定调用某个特殊的访问器方法或者为指定key提供值的实例变量.如果返回值不是一个对象,getter使用该值去创建一个NSNumber对象(对于标量) 或者NSValue对象(对于结构体) 并且 返回NSNumber或者NSValue.\n\n类似的,默认情况下,setter方法例如`setValue:forKey: `通过一个属性访问器或者实例变量来决定其数据类型.如果属性的数据类型不是对象类型,setter方法首先发送一个合适的`<type>Value `消息给传入的值对象,来提取下标数据,并且将设置的值存储进去.\n\n> 注意\n当使用键值编码协议中的一个setter方法给一个非对象属性赋空值时,setter没有明显的执行行为.因而,它会给接受setter方法的对象发送一个`setNilValueForKey:`方法.默认会吊起一个`NSInvalidArgumentException`异常.但是子类可以重写改方法.\n\n#### 包装和解包标量类型\n\n标量类型的默认键值编码实现是使用一个NSNumber实例包装起来,对于每种数据类型,使用下标属性的值创建一个NSNumber对象来提供一个getter返回值.同样该表也展示了使用的访问器方法,该方法是在一个赋值操作中,从setter输入参数中提取值.\n\n标量类型被包装在NSNumber对象中.\n\n> 注意\n在macOS中, 由于历史原因, BOOL的类型定义是作为signed char类型.KVC不会区分这些.所以,当key是一个BOLL类型值时,使用`setValue:forKey:`方法不能传递像@\"true\"或者@\"YES\"这样的值,KVC会尝试执行charValue(应为BOOL类型继承自char类型),但是NSString不会实现该方法,那样会导致一个运行时错误. 反而,只能传递一个NSNumber对象,比如@(1)或者@(YES),当Key时一个BOOL类型时,做为`setValue:forKey:`的参数.这种限制在iOS中不适用,BOOL类型被定义为本地Boolean类型bool并且KVC执行`boolValue`方法.这种设置值的方式对一个NSNumber对象或者一个合适格式的NSString对象都是适用的.\n\n\n#### 包装和解包结构体类型\n\n自动包装和解包不限于NSPoint,NSRange,NSSize,NSRect.结构体类型(OC编码的)都可以包装在一个NSValue对象中.\n\n**Listing 5-1** 使用一个自定义的结构体的示例类\n\n```\ntypedef struct {\n    \n    float x, y, z;\n    \n}ThreeFloats;\n\n@interface MyClass\n\n@property (nonatomic) ThreeFloats threeFloats;\n\n@end\n\n```\n使用该类的一个叫做myClass的实例,使用KVC获取threeFloats属性的值.\n\n```\nNSValue *result = [myClass valueForKey:@:\"threeFloats\"];\n\n```\n`valueForKey:`方法的默认实现调用`threeFloats`的getter方法.然后返回返回一个NSValue对象,该对象包装着返回值.\n\n类似的,也可以使用KVC给treeFloats属性赋值\n\n```\nThreeFloats floats = {1.,2.,3.};\n\nNSValue * value = [NSValue valueWithBytes:&floats objCType:@encode(ThreeFloats)];\n\n[myClass setValue:value forKey:@\"ThreeFloats\"];\n\n```\n\n默认实现使用一个 `getValue:`消息来解包数据值,然后使用解包的结构体作为参数调用`setThreeFloats:`方法.\n\n\n#### 校验属性\n\n键值编码协议定义了支持属性校验的方法.使用键值编码兼容对象,可以读取和写入属性数据.也可以使用通过一个key或者keyPath来校验一个属性.当调用` validateValue:forKey:error:`(或者 `validateValue:forKeyPath:error`)方法时, 协议的默认实现会为找到一个匹配格式` validate<key>:error:`的方法而去搜索接受校验信息的的对象,.如果对象没有这样的方法,默认校验成功,返回YES.当一个指定的属性校验方法存在时,返回该方法的调用结果.\n\n> 注意\n仅在OC中使用校验.在swift中,属性校验依赖于可选类型和强引用类型检查的编译器来实现.\n\n因为属性指定校验方法通过引用接收值和错误参数.校验可能会有三种结果:\n\n1.校验方法认为值对象有效,并且不改变值和错误参数,返回YES.\n2.校验方法认为值对象无效,但是选择不改变值对象.在这种情况下,返回值为NO并且给NSErro对象设置一个错误引用来说明失败原因.\n3.校验方法认为值对象无效,但是创建了一个新的,有效的值替换掉原来的值.在这种情况下,方法返回YES,而将错误对象保持不变。在返回之前，该方法修改了指向新值对象的值引用。当它进行修改时，方法总是创建一个新的对象，而不是修改旧的对象，即使值对象是可变的。\n\n**Listing 6-1** 属性名校验\n\n```\n\nPerson * person = [[Person alloc] init];\n\nNSError * error;\n\nNSString *name = @\"John\";\n\nif(![person validateValue:&name forKey:@\"name\" error:&error]){\n    \n    NSLog(@\"%@\",error);\n}\n\n```\n\n#### 自动校验\n一般来讲,不管是键值编码协议还是对象的默认实现都没有定义自动执行校验的机制.在您的app需要该功能时,使用该方法校验.\n\n### 访问器搜索模式\n\n#### 基础 Getter 搜索模式\n\n`valueForKey:`方法的默认实现,给定一个key作为输入参数,执行下面流程,从接受返回值的对象进行操作.\n\n1.搜索访问器方法,根据 `get<KEY>`, `<key>`, `is<Key>`或者`_<key>`这样的名称和顺序来搜索.如果发现,调用并且执行步骤5返回结果.否则执行下一步.\n\n2.如果没有一个访问器被发现,搜索匹配格式为`countOf<Key>`和`objectIn<Key>AtIndex:`和`<key>AtIndexes:`这些方法.\n如果这些方法中的第一个和剩余两个方法中至少一个被找到.创建一个集合代理对象,该对象响应所有的NSArray方法,并且返回该集合对象.否则,执行步骤3.\n\n3.如果没有一个访问器或者数组访问方法被找到,那么接着找 `countOf<key>`, `enumeratorOf<Key>`,`memberOf<Key>:` 这三个方法.\n\n如果所有三个方法都被找到,创建一个集合代理对象,该对象的所有方法响应NSSet的所有方法,并且返回该对象.否则,执行步骤4\n\n4.如果没有一个访问器方法或者组合访问方法被找到,并且接受对象的类方法 `accessInstanceVariablesDirectly`返回YES,接着按照顺序搜索名字为`_<key>`,`_is<Key>`,或者`is<Key>`\n的实例变量,如果找到,直接获取该实例变量的值,执行步骤5,否则执行步骤6\n\n5.如果检索到的属性值是一个对象指针,返回该结果.\n如果该值是一个NSNumber支持的标量类型,将它存储在一个NSNumber实例中,并且返回该实例.\n如果结果是一个NSNumber不支持的标量类型,将其转换为NSValue对象并返回该对象.\n\n6.如果以上所有的步骤都失败,调用`valueForUndefinedKey:`方法,默认吊起一个异常,但是子类重写.\n\n\n#### 基础 Setter 搜索模式\n\n`setValue:forKey:`方法执行下面流程:\n\n1. 按照顺序set<Key>:, _set<Key>需要第一访问器.如果找到,使用输入值(或者未包装的值),执行该方法,结束.\n\n2. 如果没有访问器被找到,并且类方法 `accessInstanceVariablesDirectly`返回YES,按照名字为_<key>,_is<Key>,<key>,is<Key>的顺序寻找\n实例变量.如果找到,则给实例变量直接赋值,结束.\n\n3.以上方法未找到访问器或实例变量,执行`setValue:forUndefinedKey:`方法,默认抛出异常,子类可以重写该方法.\n\n\nArray 和 Set 的搜索格式与以上类似,不赘述.\n\n---\n\n想要更多地了解关于 `KVC` 的API,请移步 [KVC](https://www.jianshu.com/p/7f7360ae8e7b)\n\n## 参考资料\n[Key-Value Coding Programming Guide](https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/KeyValueCoding/index.html#//apple_ref/doc/uid/10000107-SW1)\n","source":"_posts/iOS/KVC-编程指南.md","raw":"---\ntitle:  KVC 编程指南 \ndate:  2018-03-15 17:57\ncategories:\n- iOS\ntags: \n- KVC \n---\n---\n## 关于Key-Value Coding\n\n键值编码是一种由NSKeyValueCoding非正式协议启用的机制，协议对象采用该协议来间接访问其属性。当一个对象兼容键值编码时，它的属性通过一个简洁的、统一的消息接口来使用字符串参数寻址。这种间接访问机制补充了实例变量及其相关访问方法所提供的直接访问。\n\n您通常使用访问器方法来获得对对象属性的访问。获取访问器(或getter)返回一个属性的值。设置访问器(或setter)设置属性的值。在objective-c中，还可以直接访问属性的底层实例变量。在任何一种方法中访问对象属性都很简单，但需要调用属性特定的方法或变量名。随着属性列表的增长或变化，也必须使用访问这些属性的代码。与此相反，一个键值编码兼容的对象提供了一个简单的消息接口，它在所有属性中都是一致的。\n\n键值编码是许多其他Cocoa技术的基础概念，如键值观察、Cocoa绑定、Core Data和applescript能力。在某些情况下，键值编码也有助于简化代码。\n\n### 使用服从Key-Value Coding 的对象\n\n对象通常在继承NSObject(直接或间接)时即采用了键值编码，它们都采用NSKeyValueCoding协议，并为基本方法提供默认实现。这样的对象通过一个紧凑的消息传递接口使其他对象能够执行以下操作:\n\n- 访问对象的属性。该协议指定了一些方法，例如通用的getter valueForKey:和通用的setter setValue:forKey:用于访问对象属性通过属性名(或键，参数化的字符串)。这些对象相关方法的默认实现使用键来定位和与底层数据交互。\n\n- 操作集合属性。与其他属性一样，访问方法的默认实现与对象的集合属性(例如NSArray对象)实现相同。此外，如果一个对象定义了一个属性的集合访问器方法，那么它可以使用键值访问获取到集合的内容。这通常比直接访问更有效，并允许您通过标准化接口使用自定义集合对象。\n\n- 在集合对象上调用集合操作符。当在键值编码兼容对象中访问集合属性时，可以将集合操作符插入到关键字字符串。集合操作符指示默认的NSKeyValueCoding getter实现对集合的取值操作，然后返回一个新的、经过筛选的集合版本，或者一个表示集合特征的单一值。\n\n- 访问非对象属性。协议的默认实现会检测非对象属性，包括标量和结构体，并自动将它们封装起来，作为在协议接口上使用的对象。此外，该协议声明了一种方法，允许一个服从协议的对象在通过键值编码给一个非对象类型赋值为nil时,提供一个合适的响应.\n\n- 通过keyPath访问属性。当您有一个符合键值编码的对象的层级结构时，您可以使用基于keyPath的方法在层次结构中调用单个方法来获取或来设置一个值。\n\n\n### 为对象采用键值编码\n\n为了使您自己的对象具有键值编码兼容，您确保他们采用了`NSKeyValueCoding`非正式协议并实现了相应的方法，例如`valueForKey:`作为通用的getter和 `setValue:forKey:` 作为通用的setter。幸运的是，如上所述，NSObject采用了这个协议，并为这些和其他基本方法提供了默认实现。因此，如果您从NSObject(或它的许多子类)派生对象，那么大部分工作已经为您完成了。\n\n为了使默认的方法能够执行它们的工作，您可以确保对象的访问器方法和实例变量遵循某些定义良好的格式。这允许默认实现在对键值编码消息的响应中找到对象的属性。然后，您通过提供的校验方法可选地去扩展和自定义键值编码并且处理某些特殊的情况.\n\n### Swift中的键值编码\n\n从NSObject继承的Swift对象或其子类的默认属性遵循键值编码协议。而在Objective - C中，属性的访问器和实例变量必须遵循特定的模式，Swift的标准属性声明会自动保证这一点。另一方面，许多协议的特性要么不相关，要么使用在objective - c中不存在的本地Swift构造或一些技术能够更好地处理。例如,所有的Swift属性都是对象,你不必再操心对非对象属性默认实现的特殊处理\n\n因此，虽然键值编码协议方法直接转换为Swift，但这个指南主要关注objective - c，在这里您需要做更多的工作以确保遵从性，在什么地方键值编码通常是最适合的。\n\n### 其他依赖键值编码的 Cocoa 技术\n\n一个符合键值编码的对象在Cocoa技术参与广泛，这些技术依赖于这种访问方式，包括:\n\n- 键-值观察。这个机制使对象能够注册异步通知，这是由另一个对象属性的变化所驱动的，如键值观察编程指南所述。\n\n- Cocoa 绑定。这个技术集合完全实现了一个模型-视图-控制器范例，模型封装应用程序数据，视图显示和编辑数据，控制器在两者之间进行协调。阅读Cocoa绑定编程主题，了解更多关于Cocoa绑定的知识。\n\n- Core Data。这个框架为对象生命周期和对象持久化相关的常见任务提供了通用的和自动化的解决方案。更多了解您可以阅读Core Data编程指南。\n\n- AppleScript。这种脚本语言可以直接控制脚本应用程序和macOS的许多部分。Cocoa的脚本支持利用了键值编码来获取和设置脚本对象中的信息。NSScriptKeyValueCoding非正式协议中的方法为使用键值编码提供了额外的功能，包括通过索引在多值密钥中获取和设置键值，并强制(或转换)键值到适当的数据类型。AppleScript概述提供了AppleScript及其相关技术的高级概述。\n\n---\n\n## 键值编码原理\n\n### 访问对象的属性\n\n一个对象在它的接口声明中明确属性.这些属性属于下面类别中的一种:\n\n- 属性(Attributes).这些属性是一些单一的值,例如一个标量,字符串,或者布尔类型的值.值对象诸如NSNumber和其他不可变类型比如NSColor也都被认为是属性.\n- 一对一关系.这些属性是可变对象并且拥有他们自己的属性.一个对象的属性可以改变而无需改变对象自身.举例来说,一个 `bank account` 对象可能有一个`owner`属性,该属性是一个`Person`类型的对象.而`person`对象又有一个`address`属性.`owner`的`address`可能改变而 `bank account` 却不需要改变对`owner`的引用持有.`bank account` 的` owner`没有改变,仅仅是它的地址改变了.\n\n- 一对多关系.这些属性是集合类型对象.尽管自定义集合类页可以实现,但是通常用一个NSArray或NSSet实例去持有该集合.\n\nBankAccount对象声明每种属性类型,如下:\n\n**Listing 2-1** ` BankAccount`对象的属性\n\n```\n\n@interface BankAccount : NSObject\n\n@property (nonatomic) NSNumber* currentBalance;   //An Attribute \n@property (nonatomic) Person*   owner;            //A to-one relation  一对一关系\n@property (nonatomic) NSArray< Transaction* >* transactions;//A to-many relation 一对多关系\n\n@end\n\n```\n\n为了持有包装的属性,一个对象在它的接口中为其属性提供了访问器方法.对象的创建者可以自定义访问器方法,或者依赖编译器去自动生成访问器方法.总之,代码的创建者使用这些访问器必须在编译前写明属性的名字.访问器方法的名字存储在静态存储区.举例来说,给定的 `bank account` 对象声明如** Listing 2-1 **,编译器会为`myAccount`对象生成一个setter方法来供你使用:\n\n```\n\n[myAccount setCurrentBalance:@(100.0)];\n\n```\n\n这种赋值方式直接,但是缺乏灵活性. 一个键值编码键值对象,提供一个更普遍的机制,使用字符串标签去访问一个对象的属性.\n\n#### 使用key和key Path来识别一个对象的属性\n\nkey 是一个字符串用来识别具体的属性.通俗地讲, key代表一个属性.key必须使用ASCII编码,不可用包含空格,并且通常以小写字母开头(尽管有例外,比如在许多类中的URL属性)\n\n因为`BankAccount`类兼容键值编码,它识别keys所对应的`owner`, `currentBalance`, `transactions`,这些对象的属性名.而不是调用 `setCurrentBalance: `方法,可以根据它的key来给其属性赋值:\n\n```\n\n[myAccount setValue:@(100.0) forKey:@\"currentBalance\"];\n\n```\n\n事实上,你可以给myAccount对象使用该方法设置所有属性的值.只需要替换不同的key参数就行.因为参数是一个字符串,使其可以作为一个变量在运行时中进行操作.\n\nkey path 是一个以.符号做为key分割标记,来遍历对象的属性.在遍历中第一个key对应的属性跟receiver关联.每个子遍历key都更它上一级的属性值关联.key path对于多层次结构对象的属性调用很有用.\n\n举例来说,keypath owner.address.street 应用于一个bank account实例对象.对应关联一个street字符串作为其值.假设Person和Address类也兼容键值编码,该字符串存储在bank account的owner属性所对应的address中.\n\n> 注意\n在 Swift 中, 你可以使用#keyPath表示方式来取代使用一个字符串去表示一个key或者keypath.这种方式提供了编译时检测的优点.\n\n#### 使用key获取属性值\n\n一个兼容键值编码的对象,该对象继承自NSObject,一个从NSObject继承的对象，它提供了协议的基本方法的默认实现，它会自动采用该协议，并带有某些默认行为。这样的对象至少实现了以下基本的key-bassed getters:\n\n- `valueForKey: `根据key参数返回属性的值.如果以key命名的属性根据 访问器搜索格式 中的规则无法找到,该对象会给自己发送一个 `valueForUndefinedKey:` 消息. `valueForUndefinedKey: `方法的默认实现会吊起一个`NSUndefinedKeyException`,但是子类可以重写,并且更优雅的处理这种情况.\n\n- `valueForKeyPath:` 返回对象指定键路径下的值.任何在键路径遍历下没有与之相匹配的键值编码兼容,意味着使用 `valueForKey: `的默认实现无法找到相对应的访问器方法.对象则调用 `valueForUndefinedKey:` 方法.\n\n- `dictionaryWithValuesForKeys:` 根据数组里面所有key返回相关的键值字典.数组中每个key都会调用` valueForKey: `方法.返回值为一个字典,包含数组中所有的key和与之相关的值.\n\n> 注意\n集合类型对象,比如NSArray,NSSet,NSDictionary,不能把nil作为值包含进去.可以使用NSNull对象代表一个空值.NSNull提供一个实例来表示对象属性的空值. `dictionaryWithValuesForKeys: `方法和相关的 `setValuesForKeysWithDictionary: `方法 的默认实现 自动在NSNull(在字典参数中)和nil(在存储属性中)之间转换\n\n当你使用一个键路径去寻址一个属性时,如过键路径下的最后的key对应的是一个一对多的属性(意味着关联一个集合),返回值是一个包含所有键对应的值的集合.举例来讲,请求` transactions.payee `路径下的值,返回在所有`transactions`下`payee`对象的数组.keypath中多个数组同样适用.`accounts.transactions.payee`返回在所有`accountes`对象下,所有`transactions`下的`payee`组成的数组.\n\n\n#### 使用key给属性赋值\n\n和getter方法一样,键值编码对象也提供了基于NSKeyValueCoding协议实现的一组setter方法:\n\n\n- `setValue: forkey:` 给对象指定键赋值.该方法默认自动解包表示标量和结构体的NSNumber和NSValue对象,并且将这些解包后的值赋给对应属性.\n如果将要赋值的键不存在,则对象调用 `setValue: forUndefinedKey:` 方法.默认会吊起`NSUndefinedKeyException.`然而,子类可以重写该方法,并且以自定义的方式处理.\n\n- `setValue: forKeyPath:` 设置指定键路径下的值.对象在键路径遍历下未找到相关属性,则调用`setValue:forUndefinedKey:`方法.\n\n- `setValuesForKeyswithDictionary: `给字典中所有key对应的属性赋值.默认实现是给每个键值对调用`setValue:forKey:`方法.如果有必要的话,用NSNull对象替换nil\n\n在默认实现中,当试图给一个非对象属性赋值nil时,键值编码兼容对象会给自身发送一个`setNilValueForKey:`消息.该方法默认会吊起`NSInvalidArgumentException`.但是一个对象可以重写该方法,去替代默认实现或者用一个标量值替代.\n\n\n#### 使用键去简化对象访问\n\n通过键值编码的setter和getter能够简化代码.在macOS中,NSTableView,NSOutlineView对象在他们的列中标记一个字符串id.如果模型对应的表格不兼容键值编码,表格数据源方法会去强制检查每一列的id找到相关属性并返回.未来,当添加一个属性给模型的时候,例如Person对象的那中情况,你必须重新访问数据源方法,为新属性的测试添加另一种条件,并且返回相关的值.\n\n**Listing 2-2** 不适用键值编码的数据源方法实现\n\n```\n- (id)tableView:(NSTableView *)tableview objectValueForTableColumn:(id)column row:(NSInteger)row\n{\n    id result = nil;\n    Person *person = [self.people objectAtIndex:row];\n \n    if ([[column identifier] isEqualToString:@\"name\"]) {\n        result = [person name];\n    } else if ([[column identifier] isEqualToString:@\"age\"]) {\n        result = @([person age]);  // Wrap age, a scalar, as an NSNumber\n    } else if ([[column identifier] isEqualToString:@\"favoriteColor\"]) {\n        result = [person favoriteColor];\n    } // And so on...\n \n    return result;\n}\n\n\n```\n\n**Listing 2-3** 展示了一个使用兼容键值编码的`Person`对象 更紧凑的数据源方法实现方式. 只需要使用 `valueForKey` getter方法,数据源方法就会使用列的标签作为key返回合适的值. 除了更简洁外,也更加通俗易懂,因为只要列标识符总是与模型对象的属性名匹配，它就会在稍后添加新列时保持不变。\n\n**Listing 2-3** 使用键值编码实现数据源方法\n\n```\n\n- (id)tableView:(NSTableView *)tableview objectValueForTableColumn:(id)column row:(NSInteger)row\n{\n    return [[self.people objectAtIndex:row] valueForKey:[column identifier]];\n}\n\n```\n\n---\n### 访问集合属性\n\n键值编码兼容对象像公开其他属性的方式一样公开它的一对多属性.可以使用` valueForKey: `和 `setValue: forKey:` (或者他们的 keyPath) 方法来给对象的集合属性赋值和访问. 然而,当想要对集合内容进行操作时,通常使用协议定义的可变代理方法是最有效的.\n\n协议定义了三个不同代理方法用来对集合对象进行访问:\n\n- `mutableArrayValueForKey:` 和 `mutableArrayValueForKeyPath:`\n\n方法返回一个代理对象,该对象是一个`NSMutableArray`对象.\n\n- `mutableSetValueForKey:` 和 `mutableSetValueForKeyPath:`\n\n方法返回一个代理对象,该对象是一个`NSMutableSet`对象.\n\n- `mutableOrderedSetValueForKey:` 和 `mutableOrderedSetValueForKeyPath:`\n\n方法返回一个代理对象,该对象是一个`NSMutableOrderedSet`对象.\n\n当操作一个代理对象时,从集合中添加.删除,替换对象,协议的默认实现会相应地修改对应的下标属性.这种方式比使用 valueForKey: 方法获取不可变集合效率更高,创建一个可变集合,然后使用setValue: forKey: 消息将元素存储到集合中. 在许多情况下, 与直接使用可变属性相比,这种方式效率更高.这些方法为集合中对象的键值观察提供了额外的好处.\n\n---\n\n### 使用集合运算符\n\n当发送一个`valueForKeyPaht:`消息给键值兼容对象时,可以在key path 中嵌入一个集合运算符,集合运算符是关键字列表中的一个.在它前面有一个@符号,来表示在getter返回前,以某种方式执行数据操作. valueForKeyPath:的默认实现由NSObject来提供.\n当一个 keyPath 包含一个集合运算符时,运算符前面的keyPath,称为left key path,表示该集合相对于消息接受者的操作. 如果将消息直接发送到集合对象,例如NSArray实例,则可以省略左边的key path.\n运算符后面的keypath部分,称为right key Path,指定运算符要操作的集合中的对象属性.处理@count所有的集合运算符都需要一个right key path. Figure 4-1 阐明了运算符keypath格式.\n\n下图为运算符 key path  格式\n\n![Figure 4-1](http://upload-images.jianshu.io/upload_images/3340896-63cef07595f087a5.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n---\n\n集合运算符的三种类型:\nAggregaion Operators, Array Operatiors, Nesting Operators\n\n下面这段代码演示了如何执行每个运算符的相关操作.\n```\n@interface Transaction : NSObject\n \n@property (nonatomic) NSString* payee;   // To whom\n@property (nonatomic) NSNumber* amount;  // How much\n@property (nonatomic) NSDate* date;      // When\n \n@end\n\n```\n\n#### Aggregation Operators\n\n@avg\n\n当使用@avg运算符时,`valueForKeyPaht:`会根据Right key Path中指定的属性读取集合中每个对象相关的值.并且计算他们的平均值.然后会返回一个包含结果的NSNumber实例.\n\n下面代码,可以获取集合中所有转账的平均值\n\n```\n\nNSNumber *transactionAverage = [self.transactions valueForKeyPath:@\"@avg.amount\"];\n\n```\n\n@count\n\n使用@count 运算符, `valueForKeyPath: `返回一个NSNumber实例表示集合中对象的数量. right key path忽略.\n\n获取转账的笔数:\n\n```\n\nNSNumber *numberOfTransactions = [self.transactions valueForKeyPath:@\"@count\"];\n\n```\n\n@max\n\n当使用@max运算符时, 返回集合中right key path 对应属性的最大值. 内部是使用 compare:方法比较集合中该属性对应的值.在搜索right key path对应属性值时,会忽略集合中的nil值.\n\n获取日期值的最大值,表示最近的转账日期.\n\n```\n\nNSDate *latestDate = [self.transactions valueForKeyPath:@\"@max.date\"];\n\n```\n\n@min\n\n使用@min 运算符时, `valueForKeyPath: `方法搜索集合中righ key path 对应属的值.并且返回最小的一个.\n\n返回转账日期中最早的日期.\n\n```\n\nNSDate *earliestDate = [self.transactions valueForKeyPath:@\"@min.date\"];\n\n```\n\n@sum\n\n使用 @sum 运算符,计算集合中所有keypath对应属性值的总和.\n\n```\n\nNSNumber *amountSum = [self.transacitons valueForKeyPath:@\"@sum.amount\"];\n\n```\n\n#### Array Operators \n\nArray 运算符使用valueForkeyPath: 返回right key path 对应的对象集合.\n\n> 重要\n如果使用数组运算符时,任何支对象是空值的话,valueForKeyPath: 方法会抛出异常,\n\n@distinctUnionOfObjects\n\n使用@distinctUnionOfObjects 运算符, valueForKeyPath: 方法会创建并返回一个数组,该数组包含集合中对象的并集,这些对象与right key path 指定的属性对应.\n\n获取 payee 属性值的集合.\n\n```\n\nNSArray *distincPayees = [self.transactions valueForKeyPath:@\"@distinctUnionOfObjects.payee\"];\n\n```\n\n> 注意\n@unionOfObjects 运算符提供相似的行为,但是不会移除重复的对象.\n\n@unionOfObjects\n\n```\nNSArray *payees = [self.transactions valueForKeyPath:@\"@unionOfObjects.payee\"];\n\n```\n\n\n#### Nesting Operators\n\n嵌套运算符在嵌套集合中使用.每个集合入口自身便包含一个集合.\n\n> 重要\n\n如果使用嵌套运算符时,任何支对象是nil的话,valueForKeyPath:方法会抛出一个异常.\n\n下面的arrayOfArrays是一个嵌套数组\n\n```\n\nNSArray * moreTransactions = @[<# transacion data #>];\nNSArray * arrayOfArrays    = @[self.transactions, moreTransactions];\n\n```\n\n@distinctUnionOfArrays\n\n使用该运算符时,返回一个数组,该数组包含所有集合中指定key path下所有属性对应的对象.\n\n```\n\nNSArray *collectedDistinctPayees = [arrayOfArrays valueForKeyPath:@\"@distinctUnionOfArrays.payee\"];\n\n```\n\n> 注意\n@unionOfArrays 运算符与@distictUnionOfArrays运算符功能类似,但是不会移除重复对象.\n\n\n@unionOfArrays\n\n```\n\nNSArray *collectedPayees = [arrayOfArrays valueForKeyPath:@\"unionOfArrays.payee\"];\n\n```\n\n@distincUnionOfSets\n\n与@distincUnionOfArrays类似,假如示例数据是以集合存储而不是数组,则返回的是一个NSSet集合对象.\n\n---\n\n### 表示非对象类型值 \n\nNSObject提供的键值编码协议方法的默认实现不仅适用于对象属性,在非对象属性中同样适用. 默认实现在对象参数,返回值,和非对象属性之间自动切换.这将允许基于key-based 签名的getter和setter方法保持一致,即使存储属性是一个标量或者结构体.\n\n> 注意\n在Swift中所有属性是对象类型.本节只在OC属性中适用.\n\n当调用协议中的getter方法时,比如 valueForKey:, 默认实现决定调用某个特殊的访问器方法或者为指定key提供值的实例变量.如果返回值不是一个对象,getter使用该值去创建一个NSNumber对象(对于标量) 或者NSValue对象(对于结构体) 并且 返回NSNumber或者NSValue.\n\n类似的,默认情况下,setter方法例如`setValue:forKey: `通过一个属性访问器或者实例变量来决定其数据类型.如果属性的数据类型不是对象类型,setter方法首先发送一个合适的`<type>Value `消息给传入的值对象,来提取下标数据,并且将设置的值存储进去.\n\n> 注意\n当使用键值编码协议中的一个setter方法给一个非对象属性赋空值时,setter没有明显的执行行为.因而,它会给接受setter方法的对象发送一个`setNilValueForKey:`方法.默认会吊起一个`NSInvalidArgumentException`异常.但是子类可以重写改方法.\n\n#### 包装和解包标量类型\n\n标量类型的默认键值编码实现是使用一个NSNumber实例包装起来,对于每种数据类型,使用下标属性的值创建一个NSNumber对象来提供一个getter返回值.同样该表也展示了使用的访问器方法,该方法是在一个赋值操作中,从setter输入参数中提取值.\n\n标量类型被包装在NSNumber对象中.\n\n> 注意\n在macOS中, 由于历史原因, BOOL的类型定义是作为signed char类型.KVC不会区分这些.所以,当key是一个BOLL类型值时,使用`setValue:forKey:`方法不能传递像@\"true\"或者@\"YES\"这样的值,KVC会尝试执行charValue(应为BOOL类型继承自char类型),但是NSString不会实现该方法,那样会导致一个运行时错误. 反而,只能传递一个NSNumber对象,比如@(1)或者@(YES),当Key时一个BOOL类型时,做为`setValue:forKey:`的参数.这种限制在iOS中不适用,BOOL类型被定义为本地Boolean类型bool并且KVC执行`boolValue`方法.这种设置值的方式对一个NSNumber对象或者一个合适格式的NSString对象都是适用的.\n\n\n#### 包装和解包结构体类型\n\n自动包装和解包不限于NSPoint,NSRange,NSSize,NSRect.结构体类型(OC编码的)都可以包装在一个NSValue对象中.\n\n**Listing 5-1** 使用一个自定义的结构体的示例类\n\n```\ntypedef struct {\n    \n    float x, y, z;\n    \n}ThreeFloats;\n\n@interface MyClass\n\n@property (nonatomic) ThreeFloats threeFloats;\n\n@end\n\n```\n使用该类的一个叫做myClass的实例,使用KVC获取threeFloats属性的值.\n\n```\nNSValue *result = [myClass valueForKey:@:\"threeFloats\"];\n\n```\n`valueForKey:`方法的默认实现调用`threeFloats`的getter方法.然后返回返回一个NSValue对象,该对象包装着返回值.\n\n类似的,也可以使用KVC给treeFloats属性赋值\n\n```\nThreeFloats floats = {1.,2.,3.};\n\nNSValue * value = [NSValue valueWithBytes:&floats objCType:@encode(ThreeFloats)];\n\n[myClass setValue:value forKey:@\"ThreeFloats\"];\n\n```\n\n默认实现使用一个 `getValue:`消息来解包数据值,然后使用解包的结构体作为参数调用`setThreeFloats:`方法.\n\n\n#### 校验属性\n\n键值编码协议定义了支持属性校验的方法.使用键值编码兼容对象,可以读取和写入属性数据.也可以使用通过一个key或者keyPath来校验一个属性.当调用` validateValue:forKey:error:`(或者 `validateValue:forKeyPath:error`)方法时, 协议的默认实现会为找到一个匹配格式` validate<key>:error:`的方法而去搜索接受校验信息的的对象,.如果对象没有这样的方法,默认校验成功,返回YES.当一个指定的属性校验方法存在时,返回该方法的调用结果.\n\n> 注意\n仅在OC中使用校验.在swift中,属性校验依赖于可选类型和强引用类型检查的编译器来实现.\n\n因为属性指定校验方法通过引用接收值和错误参数.校验可能会有三种结果:\n\n1.校验方法认为值对象有效,并且不改变值和错误参数,返回YES.\n2.校验方法认为值对象无效,但是选择不改变值对象.在这种情况下,返回值为NO并且给NSErro对象设置一个错误引用来说明失败原因.\n3.校验方法认为值对象无效,但是创建了一个新的,有效的值替换掉原来的值.在这种情况下,方法返回YES,而将错误对象保持不变。在返回之前，该方法修改了指向新值对象的值引用。当它进行修改时，方法总是创建一个新的对象，而不是修改旧的对象，即使值对象是可变的。\n\n**Listing 6-1** 属性名校验\n\n```\n\nPerson * person = [[Person alloc] init];\n\nNSError * error;\n\nNSString *name = @\"John\";\n\nif(![person validateValue:&name forKey:@\"name\" error:&error]){\n    \n    NSLog(@\"%@\",error);\n}\n\n```\n\n#### 自动校验\n一般来讲,不管是键值编码协议还是对象的默认实现都没有定义自动执行校验的机制.在您的app需要该功能时,使用该方法校验.\n\n### 访问器搜索模式\n\n#### 基础 Getter 搜索模式\n\n`valueForKey:`方法的默认实现,给定一个key作为输入参数,执行下面流程,从接受返回值的对象进行操作.\n\n1.搜索访问器方法,根据 `get<KEY>`, `<key>`, `is<Key>`或者`_<key>`这样的名称和顺序来搜索.如果发现,调用并且执行步骤5返回结果.否则执行下一步.\n\n2.如果没有一个访问器被发现,搜索匹配格式为`countOf<Key>`和`objectIn<Key>AtIndex:`和`<key>AtIndexes:`这些方法.\n如果这些方法中的第一个和剩余两个方法中至少一个被找到.创建一个集合代理对象,该对象响应所有的NSArray方法,并且返回该集合对象.否则,执行步骤3.\n\n3.如果没有一个访问器或者数组访问方法被找到,那么接着找 `countOf<key>`, `enumeratorOf<Key>`,`memberOf<Key>:` 这三个方法.\n\n如果所有三个方法都被找到,创建一个集合代理对象,该对象的所有方法响应NSSet的所有方法,并且返回该对象.否则,执行步骤4\n\n4.如果没有一个访问器方法或者组合访问方法被找到,并且接受对象的类方法 `accessInstanceVariablesDirectly`返回YES,接着按照顺序搜索名字为`_<key>`,`_is<Key>`,或者`is<Key>`\n的实例变量,如果找到,直接获取该实例变量的值,执行步骤5,否则执行步骤6\n\n5.如果检索到的属性值是一个对象指针,返回该结果.\n如果该值是一个NSNumber支持的标量类型,将它存储在一个NSNumber实例中,并且返回该实例.\n如果结果是一个NSNumber不支持的标量类型,将其转换为NSValue对象并返回该对象.\n\n6.如果以上所有的步骤都失败,调用`valueForUndefinedKey:`方法,默认吊起一个异常,但是子类重写.\n\n\n#### 基础 Setter 搜索模式\n\n`setValue:forKey:`方法执行下面流程:\n\n1. 按照顺序set<Key>:, _set<Key>需要第一访问器.如果找到,使用输入值(或者未包装的值),执行该方法,结束.\n\n2. 如果没有访问器被找到,并且类方法 `accessInstanceVariablesDirectly`返回YES,按照名字为_<key>,_is<Key>,<key>,is<Key>的顺序寻找\n实例变量.如果找到,则给实例变量直接赋值,结束.\n\n3.以上方法未找到访问器或实例变量,执行`setValue:forUndefinedKey:`方法,默认抛出异常,子类可以重写该方法.\n\n\nArray 和 Set 的搜索格式与以上类似,不赘述.\n\n---\n\n想要更多地了解关于 `KVC` 的API,请移步 [KVC](https://www.jianshu.com/p/7f7360ae8e7b)\n\n## 参考资料\n[Key-Value Coding Programming Guide](https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/KeyValueCoding/index.html#//apple_ref/doc/uid/10000107-SW1)\n","slug":"iOS/KVC-编程指南","published":1,"updated":"2020-09-27T10:39:43.947Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgq6gnza0082t29k4tgvaxku","content":"<hr>\n<h2 id=\"关于Key-Value-Coding\"><a href=\"#关于Key-Value-Coding\" class=\"headerlink\" title=\"关于Key-Value Coding\"></a>关于Key-Value Coding</h2><p>键值编码是一种由NSKeyValueCoding非正式协议启用的机制，协议对象采用该协议来间接访问其属性。当一个对象兼容键值编码时，它的属性通过一个简洁的、统一的消息接口来使用字符串参数寻址。这种间接访问机制补充了实例变量及其相关访问方法所提供的直接访问。</p>\n<p>您通常使用访问器方法来获得对对象属性的访问。获取访问器(或getter)返回一个属性的值。设置访问器(或setter)设置属性的值。在objective-c中，还可以直接访问属性的底层实例变量。在任何一种方法中访问对象属性都很简单，但需要调用属性特定的方法或变量名。随着属性列表的增长或变化，也必须使用访问这些属性的代码。与此相反，一个键值编码兼容的对象提供了一个简单的消息接口，它在所有属性中都是一致的。</p>\n<p>键值编码是许多其他Cocoa技术的基础概念，如键值观察、Cocoa绑定、Core Data和applescript能力。在某些情况下，键值编码也有助于简化代码。</p>\n<h3 id=\"使用服从Key-Value-Coding-的对象\"><a href=\"#使用服从Key-Value-Coding-的对象\" class=\"headerlink\" title=\"使用服从Key-Value Coding 的对象\"></a>使用服从Key-Value Coding 的对象</h3><p>对象通常在继承NSObject(直接或间接)时即采用了键值编码，它们都采用NSKeyValueCoding协议，并为基本方法提供默认实现。这样的对象通过一个紧凑的消息传递接口使其他对象能够执行以下操作:</p>\n<ul>\n<li><p>访问对象的属性。该协议指定了一些方法，例如通用的getter valueForKey:和通用的setter setValue:forKey:用于访问对象属性通过属性名(或键，参数化的字符串)。这些对象相关方法的默认实现使用键来定位和与底层数据交互。</p>\n</li>\n<li><p>操作集合属性。与其他属性一样，访问方法的默认实现与对象的集合属性(例如NSArray对象)实现相同。此外，如果一个对象定义了一个属性的集合访问器方法，那么它可以使用键值访问获取到集合的内容。这通常比直接访问更有效，并允许您通过标准化接口使用自定义集合对象。</p>\n</li>\n<li><p>在集合对象上调用集合操作符。当在键值编码兼容对象中访问集合属性时，可以将集合操作符插入到关键字字符串。集合操作符指示默认的NSKeyValueCoding getter实现对集合的取值操作，然后返回一个新的、经过筛选的集合版本，或者一个表示集合特征的单一值。</p>\n</li>\n<li><p>访问非对象属性。协议的默认实现会检测非对象属性，包括标量和结构体，并自动将它们封装起来，作为在协议接口上使用的对象。此外，该协议声明了一种方法，允许一个服从协议的对象在通过键值编码给一个非对象类型赋值为nil时,提供一个合适的响应.</p>\n</li>\n<li><p>通过keyPath访问属性。当您有一个符合键值编码的对象的层级结构时，您可以使用基于keyPath的方法在层次结构中调用单个方法来获取或来设置一个值。</p>\n</li>\n</ul>\n<h3 id=\"为对象采用键值编码\"><a href=\"#为对象采用键值编码\" class=\"headerlink\" title=\"为对象采用键值编码\"></a>为对象采用键值编码</h3><p>为了使您自己的对象具有键值编码兼容，您确保他们采用了<code>NSKeyValueCoding</code>非正式协议并实现了相应的方法，例如<code>valueForKey:</code>作为通用的getter和 <code>setValue:forKey:</code> 作为通用的setter。幸运的是，如上所述，NSObject采用了这个协议，并为这些和其他基本方法提供了默认实现。因此，如果您从NSObject(或它的许多子类)派生对象，那么大部分工作已经为您完成了。</p>\n<p>为了使默认的方法能够执行它们的工作，您可以确保对象的访问器方法和实例变量遵循某些定义良好的格式。这允许默认实现在对键值编码消息的响应中找到对象的属性。然后，您通过提供的校验方法可选地去扩展和自定义键值编码并且处理某些特殊的情况.</p>\n<h3 id=\"Swift中的键值编码\"><a href=\"#Swift中的键值编码\" class=\"headerlink\" title=\"Swift中的键值编码\"></a>Swift中的键值编码</h3><p>从NSObject继承的Swift对象或其子类的默认属性遵循键值编码协议。而在Objective - C中，属性的访问器和实例变量必须遵循特定的模式，Swift的标准属性声明会自动保证这一点。另一方面，许多协议的特性要么不相关，要么使用在objective - c中不存在的本地Swift构造或一些技术能够更好地处理。例如,所有的Swift属性都是对象,你不必再操心对非对象属性默认实现的特殊处理</p>\n<p>因此，虽然键值编码协议方法直接转换为Swift，但这个指南主要关注objective - c，在这里您需要做更多的工作以确保遵从性，在什么地方键值编码通常是最适合的。</p>\n<h3 id=\"其他依赖键值编码的-Cocoa-技术\"><a href=\"#其他依赖键值编码的-Cocoa-技术\" class=\"headerlink\" title=\"其他依赖键值编码的 Cocoa 技术\"></a>其他依赖键值编码的 Cocoa 技术</h3><p>一个符合键值编码的对象在Cocoa技术参与广泛，这些技术依赖于这种访问方式，包括:</p>\n<ul>\n<li><p>键-值观察。这个机制使对象能够注册异步通知，这是由另一个对象属性的变化所驱动的，如键值观察编程指南所述。</p>\n</li>\n<li><p>Cocoa 绑定。这个技术集合完全实现了一个模型-视图-控制器范例，模型封装应用程序数据，视图显示和编辑数据，控制器在两者之间进行协调。阅读Cocoa绑定编程主题，了解更多关于Cocoa绑定的知识。</p>\n</li>\n<li><p>Core Data。这个框架为对象生命周期和对象持久化相关的常见任务提供了通用的和自动化的解决方案。更多了解您可以阅读Core Data编程指南。</p>\n</li>\n<li><p>AppleScript。这种脚本语言可以直接控制脚本应用程序和macOS的许多部分。Cocoa的脚本支持利用了键值编码来获取和设置脚本对象中的信息。NSScriptKeyValueCoding非正式协议中的方法为使用键值编码提供了额外的功能，包括通过索引在多值密钥中获取和设置键值，并强制(或转换)键值到适当的数据类型。AppleScript概述提供了AppleScript及其相关技术的高级概述。</p>\n</li>\n</ul>\n<hr>\n<h2 id=\"键值编码原理\"><a href=\"#键值编码原理\" class=\"headerlink\" title=\"键值编码原理\"></a>键值编码原理</h2><h3 id=\"访问对象的属性\"><a href=\"#访问对象的属性\" class=\"headerlink\" title=\"访问对象的属性\"></a>访问对象的属性</h3><p>一个对象在它的接口声明中明确属性.这些属性属于下面类别中的一种:</p>\n<ul>\n<li><p>属性(Attributes).这些属性是一些单一的值,例如一个标量,字符串,或者布尔类型的值.值对象诸如NSNumber和其他不可变类型比如NSColor也都被认为是属性.</p>\n</li>\n<li><p>一对一关系.这些属性是可变对象并且拥有他们自己的属性.一个对象的属性可以改变而无需改变对象自身.举例来说,一个 <code>bank account</code> 对象可能有一个<code>owner</code>属性,该属性是一个<code>Person</code>类型的对象.而<code>person</code>对象又有一个<code>address</code>属性.<code>owner</code>的<code>address</code>可能改变而 <code>bank account</code> 却不需要改变对<code>owner</code>的引用持有.<code>bank account</code> 的<code> owner</code>没有改变,仅仅是它的地址改变了.</p>\n</li>\n<li><p>一对多关系.这些属性是集合类型对象.尽管自定义集合类页可以实现,但是通常用一个NSArray或NSSet实例去持有该集合.</p>\n</li>\n</ul>\n<p>BankAccount对象声明每种属性类型,如下:</p>\n<p><strong>Listing 2-1</strong> <code> BankAccount</code>对象的属性</p>\n<pre><code class=\"hljs less\">\n<span class=\"hljs-variable\">@interface</span> <span class=\"hljs-attribute\">BankAccount </span>: NSObject\n\n<span class=\"hljs-variable\">@property</span> (nonatomic) NSNumber* currentBalance;   <span class=\"hljs-comment\">//An Attribute </span>\n<span class=\"hljs-variable\">@property</span> (nonatomic) Person*   owner;            <span class=\"hljs-comment\">//A to-one relation  一对一关系</span>\n<span class=\"hljs-variable\">@property</span> (nonatomic) NSArray&lt; Transaction* &gt;* transactions;<span class=\"hljs-comment\">//A to-many relation 一对多关系</span>\n\n<span class=\"hljs-variable\">@end</span>\n</code></pre>\n\n<p>为了持有包装的属性,一个对象在它的接口中为其属性提供了访问器方法.对象的创建者可以自定义访问器方法,或者依赖编译器去自动生成访问器方法.总之,代码的创建者使用这些访问器必须在编译前写明属性的名字.访问器方法的名字存储在静态存储区.举例来说,给定的 <code>bank account</code> 对象声明如** Listing 2-1 **,编译器会为<code>myAccount</code>对象生成一个setter方法来供你使用:</p>\n<pre><code class=\"hljs scheme\">\n[<span class=\"hljs-name\">myAccount</span> setCurrentBalance:@(<span class=\"hljs-name\">100.0</span>)]<span class=\"hljs-comment\">;</span>\n</code></pre>\n\n<p>这种赋值方式直接,但是缺乏灵活性. 一个键值编码键值对象,提供一个更普遍的机制,使用字符串标签去访问一个对象的属性.</p>\n<h4 id=\"使用key和key-Path来识别一个对象的属性\"><a href=\"#使用key和key-Path来识别一个对象的属性\" class=\"headerlink\" title=\"使用key和key Path来识别一个对象的属性\"></a>使用key和key Path来识别一个对象的属性</h4><p>key 是一个字符串用来识别具体的属性.通俗地讲, key代表一个属性.key必须使用ASCII编码,不可用包含空格,并且通常以小写字母开头(尽管有例外,比如在许多类中的URL属性)</p>\n<p>因为<code>BankAccount</code>类兼容键值编码,它识别keys所对应的<code>owner</code>, <code>currentBalance</code>, <code>transactions</code>,这些对象的属性名.而不是调用 <code>setCurrentBalance: </code>方法,可以根据它的key来给其属性赋值:</p>\n<pre><code class=\"hljs scheme\">\n[<span class=\"hljs-name\">myAccount</span> setValue:@(<span class=\"hljs-name\">100.0</span>) forKey:@<span class=\"hljs-string\">&quot;currentBalance&quot;</span>]<span class=\"hljs-comment\">;</span>\n</code></pre>\n\n<p>事实上,你可以给myAccount对象使用该方法设置所有属性的值.只需要替换不同的key参数就行.因为参数是一个字符串,使其可以作为一个变量在运行时中进行操作.</p>\n<p>key path 是一个以.符号做为key分割标记,来遍历对象的属性.在遍历中第一个key对应的属性跟receiver关联.每个子遍历key都更它上一级的属性值关联.key path对于多层次结构对象的属性调用很有用.</p>\n<p>举例来说,keypath owner.address.street 应用于一个bank account实例对象.对应关联一个street字符串作为其值.假设Person和Address类也兼容键值编码,该字符串存储在bank account的owner属性所对应的address中.</p>\n<blockquote>\n<p>注意<br>在 Swift 中, 你可以使用#keyPath表示方式来取代使用一个字符串去表示一个key或者keypath.这种方式提供了编译时检测的优点.</p>\n</blockquote>\n<h4 id=\"使用key获取属性值\"><a href=\"#使用key获取属性值\" class=\"headerlink\" title=\"使用key获取属性值\"></a>使用key获取属性值</h4><p>一个兼容键值编码的对象,该对象继承自NSObject,一个从NSObject继承的对象，它提供了协议的基本方法的默认实现，它会自动采用该协议，并带有某些默认行为。这样的对象至少实现了以下基本的key-bassed getters:</p>\n<ul>\n<li><p><code>valueForKey: </code>根据key参数返回属性的值.如果以key命名的属性根据 访问器搜索格式 中的规则无法找到,该对象会给自己发送一个 <code>valueForUndefinedKey:</code> 消息. <code>valueForUndefinedKey: </code>方法的默认实现会吊起一个<code>NSUndefinedKeyException</code>,但是子类可以重写,并且更优雅的处理这种情况.</p>\n</li>\n<li><p><code>valueForKeyPath:</code> 返回对象指定键路径下的值.任何在键路径遍历下没有与之相匹配的键值编码兼容,意味着使用 <code>valueForKey: </code>的默认实现无法找到相对应的访问器方法.对象则调用 <code>valueForUndefinedKey:</code> 方法.</p>\n</li>\n<li><p><code>dictionaryWithValuesForKeys:</code> 根据数组里面所有key返回相关的键值字典.数组中每个key都会调用<code>valueForKey:</code>方法.返回值为一个字典,包含数组中所有的key和与之相关的值.</p>\n</li>\n</ul>\n<blockquote>\n<p>注意<br>集合类型对象,比如NSArray,NSSet,NSDictionary,不能把nil作为值包含进去.可以使用NSNull对象代表一个空值.NSNull提供一个实例来表示对象属性的空值. <code>dictionaryWithValuesForKeys: </code>方法和相关的 <code>setValuesForKeysWithDictionary: </code>方法 的默认实现 自动在NSNull(在字典参数中)和nil(在存储属性中)之间转换</p>\n</blockquote>\n<p>当你使用一个键路径去寻址一个属性时,如过键路径下的最后的key对应的是一个一对多的属性(意味着关联一个集合),返回值是一个包含所有键对应的值的集合.举例来讲,请求<code>transactions.payee</code>路径下的值,返回在所有<code>transactions</code>下<code>payee</code>对象的数组.keypath中多个数组同样适用.<code>accounts.transactions.payee</code>返回在所有<code>accountes</code>对象下,所有<code>transactions</code>下的<code>payee</code>组成的数组.</p>\n<h4 id=\"使用key给属性赋值\"><a href=\"#使用key给属性赋值\" class=\"headerlink\" title=\"使用key给属性赋值\"></a>使用key给属性赋值</h4><p>和getter方法一样,键值编码对象也提供了基于NSKeyValueCoding协议实现的一组setter方法:</p>\n<ul>\n<li><p><code>setValue: forkey:</code> 给对象指定键赋值.该方法默认自动解包表示标量和结构体的NSNumber和NSValue对象,并且将这些解包后的值赋给对应属性.<br>如果将要赋值的键不存在,则对象调用 <code>setValue: forUndefinedKey:</code> 方法.默认会吊起<code>NSUndefinedKeyException.</code>然而,子类可以重写该方法,并且以自定义的方式处理.</p>\n</li>\n<li><p><code>setValue: forKeyPath:</code> 设置指定键路径下的值.对象在键路径遍历下未找到相关属性,则调用<code>setValue:forUndefinedKey:</code>方法.</p>\n</li>\n<li><p><code>setValuesForKeyswithDictionary: </code>给字典中所有key对应的属性赋值.默认实现是给每个键值对调用<code>setValue:forKey:</code>方法.如果有必要的话,用NSNull对象替换nil</p>\n</li>\n</ul>\n<p>在默认实现中,当试图给一个非对象属性赋值nil时,键值编码兼容对象会给自身发送一个<code>setNilValueForKey:</code>消息.该方法默认会吊起<code>NSInvalidArgumentException</code>.但是一个对象可以重写该方法,去替代默认实现或者用一个标量值替代.</p>\n<h4 id=\"使用键去简化对象访问\"><a href=\"#使用键去简化对象访问\" class=\"headerlink\" title=\"使用键去简化对象访问\"></a>使用键去简化对象访问</h4><p>通过键值编码的setter和getter能够简化代码.在macOS中,NSTableView,NSOutlineView对象在他们的列中标记一个字符串id.如果模型对应的表格不兼容键值编码,表格数据源方法会去强制检查每一列的id找到相关属性并返回.未来,当添加一个属性给模型的时候,例如Person对象的那中情况,你必须重新访问数据源方法,为新属性的测试添加另一种条件,并且返回相关的值.</p>\n<p><strong>Listing 2-2</strong> 不适用键值编码的数据源方法实现</p>\n<pre><code class=\"hljs groovy\">- (id)<span class=\"hljs-attr\">tableView:</span>(NSTableView *)tableview <span class=\"hljs-attr\">objectValueForTableColumn:</span>(id)column <span class=\"hljs-attr\">row:</span>(NSInteger)row\n&#123;\n    id result = nil;\n    Person *person = [self.people <span class=\"hljs-attr\">objectAtIndex:</span>row];\n \n    <span class=\"hljs-keyword\">if</span> ([[column identifier] <span class=\"hljs-attr\">isEqualToString:</span>@<span class=\"hljs-string\">&quot;name&quot;</span>]) &#123;\n        result = [person name];\n    &#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> ([[column identifier] <span class=\"hljs-attr\">isEqualToString:</span>@<span class=\"hljs-string\">&quot;age&quot;</span>]) &#123;\n        result = @([person age]);  <span class=\"hljs-comment\">// Wrap age, a scalar, as an NSNumber</span>\n    &#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> ([[column identifier] <span class=\"hljs-attr\">isEqualToString:</span>@<span class=\"hljs-string\">&quot;favoriteColor&quot;</span>]) &#123;\n        result = [person favoriteColor];\n    &#125; <span class=\"hljs-comment\">// And so on...</span>\n \n    <span class=\"hljs-keyword\">return</span> result;\n&#125;\n\n</code></pre>\n\n<p><strong>Listing 2-3</strong> 展示了一个使用兼容键值编码的<code>Person</code>对象 更紧凑的数据源方法实现方式. 只需要使用 <code>valueForKey</code> getter方法,数据源方法就会使用列的标签作为key返回合适的值. 除了更简洁外,也更加通俗易懂,因为只要列标识符总是与模型对象的属性名匹配，它就会在稍后添加新列时保持不变。</p>\n<p><strong>Listing 2-3</strong> 使用键值编码实现数据源方法</p>\n<pre><code class=\"hljs groovy\">\n- (id)<span class=\"hljs-attr\">tableView:</span>(NSTableView *)tableview <span class=\"hljs-attr\">objectValueForTableColumn:</span>(id)column <span class=\"hljs-attr\">row:</span>(NSInteger)row\n&#123;\n    <span class=\"hljs-keyword\">return</span> [[self.people <span class=\"hljs-attr\">objectAtIndex:</span>row] <span class=\"hljs-attr\">valueForKey:</span>[column identifier]];\n&#125;\n</code></pre>\n\n<hr>\n<h3 id=\"访问集合属性\"><a href=\"#访问集合属性\" class=\"headerlink\" title=\"访问集合属性\"></a>访问集合属性</h3><p>键值编码兼容对象像公开其他属性的方式一样公开它的一对多属性.可以使用<code>valueForKey:</code>和 <code>setValue: forKey:</code> (或者他们的 keyPath) 方法来给对象的集合属性赋值和访问. 然而,当想要对集合内容进行操作时,通常使用协议定义的可变代理方法是最有效的.</p>\n<p>协议定义了三个不同代理方法用来对集合对象进行访问:</p>\n<ul>\n<li><code>mutableArrayValueForKey:</code> 和 <code>mutableArrayValueForKeyPath:</code></li>\n</ul>\n<p>方法返回一个代理对象,该对象是一个<code>NSMutableArray</code>对象.</p>\n<ul>\n<li><code>mutableSetValueForKey:</code> 和 <code>mutableSetValueForKeyPath:</code></li>\n</ul>\n<p>方法返回一个代理对象,该对象是一个<code>NSMutableSet</code>对象.</p>\n<ul>\n<li><code>mutableOrderedSetValueForKey:</code> 和 <code>mutableOrderedSetValueForKeyPath:</code></li>\n</ul>\n<p>方法返回一个代理对象,该对象是一个<code>NSMutableOrderedSet</code>对象.</p>\n<p>当操作一个代理对象时,从集合中添加.删除,替换对象,协议的默认实现会相应地修改对应的下标属性.这种方式比使用 valueForKey: 方法获取不可变集合效率更高,创建一个可变集合,然后使用setValue: forKey: 消息将元素存储到集合中. 在许多情况下, 与直接使用可变属性相比,这种方式效率更高.这些方法为集合中对象的键值观察提供了额外的好处.</p>\n<hr>\n<h3 id=\"使用集合运算符\"><a href=\"#使用集合运算符\" class=\"headerlink\" title=\"使用集合运算符\"></a>使用集合运算符</h3><p>当发送一个<code>valueForKeyPaht:</code>消息给键值兼容对象时,可以在key path 中嵌入一个集合运算符,集合运算符是关键字列表中的一个.在它前面有一个@符号,来表示在getter返回前,以某种方式执行数据操作. valueForKeyPath:的默认实现由NSObject来提供.<br>当一个 keyPath 包含一个集合运算符时,运算符前面的keyPath,称为left key path,表示该集合相对于消息接受者的操作. 如果将消息直接发送到集合对象,例如NSArray实例,则可以省略左边的key path.<br>运算符后面的keypath部分,称为right key Path,指定运算符要操作的集合中的对象属性.处理@count所有的集合运算符都需要一个right key path. Figure 4-1 阐明了运算符keypath格式.</p>\n<p>下图为运算符 key path  格式</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/3340896-63cef07595f087a5.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Figure 4-1\"></p>\n<hr>\n<p>集合运算符的三种类型:<br>Aggregaion Operators, Array Operatiors, Nesting Operators</p>\n<p>下面这段代码演示了如何执行每个运算符的相关操作.</p>\n<pre><code class=\"hljs less\"><span class=\"hljs-variable\">@interface</span> <span class=\"hljs-attribute\">Transaction </span>: NSObject\n \n<span class=\"hljs-variable\">@property</span> (nonatomic) NSString* payee;   <span class=\"hljs-comment\">// To whom</span>\n<span class=\"hljs-variable\">@property</span> (nonatomic) NSNumber* amount;  <span class=\"hljs-comment\">// How much</span>\n<span class=\"hljs-variable\">@property</span> (nonatomic) NSDate* date;      <span class=\"hljs-comment\">// When</span>\n \n<span class=\"hljs-variable\">@end</span>\n</code></pre>\n\n<h4 id=\"Aggregation-Operators\"><a href=\"#Aggregation-Operators\" class=\"headerlink\" title=\"Aggregation Operators\"></a>Aggregation Operators</h4><p>@avg</p>\n<p>当使用@avg运算符时,<code>valueForKeyPaht:</code>会根据Right key Path中指定的属性读取集合中每个对象相关的值.并且计算他们的平均值.然后会返回一个包含结果的NSNumber实例.</p>\n<p>下面代码,可以获取集合中所有转账的平均值</p>\n<pre><code class=\"hljs nginx\">\n<span class=\"hljs-attribute\">NSNumber</span> *transactionAverage = [self.transactions valueForKeyPath:@<span class=\"hljs-string\">&quot;<span class=\"hljs-variable\">@avg</span>.amount&quot;</span>];\n</code></pre>\n\n<p>@count</p>\n<p>使用@count 运算符, <code>valueForKeyPath: </code>返回一个NSNumber实例表示集合中对象的数量. right key path忽略.</p>\n<p>获取转账的笔数:</p>\n<pre><code class=\"hljs nginx\">\n<span class=\"hljs-attribute\">NSNumber</span> *numberOfTransactions = [self.transactions valueForKeyPath:@<span class=\"hljs-string\">&quot;<span class=\"hljs-variable\">@count</span>&quot;</span>];\n</code></pre>\n\n<p>@max</p>\n<p>当使用@max运算符时, 返回集合中right key path 对应属性的最大值. 内部是使用 compare:方法比较集合中该属性对应的值.在搜索right key path对应属性值时,会忽略集合中的nil值.</p>\n<p>获取日期值的最大值,表示最近的转账日期.</p>\n<pre><code class=\"hljs nginx\">\n<span class=\"hljs-attribute\">NSDate</span> *latestDate = [self.transactions valueForKeyPath:@<span class=\"hljs-string\">&quot;<span class=\"hljs-variable\">@max</span>.date&quot;</span>];\n</code></pre>\n\n<p>@min</p>\n<p>使用@min 运算符时, <code>valueForKeyPath: </code>方法搜索集合中righ key path 对应属的值.并且返回最小的一个.</p>\n<p>返回转账日期中最早的日期.</p>\n<pre><code class=\"hljs nginx\">\n<span class=\"hljs-attribute\">NSDate</span> *earliestDate = [self.transactions valueForKeyPath:@<span class=\"hljs-string\">&quot;<span class=\"hljs-variable\">@min</span>.date&quot;</span>];\n</code></pre>\n\n<p>@sum</p>\n<p>使用 @sum 运算符,计算集合中所有keypath对应属性值的总和.</p>\n<pre><code class=\"hljs nginx\">\n<span class=\"hljs-attribute\">NSNumber</span> *amountSum = [self.transacitons valueForKeyPath:@<span class=\"hljs-string\">&quot;<span class=\"hljs-variable\">@sum</span>.amount&quot;</span>];\n</code></pre>\n\n<h4 id=\"Array-Operators\"><a href=\"#Array-Operators\" class=\"headerlink\" title=\"Array Operators\"></a>Array Operators</h4><p>Array 运算符使用valueForkeyPath: 返回right key path 对应的对象集合.</p>\n<blockquote>\n<p>重要<br>如果使用数组运算符时,任何支对象是空值的话,valueForKeyPath: 方法会抛出异常,</p>\n</blockquote>\n<p>@distinctUnionOfObjects</p>\n<p>使用@distinctUnionOfObjects 运算符, valueForKeyPath: 方法会创建并返回一个数组,该数组包含集合中对象的并集,这些对象与right key path 指定的属性对应.</p>\n<p>获取 payee 属性值的集合.</p>\n<pre><code class=\"hljs nginx\">\n<span class=\"hljs-attribute\">NSArray</span> *distincPayees = [self.transactions valueForKeyPath:@<span class=\"hljs-string\">&quot;<span class=\"hljs-variable\">@distinctUnionOfObjects</span>.payee&quot;</span>];\n</code></pre>\n\n<blockquote>\n<p>注意<br>@unionOfObjects 运算符提供相似的行为,但是不会移除重复的对象.</p>\n</blockquote>\n<p>@unionOfObjects</p>\n<pre><code class=\"hljs nginx\"><span class=\"hljs-attribute\">NSArray</span> *payees = [self.transactions valueForKeyPath:@<span class=\"hljs-string\">&quot;<span class=\"hljs-variable\">@unionOfObjects</span>.payee&quot;</span>];\n</code></pre>\n\n\n<h4 id=\"Nesting-Operators\"><a href=\"#Nesting-Operators\" class=\"headerlink\" title=\"Nesting Operators\"></a>Nesting Operators</h4><p>嵌套运算符在嵌套集合中使用.每个集合入口自身便包含一个集合.</p>\n<blockquote>\n<p>重要</p>\n</blockquote>\n<p>如果使用嵌套运算符时,任何支对象是nil的话,valueForKeyPath:方法会抛出一个异常.</p>\n<p>下面的arrayOfArrays是一个嵌套数组</p>\n<pre><code class=\"hljs fsharp\">\nNSArray * moreTransactions = @<span class=\"hljs-meta\">[&lt;# transacion data #&gt;]</span>;\nNSArray * arrayOfArrays    = @[self.transactions, moreTransactions];\n</code></pre>\n\n<p>@distinctUnionOfArrays</p>\n<p>使用该运算符时,返回一个数组,该数组包含所有集合中指定key path下所有属性对应的对象.</p>\n<pre><code class=\"hljs nginx\">\n<span class=\"hljs-attribute\">NSArray</span> *collectedDistinctPayees = [arrayOfArrays valueForKeyPath:@<span class=\"hljs-string\">&quot;<span class=\"hljs-variable\">@distinctUnionOfArrays</span>.payee&quot;</span>];\n</code></pre>\n\n<blockquote>\n<p>注意<br>@unionOfArrays 运算符与@distictUnionOfArrays运算符功能类似,但是不会移除重复对象.</p>\n</blockquote>\n<p>@unionOfArrays</p>\n<pre><code class=\"hljs groovy\">\nNSArray *collectedPayees = [arrayOfArrays <span class=\"hljs-attr\">valueForKeyPath:</span>@<span class=\"hljs-string\">&quot;unionOfArrays.payee&quot;</span>];\n</code></pre>\n\n<p>@distincUnionOfSets</p>\n<p>与@distincUnionOfArrays类似,假如示例数据是以集合存储而不是数组,则返回的是一个NSSet集合对象.</p>\n<hr>\n<h3 id=\"表示非对象类型值\"><a href=\"#表示非对象类型值\" class=\"headerlink\" title=\"表示非对象类型值\"></a>表示非对象类型值</h3><p>NSObject提供的键值编码协议方法的默认实现不仅适用于对象属性,在非对象属性中同样适用. 默认实现在对象参数,返回值,和非对象属性之间自动切换.这将允许基于key-based 签名的getter和setter方法保持一致,即使存储属性是一个标量或者结构体.</p>\n<blockquote>\n<p>注意<br>在Swift中所有属性是对象类型.本节只在OC属性中适用.</p>\n</blockquote>\n<p>当调用协议中的getter方法时,比如 valueForKey:, 默认实现决定调用某个特殊的访问器方法或者为指定key提供值的实例变量.如果返回值不是一个对象,getter使用该值去创建一个NSNumber对象(对于标量) 或者NSValue对象(对于结构体) 并且 返回NSNumber或者NSValue.</p>\n<p>类似的,默认情况下,setter方法例如<code>setValue:forKey: </code>通过一个属性访问器或者实例变量来决定其数据类型.如果属性的数据类型不是对象类型,setter方法首先发送一个合适的<code>&lt;type&gt;Value </code>消息给传入的值对象,来提取下标数据,并且将设置的值存储进去.</p>\n<blockquote>\n<p>注意<br>当使用键值编码协议中的一个setter方法给一个非对象属性赋空值时,setter没有明显的执行行为.因而,它会给接受setter方法的对象发送一个<code>setNilValueForKey:</code>方法.默认会吊起一个<code>NSInvalidArgumentException</code>异常.但是子类可以重写改方法.</p>\n</blockquote>\n<h4 id=\"包装和解包标量类型\"><a href=\"#包装和解包标量类型\" class=\"headerlink\" title=\"包装和解包标量类型\"></a>包装和解包标量类型</h4><p>标量类型的默认键值编码实现是使用一个NSNumber实例包装起来,对于每种数据类型,使用下标属性的值创建一个NSNumber对象来提供一个getter返回值.同样该表也展示了使用的访问器方法,该方法是在一个赋值操作中,从setter输入参数中提取值.</p>\n<p>标量类型被包装在NSNumber对象中.</p>\n<blockquote>\n<p>注意<br>在macOS中, 由于历史原因, BOOL的类型定义是作为signed char类型.KVC不会区分这些.所以,当key是一个BOLL类型值时,使用<code>setValue:forKey:</code>方法不能传递像@”true”或者@”YES”这样的值,KVC会尝试执行charValue(应为BOOL类型继承自char类型),但是NSString不会实现该方法,那样会导致一个运行时错误. 反而,只能传递一个NSNumber对象,比如@(1)或者@(YES),当Key时一个BOOL类型时,做为<code>setValue:forKey:</code>的参数.这种限制在iOS中不适用,BOOL类型被定义为本地Boolean类型bool并且KVC执行<code>boolValue</code>方法.这种设置值的方式对一个NSNumber对象或者一个合适格式的NSString对象都是适用的.</p>\n</blockquote>\n<h4 id=\"包装和解包结构体类型\"><a href=\"#包装和解包结构体类型\" class=\"headerlink\" title=\"包装和解包结构体类型\"></a>包装和解包结构体类型</h4><p>自动包装和解包不限于NSPoint,NSRange,NSSize,NSRect.结构体类型(OC编码的)都可以包装在一个NSValue对象中.</p>\n<p><strong>Listing 5-1</strong> 使用一个自定义的结构体的示例类</p>\n<pre><code class=\"hljs objectivec\"><span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-keyword\">struct</span> &#123;\n    \n    <span class=\"hljs-keyword\">float</span> x, y, z;\n    \n&#125;ThreeFloats;\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">@interface</span> <span class=\"hljs-title\">MyClass</span></span>\n\n<span class=\"hljs-keyword\">@property</span> (<span class=\"hljs-keyword\">nonatomic</span>) ThreeFloats threeFloats;\n\n<span class=\"hljs-keyword\">@end</span>\n</code></pre>\n<p>使用该类的一个叫做myClass的实例,使用KVC获取threeFloats属性的值.</p>\n<pre><code class=\"hljs applescript\">NSValue *<span class=\"hljs-literal\">result</span> = [myClass valueForKey:@:<span class=\"hljs-string\">&quot;threeFloats&quot;</span>];\n</code></pre>\n<p><code>valueForKey:</code>方法的默认实现调用<code>threeFloats</code>的getter方法.然后返回返回一个NSValue对象,该对象包装着返回值.</p>\n<p>类似的,也可以使用KVC给treeFloats属性赋值</p>\n<pre><code class=\"hljs groovy\">ThreeFloats floats = &#123;<span class=\"hljs-number\">1.</span>,<span class=\"hljs-number\">2.</span>,<span class=\"hljs-number\">3.</span>&#125;;\n\nNSValue * value = [NSValue <span class=\"hljs-attr\">valueWithBytes:</span>&amp;floats <span class=\"hljs-attr\">objCType:</span><span class=\"hljs-meta\">@encode</span>(ThreeFloats)];\n\n[myClass <span class=\"hljs-attr\">setValue:</span>value <span class=\"hljs-attr\">forKey:</span>@<span class=\"hljs-string\">&quot;ThreeFloats&quot;</span>];\n</code></pre>\n\n<p>默认实现使用一个 <code>getValue:</code>消息来解包数据值,然后使用解包的结构体作为参数调用<code>setThreeFloats:</code>方法.</p>\n<h4 id=\"校验属性\"><a href=\"#校验属性\" class=\"headerlink\" title=\"校验属性\"></a>校验属性</h4><p>键值编码协议定义了支持属性校验的方法.使用键值编码兼容对象,可以读取和写入属性数据.也可以使用通过一个key或者keyPath来校验一个属性.当调用<code> validateValue:forKey:error:</code>(或者 <code>validateValue:forKeyPath:error</code>)方法时, 协议的默认实现会为找到一个匹配格式<code> validate&lt;key&gt;:error:</code>的方法而去搜索接受校验信息的的对象,.如果对象没有这样的方法,默认校验成功,返回YES.当一个指定的属性校验方法存在时,返回该方法的调用结果.</p>\n<blockquote>\n<p>注意<br>仅在OC中使用校验.在swift中,属性校验依赖于可选类型和强引用类型检查的编译器来实现.</p>\n</blockquote>\n<p>因为属性指定校验方法通过引用接收值和错误参数.校验可能会有三种结果:</p>\n<p>1.校验方法认为值对象有效,并且不改变值和错误参数,返回YES.<br>2.校验方法认为值对象无效,但是选择不改变值对象.在这种情况下,返回值为NO并且给NSErro对象设置一个错误引用来说明失败原因.<br>3.校验方法认为值对象无效,但是创建了一个新的,有效的值替换掉原来的值.在这种情况下,方法返回YES,而将错误对象保持不变。在返回之前，该方法修改了指向新值对象的值引用。当它进行修改时，方法总是创建一个新的对象，而不是修改旧的对象，即使值对象是可变的。</p>\n<p><strong>Listing 6-1</strong> 属性名校验</p>\n<pre><code class=\"hljs sas\">\nPerson <span class=\"hljs-comment\">* person = [[Person alloc] init];</span>\n\nNSError <span class=\"hljs-comment\">* error;</span>\n\nNSString <span class=\"hljs-comment\">*name = @&quot;John&quot;;</span>\n\n<span class=\"hljs-meta\">if</span>(![person validateValue:<span class=\"hljs-variable\">&amp;name</span> forKey:@<span class=\"hljs-string\">&quot;name&quot;</span> <span class=\"hljs-meta\">error</span>:<span class=\"hljs-variable\">&amp;error</span>])&#123;\n    \n    N<span class=\"hljs-meta\">SLog(</span>@<span class=\"hljs-string\">&quot;%@&quot;</span>,<span class=\"hljs-meta\">error</span>);\n&#125;\n</code></pre>\n\n<h4 id=\"自动校验\"><a href=\"#自动校验\" class=\"headerlink\" title=\"自动校验\"></a>自动校验</h4><p>一般来讲,不管是键值编码协议还是对象的默认实现都没有定义自动执行校验的机制.在您的app需要该功能时,使用该方法校验.</p>\n<h3 id=\"访问器搜索模式\"><a href=\"#访问器搜索模式\" class=\"headerlink\" title=\"访问器搜索模式\"></a>访问器搜索模式</h3><h4 id=\"基础-Getter-搜索模式\"><a href=\"#基础-Getter-搜索模式\" class=\"headerlink\" title=\"基础 Getter 搜索模式\"></a>基础 Getter 搜索模式</h4><p><code>valueForKey:</code>方法的默认实现,给定一个key作为输入参数,执行下面流程,从接受返回值的对象进行操作.</p>\n<p>1.搜索访问器方法,根据 <code>get&lt;KEY&gt;</code>, <code>&lt;key&gt;</code>, <code>is&lt;Key&gt;</code>或者<code>_&lt;key&gt;</code>这样的名称和顺序来搜索.如果发现,调用并且执行步骤5返回结果.否则执行下一步.</p>\n<p>2.如果没有一个访问器被发现,搜索匹配格式为<code>countOf&lt;Key&gt;</code>和<code>objectIn&lt;Key&gt;AtIndex:</code>和<code>&lt;key&gt;AtIndexes:</code>这些方法.<br>如果这些方法中的第一个和剩余两个方法中至少一个被找到.创建一个集合代理对象,该对象响应所有的NSArray方法,并且返回该集合对象.否则,执行步骤3.</p>\n<p>3.如果没有一个访问器或者数组访问方法被找到,那么接着找 <code>countOf&lt;key&gt;</code>, <code>enumeratorOf&lt;Key&gt;</code>,<code>memberOf&lt;Key&gt;:</code> 这三个方法.</p>\n<p>如果所有三个方法都被找到,创建一个集合代理对象,该对象的所有方法响应NSSet的所有方法,并且返回该对象.否则,执行步骤4</p>\n<p>4.如果没有一个访问器方法或者组合访问方法被找到,并且接受对象的类方法 <code>accessInstanceVariablesDirectly</code>返回YES,接着按照顺序搜索名字为<code>_&lt;key&gt;</code>,<code>_is&lt;Key&gt;</code>,或者<code>is&lt;Key&gt;</code><br>的实例变量,如果找到,直接获取该实例变量的值,执行步骤5,否则执行步骤6</p>\n<p>5.如果检索到的属性值是一个对象指针,返回该结果.<br>如果该值是一个NSNumber支持的标量类型,将它存储在一个NSNumber实例中,并且返回该实例.<br>如果结果是一个NSNumber不支持的标量类型,将其转换为NSValue对象并返回该对象.</p>\n<p>6.如果以上所有的步骤都失败,调用<code>valueForUndefinedKey:</code>方法,默认吊起一个异常,但是子类重写.</p>\n<h4 id=\"基础-Setter-搜索模式\"><a href=\"#基础-Setter-搜索模式\" class=\"headerlink\" title=\"基础 Setter 搜索模式\"></a>基础 Setter 搜索模式</h4><p><code>setValue:forKey:</code>方法执行下面流程:</p>\n<ol>\n<li><p>按照顺序set<Key>:, _set<Key>需要第一访问器.如果找到,使用输入值(或者未包装的值),执行该方法,结束.</p>\n</li>\n<li><p>如果没有访问器被找到,并且类方法 <code>accessInstanceVariablesDirectly</code>返回YES,按照名字为_<key>,_is<Key>,<key>,is<Key>的顺序寻找<br>实例变量.如果找到,则给实例变量直接赋值,结束.</p>\n</li>\n</ol>\n<p>3.以上方法未找到访问器或实例变量,执行<code>setValue:forUndefinedKey:</code>方法,默认抛出异常,子类可以重写该方法.</p>\n<p>Array 和 Set 的搜索格式与以上类似,不赘述.</p>\n<hr>\n<p>想要更多地了解关于 <code>KVC</code> 的API,请移步 <a href=\"https://www.jianshu.com/p/7f7360ae8e7b\">KVC</a></p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p><a href=\"https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/KeyValueCoding/index.html#//apple_ref/doc/uid/10000107-SW1\">Key-Value Coding Programming Guide</a></p>\n","site":{"data":{"fluid_static_prefix":{"internal_js":"/js","internal_css":"/css","internal_img":"/img","iconfont":"//at.alicdn.com/t/font_1736178_kmeydafke9r.css","anchor":"https://cdn.staticfile.org/anchor-js/4.2.2/","github_markdown":"https://cdn.staticfile.org/github-markdown-css/4.0.0/","jquery":"https://cdn.staticfile.org/jquery/3.4.1/","bootstrap":"https://cdn.staticfile.org/twitter-bootstrap/4.4.1/","highlightjs":"https://cdn.staticfile.org/highlight.js/10.0.0/","prismjs":"https://cdn.staticfile.org/prism/1.21.0/","tocbot":"https://cdn.staticfile.org/tocbot/4.11.1/","typed":"https://cdn.staticfile.org/typed.js/2.0.11/","fancybox":"https://cdn.staticfile.org/fancybox/3.5.7/","mathjax":"https://cdn.staticfile.org/mathjax/3.0.5/es5/","katex":"https://cdn.staticfile.org/KaTeX/0.11.1/","aplayer":"https://cdn.staticfile.org/aplayer/1.10.1/","busuanzi":"https://busuanzi.ibruce.info/busuanzi/2.3/","clipboard":"https://cdn.staticfile.org/clipboard.js/2.0.6/","mermaid":"https://cdn.staticfile.org/mermaid/8.5.0/","valine":"https://cdn.staticfile.org/valine/1.4.14/","gitalk":"https://cdn.staticfile.org/gitalk/1.6.2/","blueimp_md5":"https://cdn.staticfile.org/blueimp-md5/2.13.0/","disqusjs":"https://cdn.jsdelivr.net/npm/disqusjs@1.0/dist/","hint":"/lib/hint/"},"fluid_config":{"favicon":"/img/favicon.png","apple_touch_icon":"/img/favicon.png","title_join_string":" - ","force_https":false,"code":{"copy_btn":true,"highlight":{"enable":true,"lib":"highlightjs","highlightjs":{"style":"Github Gist","bg_color":false},"prismjs":{"style":"default","preprocess":true}}},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"_","loop":false},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"right","visible":"hover","icon":""},"mouse_click":{"enable":false,"style":"values"}},"dark_mode":{"enable":true,"default":"auto"},"color":{"body_bg_color":"#eee","body_bg_color_dark":"#181c27","navbar_bg_color":"#2f4154","navbar_bg_color_dark":"#1f3144","navbar_text_color":"#fff","navbar_text_color_dark":"#d0d0d0","text_color":"#3c4858","text_color_dark":"#c4c6c9","sec_text_color":"#718096","sec_text_color_dark":"#a7a9ad","post_text_color":"#2c3e50","post_text_color_dark":"#c4c6c9","post_heading_color":"#1a202c","post_heading_color_dark":"#c4c6c9","post_link_color":"#0366d6","post_link_color_dark":"#1589e9","link_hover_color":"#30a9de","link_hover_color_dark":"#30a9de","link_hover_bg_color":"#f8f9fa","link_hover_bg_color_dark":"#364151","board_color":"#fff","board_color_dark":"#252d38"},"font":{"font_size":"16px","font_family":null,"code_font_size":"85%"},"custom_js":null,"custom_css":null,"custom_html":"","web_analytics":{"enable":false,"baidu":null,"google":null,"gtag":null,"tencent":{"sid":null,"cid":null},"woyaola":null,"cnzz":null,"leancloud":{"app_id":null,"app_key":null,"server_url":null}},"lazyload":{"enable":true,"onlypost":false},"daovoice":{"enable":false,"appid":""},"aplayer":{"enable":false,"autoplay":false,"loop":"all","order":"random","theme":"#b7daff","songs":[{"name":"name","artist":"artist","url":"/songs/test.mp3","cover":"/img/cover.jpg"},{"name":"name","artist":"artist","url":"https://...url.mp3","cover":"https://...cover.jpg"}]},"version":{"check":false},"navbar":{"blog_title":"吃面多放葱","ground_glass":{"enable":false,"px":3,"alpha":0.7},"menu":[{"key":"home","link":"/","icon":"iconfont icon-home-fill"},{"key":"category","link":"/categories/","icon":"iconfont icon-category-fill"},{"key":"tag","link":"/tags/","icon":"iconfont icon-tags-fill"},{"key":"about","link":"/about/","icon":"iconfont icon-user-fill"}]},"search":{"enable":true,"path":"/local-search.xml","generate_path":"/local-search.xml","field":"post","content":true},"scroll_down_arrow":{"enable":true,"banner_height_limit":90,"scroll_after_turning_page":true},"banner_parallax":true,"footer":{"statistics":{"enable":false,"source":"busuanzi","pv_format":"总访问量 {} 次","uv_format":"总访客数 {} 人"},"beian":{"enable":false,"icp_text":"京ICP证123456号","police_text":"京公网安备12345678号","police_code":12345678,"police_icon":"/img/police_beian.png"}},"scroll_top_arrow":{"enable":true},"index":{"banner_img":"/img/default.png","banner_img_height":100,"banner_mask_alpha":0.3,"post_default_img":"","slogan":{"enable":true,"text":"像蚂蚁一样工作，像蝴蝶一样生活"},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"category":true,"tag":true}},"page":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3},"post":{"banner_img":"/img/default.png","banner_img_height":70,"banner_mask_alpha":0.3,"meta":{"author":{"enable":false},"date":{"enable":true,"format":"LL a"},"wordcount":{"enable":true,"format":"{} 字"},"min2read":{"enable":true,"format":"{} 分钟","words":100},"views":{"enable":false,"source":"busuanzi","format":"{} 次"}},"updated":{"enable":false,"content":"本文最后更新于：","relative":false},"toc":{"enable":true,"headingSelector":"h1,h2,h3,h4,h5,h6","collapseDepth":0},"copyright":{"enable":true,"content":"本博客所有文章除特别声明外，均采用 <a href=\"https://creativecommons.org/licenses/by-sa/4.0/deed.zh\" rel=\"nofollow noopener\">CC BY-SA 4.0 协议</a> ，转载请注明出处！"},"prev_next":{"enable":true},"custom":{"enable":false,"content":"<img src=\"https://octodex.github.com/images/jetpacktocat.png\" class=\"rounded mx-auto d-block mt-5\" style=\"width:150px; height:150px;\">"},"image_zoom":{"enable":true},"footnote":{"enable":true,"header":""},"math":{"enable":false,"specific":false,"engine":"mathjax"},"mermaid":{"enable":false,"specific":false,"options":{"theme":"default"}},"comments":{"enable":false,"type":"disqus"}},"utterances":{"repo":null,"issue_term":"pathname","label":"utterances","theme":"github-light","theme_dark":"github-dark","crossorigin":"anonymous"},"disqus":{"shortname":null,"disqusjs":false,"apikey":null},"gitalk":{"clientID":null,"clientSecret":null,"repo":null,"owner":null,"admin":["name"],"id":"location.pathname","language":"zh-CN","labels":["Gitalk"],"perPage":10,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true},"valine":{"appid":null,"appkey":null,"placeholder":"说点什么","path":"window.location.pathname","avatar":"retro","meta":["nick","mail","link"],"pageSize":10,"lang":"zh-CN","highlight":false,"recordIP":false,"serverURLs":null},"changyan":{"appid":"","appkey":""},"livere":{"uid":""},"remark42":{"host":"https://remark.haoyizebo.com","site_id":"haoyizebo","max_shown_comments":10,"locale":"zh"},"archive":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null},"category":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"post_limit":10,"order_by":"-length","collapse_depth":0},"tag":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null,"tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"avatar":"/img/avatar.png","name":"蔺国防","introduce":"移动应用开发者，历史文学爱好者","icons":[{"class":"iconfont icon-github-fill","link":"https://github.com","tip":"GitHub"},{"class":"iconfont icon-douban-fill","link":"https://douban.com","tip":"豆瓣"},{"class":"iconfont icon-wechat-fill","qrcode":"/img/favicon.png"}]},"page404":{"banner_img":"/img/default.png","banner_img_height":85,"banner_mask_alpha":0.3,"subtitle":"Page not found"},"links":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"items":[{"title":"Fluid Docs","intro":"主题使用指南","link":"https://hexo.fluid-dev.com/docs/","image":"/img/favicon.png"},{"title":"Fluid Repo","intro":"主题 GitHub 仓库","link":"https://github.com/fluid-dev/hexo-theme-fluid","image":"/img/favicon.png"},{"title":"Fluid Example","intro":"主题操作示例","link":"https://hexo.fluid-dev.com/docs/example/","image":"/img/favicon.png"}]}}}},"excerpt":"","more":"<hr>\n<h2 id=\"关于Key-Value-Coding\"><a href=\"#关于Key-Value-Coding\" class=\"headerlink\" title=\"关于Key-Value Coding\"></a>关于Key-Value Coding</h2><p>键值编码是一种由NSKeyValueCoding非正式协议启用的机制，协议对象采用该协议来间接访问其属性。当一个对象兼容键值编码时，它的属性通过一个简洁的、统一的消息接口来使用字符串参数寻址。这种间接访问机制补充了实例变量及其相关访问方法所提供的直接访问。</p>\n<p>您通常使用访问器方法来获得对对象属性的访问。获取访问器(或getter)返回一个属性的值。设置访问器(或setter)设置属性的值。在objective-c中，还可以直接访问属性的底层实例变量。在任何一种方法中访问对象属性都很简单，但需要调用属性特定的方法或变量名。随着属性列表的增长或变化，也必须使用访问这些属性的代码。与此相反，一个键值编码兼容的对象提供了一个简单的消息接口，它在所有属性中都是一致的。</p>\n<p>键值编码是许多其他Cocoa技术的基础概念，如键值观察、Cocoa绑定、Core Data和applescript能力。在某些情况下，键值编码也有助于简化代码。</p>\n<h3 id=\"使用服从Key-Value-Coding-的对象\"><a href=\"#使用服从Key-Value-Coding-的对象\" class=\"headerlink\" title=\"使用服从Key-Value Coding 的对象\"></a>使用服从Key-Value Coding 的对象</h3><p>对象通常在继承NSObject(直接或间接)时即采用了键值编码，它们都采用NSKeyValueCoding协议，并为基本方法提供默认实现。这样的对象通过一个紧凑的消息传递接口使其他对象能够执行以下操作:</p>\n<ul>\n<li><p>访问对象的属性。该协议指定了一些方法，例如通用的getter valueForKey:和通用的setter setValue:forKey:用于访问对象属性通过属性名(或键，参数化的字符串)。这些对象相关方法的默认实现使用键来定位和与底层数据交互。</p>\n</li>\n<li><p>操作集合属性。与其他属性一样，访问方法的默认实现与对象的集合属性(例如NSArray对象)实现相同。此外，如果一个对象定义了一个属性的集合访问器方法，那么它可以使用键值访问获取到集合的内容。这通常比直接访问更有效，并允许您通过标准化接口使用自定义集合对象。</p>\n</li>\n<li><p>在集合对象上调用集合操作符。当在键值编码兼容对象中访问集合属性时，可以将集合操作符插入到关键字字符串。集合操作符指示默认的NSKeyValueCoding getter实现对集合的取值操作，然后返回一个新的、经过筛选的集合版本，或者一个表示集合特征的单一值。</p>\n</li>\n<li><p>访问非对象属性。协议的默认实现会检测非对象属性，包括标量和结构体，并自动将它们封装起来，作为在协议接口上使用的对象。此外，该协议声明了一种方法，允许一个服从协议的对象在通过键值编码给一个非对象类型赋值为nil时,提供一个合适的响应.</p>\n</li>\n<li><p>通过keyPath访问属性。当您有一个符合键值编码的对象的层级结构时，您可以使用基于keyPath的方法在层次结构中调用单个方法来获取或来设置一个值。</p>\n</li>\n</ul>\n<h3 id=\"为对象采用键值编码\"><a href=\"#为对象采用键值编码\" class=\"headerlink\" title=\"为对象采用键值编码\"></a>为对象采用键值编码</h3><p>为了使您自己的对象具有键值编码兼容，您确保他们采用了<code>NSKeyValueCoding</code>非正式协议并实现了相应的方法，例如<code>valueForKey:</code>作为通用的getter和 <code>setValue:forKey:</code> 作为通用的setter。幸运的是，如上所述，NSObject采用了这个协议，并为这些和其他基本方法提供了默认实现。因此，如果您从NSObject(或它的许多子类)派生对象，那么大部分工作已经为您完成了。</p>\n<p>为了使默认的方法能够执行它们的工作，您可以确保对象的访问器方法和实例变量遵循某些定义良好的格式。这允许默认实现在对键值编码消息的响应中找到对象的属性。然后，您通过提供的校验方法可选地去扩展和自定义键值编码并且处理某些特殊的情况.</p>\n<h3 id=\"Swift中的键值编码\"><a href=\"#Swift中的键值编码\" class=\"headerlink\" title=\"Swift中的键值编码\"></a>Swift中的键值编码</h3><p>从NSObject继承的Swift对象或其子类的默认属性遵循键值编码协议。而在Objective - C中，属性的访问器和实例变量必须遵循特定的模式，Swift的标准属性声明会自动保证这一点。另一方面，许多协议的特性要么不相关，要么使用在objective - c中不存在的本地Swift构造或一些技术能够更好地处理。例如,所有的Swift属性都是对象,你不必再操心对非对象属性默认实现的特殊处理</p>\n<p>因此，虽然键值编码协议方法直接转换为Swift，但这个指南主要关注objective - c，在这里您需要做更多的工作以确保遵从性，在什么地方键值编码通常是最适合的。</p>\n<h3 id=\"其他依赖键值编码的-Cocoa-技术\"><a href=\"#其他依赖键值编码的-Cocoa-技术\" class=\"headerlink\" title=\"其他依赖键值编码的 Cocoa 技术\"></a>其他依赖键值编码的 Cocoa 技术</h3><p>一个符合键值编码的对象在Cocoa技术参与广泛，这些技术依赖于这种访问方式，包括:</p>\n<ul>\n<li><p>键-值观察。这个机制使对象能够注册异步通知，这是由另一个对象属性的变化所驱动的，如键值观察编程指南所述。</p>\n</li>\n<li><p>Cocoa 绑定。这个技术集合完全实现了一个模型-视图-控制器范例，模型封装应用程序数据，视图显示和编辑数据，控制器在两者之间进行协调。阅读Cocoa绑定编程主题，了解更多关于Cocoa绑定的知识。</p>\n</li>\n<li><p>Core Data。这个框架为对象生命周期和对象持久化相关的常见任务提供了通用的和自动化的解决方案。更多了解您可以阅读Core Data编程指南。</p>\n</li>\n<li><p>AppleScript。这种脚本语言可以直接控制脚本应用程序和macOS的许多部分。Cocoa的脚本支持利用了键值编码来获取和设置脚本对象中的信息。NSScriptKeyValueCoding非正式协议中的方法为使用键值编码提供了额外的功能，包括通过索引在多值密钥中获取和设置键值，并强制(或转换)键值到适当的数据类型。AppleScript概述提供了AppleScript及其相关技术的高级概述。</p>\n</li>\n</ul>\n<hr>\n<h2 id=\"键值编码原理\"><a href=\"#键值编码原理\" class=\"headerlink\" title=\"键值编码原理\"></a>键值编码原理</h2><h3 id=\"访问对象的属性\"><a href=\"#访问对象的属性\" class=\"headerlink\" title=\"访问对象的属性\"></a>访问对象的属性</h3><p>一个对象在它的接口声明中明确属性.这些属性属于下面类别中的一种:</p>\n<ul>\n<li><p>属性(Attributes).这些属性是一些单一的值,例如一个标量,字符串,或者布尔类型的值.值对象诸如NSNumber和其他不可变类型比如NSColor也都被认为是属性.</p>\n</li>\n<li><p>一对一关系.这些属性是可变对象并且拥有他们自己的属性.一个对象的属性可以改变而无需改变对象自身.举例来说,一个 <code>bank account</code> 对象可能有一个<code>owner</code>属性,该属性是一个<code>Person</code>类型的对象.而<code>person</code>对象又有一个<code>address</code>属性.<code>owner</code>的<code>address</code>可能改变而 <code>bank account</code> 却不需要改变对<code>owner</code>的引用持有.<code>bank account</code> 的<code> owner</code>没有改变,仅仅是它的地址改变了.</p>\n</li>\n<li><p>一对多关系.这些属性是集合类型对象.尽管自定义集合类页可以实现,但是通常用一个NSArray或NSSet实例去持有该集合.</p>\n</li>\n</ul>\n<p>BankAccount对象声明每种属性类型,如下:</p>\n<p><strong>Listing 2-1</strong> <code> BankAccount</code>对象的属性</p>\n<pre><code class=\"hljs less\">\n<span class=\"hljs-variable\">@interface</span> <span class=\"hljs-attribute\">BankAccount </span>: NSObject\n\n<span class=\"hljs-variable\">@property</span> (nonatomic) NSNumber* currentBalance;   <span class=\"hljs-comment\">//An Attribute </span>\n<span class=\"hljs-variable\">@property</span> (nonatomic) Person*   owner;            <span class=\"hljs-comment\">//A to-one relation  一对一关系</span>\n<span class=\"hljs-variable\">@property</span> (nonatomic) NSArray&lt; Transaction* &gt;* transactions;<span class=\"hljs-comment\">//A to-many relation 一对多关系</span>\n\n<span class=\"hljs-variable\">@end</span>\n</code></pre>\n\n<p>为了持有包装的属性,一个对象在它的接口中为其属性提供了访问器方法.对象的创建者可以自定义访问器方法,或者依赖编译器去自动生成访问器方法.总之,代码的创建者使用这些访问器必须在编译前写明属性的名字.访问器方法的名字存储在静态存储区.举例来说,给定的 <code>bank account</code> 对象声明如** Listing 2-1 **,编译器会为<code>myAccount</code>对象生成一个setter方法来供你使用:</p>\n<pre><code class=\"hljs scheme\">\n[<span class=\"hljs-name\">myAccount</span> setCurrentBalance:@(<span class=\"hljs-name\">100.0</span>)]<span class=\"hljs-comment\">;</span>\n</code></pre>\n\n<p>这种赋值方式直接,但是缺乏灵活性. 一个键值编码键值对象,提供一个更普遍的机制,使用字符串标签去访问一个对象的属性.</p>\n<h4 id=\"使用key和key-Path来识别一个对象的属性\"><a href=\"#使用key和key-Path来识别一个对象的属性\" class=\"headerlink\" title=\"使用key和key Path来识别一个对象的属性\"></a>使用key和key Path来识别一个对象的属性</h4><p>key 是一个字符串用来识别具体的属性.通俗地讲, key代表一个属性.key必须使用ASCII编码,不可用包含空格,并且通常以小写字母开头(尽管有例外,比如在许多类中的URL属性)</p>\n<p>因为<code>BankAccount</code>类兼容键值编码,它识别keys所对应的<code>owner</code>, <code>currentBalance</code>, <code>transactions</code>,这些对象的属性名.而不是调用 <code>setCurrentBalance: </code>方法,可以根据它的key来给其属性赋值:</p>\n<pre><code class=\"hljs scheme\">\n[<span class=\"hljs-name\">myAccount</span> setValue:@(<span class=\"hljs-name\">100.0</span>) forKey:@<span class=\"hljs-string\">&quot;currentBalance&quot;</span>]<span class=\"hljs-comment\">;</span>\n</code></pre>\n\n<p>事实上,你可以给myAccount对象使用该方法设置所有属性的值.只需要替换不同的key参数就行.因为参数是一个字符串,使其可以作为一个变量在运行时中进行操作.</p>\n<p>key path 是一个以.符号做为key分割标记,来遍历对象的属性.在遍历中第一个key对应的属性跟receiver关联.每个子遍历key都更它上一级的属性值关联.key path对于多层次结构对象的属性调用很有用.</p>\n<p>举例来说,keypath owner.address.street 应用于一个bank account实例对象.对应关联一个street字符串作为其值.假设Person和Address类也兼容键值编码,该字符串存储在bank account的owner属性所对应的address中.</p>\n<blockquote>\n<p>注意<br>在 Swift 中, 你可以使用#keyPath表示方式来取代使用一个字符串去表示一个key或者keypath.这种方式提供了编译时检测的优点.</p>\n</blockquote>\n<h4 id=\"使用key获取属性值\"><a href=\"#使用key获取属性值\" class=\"headerlink\" title=\"使用key获取属性值\"></a>使用key获取属性值</h4><p>一个兼容键值编码的对象,该对象继承自NSObject,一个从NSObject继承的对象，它提供了协议的基本方法的默认实现，它会自动采用该协议，并带有某些默认行为。这样的对象至少实现了以下基本的key-bassed getters:</p>\n<ul>\n<li><p><code>valueForKey: </code>根据key参数返回属性的值.如果以key命名的属性根据 访问器搜索格式 中的规则无法找到,该对象会给自己发送一个 <code>valueForUndefinedKey:</code> 消息. <code>valueForUndefinedKey: </code>方法的默认实现会吊起一个<code>NSUndefinedKeyException</code>,但是子类可以重写,并且更优雅的处理这种情况.</p>\n</li>\n<li><p><code>valueForKeyPath:</code> 返回对象指定键路径下的值.任何在键路径遍历下没有与之相匹配的键值编码兼容,意味着使用 <code>valueForKey: </code>的默认实现无法找到相对应的访问器方法.对象则调用 <code>valueForUndefinedKey:</code> 方法.</p>\n</li>\n<li><p><code>dictionaryWithValuesForKeys:</code> 根据数组里面所有key返回相关的键值字典.数组中每个key都会调用<code>valueForKey:</code>方法.返回值为一个字典,包含数组中所有的key和与之相关的值.</p>\n</li>\n</ul>\n<blockquote>\n<p>注意<br>集合类型对象,比如NSArray,NSSet,NSDictionary,不能把nil作为值包含进去.可以使用NSNull对象代表一个空值.NSNull提供一个实例来表示对象属性的空值. <code>dictionaryWithValuesForKeys: </code>方法和相关的 <code>setValuesForKeysWithDictionary: </code>方法 的默认实现 自动在NSNull(在字典参数中)和nil(在存储属性中)之间转换</p>\n</blockquote>\n<p>当你使用一个键路径去寻址一个属性时,如过键路径下的最后的key对应的是一个一对多的属性(意味着关联一个集合),返回值是一个包含所有键对应的值的集合.举例来讲,请求<code>transactions.payee</code>路径下的值,返回在所有<code>transactions</code>下<code>payee</code>对象的数组.keypath中多个数组同样适用.<code>accounts.transactions.payee</code>返回在所有<code>accountes</code>对象下,所有<code>transactions</code>下的<code>payee</code>组成的数组.</p>\n<h4 id=\"使用key给属性赋值\"><a href=\"#使用key给属性赋值\" class=\"headerlink\" title=\"使用key给属性赋值\"></a>使用key给属性赋值</h4><p>和getter方法一样,键值编码对象也提供了基于NSKeyValueCoding协议实现的一组setter方法:</p>\n<ul>\n<li><p><code>setValue: forkey:</code> 给对象指定键赋值.该方法默认自动解包表示标量和结构体的NSNumber和NSValue对象,并且将这些解包后的值赋给对应属性.<br>如果将要赋值的键不存在,则对象调用 <code>setValue: forUndefinedKey:</code> 方法.默认会吊起<code>NSUndefinedKeyException.</code>然而,子类可以重写该方法,并且以自定义的方式处理.</p>\n</li>\n<li><p><code>setValue: forKeyPath:</code> 设置指定键路径下的值.对象在键路径遍历下未找到相关属性,则调用<code>setValue:forUndefinedKey:</code>方法.</p>\n</li>\n<li><p><code>setValuesForKeyswithDictionary: </code>给字典中所有key对应的属性赋值.默认实现是给每个键值对调用<code>setValue:forKey:</code>方法.如果有必要的话,用NSNull对象替换nil</p>\n</li>\n</ul>\n<p>在默认实现中,当试图给一个非对象属性赋值nil时,键值编码兼容对象会给自身发送一个<code>setNilValueForKey:</code>消息.该方法默认会吊起<code>NSInvalidArgumentException</code>.但是一个对象可以重写该方法,去替代默认实现或者用一个标量值替代.</p>\n<h4 id=\"使用键去简化对象访问\"><a href=\"#使用键去简化对象访问\" class=\"headerlink\" title=\"使用键去简化对象访问\"></a>使用键去简化对象访问</h4><p>通过键值编码的setter和getter能够简化代码.在macOS中,NSTableView,NSOutlineView对象在他们的列中标记一个字符串id.如果模型对应的表格不兼容键值编码,表格数据源方法会去强制检查每一列的id找到相关属性并返回.未来,当添加一个属性给模型的时候,例如Person对象的那中情况,你必须重新访问数据源方法,为新属性的测试添加另一种条件,并且返回相关的值.</p>\n<p><strong>Listing 2-2</strong> 不适用键值编码的数据源方法实现</p>\n<pre><code class=\"hljs groovy\">- (id)<span class=\"hljs-attr\">tableView:</span>(NSTableView *)tableview <span class=\"hljs-attr\">objectValueForTableColumn:</span>(id)column <span class=\"hljs-attr\">row:</span>(NSInteger)row\n&#123;\n    id result = nil;\n    Person *person = [self.people <span class=\"hljs-attr\">objectAtIndex:</span>row];\n \n    <span class=\"hljs-keyword\">if</span> ([[column identifier] <span class=\"hljs-attr\">isEqualToString:</span>@<span class=\"hljs-string\">&quot;name&quot;</span>]) &#123;\n        result = [person name];\n    &#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> ([[column identifier] <span class=\"hljs-attr\">isEqualToString:</span>@<span class=\"hljs-string\">&quot;age&quot;</span>]) &#123;\n        result = @([person age]);  <span class=\"hljs-comment\">// Wrap age, a scalar, as an NSNumber</span>\n    &#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> ([[column identifier] <span class=\"hljs-attr\">isEqualToString:</span>@<span class=\"hljs-string\">&quot;favoriteColor&quot;</span>]) &#123;\n        result = [person favoriteColor];\n    &#125; <span class=\"hljs-comment\">// And so on...</span>\n \n    <span class=\"hljs-keyword\">return</span> result;\n&#125;\n\n</code></pre>\n\n<p><strong>Listing 2-3</strong> 展示了一个使用兼容键值编码的<code>Person</code>对象 更紧凑的数据源方法实现方式. 只需要使用 <code>valueForKey</code> getter方法,数据源方法就会使用列的标签作为key返回合适的值. 除了更简洁外,也更加通俗易懂,因为只要列标识符总是与模型对象的属性名匹配，它就会在稍后添加新列时保持不变。</p>\n<p><strong>Listing 2-3</strong> 使用键值编码实现数据源方法</p>\n<pre><code class=\"hljs groovy\">\n- (id)<span class=\"hljs-attr\">tableView:</span>(NSTableView *)tableview <span class=\"hljs-attr\">objectValueForTableColumn:</span>(id)column <span class=\"hljs-attr\">row:</span>(NSInteger)row\n&#123;\n    <span class=\"hljs-keyword\">return</span> [[self.people <span class=\"hljs-attr\">objectAtIndex:</span>row] <span class=\"hljs-attr\">valueForKey:</span>[column identifier]];\n&#125;\n</code></pre>\n\n<hr>\n<h3 id=\"访问集合属性\"><a href=\"#访问集合属性\" class=\"headerlink\" title=\"访问集合属性\"></a>访问集合属性</h3><p>键值编码兼容对象像公开其他属性的方式一样公开它的一对多属性.可以使用<code>valueForKey:</code>和 <code>setValue: forKey:</code> (或者他们的 keyPath) 方法来给对象的集合属性赋值和访问. 然而,当想要对集合内容进行操作时,通常使用协议定义的可变代理方法是最有效的.</p>\n<p>协议定义了三个不同代理方法用来对集合对象进行访问:</p>\n<ul>\n<li><code>mutableArrayValueForKey:</code> 和 <code>mutableArrayValueForKeyPath:</code></li>\n</ul>\n<p>方法返回一个代理对象,该对象是一个<code>NSMutableArray</code>对象.</p>\n<ul>\n<li><code>mutableSetValueForKey:</code> 和 <code>mutableSetValueForKeyPath:</code></li>\n</ul>\n<p>方法返回一个代理对象,该对象是一个<code>NSMutableSet</code>对象.</p>\n<ul>\n<li><code>mutableOrderedSetValueForKey:</code> 和 <code>mutableOrderedSetValueForKeyPath:</code></li>\n</ul>\n<p>方法返回一个代理对象,该对象是一个<code>NSMutableOrderedSet</code>对象.</p>\n<p>当操作一个代理对象时,从集合中添加.删除,替换对象,协议的默认实现会相应地修改对应的下标属性.这种方式比使用 valueForKey: 方法获取不可变集合效率更高,创建一个可变集合,然后使用setValue: forKey: 消息将元素存储到集合中. 在许多情况下, 与直接使用可变属性相比,这种方式效率更高.这些方法为集合中对象的键值观察提供了额外的好处.</p>\n<hr>\n<h3 id=\"使用集合运算符\"><a href=\"#使用集合运算符\" class=\"headerlink\" title=\"使用集合运算符\"></a>使用集合运算符</h3><p>当发送一个<code>valueForKeyPaht:</code>消息给键值兼容对象时,可以在key path 中嵌入一个集合运算符,集合运算符是关键字列表中的一个.在它前面有一个@符号,来表示在getter返回前,以某种方式执行数据操作. valueForKeyPath:的默认实现由NSObject来提供.<br>当一个 keyPath 包含一个集合运算符时,运算符前面的keyPath,称为left key path,表示该集合相对于消息接受者的操作. 如果将消息直接发送到集合对象,例如NSArray实例,则可以省略左边的key path.<br>运算符后面的keypath部分,称为right key Path,指定运算符要操作的集合中的对象属性.处理@count所有的集合运算符都需要一个right key path. Figure 4-1 阐明了运算符keypath格式.</p>\n<p>下图为运算符 key path  格式</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/3340896-63cef07595f087a5.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Figure 4-1\"></p>\n<hr>\n<p>集合运算符的三种类型:<br>Aggregaion Operators, Array Operatiors, Nesting Operators</p>\n<p>下面这段代码演示了如何执行每个运算符的相关操作.</p>\n<pre><code class=\"hljs less\"><span class=\"hljs-variable\">@interface</span> <span class=\"hljs-attribute\">Transaction </span>: NSObject\n \n<span class=\"hljs-variable\">@property</span> (nonatomic) NSString* payee;   <span class=\"hljs-comment\">// To whom</span>\n<span class=\"hljs-variable\">@property</span> (nonatomic) NSNumber* amount;  <span class=\"hljs-comment\">// How much</span>\n<span class=\"hljs-variable\">@property</span> (nonatomic) NSDate* date;      <span class=\"hljs-comment\">// When</span>\n \n<span class=\"hljs-variable\">@end</span>\n</code></pre>\n\n<h4 id=\"Aggregation-Operators\"><a href=\"#Aggregation-Operators\" class=\"headerlink\" title=\"Aggregation Operators\"></a>Aggregation Operators</h4><p>@avg</p>\n<p>当使用@avg运算符时,<code>valueForKeyPaht:</code>会根据Right key Path中指定的属性读取集合中每个对象相关的值.并且计算他们的平均值.然后会返回一个包含结果的NSNumber实例.</p>\n<p>下面代码,可以获取集合中所有转账的平均值</p>\n<pre><code class=\"hljs nginx\">\n<span class=\"hljs-attribute\">NSNumber</span> *transactionAverage = [self.transactions valueForKeyPath:@<span class=\"hljs-string\">&quot;<span class=\"hljs-variable\">@avg</span>.amount&quot;</span>];\n</code></pre>\n\n<p>@count</p>\n<p>使用@count 运算符, <code>valueForKeyPath: </code>返回一个NSNumber实例表示集合中对象的数量. right key path忽略.</p>\n<p>获取转账的笔数:</p>\n<pre><code class=\"hljs nginx\">\n<span class=\"hljs-attribute\">NSNumber</span> *numberOfTransactions = [self.transactions valueForKeyPath:@<span class=\"hljs-string\">&quot;<span class=\"hljs-variable\">@count</span>&quot;</span>];\n</code></pre>\n\n<p>@max</p>\n<p>当使用@max运算符时, 返回集合中right key path 对应属性的最大值. 内部是使用 compare:方法比较集合中该属性对应的值.在搜索right key path对应属性值时,会忽略集合中的nil值.</p>\n<p>获取日期值的最大值,表示最近的转账日期.</p>\n<pre><code class=\"hljs nginx\">\n<span class=\"hljs-attribute\">NSDate</span> *latestDate = [self.transactions valueForKeyPath:@<span class=\"hljs-string\">&quot;<span class=\"hljs-variable\">@max</span>.date&quot;</span>];\n</code></pre>\n\n<p>@min</p>\n<p>使用@min 运算符时, <code>valueForKeyPath: </code>方法搜索集合中righ key path 对应属的值.并且返回最小的一个.</p>\n<p>返回转账日期中最早的日期.</p>\n<pre><code class=\"hljs nginx\">\n<span class=\"hljs-attribute\">NSDate</span> *earliestDate = [self.transactions valueForKeyPath:@<span class=\"hljs-string\">&quot;<span class=\"hljs-variable\">@min</span>.date&quot;</span>];\n</code></pre>\n\n<p>@sum</p>\n<p>使用 @sum 运算符,计算集合中所有keypath对应属性值的总和.</p>\n<pre><code class=\"hljs nginx\">\n<span class=\"hljs-attribute\">NSNumber</span> *amountSum = [self.transacitons valueForKeyPath:@<span class=\"hljs-string\">&quot;<span class=\"hljs-variable\">@sum</span>.amount&quot;</span>];\n</code></pre>\n\n<h4 id=\"Array-Operators\"><a href=\"#Array-Operators\" class=\"headerlink\" title=\"Array Operators\"></a>Array Operators</h4><p>Array 运算符使用valueForkeyPath: 返回right key path 对应的对象集合.</p>\n<blockquote>\n<p>重要<br>如果使用数组运算符时,任何支对象是空值的话,valueForKeyPath: 方法会抛出异常,</p>\n</blockquote>\n<p>@distinctUnionOfObjects</p>\n<p>使用@distinctUnionOfObjects 运算符, valueForKeyPath: 方法会创建并返回一个数组,该数组包含集合中对象的并集,这些对象与right key path 指定的属性对应.</p>\n<p>获取 payee 属性值的集合.</p>\n<pre><code class=\"hljs nginx\">\n<span class=\"hljs-attribute\">NSArray</span> *distincPayees = [self.transactions valueForKeyPath:@<span class=\"hljs-string\">&quot;<span class=\"hljs-variable\">@distinctUnionOfObjects</span>.payee&quot;</span>];\n</code></pre>\n\n<blockquote>\n<p>注意<br>@unionOfObjects 运算符提供相似的行为,但是不会移除重复的对象.</p>\n</blockquote>\n<p>@unionOfObjects</p>\n<pre><code class=\"hljs nginx\"><span class=\"hljs-attribute\">NSArray</span> *payees = [self.transactions valueForKeyPath:@<span class=\"hljs-string\">&quot;<span class=\"hljs-variable\">@unionOfObjects</span>.payee&quot;</span>];\n</code></pre>\n\n\n<h4 id=\"Nesting-Operators\"><a href=\"#Nesting-Operators\" class=\"headerlink\" title=\"Nesting Operators\"></a>Nesting Operators</h4><p>嵌套运算符在嵌套集合中使用.每个集合入口自身便包含一个集合.</p>\n<blockquote>\n<p>重要</p>\n</blockquote>\n<p>如果使用嵌套运算符时,任何支对象是nil的话,valueForKeyPath:方法会抛出一个异常.</p>\n<p>下面的arrayOfArrays是一个嵌套数组</p>\n<pre><code class=\"hljs fsharp\">\nNSArray * moreTransactions = @<span class=\"hljs-meta\">[&lt;# transacion data #&gt;]</span>;\nNSArray * arrayOfArrays    = @[self.transactions, moreTransactions];\n</code></pre>\n\n<p>@distinctUnionOfArrays</p>\n<p>使用该运算符时,返回一个数组,该数组包含所有集合中指定key path下所有属性对应的对象.</p>\n<pre><code class=\"hljs nginx\">\n<span class=\"hljs-attribute\">NSArray</span> *collectedDistinctPayees = [arrayOfArrays valueForKeyPath:@<span class=\"hljs-string\">&quot;<span class=\"hljs-variable\">@distinctUnionOfArrays</span>.payee&quot;</span>];\n</code></pre>\n\n<blockquote>\n<p>注意<br>@unionOfArrays 运算符与@distictUnionOfArrays运算符功能类似,但是不会移除重复对象.</p>\n</blockquote>\n<p>@unionOfArrays</p>\n<pre><code class=\"hljs groovy\">\nNSArray *collectedPayees = [arrayOfArrays <span class=\"hljs-attr\">valueForKeyPath:</span>@<span class=\"hljs-string\">&quot;unionOfArrays.payee&quot;</span>];\n</code></pre>\n\n<p>@distincUnionOfSets</p>\n<p>与@distincUnionOfArrays类似,假如示例数据是以集合存储而不是数组,则返回的是一个NSSet集合对象.</p>\n<hr>\n<h3 id=\"表示非对象类型值\"><a href=\"#表示非对象类型值\" class=\"headerlink\" title=\"表示非对象类型值\"></a>表示非对象类型值</h3><p>NSObject提供的键值编码协议方法的默认实现不仅适用于对象属性,在非对象属性中同样适用. 默认实现在对象参数,返回值,和非对象属性之间自动切换.这将允许基于key-based 签名的getter和setter方法保持一致,即使存储属性是一个标量或者结构体.</p>\n<blockquote>\n<p>注意<br>在Swift中所有属性是对象类型.本节只在OC属性中适用.</p>\n</blockquote>\n<p>当调用协议中的getter方法时,比如 valueForKey:, 默认实现决定调用某个特殊的访问器方法或者为指定key提供值的实例变量.如果返回值不是一个对象,getter使用该值去创建一个NSNumber对象(对于标量) 或者NSValue对象(对于结构体) 并且 返回NSNumber或者NSValue.</p>\n<p>类似的,默认情况下,setter方法例如<code>setValue:forKey: </code>通过一个属性访问器或者实例变量来决定其数据类型.如果属性的数据类型不是对象类型,setter方法首先发送一个合适的<code>&lt;type&gt;Value </code>消息给传入的值对象,来提取下标数据,并且将设置的值存储进去.</p>\n<blockquote>\n<p>注意<br>当使用键值编码协议中的一个setter方法给一个非对象属性赋空值时,setter没有明显的执行行为.因而,它会给接受setter方法的对象发送一个<code>setNilValueForKey:</code>方法.默认会吊起一个<code>NSInvalidArgumentException</code>异常.但是子类可以重写改方法.</p>\n</blockquote>\n<h4 id=\"包装和解包标量类型\"><a href=\"#包装和解包标量类型\" class=\"headerlink\" title=\"包装和解包标量类型\"></a>包装和解包标量类型</h4><p>标量类型的默认键值编码实现是使用一个NSNumber实例包装起来,对于每种数据类型,使用下标属性的值创建一个NSNumber对象来提供一个getter返回值.同样该表也展示了使用的访问器方法,该方法是在一个赋值操作中,从setter输入参数中提取值.</p>\n<p>标量类型被包装在NSNumber对象中.</p>\n<blockquote>\n<p>注意<br>在macOS中, 由于历史原因, BOOL的类型定义是作为signed char类型.KVC不会区分这些.所以,当key是一个BOLL类型值时,使用<code>setValue:forKey:</code>方法不能传递像@”true”或者@”YES”这样的值,KVC会尝试执行charValue(应为BOOL类型继承自char类型),但是NSString不会实现该方法,那样会导致一个运行时错误. 反而,只能传递一个NSNumber对象,比如@(1)或者@(YES),当Key时一个BOOL类型时,做为<code>setValue:forKey:</code>的参数.这种限制在iOS中不适用,BOOL类型被定义为本地Boolean类型bool并且KVC执行<code>boolValue</code>方法.这种设置值的方式对一个NSNumber对象或者一个合适格式的NSString对象都是适用的.</p>\n</blockquote>\n<h4 id=\"包装和解包结构体类型\"><a href=\"#包装和解包结构体类型\" class=\"headerlink\" title=\"包装和解包结构体类型\"></a>包装和解包结构体类型</h4><p>自动包装和解包不限于NSPoint,NSRange,NSSize,NSRect.结构体类型(OC编码的)都可以包装在一个NSValue对象中.</p>\n<p><strong>Listing 5-1</strong> 使用一个自定义的结构体的示例类</p>\n<pre><code class=\"hljs objectivec\"><span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-keyword\">struct</span> &#123;\n    \n    <span class=\"hljs-keyword\">float</span> x, y, z;\n    \n&#125;ThreeFloats;\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">@interface</span> <span class=\"hljs-title\">MyClass</span></span>\n\n<span class=\"hljs-keyword\">@property</span> (<span class=\"hljs-keyword\">nonatomic</span>) ThreeFloats threeFloats;\n\n<span class=\"hljs-keyword\">@end</span>\n</code></pre>\n<p>使用该类的一个叫做myClass的实例,使用KVC获取threeFloats属性的值.</p>\n<pre><code class=\"hljs applescript\">NSValue *<span class=\"hljs-literal\">result</span> = [myClass valueForKey:@:<span class=\"hljs-string\">&quot;threeFloats&quot;</span>];\n</code></pre>\n<p><code>valueForKey:</code>方法的默认实现调用<code>threeFloats</code>的getter方法.然后返回返回一个NSValue对象,该对象包装着返回值.</p>\n<p>类似的,也可以使用KVC给treeFloats属性赋值</p>\n<pre><code class=\"hljs groovy\">ThreeFloats floats = &#123;<span class=\"hljs-number\">1.</span>,<span class=\"hljs-number\">2.</span>,<span class=\"hljs-number\">3.</span>&#125;;\n\nNSValue * value = [NSValue <span class=\"hljs-attr\">valueWithBytes:</span>&amp;floats <span class=\"hljs-attr\">objCType:</span><span class=\"hljs-meta\">@encode</span>(ThreeFloats)];\n\n[myClass <span class=\"hljs-attr\">setValue:</span>value <span class=\"hljs-attr\">forKey:</span>@<span class=\"hljs-string\">&quot;ThreeFloats&quot;</span>];\n</code></pre>\n\n<p>默认实现使用一个 <code>getValue:</code>消息来解包数据值,然后使用解包的结构体作为参数调用<code>setThreeFloats:</code>方法.</p>\n<h4 id=\"校验属性\"><a href=\"#校验属性\" class=\"headerlink\" title=\"校验属性\"></a>校验属性</h4><p>键值编码协议定义了支持属性校验的方法.使用键值编码兼容对象,可以读取和写入属性数据.也可以使用通过一个key或者keyPath来校验一个属性.当调用<code> validateValue:forKey:error:</code>(或者 <code>validateValue:forKeyPath:error</code>)方法时, 协议的默认实现会为找到一个匹配格式<code> validate&lt;key&gt;:error:</code>的方法而去搜索接受校验信息的的对象,.如果对象没有这样的方法,默认校验成功,返回YES.当一个指定的属性校验方法存在时,返回该方法的调用结果.</p>\n<blockquote>\n<p>注意<br>仅在OC中使用校验.在swift中,属性校验依赖于可选类型和强引用类型检查的编译器来实现.</p>\n</blockquote>\n<p>因为属性指定校验方法通过引用接收值和错误参数.校验可能会有三种结果:</p>\n<p>1.校验方法认为值对象有效,并且不改变值和错误参数,返回YES.<br>2.校验方法认为值对象无效,但是选择不改变值对象.在这种情况下,返回值为NO并且给NSErro对象设置一个错误引用来说明失败原因.<br>3.校验方法认为值对象无效,但是创建了一个新的,有效的值替换掉原来的值.在这种情况下,方法返回YES,而将错误对象保持不变。在返回之前，该方法修改了指向新值对象的值引用。当它进行修改时，方法总是创建一个新的对象，而不是修改旧的对象，即使值对象是可变的。</p>\n<p><strong>Listing 6-1</strong> 属性名校验</p>\n<pre><code class=\"hljs sas\">\nPerson <span class=\"hljs-comment\">* person = [[Person alloc] init];</span>\n\nNSError <span class=\"hljs-comment\">* error;</span>\n\nNSString <span class=\"hljs-comment\">*name = @&quot;John&quot;;</span>\n\n<span class=\"hljs-meta\">if</span>(![person validateValue:<span class=\"hljs-variable\">&amp;name</span> forKey:@<span class=\"hljs-string\">&quot;name&quot;</span> <span class=\"hljs-meta\">error</span>:<span class=\"hljs-variable\">&amp;error</span>])&#123;\n    \n    N<span class=\"hljs-meta\">SLog(</span>@<span class=\"hljs-string\">&quot;%@&quot;</span>,<span class=\"hljs-meta\">error</span>);\n&#125;\n</code></pre>\n\n<h4 id=\"自动校验\"><a href=\"#自动校验\" class=\"headerlink\" title=\"自动校验\"></a>自动校验</h4><p>一般来讲,不管是键值编码协议还是对象的默认实现都没有定义自动执行校验的机制.在您的app需要该功能时,使用该方法校验.</p>\n<h3 id=\"访问器搜索模式\"><a href=\"#访问器搜索模式\" class=\"headerlink\" title=\"访问器搜索模式\"></a>访问器搜索模式</h3><h4 id=\"基础-Getter-搜索模式\"><a href=\"#基础-Getter-搜索模式\" class=\"headerlink\" title=\"基础 Getter 搜索模式\"></a>基础 Getter 搜索模式</h4><p><code>valueForKey:</code>方法的默认实现,给定一个key作为输入参数,执行下面流程,从接受返回值的对象进行操作.</p>\n<p>1.搜索访问器方法,根据 <code>get&lt;KEY&gt;</code>, <code>&lt;key&gt;</code>, <code>is&lt;Key&gt;</code>或者<code>_&lt;key&gt;</code>这样的名称和顺序来搜索.如果发现,调用并且执行步骤5返回结果.否则执行下一步.</p>\n<p>2.如果没有一个访问器被发现,搜索匹配格式为<code>countOf&lt;Key&gt;</code>和<code>objectIn&lt;Key&gt;AtIndex:</code>和<code>&lt;key&gt;AtIndexes:</code>这些方法.<br>如果这些方法中的第一个和剩余两个方法中至少一个被找到.创建一个集合代理对象,该对象响应所有的NSArray方法,并且返回该集合对象.否则,执行步骤3.</p>\n<p>3.如果没有一个访问器或者数组访问方法被找到,那么接着找 <code>countOf&lt;key&gt;</code>, <code>enumeratorOf&lt;Key&gt;</code>,<code>memberOf&lt;Key&gt;:</code> 这三个方法.</p>\n<p>如果所有三个方法都被找到,创建一个集合代理对象,该对象的所有方法响应NSSet的所有方法,并且返回该对象.否则,执行步骤4</p>\n<p>4.如果没有一个访问器方法或者组合访问方法被找到,并且接受对象的类方法 <code>accessInstanceVariablesDirectly</code>返回YES,接着按照顺序搜索名字为<code>_&lt;key&gt;</code>,<code>_is&lt;Key&gt;</code>,或者<code>is&lt;Key&gt;</code><br>的实例变量,如果找到,直接获取该实例变量的值,执行步骤5,否则执行步骤6</p>\n<p>5.如果检索到的属性值是一个对象指针,返回该结果.<br>如果该值是一个NSNumber支持的标量类型,将它存储在一个NSNumber实例中,并且返回该实例.<br>如果结果是一个NSNumber不支持的标量类型,将其转换为NSValue对象并返回该对象.</p>\n<p>6.如果以上所有的步骤都失败,调用<code>valueForUndefinedKey:</code>方法,默认吊起一个异常,但是子类重写.</p>\n<h4 id=\"基础-Setter-搜索模式\"><a href=\"#基础-Setter-搜索模式\" class=\"headerlink\" title=\"基础 Setter 搜索模式\"></a>基础 Setter 搜索模式</h4><p><code>setValue:forKey:</code>方法执行下面流程:</p>\n<ol>\n<li><p>按照顺序set<Key>:, _set<Key>需要第一访问器.如果找到,使用输入值(或者未包装的值),执行该方法,结束.</p>\n</li>\n<li><p>如果没有访问器被找到,并且类方法 <code>accessInstanceVariablesDirectly</code>返回YES,按照名字为_<key>,_is<Key>,<key>,is<Key>的顺序寻找<br>实例变量.如果找到,则给实例变量直接赋值,结束.</p>\n</li>\n</ol>\n<p>3.以上方法未找到访问器或实例变量,执行<code>setValue:forUndefinedKey:</code>方法,默认抛出异常,子类可以重写该方法.</p>\n<p>Array 和 Set 的搜索格式与以上类似,不赘述.</p>\n<hr>\n<p>想要更多地了解关于 <code>KVC</code> 的API,请移步 <a href=\"https://www.jianshu.com/p/7f7360ae8e7b\">KVC</a></p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p><a href=\"https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/KeyValueCoding/index.html#//apple_ref/doc/uid/10000107-SW1\">Key-Value Coding Programming Guide</a></p>\n"},{"title":"KVO","date":"2017-12-17T09:13:00.000Z","_content":"# Key-Value Observing Programming Guide\n\n## 介绍\n\n键值观察是一种机制,该机制允许对象接收其他对象特定属性改变的通知.\n\n> 重要: 为了更好的了解键值观察,您必须理解[键值编码](http://www.jianshu.com/p/7f7360ae8e7b)\n\n一个简单的例子概述了应用中KVO的作用.假设有一个Person对象与一个Account对象相关,表示这个人在银行的存款账户.一个Person实例可能需要知道何时Account实例属性改变对该账户造成影响.比如收支,或者利率.\n\n![示例](http://upload-images.jianshu.io/upload_images/3340896-51f7b5abd6205136.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n使用KVO,首先确保对象兼容KVO.只要继承自NSObject的对象都是KVO兼容的.然后,必须注册一个观察者Person,观察Account对象实例.Peson发送一个`addObserver:forKeyPath:options:context:`消息给Account.\n![注册观察者](http://upload-images.jianshu.io/upload_images/3340896-2ec2849c4a768671.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n为了接受来自于Account的改变通知,Peson需要实现`observeValueForKeyPath:ofObject:change:context`方法,所有的观察者都需要实现.一旦注册的KeyPath对应的属性值发生改变,Account将会发送该消息给Person.Person然后基于改变的通知做出相应的响应.\n\n![发送改变通知](http://upload-images.jianshu.io/upload_images/3340896-6518b22626ca9474.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n最后,当不在需要通知时,在对象销毁之前,使用`removeObser:forKeyPath:` 方法移除观察者.\n\n![移除观察者](http://upload-images.jianshu.io/upload_images/3340896-3eddd2ec631247c1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n不像使用NSNotificationCenter通知那样,KVO没有一个中心对象给所有的观察者提供改变通知.一旦被观察的对象发生改变通知将会直接发送. NSObject提供了KVO的基本实现.\n\n---\n\n## KVO注册\n\n必须执行以下步骤来使对象接收一个KVO兼容属性的键值观察通知:\n\n- 注册观察者使用`addObserver:forKeyPath:options:context:`\n- 在观察者内部实现`observeValueForKeyPath:ofObject:change:context:`方法去接收改变通知消息.\n- 当不再需要接收消息时,使用`removeObserver:forKeyPath:`方法取消观察者.至少,在观察者从内存中释放前调用该方法.\n\n> 重要: 不是所有的类的所有属性都是KVO兼容的.\n\n### 注册观察者\n\n一个进行观察的对象首先通过发送一个 `addObserver:forKeyPath:options:context: `消息注册自己和被观察的对象.来传递作为观察者的自身和观察的属性键路径.观察者额外指定一个可选参数和上下文指针用来管理通知方面的内容.\n\n#### Options\n可选项参数,使用`|`位操作符来指定多个可选项.影响提供给通知的字典内容,该字典包含观察到的变动信息.并且影响通知的生成方式.\n\n通过指定的`NSKeyValueObservingOptionOld`获取观察的属性改变前的值.通过`NSKeyValueObservingOptionNew`获取改变后新的属性值.\n\n通过`NSKeyValueObservingOptionPrior`可选项,命令观察对象在属性改变前发送一个通知(另外在改变后也发送一个通知).改变信息的字典通过Key为`NSKeyValueChangeNotificationIsPriorKey`, Value为`NSNumber`表示的Yes对象的键值对,标明是一个预改变通知.当需要观察一个属性将要改变时,可以使用该可选项来发送通知.\n\n#### Context\n\n在 `addObserver:forKeyPath:options:context:`消息中的上下文指针包含在相应通知下,传递回的任意数据.可以指定一个NULL类型的数据并且完全依靠键路径字符串去判断改变通知的来源.但是这种方法可能会造成一些问题.如果一个对象的父类出于某种原因也在观察同样的键路径下的属性.\n\n一个更安全和更加可扩展的方法是使用上下文确保你接收的通知目的对象是观察者而不是其父类.\n一个类中的特殊命名的静态变量指针可以组成一个好的上下文. **Listing 1** 展示一个为属性观察命名不同上下文的示例.\n\n**Listing 1** 创建上下文指针\n```\nstatic void *PersonAccountBalanceContext = &PersonAccountBalanceContext;\nstatci void *PersonAccountInterestRateContext = &PersonAccountInterestRateContext;\n\n```\nListing 2中的实例论证了一个Person实例如何使用给定的上下文指针注册它自己作为Account实例banlance和interestRate属性的观察者\n\n**Listing 2** 注册属性balance和interestRate的观察者\n\n```\n\n- (void)registerAsObserverForAccount:(Account *)account{\n    \n    [account addObserver: self forKeyPath:@\"balance\" options:(NSKeyValueObseringOptionNew | NSKeyValueObservingOptionOld) context: PersonAccountBalanceContext];\n    \n    [account addObserver: self forKeyPath:@\"interestRate\" options:(NSKeyValueObservingNew | NSKeyValueObservingOptionOld) context:PersonAccountINterestRateContext];\n    \n}\n\n```\n> 注意:键值观察方法 `addObserver:forKeyPath:options;context:`对观察者,被观察对象,或者上下文,不持有强引用.如果需要的话,应该确保对观察者,被观察对象,和上下文的强引用.\n\n### 接收一个改变的通知\n\n当被观察的属性值发生变化时,观察者会接收到一个`observeValueForKeyPath:ofObject:change:context:` 消息.所有的观察者必须实现该方法.\n\n被观察对象提供触发通知的键路径,它本身作为关联对象,包含更改细节的字典,以及在该键路径下注册的观察者时,提供的上下文指针.\n\n更改内容字典入口`NSKeyValueChangeKindKey`提供发生的更改类型相关信息.如果观察的值已经发生改变,`NSKeyValueChangeKindKey`入口返回`NSKeyValueChangeSetting`.通过依赖注册的观察者指定的可选项.在更改内容字典中`NSKeyValueChangeOldKey`和`NSKeyValueChangeNewKey`包含观察属性改变前和改变后的值.如果属性是一个对象,则直接提供该值.如果属性是一个标量或者结构体,那么对应的值会包装在一个NSValue对象中.\n\n如果观察的属性是一个一对多关系.`NSKeyValueChangeKindKey`入口也会表示是否该集合内的对象被插入,移除,或者替换.分别用`NSKeyValueChangeInsertion`,`NSKeyValueChangeRemoval`,`NSKeyValueChangeReplacement`表示.\n\n更改内容字典入口`NSKeyValueChangeIndexesKey`是一个NSIndexSet对象.明确了在集合中更改的元素的所有下标.如果`NSKeyValueObservingOptionNew`或者`NSKeyValueObservingOptionOld`被指定作为观察者的可选项.那么`NSKeyValueChangeOldKey`和`NSKeyValueChageNewKey`在改变内容字典中用数组来包含关联对象改变前和改变后的值.\n\n在Listing 3中的例子展示了 *Person* 观察者 `observeValueForKeyPath:ofObject:change:context:`方法的实现,并且记录了balance和interestRate属性的改变前后的值.\n\n**Listing 3** `observeValueForKeyPath:ofObject:change:context:`方法实现\n\n```\n\n- (void)observeValueForKeyPath:(NSString *)keyPath ofObject:(id)object change:(NSDictionary *)change context:(void *)context{\n\n    if (context == PersonAccountBalanceContext) {\n        \n        // Do something with the balance...\n        \n    }else if (context == PersonAccountInterestRateContext){\n        \n        // Do something with the interest rate...\n        \n    }else {\n        \n        // Any unrecognized context must belong to super\n        \n        [super observeValueForKeyPath:keyPath ofObject:object change:change context:context];\n        \n    }\n}\n\n```\n如果在注册观察者的时候指定一个NULL上下文,通过比对键路径来判断观察的内容改变情况.如果使用一个单一的上下文给所有观察的键路径,首先测试那个通知的上下文,然后使用键路径来匹配从而判断具体改变的内容.如果给每一个观察的间路径提供一个不同的上下文,正如这里论证的,遗传单一的指针做比较来告诉你是否该通知是发送给这个观察者,并且哪个键路径改变了.\n\n在任何情况下,观察者如果没有识别上下文(或者在一个单一情况下,任何键路径)通常应该调用父类的`obserValueForKeyPath:ofObject:change:context:`实现.因为这意味着父类也注册为观察者去接受通知.\n\n> 注意: 如果一个通知传递到类层级的顶部.NSObject会抛出一个NSInternalInconsistencyException.因为这是一个编程错误: 一个子类没有使用它注册的通知.\n\n### 移除观察者\n\n发送给观察者 removeObserver:forKeyPath:context:消息来移除一个键值观察者.需要指定观察的对象.键路径,和上下文.Listing 4中的例子展示了Person移除自己,作为balance和interestRate的观察者.\n\n**Listing 4** 移除balance和interestRate观察者\n\n```\n\n- (void)unregisteAsObserverForAccount:(Account *)account{\n    \n    [account removeObserver: self forKeyPath: @\"balance\" context: PersonAccountBalanceContext];\n    \n    [account removeObserver: self forKeyPath: @\"interestRate\" context: PersonAccountInterestRateContext];\n}\n\n```\n\n接受到一个 removeObserver:forKeyPath:context: 消息后,观察的对象将不再接受指定的键路径和对象的任何 obserValueForKeyPath:ofObject:change:context:消息 \n\n当正在移除一个观察者时,记住以下几点:\n\n- 如果移除的观察者未注册,则会导致一个NSRangeExcepion异常.调用`removeObserver:forKeyPath:context:`方法一次,则有与之相对应的`addObserver:forKeyPath:options:context:`方法被调用.或者如果不适用的话,把remove方法添加到一个`try/catch` Block中处理潜在的异常.\n\n- 一个观察者在销毁时不会自动移除自身.被观察的对象会持续发送通知,不会顾及到观察者状态的改变.然而,一个改变通知,或者其他消息发送给一个已经释放的对象,会触发一个内存访问异常.因此需要确保观察者释放前一定要移除观察者.\n\n- KVO协议没有提供观察者和被观察对象的访问方式.避免相关的错误发生.一个典型的格式是在观察者初始化的时候(比如在 init 或者 viewDidLoad 方法中),注册为观察者,在delloc方法中取消注册.来确保合适的添加和移除信息.并且确保观察者在内存中移除前已经取消注册.\n\n---\n## 注册依赖键\n\n在许多情况下，一个属性的值取决于另一个对象中的一个或多个其他属性的值。如果一个属性的值发生改变,那么派生属性的值也被标记为更改.\n\n### 一对一关系\n\n为了自动触发一对一关系属性的通知,应该重写 `keyPathsForValuesAffectingValueForKey:`方法或者实现一个合适的方法,该方法遵循它定义注册为依赖键的格式.\n\n例如,一个人完整的姓名取决于firs和last names.返回完整姓名的方法可以向下面方法一样写:\n\n```\n\n- (NSString *)fullName {\n    \n    return [NSString stringWithFormat:@\"%@ %@\",firstName, lastName];\n}\n\n```\n\n当应用观察fullName属性的时候,只要firstName和lastName中任意一个属性发生改变,都必须通知该应用,因为他们影响fullName属性的值.\n\n一种解决办法是重写`keyPathsForValuesAffectingValueForKey:`方法 来指定fullName属性依赖于lastName和firstName属性. **Listing 1**展示了这种依赖的实现.\n\n**Listing 1** `keyPathsForValuesAffectingValueForKey: `方法的实现示例\n```\n+ (NSSet *)keyPathsForValuesAffectingValueForKey:(NSString *)key {\n    \n    NSSet *keyPaths = [super keyPathsForValuesAffectingValueForKey:key];\n    \n    if ([key isEqualToString:@\"fullName\"]) {\n        NSArray *affectingKey = @[@\"lastName\", @\"firstName\"];\n        keyPaths = [keyPaths setByAddingObjectsFromArray:affectingKeys];\n    }\n    return keyPaths;\n}\n\n```\n您的重写通常应该调用super，并返回一个集合，该集合包含了在该集合中产生的任何成员(以便在superclasses中不影响该方法的重写)\n\n通过实现一个类方法也可以实现相同的结果,该类方法遵循命名约定 keyPathsForValuesAffectiing<Key>,该<Key>是依赖属性的名称(首字母大写).按照**Listing 1**中的模式写一个类方法, 如 **Listing 2** 所展示.\n\n**Listing 2** keyPathsForValuesAffecting<Key> 命名约定的实现示例\n\n```\n+ (NSSet *)keyPathsForValuesAffectingFullName {\n    \n    return [NSSet setWithObjects:@\"lastName\", @\"firstName\", nil];\n}\n\n```\n当使用分类给一个存在的类添加计算属性时,不能重写`keyPathsForValuesAffectingValueForKey:`方法.因为在分类中不得重写方法.在那种情况下,实现一个keyPathsForValuesAffecting<Key>类方法可以很好地利用该机制.\n\n> 注意: 一对多关系属性不能使用`keyPathsForValuesAffectingValueForKey:`方法设定依赖.必须观察一对多集合中每个对象的合适的属性并且通过更新依赖键自身来改变它的值.下面内容展示了处理这种情况的一种策略.\n\n### 一对多关系\n\n`keyValuesForValuesAffectingValueForKey: `方法不支持一对多关系属性的键路径.例如,假设有一个department对象,该对象拥有一个一对多关系的属性(employees).employee有一个salary属性.可能该对象希望有一个totalSalary属性来表示employees中所有employee的salary总和.\n\n下面两种情况下的两种可能的解决方案.\n\n1.可以使用键值观察注册父类(本例中是Department)作为所有子类(在本例中是Employees)相关属性的观察者.必须添加和移除作为观察者的父类对象.在`observeValueForKeyPath:ofObject:change:context:`方法中通过更新依赖值来响应变化,就像下面的代码中阐述的一样:\n\n```\n- (void)observeValueForKeyPath:(NSString *)keyPath ofObject:(id)object change:(NSDictionary *)change context:(void *)context {\n \n    if (context == totalSalaryContext) {\n        [self updateTotalSalary];\n    }\n    else\n    // deal with other observations and/or invoke super...\n}\n \n- (void)updateTotalSalary {\n    [self setTotalSalary:[self valueForKeyPath:@\"employees.@sum.salary\"]];\n}\n \n- (void)setTotalSalary:(NSNumber *)newTotalSalary {\n \n    if (totalSalary != newTotalSalary) {\n        [self willChangeValueForKey:@\"totalSalary\"];\n        _totalSalary = newTotalSalary;\n        [self didChangeValueForKey:@\"totalSalary\"];\n    }\n}\n \n- (NSNumber *)totalSalary {\n    return _totalSalary;\n}\n```\n2.如果您使用的是Core Data，您可以将应用程序的通知中心注册为其托管对象上下文的观察者。托管对象应以类似于键值观察的方式，对子对象发布的相关更改通知作出响应。\n\n---\n## 键值观察实现细节\n\n自动键值观察使用一种叫做 isa-swizzling 的技术来实现.\n\nisa 指针,作为建议的名称,指向对象类.该类持有一个分配表.这个分配表包含了实例方法的指针,以及其他数据.\n\n当注册的观察者观察一个对象的某个属性时,被观察对象的isa指针被修改,指向一个媒介类,而不是对象类的真正isa指针.所以isa指针不必映射到实际的类实例.\n\n不应该依靠isa指针来判断类的成员关系.而应该使用类方法去判断一个对象实例的类.\n\n---\n\n# NSKeyValueObserving\n\n一个非正式协议,该协议内容为对象接受其他对象指定属性改变的通知.\n\n## 概述\n\n您可以观察任何对象属性.包括单一属性,一对一关系属性,一对多关系属性.一对多关系属性的观察者被告知改变的属性类型---以及相关的对象.\n\nNSObject提供一个键值观察协议的实现.该实现提供对所有对象的自动观察能力.您可以通过禁用自动观察者通知和使用该协议中的方法实现手动通知来进一步优化通知。\n\n## Topics\n\n### 改变通知\n\n```\n/**\n 当观察对象的指定键路径下的值发生变化时,通知观察者.\n \n keyPath: 观察对象值已经改变的对应键路径.\n object : 观察对象.\n change : 一个字典用来描述相关对象指定键路径下属性值已经形成的变化.\n context: 提供给注册观察者的值.\n \n 讨论:\n 对一个对象来说,当它开始发送键路径下值改变通知时,您发送给它一个 addObserver(_:forKeyPath:options:context:)消息,命名应该接受该消息的观察者.当您观察结束时,在观察对象销毁前,您发送给观察对象一个removeObserver(_:forKeyPath:)或者remmoverObserver(_:forKeyPath:context:)消息去取消观察者,并且停止发送改变通知的消息.\n\n */ \nfunc observeValue(forKeyPath: String?, of object: Any?, change: [NSKeyValueChangeKey : Any]?, context: UnsafeMutableRawPointer?)\n\n```\n\n### 注册观察\n\n```\n/**\n 注册观察者接受键路径相关对象的KVO通知消息\n  \n observer: 注册KVO通知的对象.观察者必须实现键值观察方法 observeValue(forKeyPath:of:change:context:)\n keyPath: 被观察对象的键路径.该参数不能为nil\n options: 一个在NSKeyValueObservingOptions 值的组合. \n context: 在obserValue(forKeyPath:of:change:context:)方法中传递给观察者的任意数据\n \n 讨论:\n 不管是观察者还是被观察对象,引用计数都不会加一.调用该方法的对象必须调用removerObserver(_:forKeyPath:)或者removeObserver(_:forKeyPathL:context:)方法去移除观察者.\n \n */\nfunc addObserver(_ observer: NSObject, forKeyPath keyPath: String, options: NSKeyValueObservingOptions = [], context: UnsafeMutableRawPointer?)\n\n/**\n 对一个之前没有注册观察者的对象调用该方法是错误的.\n \n 确保注册的观察者在销毁之前调用该方法.\n\n */\nfunc removeObserver(_ observer: NSObject, forKeyPath keyPath: String)\n\nfunc removeObserver(NSObject, forKeyPath: String, context: UnsafeMutableRawPointer?)\n\n```\n\n### 通知观察对象的变化\n\n```\n\nfunc willChangeValue(forKey: String)\n\nfunc didChangeValue(forKey: String)\n\n//观察对象数组类型时,调用该方法来通知观察对象的变化\nfunc willChange(NSKeyValueChange, valuesAt: IndexSet, forKey: String)\n\nfunc didChange(NSKeyValueChange, valuesAt: IndexSet, forKey: String)\n\n//观察对象Set类型时,调用该方法来通知观察对象的变化\nfunc willChangeValue(forKey: String, withSetMutation: NSKeyValueSetMutationKind, using: Set<AnyHashable>)\n\nfunc didChangeValue(forKey: String, withSetMutation: NSKeyValueSetMutationKind, using: Set<AnyHashable>)\n\n```\n\n### 自定义观察\n\n```\n//返回一个布尔值标明是否观察对象自动支持KVO.\nclass func automaticallyNotifiesObservers(forKey: String)\n\n//返回一个键路径集合,该集合内键路径对应的值影响指定key的值.比如计算属性\nclass func keyPathsForValuesAffectingValue(forKey: String)\n\n//返回一个指针，该指针标识所有在被观察对象注册的观察者的信息。\nvar observationInfo: UnsafeMutableRawPointer?\n```\n```\nprotocol NSKeyValueObservingCustomization\n\nType methods \n\n  required\n  static func automaticallyNotifiesObservers(for: AnyKeyPath)\n\n  required\n  static func keyPathsAffectingValue(for: AnyKeyPath)\n\nRelationships\n继承自  NSObjectProtocol\n```\n\n### 常量\n\n```\n\nclass NSKeyValueObservation\n\nstruct NSKeyValueObservedChange\n\nenum NSKeyValueChange{\n    \n    case setting,\n    case insertion,\n    case removal,\n    case replacement\n}\n\n--------------------------------------------------------------\nstruct NSKeyValueObservingOptions \n\n#### Constants\n\n    static var new: NSKeyValueObservingOptions\n\n    static var old: NSKeyValueObservingOptions\n\n    static var initial: NSKeyValueObservingOptions\n\n    static var prior: NSkeyValueObservingOptions\n\n--------------------------------------------------------------\nstruct NSKeyValueChangeKey\n\nenum NSKeyValueSetMutationKind\n```\n\n## KVO原理简析\n- 当一个object有观察者时，动态创建这个object的类的子类\n- 对于每个被观察的property，重写其set方法\n- 在重写的set方法中调用` willChangeValueForKey:`和 `didChangeValueForKey:`通知观察者\n- 当一个property没有观察者时，删除重写的方法\n- 当没有observer观察任何一个property时，删除动态创建的子类\n\n详细的分析可以去看sunyxx的[objc kvo简单探索](http://blog.sunnyxx.com/2014/03/09/objc_kvo_secret/)\n\n## GitHub优秀开源\n在项目中使用KVO的时候要时刻谨记移除观察者,否则会抛出异常.这样不经容易出错,而且项目代码看起来也不够漂亮. **facebook**提供了一个很好的解决方案.在该第三方库中,不用再担心移除观察者的问题,代码整体上也比以前更叫干净漂亮.仅需要在项目 **PCH** 文件中 `#import <KVOController/NSObject+FBKVOController.h>`,这样会给每个**NSObject** 对象自动添加KVOController属性,然后直接使用就OK了\n\n```\n[self.KVOController observe:clock keyPath:@\"date\" options:NSKeyValueObservingOptionInitial|NSKeyValueObservingOptionNew action:@selector(updateClockWithDateChange:)];\n\n```\n具体使用请看 [KVOController](https://github.com/facebook/KVOController)\n\n\n# 参考资料\n[Key-Value Observing Programming Guide](https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/KeyValueObserving/KeyValueObserving.html#//apple_ref/doc/uid/10000177-BCICJDHA)\n\n[NSKeyValueObserving](https://developer.apple.com/documentation/foundation/notifications/nskeyvalueobserving)\n\n[objec kvo简单探索](http://blog.sunnyxx.com/2014/03/09/objc_kvo_secret/)\n","source":"_posts/iOS/KVO.md","raw":"\n---\ntitle:  KVO \ndate: 2017-12-17 17:13\ncategories:\n- iOS\ntags: \n- KVO \n---\n# Key-Value Observing Programming Guide\n\n## 介绍\n\n键值观察是一种机制,该机制允许对象接收其他对象特定属性改变的通知.\n\n> 重要: 为了更好的了解键值观察,您必须理解[键值编码](http://www.jianshu.com/p/7f7360ae8e7b)\n\n一个简单的例子概述了应用中KVO的作用.假设有一个Person对象与一个Account对象相关,表示这个人在银行的存款账户.一个Person实例可能需要知道何时Account实例属性改变对该账户造成影响.比如收支,或者利率.\n\n![示例](http://upload-images.jianshu.io/upload_images/3340896-51f7b5abd6205136.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n使用KVO,首先确保对象兼容KVO.只要继承自NSObject的对象都是KVO兼容的.然后,必须注册一个观察者Person,观察Account对象实例.Peson发送一个`addObserver:forKeyPath:options:context:`消息给Account.\n![注册观察者](http://upload-images.jianshu.io/upload_images/3340896-2ec2849c4a768671.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n为了接受来自于Account的改变通知,Peson需要实现`observeValueForKeyPath:ofObject:change:context`方法,所有的观察者都需要实现.一旦注册的KeyPath对应的属性值发生改变,Account将会发送该消息给Person.Person然后基于改变的通知做出相应的响应.\n\n![发送改变通知](http://upload-images.jianshu.io/upload_images/3340896-6518b22626ca9474.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n最后,当不在需要通知时,在对象销毁之前,使用`removeObser:forKeyPath:` 方法移除观察者.\n\n![移除观察者](http://upload-images.jianshu.io/upload_images/3340896-3eddd2ec631247c1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n不像使用NSNotificationCenter通知那样,KVO没有一个中心对象给所有的观察者提供改变通知.一旦被观察的对象发生改变通知将会直接发送. NSObject提供了KVO的基本实现.\n\n---\n\n## KVO注册\n\n必须执行以下步骤来使对象接收一个KVO兼容属性的键值观察通知:\n\n- 注册观察者使用`addObserver:forKeyPath:options:context:`\n- 在观察者内部实现`observeValueForKeyPath:ofObject:change:context:`方法去接收改变通知消息.\n- 当不再需要接收消息时,使用`removeObserver:forKeyPath:`方法取消观察者.至少,在观察者从内存中释放前调用该方法.\n\n> 重要: 不是所有的类的所有属性都是KVO兼容的.\n\n### 注册观察者\n\n一个进行观察的对象首先通过发送一个 `addObserver:forKeyPath:options:context: `消息注册自己和被观察的对象.来传递作为观察者的自身和观察的属性键路径.观察者额外指定一个可选参数和上下文指针用来管理通知方面的内容.\n\n#### Options\n可选项参数,使用`|`位操作符来指定多个可选项.影响提供给通知的字典内容,该字典包含观察到的变动信息.并且影响通知的生成方式.\n\n通过指定的`NSKeyValueObservingOptionOld`获取观察的属性改变前的值.通过`NSKeyValueObservingOptionNew`获取改变后新的属性值.\n\n通过`NSKeyValueObservingOptionPrior`可选项,命令观察对象在属性改变前发送一个通知(另外在改变后也发送一个通知).改变信息的字典通过Key为`NSKeyValueChangeNotificationIsPriorKey`, Value为`NSNumber`表示的Yes对象的键值对,标明是一个预改变通知.当需要观察一个属性将要改变时,可以使用该可选项来发送通知.\n\n#### Context\n\n在 `addObserver:forKeyPath:options:context:`消息中的上下文指针包含在相应通知下,传递回的任意数据.可以指定一个NULL类型的数据并且完全依靠键路径字符串去判断改变通知的来源.但是这种方法可能会造成一些问题.如果一个对象的父类出于某种原因也在观察同样的键路径下的属性.\n\n一个更安全和更加可扩展的方法是使用上下文确保你接收的通知目的对象是观察者而不是其父类.\n一个类中的特殊命名的静态变量指针可以组成一个好的上下文. **Listing 1** 展示一个为属性观察命名不同上下文的示例.\n\n**Listing 1** 创建上下文指针\n```\nstatic void *PersonAccountBalanceContext = &PersonAccountBalanceContext;\nstatci void *PersonAccountInterestRateContext = &PersonAccountInterestRateContext;\n\n```\nListing 2中的实例论证了一个Person实例如何使用给定的上下文指针注册它自己作为Account实例banlance和interestRate属性的观察者\n\n**Listing 2** 注册属性balance和interestRate的观察者\n\n```\n\n- (void)registerAsObserverForAccount:(Account *)account{\n    \n    [account addObserver: self forKeyPath:@\"balance\" options:(NSKeyValueObseringOptionNew | NSKeyValueObservingOptionOld) context: PersonAccountBalanceContext];\n    \n    [account addObserver: self forKeyPath:@\"interestRate\" options:(NSKeyValueObservingNew | NSKeyValueObservingOptionOld) context:PersonAccountINterestRateContext];\n    \n}\n\n```\n> 注意:键值观察方法 `addObserver:forKeyPath:options;context:`对观察者,被观察对象,或者上下文,不持有强引用.如果需要的话,应该确保对观察者,被观察对象,和上下文的强引用.\n\n### 接收一个改变的通知\n\n当被观察的属性值发生变化时,观察者会接收到一个`observeValueForKeyPath:ofObject:change:context:` 消息.所有的观察者必须实现该方法.\n\n被观察对象提供触发通知的键路径,它本身作为关联对象,包含更改细节的字典,以及在该键路径下注册的观察者时,提供的上下文指针.\n\n更改内容字典入口`NSKeyValueChangeKindKey`提供发生的更改类型相关信息.如果观察的值已经发生改变,`NSKeyValueChangeKindKey`入口返回`NSKeyValueChangeSetting`.通过依赖注册的观察者指定的可选项.在更改内容字典中`NSKeyValueChangeOldKey`和`NSKeyValueChangeNewKey`包含观察属性改变前和改变后的值.如果属性是一个对象,则直接提供该值.如果属性是一个标量或者结构体,那么对应的值会包装在一个NSValue对象中.\n\n如果观察的属性是一个一对多关系.`NSKeyValueChangeKindKey`入口也会表示是否该集合内的对象被插入,移除,或者替换.分别用`NSKeyValueChangeInsertion`,`NSKeyValueChangeRemoval`,`NSKeyValueChangeReplacement`表示.\n\n更改内容字典入口`NSKeyValueChangeIndexesKey`是一个NSIndexSet对象.明确了在集合中更改的元素的所有下标.如果`NSKeyValueObservingOptionNew`或者`NSKeyValueObservingOptionOld`被指定作为观察者的可选项.那么`NSKeyValueChangeOldKey`和`NSKeyValueChageNewKey`在改变内容字典中用数组来包含关联对象改变前和改变后的值.\n\n在Listing 3中的例子展示了 *Person* 观察者 `observeValueForKeyPath:ofObject:change:context:`方法的实现,并且记录了balance和interestRate属性的改变前后的值.\n\n**Listing 3** `observeValueForKeyPath:ofObject:change:context:`方法实现\n\n```\n\n- (void)observeValueForKeyPath:(NSString *)keyPath ofObject:(id)object change:(NSDictionary *)change context:(void *)context{\n\n    if (context == PersonAccountBalanceContext) {\n        \n        // Do something with the balance...\n        \n    }else if (context == PersonAccountInterestRateContext){\n        \n        // Do something with the interest rate...\n        \n    }else {\n        \n        // Any unrecognized context must belong to super\n        \n        [super observeValueForKeyPath:keyPath ofObject:object change:change context:context];\n        \n    }\n}\n\n```\n如果在注册观察者的时候指定一个NULL上下文,通过比对键路径来判断观察的内容改变情况.如果使用一个单一的上下文给所有观察的键路径,首先测试那个通知的上下文,然后使用键路径来匹配从而判断具体改变的内容.如果给每一个观察的间路径提供一个不同的上下文,正如这里论证的,遗传单一的指针做比较来告诉你是否该通知是发送给这个观察者,并且哪个键路径改变了.\n\n在任何情况下,观察者如果没有识别上下文(或者在一个单一情况下,任何键路径)通常应该调用父类的`obserValueForKeyPath:ofObject:change:context:`实现.因为这意味着父类也注册为观察者去接受通知.\n\n> 注意: 如果一个通知传递到类层级的顶部.NSObject会抛出一个NSInternalInconsistencyException.因为这是一个编程错误: 一个子类没有使用它注册的通知.\n\n### 移除观察者\n\n发送给观察者 removeObserver:forKeyPath:context:消息来移除一个键值观察者.需要指定观察的对象.键路径,和上下文.Listing 4中的例子展示了Person移除自己,作为balance和interestRate的观察者.\n\n**Listing 4** 移除balance和interestRate观察者\n\n```\n\n- (void)unregisteAsObserverForAccount:(Account *)account{\n    \n    [account removeObserver: self forKeyPath: @\"balance\" context: PersonAccountBalanceContext];\n    \n    [account removeObserver: self forKeyPath: @\"interestRate\" context: PersonAccountInterestRateContext];\n}\n\n```\n\n接受到一个 removeObserver:forKeyPath:context: 消息后,观察的对象将不再接受指定的键路径和对象的任何 obserValueForKeyPath:ofObject:change:context:消息 \n\n当正在移除一个观察者时,记住以下几点:\n\n- 如果移除的观察者未注册,则会导致一个NSRangeExcepion异常.调用`removeObserver:forKeyPath:context:`方法一次,则有与之相对应的`addObserver:forKeyPath:options:context:`方法被调用.或者如果不适用的话,把remove方法添加到一个`try/catch` Block中处理潜在的异常.\n\n- 一个观察者在销毁时不会自动移除自身.被观察的对象会持续发送通知,不会顾及到观察者状态的改变.然而,一个改变通知,或者其他消息发送给一个已经释放的对象,会触发一个内存访问异常.因此需要确保观察者释放前一定要移除观察者.\n\n- KVO协议没有提供观察者和被观察对象的访问方式.避免相关的错误发生.一个典型的格式是在观察者初始化的时候(比如在 init 或者 viewDidLoad 方法中),注册为观察者,在delloc方法中取消注册.来确保合适的添加和移除信息.并且确保观察者在内存中移除前已经取消注册.\n\n---\n## 注册依赖键\n\n在许多情况下，一个属性的值取决于另一个对象中的一个或多个其他属性的值。如果一个属性的值发生改变,那么派生属性的值也被标记为更改.\n\n### 一对一关系\n\n为了自动触发一对一关系属性的通知,应该重写 `keyPathsForValuesAffectingValueForKey:`方法或者实现一个合适的方法,该方法遵循它定义注册为依赖键的格式.\n\n例如,一个人完整的姓名取决于firs和last names.返回完整姓名的方法可以向下面方法一样写:\n\n```\n\n- (NSString *)fullName {\n    \n    return [NSString stringWithFormat:@\"%@ %@\",firstName, lastName];\n}\n\n```\n\n当应用观察fullName属性的时候,只要firstName和lastName中任意一个属性发生改变,都必须通知该应用,因为他们影响fullName属性的值.\n\n一种解决办法是重写`keyPathsForValuesAffectingValueForKey:`方法 来指定fullName属性依赖于lastName和firstName属性. **Listing 1**展示了这种依赖的实现.\n\n**Listing 1** `keyPathsForValuesAffectingValueForKey: `方法的实现示例\n```\n+ (NSSet *)keyPathsForValuesAffectingValueForKey:(NSString *)key {\n    \n    NSSet *keyPaths = [super keyPathsForValuesAffectingValueForKey:key];\n    \n    if ([key isEqualToString:@\"fullName\"]) {\n        NSArray *affectingKey = @[@\"lastName\", @\"firstName\"];\n        keyPaths = [keyPaths setByAddingObjectsFromArray:affectingKeys];\n    }\n    return keyPaths;\n}\n\n```\n您的重写通常应该调用super，并返回一个集合，该集合包含了在该集合中产生的任何成员(以便在superclasses中不影响该方法的重写)\n\n通过实现一个类方法也可以实现相同的结果,该类方法遵循命名约定 keyPathsForValuesAffectiing<Key>,该<Key>是依赖属性的名称(首字母大写).按照**Listing 1**中的模式写一个类方法, 如 **Listing 2** 所展示.\n\n**Listing 2** keyPathsForValuesAffecting<Key> 命名约定的实现示例\n\n```\n+ (NSSet *)keyPathsForValuesAffectingFullName {\n    \n    return [NSSet setWithObjects:@\"lastName\", @\"firstName\", nil];\n}\n\n```\n当使用分类给一个存在的类添加计算属性时,不能重写`keyPathsForValuesAffectingValueForKey:`方法.因为在分类中不得重写方法.在那种情况下,实现一个keyPathsForValuesAffecting<Key>类方法可以很好地利用该机制.\n\n> 注意: 一对多关系属性不能使用`keyPathsForValuesAffectingValueForKey:`方法设定依赖.必须观察一对多集合中每个对象的合适的属性并且通过更新依赖键自身来改变它的值.下面内容展示了处理这种情况的一种策略.\n\n### 一对多关系\n\n`keyValuesForValuesAffectingValueForKey: `方法不支持一对多关系属性的键路径.例如,假设有一个department对象,该对象拥有一个一对多关系的属性(employees).employee有一个salary属性.可能该对象希望有一个totalSalary属性来表示employees中所有employee的salary总和.\n\n下面两种情况下的两种可能的解决方案.\n\n1.可以使用键值观察注册父类(本例中是Department)作为所有子类(在本例中是Employees)相关属性的观察者.必须添加和移除作为观察者的父类对象.在`observeValueForKeyPath:ofObject:change:context:`方法中通过更新依赖值来响应变化,就像下面的代码中阐述的一样:\n\n```\n- (void)observeValueForKeyPath:(NSString *)keyPath ofObject:(id)object change:(NSDictionary *)change context:(void *)context {\n \n    if (context == totalSalaryContext) {\n        [self updateTotalSalary];\n    }\n    else\n    // deal with other observations and/or invoke super...\n}\n \n- (void)updateTotalSalary {\n    [self setTotalSalary:[self valueForKeyPath:@\"employees.@sum.salary\"]];\n}\n \n- (void)setTotalSalary:(NSNumber *)newTotalSalary {\n \n    if (totalSalary != newTotalSalary) {\n        [self willChangeValueForKey:@\"totalSalary\"];\n        _totalSalary = newTotalSalary;\n        [self didChangeValueForKey:@\"totalSalary\"];\n    }\n}\n \n- (NSNumber *)totalSalary {\n    return _totalSalary;\n}\n```\n2.如果您使用的是Core Data，您可以将应用程序的通知中心注册为其托管对象上下文的观察者。托管对象应以类似于键值观察的方式，对子对象发布的相关更改通知作出响应。\n\n---\n## 键值观察实现细节\n\n自动键值观察使用一种叫做 isa-swizzling 的技术来实现.\n\nisa 指针,作为建议的名称,指向对象类.该类持有一个分配表.这个分配表包含了实例方法的指针,以及其他数据.\n\n当注册的观察者观察一个对象的某个属性时,被观察对象的isa指针被修改,指向一个媒介类,而不是对象类的真正isa指针.所以isa指针不必映射到实际的类实例.\n\n不应该依靠isa指针来判断类的成员关系.而应该使用类方法去判断一个对象实例的类.\n\n---\n\n# NSKeyValueObserving\n\n一个非正式协议,该协议内容为对象接受其他对象指定属性改变的通知.\n\n## 概述\n\n您可以观察任何对象属性.包括单一属性,一对一关系属性,一对多关系属性.一对多关系属性的观察者被告知改变的属性类型---以及相关的对象.\n\nNSObject提供一个键值观察协议的实现.该实现提供对所有对象的自动观察能力.您可以通过禁用自动观察者通知和使用该协议中的方法实现手动通知来进一步优化通知。\n\n## Topics\n\n### 改变通知\n\n```\n/**\n 当观察对象的指定键路径下的值发生变化时,通知观察者.\n \n keyPath: 观察对象值已经改变的对应键路径.\n object : 观察对象.\n change : 一个字典用来描述相关对象指定键路径下属性值已经形成的变化.\n context: 提供给注册观察者的值.\n \n 讨论:\n 对一个对象来说,当它开始发送键路径下值改变通知时,您发送给它一个 addObserver(_:forKeyPath:options:context:)消息,命名应该接受该消息的观察者.当您观察结束时,在观察对象销毁前,您发送给观察对象一个removeObserver(_:forKeyPath:)或者remmoverObserver(_:forKeyPath:context:)消息去取消观察者,并且停止发送改变通知的消息.\n\n */ \nfunc observeValue(forKeyPath: String?, of object: Any?, change: [NSKeyValueChangeKey : Any]?, context: UnsafeMutableRawPointer?)\n\n```\n\n### 注册观察\n\n```\n/**\n 注册观察者接受键路径相关对象的KVO通知消息\n  \n observer: 注册KVO通知的对象.观察者必须实现键值观察方法 observeValue(forKeyPath:of:change:context:)\n keyPath: 被观察对象的键路径.该参数不能为nil\n options: 一个在NSKeyValueObservingOptions 值的组合. \n context: 在obserValue(forKeyPath:of:change:context:)方法中传递给观察者的任意数据\n \n 讨论:\n 不管是观察者还是被观察对象,引用计数都不会加一.调用该方法的对象必须调用removerObserver(_:forKeyPath:)或者removeObserver(_:forKeyPathL:context:)方法去移除观察者.\n \n */\nfunc addObserver(_ observer: NSObject, forKeyPath keyPath: String, options: NSKeyValueObservingOptions = [], context: UnsafeMutableRawPointer?)\n\n/**\n 对一个之前没有注册观察者的对象调用该方法是错误的.\n \n 确保注册的观察者在销毁之前调用该方法.\n\n */\nfunc removeObserver(_ observer: NSObject, forKeyPath keyPath: String)\n\nfunc removeObserver(NSObject, forKeyPath: String, context: UnsafeMutableRawPointer?)\n\n```\n\n### 通知观察对象的变化\n\n```\n\nfunc willChangeValue(forKey: String)\n\nfunc didChangeValue(forKey: String)\n\n//观察对象数组类型时,调用该方法来通知观察对象的变化\nfunc willChange(NSKeyValueChange, valuesAt: IndexSet, forKey: String)\n\nfunc didChange(NSKeyValueChange, valuesAt: IndexSet, forKey: String)\n\n//观察对象Set类型时,调用该方法来通知观察对象的变化\nfunc willChangeValue(forKey: String, withSetMutation: NSKeyValueSetMutationKind, using: Set<AnyHashable>)\n\nfunc didChangeValue(forKey: String, withSetMutation: NSKeyValueSetMutationKind, using: Set<AnyHashable>)\n\n```\n\n### 自定义观察\n\n```\n//返回一个布尔值标明是否观察对象自动支持KVO.\nclass func automaticallyNotifiesObservers(forKey: String)\n\n//返回一个键路径集合,该集合内键路径对应的值影响指定key的值.比如计算属性\nclass func keyPathsForValuesAffectingValue(forKey: String)\n\n//返回一个指针，该指针标识所有在被观察对象注册的观察者的信息。\nvar observationInfo: UnsafeMutableRawPointer?\n```\n```\nprotocol NSKeyValueObservingCustomization\n\nType methods \n\n  required\n  static func automaticallyNotifiesObservers(for: AnyKeyPath)\n\n  required\n  static func keyPathsAffectingValue(for: AnyKeyPath)\n\nRelationships\n继承自  NSObjectProtocol\n```\n\n### 常量\n\n```\n\nclass NSKeyValueObservation\n\nstruct NSKeyValueObservedChange\n\nenum NSKeyValueChange{\n    \n    case setting,\n    case insertion,\n    case removal,\n    case replacement\n}\n\n--------------------------------------------------------------\nstruct NSKeyValueObservingOptions \n\n#### Constants\n\n    static var new: NSKeyValueObservingOptions\n\n    static var old: NSKeyValueObservingOptions\n\n    static var initial: NSKeyValueObservingOptions\n\n    static var prior: NSkeyValueObservingOptions\n\n--------------------------------------------------------------\nstruct NSKeyValueChangeKey\n\nenum NSKeyValueSetMutationKind\n```\n\n## KVO原理简析\n- 当一个object有观察者时，动态创建这个object的类的子类\n- 对于每个被观察的property，重写其set方法\n- 在重写的set方法中调用` willChangeValueForKey:`和 `didChangeValueForKey:`通知观察者\n- 当一个property没有观察者时，删除重写的方法\n- 当没有observer观察任何一个property时，删除动态创建的子类\n\n详细的分析可以去看sunyxx的[objc kvo简单探索](http://blog.sunnyxx.com/2014/03/09/objc_kvo_secret/)\n\n## GitHub优秀开源\n在项目中使用KVO的时候要时刻谨记移除观察者,否则会抛出异常.这样不经容易出错,而且项目代码看起来也不够漂亮. **facebook**提供了一个很好的解决方案.在该第三方库中,不用再担心移除观察者的问题,代码整体上也比以前更叫干净漂亮.仅需要在项目 **PCH** 文件中 `#import <KVOController/NSObject+FBKVOController.h>`,这样会给每个**NSObject** 对象自动添加KVOController属性,然后直接使用就OK了\n\n```\n[self.KVOController observe:clock keyPath:@\"date\" options:NSKeyValueObservingOptionInitial|NSKeyValueObservingOptionNew action:@selector(updateClockWithDateChange:)];\n\n```\n具体使用请看 [KVOController](https://github.com/facebook/KVOController)\n\n\n# 参考资料\n[Key-Value Observing Programming Guide](https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/KeyValueObserving/KeyValueObserving.html#//apple_ref/doc/uid/10000177-BCICJDHA)\n\n[NSKeyValueObserving](https://developer.apple.com/documentation/foundation/notifications/nskeyvalueobserving)\n\n[objec kvo简单探索](http://blog.sunnyxx.com/2014/03/09/objc_kvo_secret/)\n","slug":"iOS/KVO","published":1,"updated":"2020-09-27T11:11:57.563Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgq6gnza0084t29kbzy82rrq","content":"<h1 id=\"Key-Value-Observing-Programming-Guide\"><a href=\"#Key-Value-Observing-Programming-Guide\" class=\"headerlink\" title=\"Key-Value Observing Programming Guide\"></a>Key-Value Observing Programming Guide</h1><h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><p>键值观察是一种机制,该机制允许对象接收其他对象特定属性改变的通知.</p>\n<blockquote>\n<p>重要: 为了更好的了解键值观察,您必须理解<a href=\"http://www.jianshu.com/p/7f7360ae8e7b\">键值编码</a></p>\n</blockquote>\n<p>一个简单的例子概述了应用中KVO的作用.假设有一个Person对象与一个Account对象相关,表示这个人在银行的存款账户.一个Person实例可能需要知道何时Account实例属性改变对该账户造成影响.比如收支,或者利率.</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/3340896-51f7b5abd6205136.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"示例\"></p>\n<p>使用KVO,首先确保对象兼容KVO.只要继承自NSObject的对象都是KVO兼容的.然后,必须注册一个观察者Person,观察Account对象实例.Peson发送一个<code>addObserver:forKeyPath:options:context:</code>消息给Account.<br><img src=\"http://upload-images.jianshu.io/upload_images/3340896-2ec2849c4a768671.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"注册观察者\"></p>\n<p>为了接受来自于Account的改变通知,Peson需要实现<code>observeValueForKeyPath:ofObject:change:context</code>方法,所有的观察者都需要实现.一旦注册的KeyPath对应的属性值发生改变,Account将会发送该消息给Person.Person然后基于改变的通知做出相应的响应.</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/3340896-6518b22626ca9474.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"发送改变通知\"></p>\n<p>最后,当不在需要通知时,在对象销毁之前,使用<code>removeObser:forKeyPath:</code> 方法移除观察者.</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/3340896-3eddd2ec631247c1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"移除观察者\"></p>\n<p>不像使用NSNotificationCenter通知那样,KVO没有一个中心对象给所有的观察者提供改变通知.一旦被观察的对象发生改变通知将会直接发送. NSObject提供了KVO的基本实现.</p>\n<hr>\n<h2 id=\"KVO注册\"><a href=\"#KVO注册\" class=\"headerlink\" title=\"KVO注册\"></a>KVO注册</h2><p>必须执行以下步骤来使对象接收一个KVO兼容属性的键值观察通知:</p>\n<ul>\n<li>注册观察者使用<code>addObserver:forKeyPath:options:context:</code></li>\n<li>在观察者内部实现<code>observeValueForKeyPath:ofObject:change:context:</code>方法去接收改变通知消息.</li>\n<li>当不再需要接收消息时,使用<code>removeObserver:forKeyPath:</code>方法取消观察者.至少,在观察者从内存中释放前调用该方法.</li>\n</ul>\n<blockquote>\n<p>重要: 不是所有的类的所有属性都是KVO兼容的.</p>\n</blockquote>\n<h3 id=\"注册观察者\"><a href=\"#注册观察者\" class=\"headerlink\" title=\"注册观察者\"></a>注册观察者</h3><p>一个进行观察的对象首先通过发送一个 <code>addObserver:forKeyPath:options:context: </code>消息注册自己和被观察的对象.来传递作为观察者的自身和观察的属性键路径.观察者额外指定一个可选参数和上下文指针用来管理通知方面的内容.</p>\n<h4 id=\"Options\"><a href=\"#Options\" class=\"headerlink\" title=\"Options\"></a>Options</h4><p>可选项参数,使用<code>|</code>位操作符来指定多个可选项.影响提供给通知的字典内容,该字典包含观察到的变动信息.并且影响通知的生成方式.</p>\n<p>通过指定的<code>NSKeyValueObservingOptionOld</code>获取观察的属性改变前的值.通过<code>NSKeyValueObservingOptionNew</code>获取改变后新的属性值.</p>\n<p>通过<code>NSKeyValueObservingOptionPrior</code>可选项,命令观察对象在属性改变前发送一个通知(另外在改变后也发送一个通知).改变信息的字典通过Key为<code>NSKeyValueChangeNotificationIsPriorKey</code>, Value为<code>NSNumber</code>表示的Yes对象的键值对,标明是一个预改变通知.当需要观察一个属性将要改变时,可以使用该可选项来发送通知.</p>\n<h4 id=\"Context\"><a href=\"#Context\" class=\"headerlink\" title=\"Context\"></a>Context</h4><p>在 <code>addObserver:forKeyPath:options:context:</code>消息中的上下文指针包含在相应通知下,传递回的任意数据.可以指定一个NULL类型的数据并且完全依靠键路径字符串去判断改变通知的来源.但是这种方法可能会造成一些问题.如果一个对象的父类出于某种原因也在观察同样的键路径下的属性.</p>\n<p>一个更安全和更加可扩展的方法是使用上下文确保你接收的通知目的对象是观察者而不是其父类.<br>一个类中的特殊命名的静态变量指针可以组成一个好的上下文. <strong>Listing 1</strong> 展示一个为属性观察命名不同上下文的示例.</p>\n<p><strong>Listing 1</strong> 创建上下文指针</p>\n<pre><code class=\"hljs actionscript\"><span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> *PersonAccountBalanceContext = &amp;PersonAccountBalanceContext;\nstatci <span class=\"hljs-keyword\">void</span> *PersonAccountInterestRateContext = &amp;PersonAccountInterestRateContext;\n</code></pre>\n<p>Listing 2中的实例论证了一个Person实例如何使用给定的上下文指针注册它自己作为Account实例banlance和interestRate属性的观察者</p>\n<p><strong>Listing 2</strong> 注册属性balance和interestRate的观察者</p>\n<pre><code class=\"hljs groovy\">\n- (<span class=\"hljs-keyword\">void</span>)<span class=\"hljs-attr\">registerAsObserverForAccount:</span>(Account *)account&#123;\n    \n    [account <span class=\"hljs-attr\">addObserver:</span> self <span class=\"hljs-attr\">forKeyPath:</span>@<span class=\"hljs-string\">&quot;balance&quot;</span> <span class=\"hljs-attr\">options:</span>(NSKeyValueObseringOptionNew | NSKeyValueObservingOptionOld) <span class=\"hljs-attr\">context:</span> PersonAccountBalanceContext];\n    \n    [account <span class=\"hljs-attr\">addObserver:</span> self <span class=\"hljs-attr\">forKeyPath:</span>@<span class=\"hljs-string\">&quot;interestRate&quot;</span> <span class=\"hljs-attr\">options:</span>(NSKeyValueObservingNew | NSKeyValueObservingOptionOld) <span class=\"hljs-attr\">context:</span>PersonAccountINterestRateContext];\n    \n&#125;\n</code></pre>\n<blockquote>\n<p>注意:键值观察方法 <code>addObserver:forKeyPath:options;context:</code>对观察者,被观察对象,或者上下文,不持有强引用.如果需要的话,应该确保对观察者,被观察对象,和上下文的强引用.</p>\n</blockquote>\n<h3 id=\"接收一个改变的通知\"><a href=\"#接收一个改变的通知\" class=\"headerlink\" title=\"接收一个改变的通知\"></a>接收一个改变的通知</h3><p>当被观察的属性值发生变化时,观察者会接收到一个<code>observeValueForKeyPath:ofObject:change:context:</code> 消息.所有的观察者必须实现该方法.</p>\n<p>被观察对象提供触发通知的键路径,它本身作为关联对象,包含更改细节的字典,以及在该键路径下注册的观察者时,提供的上下文指针.</p>\n<p>更改内容字典入口<code>NSKeyValueChangeKindKey</code>提供发生的更改类型相关信息.如果观察的值已经发生改变,<code>NSKeyValueChangeKindKey</code>入口返回<code>NSKeyValueChangeSetting</code>.通过依赖注册的观察者指定的可选项.在更改内容字典中<code>NSKeyValueChangeOldKey</code>和<code>NSKeyValueChangeNewKey</code>包含观察属性改变前和改变后的值.如果属性是一个对象,则直接提供该值.如果属性是一个标量或者结构体,那么对应的值会包装在一个NSValue对象中.</p>\n<p>如果观察的属性是一个一对多关系.<code>NSKeyValueChangeKindKey</code>入口也会表示是否该集合内的对象被插入,移除,或者替换.分别用<code>NSKeyValueChangeInsertion</code>,<code>NSKeyValueChangeRemoval</code>,<code>NSKeyValueChangeReplacement</code>表示.</p>\n<p>更改内容字典入口<code>NSKeyValueChangeIndexesKey</code>是一个NSIndexSet对象.明确了在集合中更改的元素的所有下标.如果<code>NSKeyValueObservingOptionNew</code>或者<code>NSKeyValueObservingOptionOld</code>被指定作为观察者的可选项.那么<code>NSKeyValueChangeOldKey</code>和<code>NSKeyValueChageNewKey</code>在改变内容字典中用数组来包含关联对象改变前和改变后的值.</p>\n<p>在Listing 3中的例子展示了 <em>Person</em> 观察者 <code>observeValueForKeyPath:ofObject:change:context:</code>方法的实现,并且记录了balance和interestRate属性的改变前后的值.</p>\n<p><strong>Listing 3</strong> <code>observeValueForKeyPath:ofObject:change:context:</code>方法实现</p>\n<pre><code class=\"hljs groovy\">\n- (<span class=\"hljs-keyword\">void</span>)<span class=\"hljs-attr\">observeValueForKeyPath:</span>(NSString *)keyPath <span class=\"hljs-attr\">ofObject:</span>(id)object <span class=\"hljs-attr\">change:</span>(NSDictionary *)change <span class=\"hljs-attr\">context:</span>(<span class=\"hljs-keyword\">void</span> *)context&#123;\n\n    <span class=\"hljs-keyword\">if</span> (context == PersonAccountBalanceContext) &#123;\n        \n        <span class=\"hljs-comment\">// Do something with the balance...</span>\n        \n    &#125;<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (context == PersonAccountInterestRateContext)&#123;\n        \n        <span class=\"hljs-comment\">// Do something with the interest rate...</span>\n        \n    &#125;<span class=\"hljs-keyword\">else</span> &#123;\n        \n        <span class=\"hljs-comment\">// Any unrecognized context must belong to super</span>\n        \n        [<span class=\"hljs-built_in\">super</span> <span class=\"hljs-attr\">observeValueForKeyPath:</span>keyPath <span class=\"hljs-attr\">ofObject:</span>object <span class=\"hljs-attr\">change:</span>change <span class=\"hljs-attr\">context:</span>context];\n        \n    &#125;\n&#125;\n</code></pre>\n<p>如果在注册观察者的时候指定一个NULL上下文,通过比对键路径来判断观察的内容改变情况.如果使用一个单一的上下文给所有观察的键路径,首先测试那个通知的上下文,然后使用键路径来匹配从而判断具体改变的内容.如果给每一个观察的间路径提供一个不同的上下文,正如这里论证的,遗传单一的指针做比较来告诉你是否该通知是发送给这个观察者,并且哪个键路径改变了.</p>\n<p>在任何情况下,观察者如果没有识别上下文(或者在一个单一情况下,任何键路径)通常应该调用父类的<code>obserValueForKeyPath:ofObject:change:context:</code>实现.因为这意味着父类也注册为观察者去接受通知.</p>\n<blockquote>\n<p>注意: 如果一个通知传递到类层级的顶部.NSObject会抛出一个NSInternalInconsistencyException.因为这是一个编程错误: 一个子类没有使用它注册的通知.</p>\n</blockquote>\n<h3 id=\"移除观察者\"><a href=\"#移除观察者\" class=\"headerlink\" title=\"移除观察者\"></a>移除观察者</h3><p>发送给观察者 removeObserver:forKeyPath:context:消息来移除一个键值观察者.需要指定观察的对象.键路径,和上下文.Listing 4中的例子展示了Person移除自己,作为balance和interestRate的观察者.</p>\n<p><strong>Listing 4</strong> 移除balance和interestRate观察者</p>\n<pre><code class=\"hljs groovy\">\n- (<span class=\"hljs-keyword\">void</span>)<span class=\"hljs-attr\">unregisteAsObserverForAccount:</span>(Account *)account&#123;\n    \n    [account <span class=\"hljs-attr\">removeObserver:</span> self <span class=\"hljs-attr\">forKeyPath:</span> @<span class=\"hljs-string\">&quot;balance&quot;</span> <span class=\"hljs-attr\">context:</span> PersonAccountBalanceContext];\n    \n    [account <span class=\"hljs-attr\">removeObserver:</span> self <span class=\"hljs-attr\">forKeyPath:</span> @<span class=\"hljs-string\">&quot;interestRate&quot;</span> <span class=\"hljs-attr\">context:</span> PersonAccountInterestRateContext];\n&#125;\n</code></pre>\n\n<p>接受到一个 removeObserver:forKeyPath:context: 消息后,观察的对象将不再接受指定的键路径和对象的任何 obserValueForKeyPath:ofObject:change:context:消息 </p>\n<p>当正在移除一个观察者时,记住以下几点:</p>\n<ul>\n<li><p>如果移除的观察者未注册,则会导致一个NSRangeExcepion异常.调用<code>removeObserver:forKeyPath:context:</code>方法一次,则有与之相对应的<code>addObserver:forKeyPath:options:context:</code>方法被调用.或者如果不适用的话,把remove方法添加到一个<code>try/catch</code> Block中处理潜在的异常.</p>\n</li>\n<li><p>一个观察者在销毁时不会自动移除自身.被观察的对象会持续发送通知,不会顾及到观察者状态的改变.然而,一个改变通知,或者其他消息发送给一个已经释放的对象,会触发一个内存访问异常.因此需要确保观察者释放前一定要移除观察者.</p>\n</li>\n<li><p>KVO协议没有提供观察者和被观察对象的访问方式.避免相关的错误发生.一个典型的格式是在观察者初始化的时候(比如在 init 或者 viewDidLoad 方法中),注册为观察者,在delloc方法中取消注册.来确保合适的添加和移除信息.并且确保观察者在内存中移除前已经取消注册.</p>\n</li>\n</ul>\n<hr>\n<h2 id=\"注册依赖键\"><a href=\"#注册依赖键\" class=\"headerlink\" title=\"注册依赖键\"></a>注册依赖键</h2><p>在许多情况下，一个属性的值取决于另一个对象中的一个或多个其他属性的值。如果一个属性的值发生改变,那么派生属性的值也被标记为更改.</p>\n<h3 id=\"一对一关系\"><a href=\"#一对一关系\" class=\"headerlink\" title=\"一对一关系\"></a>一对一关系</h3><p>为了自动触发一对一关系属性的通知,应该重写 <code>keyPathsForValuesAffectingValueForKey:</code>方法或者实现一个合适的方法,该方法遵循它定义注册为依赖键的格式.</p>\n<p>例如,一个人完整的姓名取决于firs和last names.返回完整姓名的方法可以向下面方法一样写:</p>\n<pre><code class=\"hljs objectivec\">\n- (<span class=\"hljs-built_in\">NSString</span> *)fullName &#123;\n    \n    <span class=\"hljs-keyword\">return</span> [<span class=\"hljs-built_in\">NSString</span> stringWithFormat:<span class=\"hljs-string\">@&quot;%@ %@&quot;</span>,firstName, lastName];\n&#125;\n</code></pre>\n\n<p>当应用观察fullName属性的时候,只要firstName和lastName中任意一个属性发生改变,都必须通知该应用,因为他们影响fullName属性的值.</p>\n<p>一种解决办法是重写<code>keyPathsForValuesAffectingValueForKey:</code>方法 来指定fullName属性依赖于lastName和firstName属性. <strong>Listing 1</strong>展示了这种依赖的实现.</p>\n<p><strong>Listing 1</strong> <code>keyPathsForValuesAffectingValueForKey: </code>方法的实现示例</p>\n<pre><code class=\"hljs groovy\">+ (NSSet *)<span class=\"hljs-attr\">keyPathsForValuesAffectingValueForKey:</span>(NSString *)key &#123;\n    \n    NSSet *keyPaths = [<span class=\"hljs-built_in\">super</span> <span class=\"hljs-attr\">keyPathsForValuesAffectingValueForKey:</span>key];\n    \n    <span class=\"hljs-keyword\">if</span> ([key <span class=\"hljs-attr\">isEqualToString:</span>@<span class=\"hljs-string\">&quot;fullName&quot;</span>]) &#123;\n        NSArray *affectingKey = @[@<span class=\"hljs-string\">&quot;lastName&quot;</span>, @<span class=\"hljs-string\">&quot;firstName&quot;</span>];\n        keyPaths = [keyPaths <span class=\"hljs-attr\">setByAddingObjectsFromArray:</span>affectingKeys];\n    &#125;\n    <span class=\"hljs-keyword\">return</span> keyPaths;\n&#125;\n</code></pre>\n<p>您的重写通常应该调用super，并返回一个集合，该集合包含了在该集合中产生的任何成员(以便在superclasses中不影响该方法的重写)</p>\n<p>通过实现一个类方法也可以实现相同的结果,该类方法遵循命名约定 keyPathsForValuesAffectiing<Key>,该<Key>是依赖属性的名称(首字母大写).按照<strong>Listing 1</strong>中的模式写一个类方法, 如 <strong>Listing 2</strong> 所展示.</p>\n<p><strong>Listing 2</strong> keyPathsForValuesAffecting<Key> 命名约定的实现示例</p>\n<pre><code class=\"hljs objectivec\">+ (<span class=\"hljs-built_in\">NSSet</span> *)keyPathsForValuesAffectingFullName &#123;\n    \n    <span class=\"hljs-keyword\">return</span> [<span class=\"hljs-built_in\">NSSet</span> setWithObjects:<span class=\"hljs-string\">@&quot;lastName&quot;</span>, <span class=\"hljs-string\">@&quot;firstName&quot;</span>, <span class=\"hljs-literal\">nil</span>];\n&#125;\n</code></pre>\n<p>当使用分类给一个存在的类添加计算属性时,不能重写<code>keyPathsForValuesAffectingValueForKey:</code>方法.因为在分类中不得重写方法.在那种情况下,实现一个keyPathsForValuesAffecting<Key>类方法可以很好地利用该机制.</p>\n<blockquote>\n<p>注意: 一对多关系属性不能使用<code>keyPathsForValuesAffectingValueForKey:</code>方法设定依赖.必须观察一对多集合中每个对象的合适的属性并且通过更新依赖键自身来改变它的值.下面内容展示了处理这种情况的一种策略.</p>\n</blockquote>\n<h3 id=\"一对多关系\"><a href=\"#一对多关系\" class=\"headerlink\" title=\"一对多关系\"></a>一对多关系</h3><p><code>keyValuesForValuesAffectingValueForKey: </code>方法不支持一对多关系属性的键路径.例如,假设有一个department对象,该对象拥有一个一对多关系的属性(employees).employee有一个salary属性.可能该对象希望有一个totalSalary属性来表示employees中所有employee的salary总和.</p>\n<p>下面两种情况下的两种可能的解决方案.</p>\n<p>1.可以使用键值观察注册父类(本例中是Department)作为所有子类(在本例中是Employees)相关属性的观察者.必须添加和移除作为观察者的父类对象.在<code>observeValueForKeyPath:ofObject:change:context:</code>方法中通过更新依赖值来响应变化,就像下面的代码中阐述的一样:</p>\n<pre><code class=\"hljs objectivec\">- (<span class=\"hljs-keyword\">void</span>)observeValueForKeyPath:(<span class=\"hljs-built_in\">NSString</span> *)keyPath ofObject:(<span class=\"hljs-keyword\">id</span>)object change:(<span class=\"hljs-built_in\">NSDictionary</span> *)change context:(<span class=\"hljs-keyword\">void</span> *)context &#123;\n \n    <span class=\"hljs-keyword\">if</span> (context == totalSalaryContext) &#123;\n        [<span class=\"hljs-keyword\">self</span> updateTotalSalary];\n    &#125;\n    <span class=\"hljs-keyword\">else</span>\n    <span class=\"hljs-comment\">// deal with other observations and/or invoke super...</span>\n&#125;\n \n- (<span class=\"hljs-keyword\">void</span>)updateTotalSalary &#123;\n    [<span class=\"hljs-keyword\">self</span> setTotalSalary:[<span class=\"hljs-keyword\">self</span> valueForKeyPath:<span class=\"hljs-string\">@&quot;employees.@sum.salary&quot;</span>]];\n&#125;\n \n- (<span class=\"hljs-keyword\">void</span>)setTotalSalary:(<span class=\"hljs-built_in\">NSNumber</span> *)newTotalSalary &#123;\n \n    <span class=\"hljs-keyword\">if</span> (totalSalary != newTotalSalary) &#123;\n        [<span class=\"hljs-keyword\">self</span> willChangeValueForKey:<span class=\"hljs-string\">@&quot;totalSalary&quot;</span>];\n        _totalSalary = newTotalSalary;\n        [<span class=\"hljs-keyword\">self</span> didChangeValueForKey:<span class=\"hljs-string\">@&quot;totalSalary&quot;</span>];\n    &#125;\n&#125;\n \n- (<span class=\"hljs-built_in\">NSNumber</span> *)totalSalary &#123;\n    <span class=\"hljs-keyword\">return</span> _totalSalary;\n&#125;</code></pre>\n<p>2.如果您使用的是Core Data，您可以将应用程序的通知中心注册为其托管对象上下文的观察者。托管对象应以类似于键值观察的方式，对子对象发布的相关更改通知作出响应。</p>\n<hr>\n<h2 id=\"键值观察实现细节\"><a href=\"#键值观察实现细节\" class=\"headerlink\" title=\"键值观察实现细节\"></a>键值观察实现细节</h2><p>自动键值观察使用一种叫做 isa-swizzling 的技术来实现.</p>\n<p>isa 指针,作为建议的名称,指向对象类.该类持有一个分配表.这个分配表包含了实例方法的指针,以及其他数据.</p>\n<p>当注册的观察者观察一个对象的某个属性时,被观察对象的isa指针被修改,指向一个媒介类,而不是对象类的真正isa指针.所以isa指针不必映射到实际的类实例.</p>\n<p>不应该依靠isa指针来判断类的成员关系.而应该使用类方法去判断一个对象实例的类.</p>\n<hr>\n<h1 id=\"NSKeyValueObserving\"><a href=\"#NSKeyValueObserving\" class=\"headerlink\" title=\"NSKeyValueObserving\"></a>NSKeyValueObserving</h1><p>一个非正式协议,该协议内容为对象接受其他对象指定属性改变的通知.</p>\n<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p>您可以观察任何对象属性.包括单一属性,一对一关系属性,一对多关系属性.一对多关系属性的观察者被告知改变的属性类型—以及相关的对象.</p>\n<p>NSObject提供一个键值观察协议的实现.该实现提供对所有对象的自动观察能力.您可以通过禁用自动观察者通知和使用该协议中的方法实现手动通知来进一步优化通知。</p>\n<h2 id=\"Topics\"><a href=\"#Topics\" class=\"headerlink\" title=\"Topics\"></a>Topics</h2><h3 id=\"改变通知\"><a href=\"#改变通知\" class=\"headerlink\" title=\"改变通知\"></a>改变通知</h3><pre><code class=\"hljs swift\"><span class=\"hljs-comment\">/**</span>\n<span class=\"hljs-comment\"> 当观察对象的指定键路径下的值发生变化时,通知观察者.</span>\n<span class=\"hljs-comment\"> </span>\n<span class=\"hljs-comment\"> keyPath: 观察对象值已经改变的对应键路径.</span>\n<span class=\"hljs-comment\"> object : 观察对象.</span>\n<span class=\"hljs-comment\"> change : 一个字典用来描述相关对象指定键路径下属性值已经形成的变化.</span>\n<span class=\"hljs-comment\"> context: 提供给注册观察者的值.</span>\n<span class=\"hljs-comment\"> </span>\n<span class=\"hljs-comment\"> 讨论:</span>\n<span class=\"hljs-comment\"> 对一个对象来说,当它开始发送键路径下值改变通知时,您发送给它一个 addObserver(_:forKeyPath:options:context:)消息,命名应该接受该消息的观察者.当您观察结束时,在观察对象销毁前,您发送给观察对象一个removeObserver(_:forKeyPath:)或者remmoverObserver(_:forKeyPath:context:)消息去取消观察者,并且停止发送改变通知的消息.</span>\n<span class=\"hljs-comment\"></span>\n<span class=\"hljs-comment\"> */</span> \n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">observeValue</span><span class=\"hljs-params\">(forKeyPath: String?, of object: <span class=\"hljs-keyword\">Any</span>?, change: [NSKeyValueChangeKey : <span class=\"hljs-keyword\">Any</span>]?, context: UnsafeMutableRawPointer?)</span></span>\n</code></pre>\n\n<h3 id=\"注册观察\"><a href=\"#注册观察\" class=\"headerlink\" title=\"注册观察\"></a>注册观察</h3><pre><code class=\"hljs swift\"><span class=\"hljs-comment\">/**</span>\n<span class=\"hljs-comment\"> 注册观察者接受键路径相关对象的KVO通知消息</span>\n<span class=\"hljs-comment\">  </span>\n<span class=\"hljs-comment\"> observer: 注册KVO通知的对象.观察者必须实现键值观察方法 observeValue(forKeyPath:of:change:context:)</span>\n<span class=\"hljs-comment\"> keyPath: 被观察对象的键路径.该参数不能为nil</span>\n<span class=\"hljs-comment\"> options: 一个在NSKeyValueObservingOptions 值的组合. </span>\n<span class=\"hljs-comment\"> context: 在obserValue(forKeyPath:of:change:context:)方法中传递给观察者的任意数据</span>\n<span class=\"hljs-comment\"> </span>\n<span class=\"hljs-comment\"> 讨论:</span>\n<span class=\"hljs-comment\"> 不管是观察者还是被观察对象,引用计数都不会加一.调用该方法的对象必须调用removerObserver(_:forKeyPath:)或者removeObserver(_:forKeyPathL:context:)方法去移除观察者.</span>\n<span class=\"hljs-comment\"> </span>\n<span class=\"hljs-comment\"> */</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">addObserver</span><span class=\"hljs-params\">(<span class=\"hljs-number\">_</span> observer: NSObject, forKeyPath keyPath: String, options: NSKeyValueObservingOptions = [], context: UnsafeMutableRawPointer?)</span></span>\n\n<span class=\"hljs-comment\">/**</span>\n<span class=\"hljs-comment\"> 对一个之前没有注册观察者的对象调用该方法是错误的.</span>\n<span class=\"hljs-comment\"> </span>\n<span class=\"hljs-comment\"> 确保注册的观察者在销毁之前调用该方法.</span>\n<span class=\"hljs-comment\"></span>\n<span class=\"hljs-comment\"> */</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">removeObserver</span><span class=\"hljs-params\">(<span class=\"hljs-number\">_</span> observer: NSObject, forKeyPath keyPath: String)</span></span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">removeObserver</span><span class=\"hljs-params\">(NSObject, forKeyPath: String, context: UnsafeMutableRawPointer?)</span></span>\n</code></pre>\n\n<h3 id=\"通知观察对象的变化\"><a href=\"#通知观察对象的变化\" class=\"headerlink\" title=\"通知观察对象的变化\"></a>通知观察对象的变化</h3><pre><code class=\"hljs swift\">\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">willChangeValue</span><span class=\"hljs-params\">(forKey: String)</span></span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">didChangeValue</span><span class=\"hljs-params\">(forKey: String)</span></span>\n\n<span class=\"hljs-comment\">//观察对象数组类型时,调用该方法来通知观察对象的变化</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">willChange</span><span class=\"hljs-params\">(NSKeyValueChange, valuesAt: IndexSet, forKey: String)</span></span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">didChange</span><span class=\"hljs-params\">(NSKeyValueChange, valuesAt: IndexSet, forKey: String)</span></span>\n\n<span class=\"hljs-comment\">//观察对象Set类型时,调用该方法来通知观察对象的变化</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">willChangeValue</span><span class=\"hljs-params\">(forKey: String, withSetMutation: NSKeyValueSetMutationKind, using: Set&lt;AnyHashable&gt;)</span></span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">didChangeValue</span><span class=\"hljs-params\">(forKey: String, withSetMutation: NSKeyValueSetMutationKind, using: Set&lt;AnyHashable&gt;)</span></span>\n</code></pre>\n\n<h3 id=\"自定义观察\"><a href=\"#自定义观察\" class=\"headerlink\" title=\"自定义观察\"></a>自定义观察</h3><pre><code class=\"hljs go\"><span class=\"hljs-comment\">//返回一个布尔值标明是否观察对象自动支持KVO.</span>\nclass <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">automaticallyNotifiesObservers</span><span class=\"hljs-params\">(forKey: String)</span></span>\n\n<span class=\"hljs-comment\">//返回一个键路径集合,该集合内键路径对应的值影响指定key的值.比如计算属性</span>\nclass <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">keyPathsForValuesAffectingValue</span><span class=\"hljs-params\">(forKey: String)</span></span>\n\n<span class=\"hljs-comment\">//返回一个指针，该指针标识所有在被观察对象注册的观察者的信息。</span>\n<span class=\"hljs-keyword\">var</span> observationInfo: UnsafeMutableRawPointer?</code></pre>\n<pre><code class=\"hljs routeros\">protocol NSKeyValueObservingCustomization\n\nType methods \n\n  required\n  static func automaticallyNotifiesObservers(<span class=\"hljs-keyword\">for</span>: AnyKeyPath)\n\n  required\n  static func keyPathsAffectingValue(<span class=\"hljs-keyword\">for</span>: AnyKeyPath)\n\nRelationships\n继承自  NSObjectProtocol</code></pre>\n\n<h3 id=\"常量\"><a href=\"#常量\" class=\"headerlink\" title=\"常量\"></a>常量</h3><pre><code class=\"hljs crystal\">\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">NSKeyValueObservation</span></span>\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">NSKeyValueObservedChange</span></span>\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title\">NSKeyValueChange</span>&#123;</span>\n    \n    <span class=\"hljs-keyword\">case</span> setting,\n    <span class=\"hljs-keyword\">case</span> insertion,\n    <span class=\"hljs-keyword\">case</span> removal,\n    <span class=\"hljs-keyword\">case</span> replacement\n&#125;\n\n--------------------------------------------------------------\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">NSKeyValueObservingOptions</span> </span>\n\n<span class=\"hljs-comment\">#### Constants</span>\n\n    static var <span class=\"hljs-symbol\">new:</span> NSKeyValueObservingOptions\n\n    static var <span class=\"hljs-symbol\">old:</span> NSKeyValueObservingOptions\n\n    static var <span class=\"hljs-symbol\">initial:</span> NSKeyValueObservingOptions\n\n    static var <span class=\"hljs-symbol\">prior:</span> NSkeyValueObservingOptions\n\n--------------------------------------------------------------\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">NSKeyValueChangeKey</span></span>\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title\">NSKeyValueSetMutationKind</span></span></code></pre>\n\n<h2 id=\"KVO原理简析\"><a href=\"#KVO原理简析\" class=\"headerlink\" title=\"KVO原理简析\"></a>KVO原理简析</h2><ul>\n<li>当一个object有观察者时，动态创建这个object的类的子类</li>\n<li>对于每个被观察的property，重写其set方法</li>\n<li>在重写的set方法中调用<code> willChangeValueForKey:</code>和 <code>didChangeValueForKey:</code>通知观察者</li>\n<li>当一个property没有观察者时，删除重写的方法</li>\n<li>当没有observer观察任何一个property时，删除动态创建的子类</li>\n</ul>\n<p>详细的分析可以去看sunyxx的<a href=\"http://blog.sunnyxx.com/2014/03/09/objc_kvo_secret/\">objc kvo简单探索</a></p>\n<h2 id=\"GitHub优秀开源\"><a href=\"#GitHub优秀开源\" class=\"headerlink\" title=\"GitHub优秀开源\"></a>GitHub优秀开源</h2><p>在项目中使用KVO的时候要时刻谨记移除观察者,否则会抛出异常.这样不经容易出错,而且项目代码看起来也不够漂亮. <strong>facebook</strong>提供了一个很好的解决方案.在该第三方库中,不用再担心移除观察者的问题,代码整体上也比以前更叫干净漂亮.仅需要在项目 <strong>PCH</strong> 文件中 <code>#import &lt;KVOController/NSObject+FBKVOController.h&gt;</code>,这样会给每个<strong>NSObject</strong> 对象自动添加KVOController属性,然后直接使用就OK了</p>\n<pre><code class=\"hljs groovy\">[self.KVOController <span class=\"hljs-attr\">observe:</span>clock <span class=\"hljs-attr\">keyPath:</span>@<span class=\"hljs-string\">&quot;date&quot;</span> <span class=\"hljs-attr\">options:</span>NSKeyValueObservingOptionInitial|NSKeyValueObservingOptionNew <span class=\"hljs-attr\">action:</span><span class=\"hljs-meta\">@selector</span>(<span class=\"hljs-attr\">updateClockWithDateChange:</span>)];\n</code></pre>\n<p>具体使用请看 <a href=\"https://github.com/facebook/KVOController\">KVOController</a></p>\n<h1 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h1><p><a href=\"https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/KeyValueObserving/KeyValueObserving.html#//apple_ref/doc/uid/10000177-BCICJDHA\">Key-Value Observing Programming Guide</a></p>\n<p><a href=\"https://developer.apple.com/documentation/foundation/notifications/nskeyvalueobserving\">NSKeyValueObserving</a></p>\n<p><a href=\"http://blog.sunnyxx.com/2014/03/09/objc_kvo_secret/\">objec kvo简单探索</a></p>\n","site":{"data":{"fluid_static_prefix":{"internal_js":"/js","internal_css":"/css","internal_img":"/img","iconfont":"//at.alicdn.com/t/font_1736178_kmeydafke9r.css","anchor":"https://cdn.staticfile.org/anchor-js/4.2.2/","github_markdown":"https://cdn.staticfile.org/github-markdown-css/4.0.0/","jquery":"https://cdn.staticfile.org/jquery/3.4.1/","bootstrap":"https://cdn.staticfile.org/twitter-bootstrap/4.4.1/","highlightjs":"https://cdn.staticfile.org/highlight.js/10.0.0/","prismjs":"https://cdn.staticfile.org/prism/1.21.0/","tocbot":"https://cdn.staticfile.org/tocbot/4.11.1/","typed":"https://cdn.staticfile.org/typed.js/2.0.11/","fancybox":"https://cdn.staticfile.org/fancybox/3.5.7/","mathjax":"https://cdn.staticfile.org/mathjax/3.0.5/es5/","katex":"https://cdn.staticfile.org/KaTeX/0.11.1/","aplayer":"https://cdn.staticfile.org/aplayer/1.10.1/","busuanzi":"https://busuanzi.ibruce.info/busuanzi/2.3/","clipboard":"https://cdn.staticfile.org/clipboard.js/2.0.6/","mermaid":"https://cdn.staticfile.org/mermaid/8.5.0/","valine":"https://cdn.staticfile.org/valine/1.4.14/","gitalk":"https://cdn.staticfile.org/gitalk/1.6.2/","blueimp_md5":"https://cdn.staticfile.org/blueimp-md5/2.13.0/","disqusjs":"https://cdn.jsdelivr.net/npm/disqusjs@1.0/dist/","hint":"/lib/hint/"},"fluid_config":{"favicon":"/img/favicon.png","apple_touch_icon":"/img/favicon.png","title_join_string":" - ","force_https":false,"code":{"copy_btn":true,"highlight":{"enable":true,"lib":"highlightjs","highlightjs":{"style":"Github Gist","bg_color":false},"prismjs":{"style":"default","preprocess":true}}},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"_","loop":false},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"right","visible":"hover","icon":""},"mouse_click":{"enable":false,"style":"values"}},"dark_mode":{"enable":true,"default":"auto"},"color":{"body_bg_color":"#eee","body_bg_color_dark":"#181c27","navbar_bg_color":"#2f4154","navbar_bg_color_dark":"#1f3144","navbar_text_color":"#fff","navbar_text_color_dark":"#d0d0d0","text_color":"#3c4858","text_color_dark":"#c4c6c9","sec_text_color":"#718096","sec_text_color_dark":"#a7a9ad","post_text_color":"#2c3e50","post_text_color_dark":"#c4c6c9","post_heading_color":"#1a202c","post_heading_color_dark":"#c4c6c9","post_link_color":"#0366d6","post_link_color_dark":"#1589e9","link_hover_color":"#30a9de","link_hover_color_dark":"#30a9de","link_hover_bg_color":"#f8f9fa","link_hover_bg_color_dark":"#364151","board_color":"#fff","board_color_dark":"#252d38"},"font":{"font_size":"16px","font_family":null,"code_font_size":"85%"},"custom_js":null,"custom_css":null,"custom_html":"","web_analytics":{"enable":false,"baidu":null,"google":null,"gtag":null,"tencent":{"sid":null,"cid":null},"woyaola":null,"cnzz":null,"leancloud":{"app_id":null,"app_key":null,"server_url":null}},"lazyload":{"enable":true,"onlypost":false},"daovoice":{"enable":false,"appid":""},"aplayer":{"enable":false,"autoplay":false,"loop":"all","order":"random","theme":"#b7daff","songs":[{"name":"name","artist":"artist","url":"/songs/test.mp3","cover":"/img/cover.jpg"},{"name":"name","artist":"artist","url":"https://...url.mp3","cover":"https://...cover.jpg"}]},"version":{"check":false},"navbar":{"blog_title":"吃面多放葱","ground_glass":{"enable":false,"px":3,"alpha":0.7},"menu":[{"key":"home","link":"/","icon":"iconfont icon-home-fill"},{"key":"category","link":"/categories/","icon":"iconfont icon-category-fill"},{"key":"tag","link":"/tags/","icon":"iconfont icon-tags-fill"},{"key":"about","link":"/about/","icon":"iconfont icon-user-fill"}]},"search":{"enable":true,"path":"/local-search.xml","generate_path":"/local-search.xml","field":"post","content":true},"scroll_down_arrow":{"enable":true,"banner_height_limit":90,"scroll_after_turning_page":true},"banner_parallax":true,"footer":{"statistics":{"enable":false,"source":"busuanzi","pv_format":"总访问量 {} 次","uv_format":"总访客数 {} 人"},"beian":{"enable":false,"icp_text":"京ICP证123456号","police_text":"京公网安备12345678号","police_code":12345678,"police_icon":"/img/police_beian.png"}},"scroll_top_arrow":{"enable":true},"index":{"banner_img":"/img/default.png","banner_img_height":100,"banner_mask_alpha":0.3,"post_default_img":"","slogan":{"enable":true,"text":"像蚂蚁一样工作，像蝴蝶一样生活"},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"category":true,"tag":true}},"page":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3},"post":{"banner_img":"/img/default.png","banner_img_height":70,"banner_mask_alpha":0.3,"meta":{"author":{"enable":false},"date":{"enable":true,"format":"LL a"},"wordcount":{"enable":true,"format":"{} 字"},"min2read":{"enable":true,"format":"{} 分钟","words":100},"views":{"enable":false,"source":"busuanzi","format":"{} 次"}},"updated":{"enable":false,"content":"本文最后更新于：","relative":false},"toc":{"enable":true,"headingSelector":"h1,h2,h3,h4,h5,h6","collapseDepth":0},"copyright":{"enable":true,"content":"本博客所有文章除特别声明外，均采用 <a href=\"https://creativecommons.org/licenses/by-sa/4.0/deed.zh\" rel=\"nofollow noopener\">CC BY-SA 4.0 协议</a> ，转载请注明出处！"},"prev_next":{"enable":true},"custom":{"enable":false,"content":"<img src=\"https://octodex.github.com/images/jetpacktocat.png\" class=\"rounded mx-auto d-block mt-5\" style=\"width:150px; height:150px;\">"},"image_zoom":{"enable":true},"footnote":{"enable":true,"header":""},"math":{"enable":false,"specific":false,"engine":"mathjax"},"mermaid":{"enable":false,"specific":false,"options":{"theme":"default"}},"comments":{"enable":false,"type":"disqus"}},"utterances":{"repo":null,"issue_term":"pathname","label":"utterances","theme":"github-light","theme_dark":"github-dark","crossorigin":"anonymous"},"disqus":{"shortname":null,"disqusjs":false,"apikey":null},"gitalk":{"clientID":null,"clientSecret":null,"repo":null,"owner":null,"admin":["name"],"id":"location.pathname","language":"zh-CN","labels":["Gitalk"],"perPage":10,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true},"valine":{"appid":null,"appkey":null,"placeholder":"说点什么","path":"window.location.pathname","avatar":"retro","meta":["nick","mail","link"],"pageSize":10,"lang":"zh-CN","highlight":false,"recordIP":false,"serverURLs":null},"changyan":{"appid":"","appkey":""},"livere":{"uid":""},"remark42":{"host":"https://remark.haoyizebo.com","site_id":"haoyizebo","max_shown_comments":10,"locale":"zh"},"archive":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null},"category":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"post_limit":10,"order_by":"-length","collapse_depth":0},"tag":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null,"tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"avatar":"/img/avatar.png","name":"蔺国防","introduce":"移动应用开发者，历史文学爱好者","icons":[{"class":"iconfont icon-github-fill","link":"https://github.com","tip":"GitHub"},{"class":"iconfont icon-douban-fill","link":"https://douban.com","tip":"豆瓣"},{"class":"iconfont icon-wechat-fill","qrcode":"/img/favicon.png"}]},"page404":{"banner_img":"/img/default.png","banner_img_height":85,"banner_mask_alpha":0.3,"subtitle":"Page not found"},"links":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"items":[{"title":"Fluid Docs","intro":"主题使用指南","link":"https://hexo.fluid-dev.com/docs/","image":"/img/favicon.png"},{"title":"Fluid Repo","intro":"主题 GitHub 仓库","link":"https://github.com/fluid-dev/hexo-theme-fluid","image":"/img/favicon.png"},{"title":"Fluid Example","intro":"主题操作示例","link":"https://hexo.fluid-dev.com/docs/example/","image":"/img/favicon.png"}]}}}},"excerpt":"","more":"<h1 id=\"Key-Value-Observing-Programming-Guide\"><a href=\"#Key-Value-Observing-Programming-Guide\" class=\"headerlink\" title=\"Key-Value Observing Programming Guide\"></a>Key-Value Observing Programming Guide</h1><h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><p>键值观察是一种机制,该机制允许对象接收其他对象特定属性改变的通知.</p>\n<blockquote>\n<p>重要: 为了更好的了解键值观察,您必须理解<a href=\"http://www.jianshu.com/p/7f7360ae8e7b\">键值编码</a></p>\n</blockquote>\n<p>一个简单的例子概述了应用中KVO的作用.假设有一个Person对象与一个Account对象相关,表示这个人在银行的存款账户.一个Person实例可能需要知道何时Account实例属性改变对该账户造成影响.比如收支,或者利率.</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/3340896-51f7b5abd6205136.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"示例\"></p>\n<p>使用KVO,首先确保对象兼容KVO.只要继承自NSObject的对象都是KVO兼容的.然后,必须注册一个观察者Person,观察Account对象实例.Peson发送一个<code>addObserver:forKeyPath:options:context:</code>消息给Account.<br><img src=\"http://upload-images.jianshu.io/upload_images/3340896-2ec2849c4a768671.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"注册观察者\"></p>\n<p>为了接受来自于Account的改变通知,Peson需要实现<code>observeValueForKeyPath:ofObject:change:context</code>方法,所有的观察者都需要实现.一旦注册的KeyPath对应的属性值发生改变,Account将会发送该消息给Person.Person然后基于改变的通知做出相应的响应.</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/3340896-6518b22626ca9474.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"发送改变通知\"></p>\n<p>最后,当不在需要通知时,在对象销毁之前,使用<code>removeObser:forKeyPath:</code> 方法移除观察者.</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/3340896-3eddd2ec631247c1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"移除观察者\"></p>\n<p>不像使用NSNotificationCenter通知那样,KVO没有一个中心对象给所有的观察者提供改变通知.一旦被观察的对象发生改变通知将会直接发送. NSObject提供了KVO的基本实现.</p>\n<hr>\n<h2 id=\"KVO注册\"><a href=\"#KVO注册\" class=\"headerlink\" title=\"KVO注册\"></a>KVO注册</h2><p>必须执行以下步骤来使对象接收一个KVO兼容属性的键值观察通知:</p>\n<ul>\n<li>注册观察者使用<code>addObserver:forKeyPath:options:context:</code></li>\n<li>在观察者内部实现<code>observeValueForKeyPath:ofObject:change:context:</code>方法去接收改变通知消息.</li>\n<li>当不再需要接收消息时,使用<code>removeObserver:forKeyPath:</code>方法取消观察者.至少,在观察者从内存中释放前调用该方法.</li>\n</ul>\n<blockquote>\n<p>重要: 不是所有的类的所有属性都是KVO兼容的.</p>\n</blockquote>\n<h3 id=\"注册观察者\"><a href=\"#注册观察者\" class=\"headerlink\" title=\"注册观察者\"></a>注册观察者</h3><p>一个进行观察的对象首先通过发送一个 <code>addObserver:forKeyPath:options:context: </code>消息注册自己和被观察的对象.来传递作为观察者的自身和观察的属性键路径.观察者额外指定一个可选参数和上下文指针用来管理通知方面的内容.</p>\n<h4 id=\"Options\"><a href=\"#Options\" class=\"headerlink\" title=\"Options\"></a>Options</h4><p>可选项参数,使用<code>|</code>位操作符来指定多个可选项.影响提供给通知的字典内容,该字典包含观察到的变动信息.并且影响通知的生成方式.</p>\n<p>通过指定的<code>NSKeyValueObservingOptionOld</code>获取观察的属性改变前的值.通过<code>NSKeyValueObservingOptionNew</code>获取改变后新的属性值.</p>\n<p>通过<code>NSKeyValueObservingOptionPrior</code>可选项,命令观察对象在属性改变前发送一个通知(另外在改变后也发送一个通知).改变信息的字典通过Key为<code>NSKeyValueChangeNotificationIsPriorKey</code>, Value为<code>NSNumber</code>表示的Yes对象的键值对,标明是一个预改变通知.当需要观察一个属性将要改变时,可以使用该可选项来发送通知.</p>\n<h4 id=\"Context\"><a href=\"#Context\" class=\"headerlink\" title=\"Context\"></a>Context</h4><p>在 <code>addObserver:forKeyPath:options:context:</code>消息中的上下文指针包含在相应通知下,传递回的任意数据.可以指定一个NULL类型的数据并且完全依靠键路径字符串去判断改变通知的来源.但是这种方法可能会造成一些问题.如果一个对象的父类出于某种原因也在观察同样的键路径下的属性.</p>\n<p>一个更安全和更加可扩展的方法是使用上下文确保你接收的通知目的对象是观察者而不是其父类.<br>一个类中的特殊命名的静态变量指针可以组成一个好的上下文. <strong>Listing 1</strong> 展示一个为属性观察命名不同上下文的示例.</p>\n<p><strong>Listing 1</strong> 创建上下文指针</p>\n<pre><code class=\"hljs actionscript\"><span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> *PersonAccountBalanceContext = &amp;PersonAccountBalanceContext;\nstatci <span class=\"hljs-keyword\">void</span> *PersonAccountInterestRateContext = &amp;PersonAccountInterestRateContext;\n</code></pre>\n<p>Listing 2中的实例论证了一个Person实例如何使用给定的上下文指针注册它自己作为Account实例banlance和interestRate属性的观察者</p>\n<p><strong>Listing 2</strong> 注册属性balance和interestRate的观察者</p>\n<pre><code class=\"hljs groovy\">\n- (<span class=\"hljs-keyword\">void</span>)<span class=\"hljs-attr\">registerAsObserverForAccount:</span>(Account *)account&#123;\n    \n    [account <span class=\"hljs-attr\">addObserver:</span> self <span class=\"hljs-attr\">forKeyPath:</span>@<span class=\"hljs-string\">&quot;balance&quot;</span> <span class=\"hljs-attr\">options:</span>(NSKeyValueObseringOptionNew | NSKeyValueObservingOptionOld) <span class=\"hljs-attr\">context:</span> PersonAccountBalanceContext];\n    \n    [account <span class=\"hljs-attr\">addObserver:</span> self <span class=\"hljs-attr\">forKeyPath:</span>@<span class=\"hljs-string\">&quot;interestRate&quot;</span> <span class=\"hljs-attr\">options:</span>(NSKeyValueObservingNew | NSKeyValueObservingOptionOld) <span class=\"hljs-attr\">context:</span>PersonAccountINterestRateContext];\n    \n&#125;\n</code></pre>\n<blockquote>\n<p>注意:键值观察方法 <code>addObserver:forKeyPath:options;context:</code>对观察者,被观察对象,或者上下文,不持有强引用.如果需要的话,应该确保对观察者,被观察对象,和上下文的强引用.</p>\n</blockquote>\n<h3 id=\"接收一个改变的通知\"><a href=\"#接收一个改变的通知\" class=\"headerlink\" title=\"接收一个改变的通知\"></a>接收一个改变的通知</h3><p>当被观察的属性值发生变化时,观察者会接收到一个<code>observeValueForKeyPath:ofObject:change:context:</code> 消息.所有的观察者必须实现该方法.</p>\n<p>被观察对象提供触发通知的键路径,它本身作为关联对象,包含更改细节的字典,以及在该键路径下注册的观察者时,提供的上下文指针.</p>\n<p>更改内容字典入口<code>NSKeyValueChangeKindKey</code>提供发生的更改类型相关信息.如果观察的值已经发生改变,<code>NSKeyValueChangeKindKey</code>入口返回<code>NSKeyValueChangeSetting</code>.通过依赖注册的观察者指定的可选项.在更改内容字典中<code>NSKeyValueChangeOldKey</code>和<code>NSKeyValueChangeNewKey</code>包含观察属性改变前和改变后的值.如果属性是一个对象,则直接提供该值.如果属性是一个标量或者结构体,那么对应的值会包装在一个NSValue对象中.</p>\n<p>如果观察的属性是一个一对多关系.<code>NSKeyValueChangeKindKey</code>入口也会表示是否该集合内的对象被插入,移除,或者替换.分别用<code>NSKeyValueChangeInsertion</code>,<code>NSKeyValueChangeRemoval</code>,<code>NSKeyValueChangeReplacement</code>表示.</p>\n<p>更改内容字典入口<code>NSKeyValueChangeIndexesKey</code>是一个NSIndexSet对象.明确了在集合中更改的元素的所有下标.如果<code>NSKeyValueObservingOptionNew</code>或者<code>NSKeyValueObservingOptionOld</code>被指定作为观察者的可选项.那么<code>NSKeyValueChangeOldKey</code>和<code>NSKeyValueChageNewKey</code>在改变内容字典中用数组来包含关联对象改变前和改变后的值.</p>\n<p>在Listing 3中的例子展示了 <em>Person</em> 观察者 <code>observeValueForKeyPath:ofObject:change:context:</code>方法的实现,并且记录了balance和interestRate属性的改变前后的值.</p>\n<p><strong>Listing 3</strong> <code>observeValueForKeyPath:ofObject:change:context:</code>方法实现</p>\n<pre><code class=\"hljs groovy\">\n- (<span class=\"hljs-keyword\">void</span>)<span class=\"hljs-attr\">observeValueForKeyPath:</span>(NSString *)keyPath <span class=\"hljs-attr\">ofObject:</span>(id)object <span class=\"hljs-attr\">change:</span>(NSDictionary *)change <span class=\"hljs-attr\">context:</span>(<span class=\"hljs-keyword\">void</span> *)context&#123;\n\n    <span class=\"hljs-keyword\">if</span> (context == PersonAccountBalanceContext) &#123;\n        \n        <span class=\"hljs-comment\">// Do something with the balance...</span>\n        \n    &#125;<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (context == PersonAccountInterestRateContext)&#123;\n        \n        <span class=\"hljs-comment\">// Do something with the interest rate...</span>\n        \n    &#125;<span class=\"hljs-keyword\">else</span> &#123;\n        \n        <span class=\"hljs-comment\">// Any unrecognized context must belong to super</span>\n        \n        [<span class=\"hljs-built_in\">super</span> <span class=\"hljs-attr\">observeValueForKeyPath:</span>keyPath <span class=\"hljs-attr\">ofObject:</span>object <span class=\"hljs-attr\">change:</span>change <span class=\"hljs-attr\">context:</span>context];\n        \n    &#125;\n&#125;\n</code></pre>\n<p>如果在注册观察者的时候指定一个NULL上下文,通过比对键路径来判断观察的内容改变情况.如果使用一个单一的上下文给所有观察的键路径,首先测试那个通知的上下文,然后使用键路径来匹配从而判断具体改变的内容.如果给每一个观察的间路径提供一个不同的上下文,正如这里论证的,遗传单一的指针做比较来告诉你是否该通知是发送给这个观察者,并且哪个键路径改变了.</p>\n<p>在任何情况下,观察者如果没有识别上下文(或者在一个单一情况下,任何键路径)通常应该调用父类的<code>obserValueForKeyPath:ofObject:change:context:</code>实现.因为这意味着父类也注册为观察者去接受通知.</p>\n<blockquote>\n<p>注意: 如果一个通知传递到类层级的顶部.NSObject会抛出一个NSInternalInconsistencyException.因为这是一个编程错误: 一个子类没有使用它注册的通知.</p>\n</blockquote>\n<h3 id=\"移除观察者\"><a href=\"#移除观察者\" class=\"headerlink\" title=\"移除观察者\"></a>移除观察者</h3><p>发送给观察者 removeObserver:forKeyPath:context:消息来移除一个键值观察者.需要指定观察的对象.键路径,和上下文.Listing 4中的例子展示了Person移除自己,作为balance和interestRate的观察者.</p>\n<p><strong>Listing 4</strong> 移除balance和interestRate观察者</p>\n<pre><code class=\"hljs groovy\">\n- (<span class=\"hljs-keyword\">void</span>)<span class=\"hljs-attr\">unregisteAsObserverForAccount:</span>(Account *)account&#123;\n    \n    [account <span class=\"hljs-attr\">removeObserver:</span> self <span class=\"hljs-attr\">forKeyPath:</span> @<span class=\"hljs-string\">&quot;balance&quot;</span> <span class=\"hljs-attr\">context:</span> PersonAccountBalanceContext];\n    \n    [account <span class=\"hljs-attr\">removeObserver:</span> self <span class=\"hljs-attr\">forKeyPath:</span> @<span class=\"hljs-string\">&quot;interestRate&quot;</span> <span class=\"hljs-attr\">context:</span> PersonAccountInterestRateContext];\n&#125;\n</code></pre>\n\n<p>接受到一个 removeObserver:forKeyPath:context: 消息后,观察的对象将不再接受指定的键路径和对象的任何 obserValueForKeyPath:ofObject:change:context:消息 </p>\n<p>当正在移除一个观察者时,记住以下几点:</p>\n<ul>\n<li><p>如果移除的观察者未注册,则会导致一个NSRangeExcepion异常.调用<code>removeObserver:forKeyPath:context:</code>方法一次,则有与之相对应的<code>addObserver:forKeyPath:options:context:</code>方法被调用.或者如果不适用的话,把remove方法添加到一个<code>try/catch</code> Block中处理潜在的异常.</p>\n</li>\n<li><p>一个观察者在销毁时不会自动移除自身.被观察的对象会持续发送通知,不会顾及到观察者状态的改变.然而,一个改变通知,或者其他消息发送给一个已经释放的对象,会触发一个内存访问异常.因此需要确保观察者释放前一定要移除观察者.</p>\n</li>\n<li><p>KVO协议没有提供观察者和被观察对象的访问方式.避免相关的错误发生.一个典型的格式是在观察者初始化的时候(比如在 init 或者 viewDidLoad 方法中),注册为观察者,在delloc方法中取消注册.来确保合适的添加和移除信息.并且确保观察者在内存中移除前已经取消注册.</p>\n</li>\n</ul>\n<hr>\n<h2 id=\"注册依赖键\"><a href=\"#注册依赖键\" class=\"headerlink\" title=\"注册依赖键\"></a>注册依赖键</h2><p>在许多情况下，一个属性的值取决于另一个对象中的一个或多个其他属性的值。如果一个属性的值发生改变,那么派生属性的值也被标记为更改.</p>\n<h3 id=\"一对一关系\"><a href=\"#一对一关系\" class=\"headerlink\" title=\"一对一关系\"></a>一对一关系</h3><p>为了自动触发一对一关系属性的通知,应该重写 <code>keyPathsForValuesAffectingValueForKey:</code>方法或者实现一个合适的方法,该方法遵循它定义注册为依赖键的格式.</p>\n<p>例如,一个人完整的姓名取决于firs和last names.返回完整姓名的方法可以向下面方法一样写:</p>\n<pre><code class=\"hljs objectivec\">\n- (<span class=\"hljs-built_in\">NSString</span> *)fullName &#123;\n    \n    <span class=\"hljs-keyword\">return</span> [<span class=\"hljs-built_in\">NSString</span> stringWithFormat:<span class=\"hljs-string\">@&quot;%@ %@&quot;</span>,firstName, lastName];\n&#125;\n</code></pre>\n\n<p>当应用观察fullName属性的时候,只要firstName和lastName中任意一个属性发生改变,都必须通知该应用,因为他们影响fullName属性的值.</p>\n<p>一种解决办法是重写<code>keyPathsForValuesAffectingValueForKey:</code>方法 来指定fullName属性依赖于lastName和firstName属性. <strong>Listing 1</strong>展示了这种依赖的实现.</p>\n<p><strong>Listing 1</strong> <code>keyPathsForValuesAffectingValueForKey: </code>方法的实现示例</p>\n<pre><code class=\"hljs groovy\">+ (NSSet *)<span class=\"hljs-attr\">keyPathsForValuesAffectingValueForKey:</span>(NSString *)key &#123;\n    \n    NSSet *keyPaths = [<span class=\"hljs-built_in\">super</span> <span class=\"hljs-attr\">keyPathsForValuesAffectingValueForKey:</span>key];\n    \n    <span class=\"hljs-keyword\">if</span> ([key <span class=\"hljs-attr\">isEqualToString:</span>@<span class=\"hljs-string\">&quot;fullName&quot;</span>]) &#123;\n        NSArray *affectingKey = @[@<span class=\"hljs-string\">&quot;lastName&quot;</span>, @<span class=\"hljs-string\">&quot;firstName&quot;</span>];\n        keyPaths = [keyPaths <span class=\"hljs-attr\">setByAddingObjectsFromArray:</span>affectingKeys];\n    &#125;\n    <span class=\"hljs-keyword\">return</span> keyPaths;\n&#125;\n</code></pre>\n<p>您的重写通常应该调用super，并返回一个集合，该集合包含了在该集合中产生的任何成员(以便在superclasses中不影响该方法的重写)</p>\n<p>通过实现一个类方法也可以实现相同的结果,该类方法遵循命名约定 keyPathsForValuesAffectiing<Key>,该<Key>是依赖属性的名称(首字母大写).按照<strong>Listing 1</strong>中的模式写一个类方法, 如 <strong>Listing 2</strong> 所展示.</p>\n<p><strong>Listing 2</strong> keyPathsForValuesAffecting<Key> 命名约定的实现示例</p>\n<pre><code class=\"hljs objectivec\">+ (<span class=\"hljs-built_in\">NSSet</span> *)keyPathsForValuesAffectingFullName &#123;\n    \n    <span class=\"hljs-keyword\">return</span> [<span class=\"hljs-built_in\">NSSet</span> setWithObjects:<span class=\"hljs-string\">@&quot;lastName&quot;</span>, <span class=\"hljs-string\">@&quot;firstName&quot;</span>, <span class=\"hljs-literal\">nil</span>];\n&#125;\n</code></pre>\n<p>当使用分类给一个存在的类添加计算属性时,不能重写<code>keyPathsForValuesAffectingValueForKey:</code>方法.因为在分类中不得重写方法.在那种情况下,实现一个keyPathsForValuesAffecting<Key>类方法可以很好地利用该机制.</p>\n<blockquote>\n<p>注意: 一对多关系属性不能使用<code>keyPathsForValuesAffectingValueForKey:</code>方法设定依赖.必须观察一对多集合中每个对象的合适的属性并且通过更新依赖键自身来改变它的值.下面内容展示了处理这种情况的一种策略.</p>\n</blockquote>\n<h3 id=\"一对多关系\"><a href=\"#一对多关系\" class=\"headerlink\" title=\"一对多关系\"></a>一对多关系</h3><p><code>keyValuesForValuesAffectingValueForKey: </code>方法不支持一对多关系属性的键路径.例如,假设有一个department对象,该对象拥有一个一对多关系的属性(employees).employee有一个salary属性.可能该对象希望有一个totalSalary属性来表示employees中所有employee的salary总和.</p>\n<p>下面两种情况下的两种可能的解决方案.</p>\n<p>1.可以使用键值观察注册父类(本例中是Department)作为所有子类(在本例中是Employees)相关属性的观察者.必须添加和移除作为观察者的父类对象.在<code>observeValueForKeyPath:ofObject:change:context:</code>方法中通过更新依赖值来响应变化,就像下面的代码中阐述的一样:</p>\n<pre><code class=\"hljs objectivec\">- (<span class=\"hljs-keyword\">void</span>)observeValueForKeyPath:(<span class=\"hljs-built_in\">NSString</span> *)keyPath ofObject:(<span class=\"hljs-keyword\">id</span>)object change:(<span class=\"hljs-built_in\">NSDictionary</span> *)change context:(<span class=\"hljs-keyword\">void</span> *)context &#123;\n \n    <span class=\"hljs-keyword\">if</span> (context == totalSalaryContext) &#123;\n        [<span class=\"hljs-keyword\">self</span> updateTotalSalary];\n    &#125;\n    <span class=\"hljs-keyword\">else</span>\n    <span class=\"hljs-comment\">// deal with other observations and/or invoke super...</span>\n&#125;\n \n- (<span class=\"hljs-keyword\">void</span>)updateTotalSalary &#123;\n    [<span class=\"hljs-keyword\">self</span> setTotalSalary:[<span class=\"hljs-keyword\">self</span> valueForKeyPath:<span class=\"hljs-string\">@&quot;employees.@sum.salary&quot;</span>]];\n&#125;\n \n- (<span class=\"hljs-keyword\">void</span>)setTotalSalary:(<span class=\"hljs-built_in\">NSNumber</span> *)newTotalSalary &#123;\n \n    <span class=\"hljs-keyword\">if</span> (totalSalary != newTotalSalary) &#123;\n        [<span class=\"hljs-keyword\">self</span> willChangeValueForKey:<span class=\"hljs-string\">@&quot;totalSalary&quot;</span>];\n        _totalSalary = newTotalSalary;\n        [<span class=\"hljs-keyword\">self</span> didChangeValueForKey:<span class=\"hljs-string\">@&quot;totalSalary&quot;</span>];\n    &#125;\n&#125;\n \n- (<span class=\"hljs-built_in\">NSNumber</span> *)totalSalary &#123;\n    <span class=\"hljs-keyword\">return</span> _totalSalary;\n&#125;</code></pre>\n<p>2.如果您使用的是Core Data，您可以将应用程序的通知中心注册为其托管对象上下文的观察者。托管对象应以类似于键值观察的方式，对子对象发布的相关更改通知作出响应。</p>\n<hr>\n<h2 id=\"键值观察实现细节\"><a href=\"#键值观察实现细节\" class=\"headerlink\" title=\"键值观察实现细节\"></a>键值观察实现细节</h2><p>自动键值观察使用一种叫做 isa-swizzling 的技术来实现.</p>\n<p>isa 指针,作为建议的名称,指向对象类.该类持有一个分配表.这个分配表包含了实例方法的指针,以及其他数据.</p>\n<p>当注册的观察者观察一个对象的某个属性时,被观察对象的isa指针被修改,指向一个媒介类,而不是对象类的真正isa指针.所以isa指针不必映射到实际的类实例.</p>\n<p>不应该依靠isa指针来判断类的成员关系.而应该使用类方法去判断一个对象实例的类.</p>\n<hr>\n<h1 id=\"NSKeyValueObserving\"><a href=\"#NSKeyValueObserving\" class=\"headerlink\" title=\"NSKeyValueObserving\"></a>NSKeyValueObserving</h1><p>一个非正式协议,该协议内容为对象接受其他对象指定属性改变的通知.</p>\n<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p>您可以观察任何对象属性.包括单一属性,一对一关系属性,一对多关系属性.一对多关系属性的观察者被告知改变的属性类型—以及相关的对象.</p>\n<p>NSObject提供一个键值观察协议的实现.该实现提供对所有对象的自动观察能力.您可以通过禁用自动观察者通知和使用该协议中的方法实现手动通知来进一步优化通知。</p>\n<h2 id=\"Topics\"><a href=\"#Topics\" class=\"headerlink\" title=\"Topics\"></a>Topics</h2><h3 id=\"改变通知\"><a href=\"#改变通知\" class=\"headerlink\" title=\"改变通知\"></a>改变通知</h3><pre><code class=\"hljs swift\"><span class=\"hljs-comment\">/**</span>\n<span class=\"hljs-comment\"> 当观察对象的指定键路径下的值发生变化时,通知观察者.</span>\n<span class=\"hljs-comment\"> </span>\n<span class=\"hljs-comment\"> keyPath: 观察对象值已经改变的对应键路径.</span>\n<span class=\"hljs-comment\"> object : 观察对象.</span>\n<span class=\"hljs-comment\"> change : 一个字典用来描述相关对象指定键路径下属性值已经形成的变化.</span>\n<span class=\"hljs-comment\"> context: 提供给注册观察者的值.</span>\n<span class=\"hljs-comment\"> </span>\n<span class=\"hljs-comment\"> 讨论:</span>\n<span class=\"hljs-comment\"> 对一个对象来说,当它开始发送键路径下值改变通知时,您发送给它一个 addObserver(_:forKeyPath:options:context:)消息,命名应该接受该消息的观察者.当您观察结束时,在观察对象销毁前,您发送给观察对象一个removeObserver(_:forKeyPath:)或者remmoverObserver(_:forKeyPath:context:)消息去取消观察者,并且停止发送改变通知的消息.</span>\n<span class=\"hljs-comment\"></span>\n<span class=\"hljs-comment\"> */</span> \n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">observeValue</span><span class=\"hljs-params\">(forKeyPath: String?, of object: <span class=\"hljs-keyword\">Any</span>?, change: [NSKeyValueChangeKey : <span class=\"hljs-keyword\">Any</span>]?, context: UnsafeMutableRawPointer?)</span></span>\n</code></pre>\n\n<h3 id=\"注册观察\"><a href=\"#注册观察\" class=\"headerlink\" title=\"注册观察\"></a>注册观察</h3><pre><code class=\"hljs swift\"><span class=\"hljs-comment\">/**</span>\n<span class=\"hljs-comment\"> 注册观察者接受键路径相关对象的KVO通知消息</span>\n<span class=\"hljs-comment\">  </span>\n<span class=\"hljs-comment\"> observer: 注册KVO通知的对象.观察者必须实现键值观察方法 observeValue(forKeyPath:of:change:context:)</span>\n<span class=\"hljs-comment\"> keyPath: 被观察对象的键路径.该参数不能为nil</span>\n<span class=\"hljs-comment\"> options: 一个在NSKeyValueObservingOptions 值的组合. </span>\n<span class=\"hljs-comment\"> context: 在obserValue(forKeyPath:of:change:context:)方法中传递给观察者的任意数据</span>\n<span class=\"hljs-comment\"> </span>\n<span class=\"hljs-comment\"> 讨论:</span>\n<span class=\"hljs-comment\"> 不管是观察者还是被观察对象,引用计数都不会加一.调用该方法的对象必须调用removerObserver(_:forKeyPath:)或者removeObserver(_:forKeyPathL:context:)方法去移除观察者.</span>\n<span class=\"hljs-comment\"> </span>\n<span class=\"hljs-comment\"> */</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">addObserver</span><span class=\"hljs-params\">(<span class=\"hljs-number\">_</span> observer: NSObject, forKeyPath keyPath: String, options: NSKeyValueObservingOptions = [], context: UnsafeMutableRawPointer?)</span></span>\n\n<span class=\"hljs-comment\">/**</span>\n<span class=\"hljs-comment\"> 对一个之前没有注册观察者的对象调用该方法是错误的.</span>\n<span class=\"hljs-comment\"> </span>\n<span class=\"hljs-comment\"> 确保注册的观察者在销毁之前调用该方法.</span>\n<span class=\"hljs-comment\"></span>\n<span class=\"hljs-comment\"> */</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">removeObserver</span><span class=\"hljs-params\">(<span class=\"hljs-number\">_</span> observer: NSObject, forKeyPath keyPath: String)</span></span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">removeObserver</span><span class=\"hljs-params\">(NSObject, forKeyPath: String, context: UnsafeMutableRawPointer?)</span></span>\n</code></pre>\n\n<h3 id=\"通知观察对象的变化\"><a href=\"#通知观察对象的变化\" class=\"headerlink\" title=\"通知观察对象的变化\"></a>通知观察对象的变化</h3><pre><code class=\"hljs swift\">\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">willChangeValue</span><span class=\"hljs-params\">(forKey: String)</span></span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">didChangeValue</span><span class=\"hljs-params\">(forKey: String)</span></span>\n\n<span class=\"hljs-comment\">//观察对象数组类型时,调用该方法来通知观察对象的变化</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">willChange</span><span class=\"hljs-params\">(NSKeyValueChange, valuesAt: IndexSet, forKey: String)</span></span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">didChange</span><span class=\"hljs-params\">(NSKeyValueChange, valuesAt: IndexSet, forKey: String)</span></span>\n\n<span class=\"hljs-comment\">//观察对象Set类型时,调用该方法来通知观察对象的变化</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">willChangeValue</span><span class=\"hljs-params\">(forKey: String, withSetMutation: NSKeyValueSetMutationKind, using: Set&lt;AnyHashable&gt;)</span></span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">didChangeValue</span><span class=\"hljs-params\">(forKey: String, withSetMutation: NSKeyValueSetMutationKind, using: Set&lt;AnyHashable&gt;)</span></span>\n</code></pre>\n\n<h3 id=\"自定义观察\"><a href=\"#自定义观察\" class=\"headerlink\" title=\"自定义观察\"></a>自定义观察</h3><pre><code class=\"hljs go\"><span class=\"hljs-comment\">//返回一个布尔值标明是否观察对象自动支持KVO.</span>\nclass <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">automaticallyNotifiesObservers</span><span class=\"hljs-params\">(forKey: String)</span></span>\n\n<span class=\"hljs-comment\">//返回一个键路径集合,该集合内键路径对应的值影响指定key的值.比如计算属性</span>\nclass <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">keyPathsForValuesAffectingValue</span><span class=\"hljs-params\">(forKey: String)</span></span>\n\n<span class=\"hljs-comment\">//返回一个指针，该指针标识所有在被观察对象注册的观察者的信息。</span>\n<span class=\"hljs-keyword\">var</span> observationInfo: UnsafeMutableRawPointer?</code></pre>\n<pre><code class=\"hljs routeros\">protocol NSKeyValueObservingCustomization\n\nType methods \n\n  required\n  static func automaticallyNotifiesObservers(<span class=\"hljs-keyword\">for</span>: AnyKeyPath)\n\n  required\n  static func keyPathsAffectingValue(<span class=\"hljs-keyword\">for</span>: AnyKeyPath)\n\nRelationships\n继承自  NSObjectProtocol</code></pre>\n\n<h3 id=\"常量\"><a href=\"#常量\" class=\"headerlink\" title=\"常量\"></a>常量</h3><pre><code class=\"hljs crystal\">\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">NSKeyValueObservation</span></span>\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">NSKeyValueObservedChange</span></span>\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title\">NSKeyValueChange</span>&#123;</span>\n    \n    <span class=\"hljs-keyword\">case</span> setting,\n    <span class=\"hljs-keyword\">case</span> insertion,\n    <span class=\"hljs-keyword\">case</span> removal,\n    <span class=\"hljs-keyword\">case</span> replacement\n&#125;\n\n--------------------------------------------------------------\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">NSKeyValueObservingOptions</span> </span>\n\n<span class=\"hljs-comment\">#### Constants</span>\n\n    static var <span class=\"hljs-symbol\">new:</span> NSKeyValueObservingOptions\n\n    static var <span class=\"hljs-symbol\">old:</span> NSKeyValueObservingOptions\n\n    static var <span class=\"hljs-symbol\">initial:</span> NSKeyValueObservingOptions\n\n    static var <span class=\"hljs-symbol\">prior:</span> NSkeyValueObservingOptions\n\n--------------------------------------------------------------\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">NSKeyValueChangeKey</span></span>\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title\">NSKeyValueSetMutationKind</span></span></code></pre>\n\n<h2 id=\"KVO原理简析\"><a href=\"#KVO原理简析\" class=\"headerlink\" title=\"KVO原理简析\"></a>KVO原理简析</h2><ul>\n<li>当一个object有观察者时，动态创建这个object的类的子类</li>\n<li>对于每个被观察的property，重写其set方法</li>\n<li>在重写的set方法中调用<code> willChangeValueForKey:</code>和 <code>didChangeValueForKey:</code>通知观察者</li>\n<li>当一个property没有观察者时，删除重写的方法</li>\n<li>当没有observer观察任何一个property时，删除动态创建的子类</li>\n</ul>\n<p>详细的分析可以去看sunyxx的<a href=\"http://blog.sunnyxx.com/2014/03/09/objc_kvo_secret/\">objc kvo简单探索</a></p>\n<h2 id=\"GitHub优秀开源\"><a href=\"#GitHub优秀开源\" class=\"headerlink\" title=\"GitHub优秀开源\"></a>GitHub优秀开源</h2><p>在项目中使用KVO的时候要时刻谨记移除观察者,否则会抛出异常.这样不经容易出错,而且项目代码看起来也不够漂亮. <strong>facebook</strong>提供了一个很好的解决方案.在该第三方库中,不用再担心移除观察者的问题,代码整体上也比以前更叫干净漂亮.仅需要在项目 <strong>PCH</strong> 文件中 <code>#import &lt;KVOController/NSObject+FBKVOController.h&gt;</code>,这样会给每个<strong>NSObject</strong> 对象自动添加KVOController属性,然后直接使用就OK了</p>\n<pre><code class=\"hljs groovy\">[self.KVOController <span class=\"hljs-attr\">observe:</span>clock <span class=\"hljs-attr\">keyPath:</span>@<span class=\"hljs-string\">&quot;date&quot;</span> <span class=\"hljs-attr\">options:</span>NSKeyValueObservingOptionInitial|NSKeyValueObservingOptionNew <span class=\"hljs-attr\">action:</span><span class=\"hljs-meta\">@selector</span>(<span class=\"hljs-attr\">updateClockWithDateChange:</span>)];\n</code></pre>\n<p>具体使用请看 <a href=\"https://github.com/facebook/KVOController\">KVOController</a></p>\n<h1 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h1><p><a href=\"https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/KeyValueObserving/KeyValueObserving.html#//apple_ref/doc/uid/10000177-BCICJDHA\">Key-Value Observing Programming Guide</a></p>\n<p><a href=\"https://developer.apple.com/documentation/foundation/notifications/nskeyvalueobserving\">NSKeyValueObserving</a></p>\n<p><a href=\"http://blog.sunnyxx.com/2014/03/09/objc_kvo_secret/\">objec kvo简单探索</a></p>\n"},{"title":"PhotoKit","date":"2019-03-13T03:13:00.000Z","_content":"![Photos.png](https://upload-images.jianshu.io/upload_images/3340896-b7a0956c45c82900.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n### 介绍\n苹果的PhotoKit,是提供给开发者的对本地相册库的和iCloud 相册的资源进行操作的API,所有资源以PHAsset的形式来提供给PhotoKit使用,同时本地的图片库和iCloud图片的变动通知,会发送给PhotoKit;同时,PhotoKit也可以通过 **变更请求** (编辑请求,改变请求,删除请求...)来对资源进行变更.\n\n### 资源的操作\n```\nPHPhotoLibrary.shared().register(self); // viewDidLoad 执行\nPHPhotoLibrary.shared().unregisterChangeObserver(self);//deinit 方法中执行\n\nextension MasterViewController: PHPhotoLibraryChangeObserver {//资源变动后的通知\n    /// - Tag: RespondToChanges\n    func photoLibraryDidChange(_ changeInstance: PHChange) {\n        \n        // Change notifications may originate from a background queue.\n        // Re-dispatch to the main queue before acting on the change,\n        // so you can update the UI.\n        DispatchQueue.main.sync {\n        }\n    }\n}\n\n```\n\n### 资源的查找\n排序和筛选条件我们可以根据 [PHFetchOptions](https://developer.apple.com/documentation/photokit/phfetchoptions)里面的 `predicate` 和 `sortDescriptors` 属性来设置, 里面也包含支持 **predicate** 和 **sort** 的 keys, 可以参考 [NSPredicate](https://nshipster.cn/nspredicate/) 和  [NSSortDescriptor](https://nshipster.cn/nssortdescriptor/) 来了解更多筛选和排序条件的设置.\n```\nPHAssetCollection.fetchAssetCollections(with: .smartAlbum, subtype: .albumRegular, options: nil)//智能相册\nPHCollectionList.fetchTopLevelUserCollections(with: nil)//用户相册\nPHAsset.fetchAssets(with: phtotfectchOptions)//图片资源\n\n```\n\n### 资源的变更请求\n```\n//Asynchronously runs a block that requests changes to be performed in the photo library.  异步请求\nfunc  performChanges(_:completionHandler:)\n//Synchronously runs a block that requests changes to be performed in the photo library.  同步请求\nfunc performChangesAndWait(_ changeBlock: @escaping () -> Void) throws\n```\n\n### Album的操作(增加,修改,删除)\n```\n//增加相册\nfunc addAlbum() {\n        PHPhotoLibrary.shared().performChanges({\n            let assetCollectionRequest = PHCollectionListChangeRequest.creationRequestForCollectionList(withTitle: \"title\");\n            self.identifier =  assetCollectionRequest.placeholderForCreatedCollectionList.localIdentifier;\n        }) { (ret, error) in\n            if ret {\n                if let id = self.identifier {\n                    let collections = PHCollectionList.fetchCollectionLists(withLocalIdentifiers: [id], options: nil)\n                    print(\"\\(collections)\");\n                }\n            }\n        }\n    }\n    \n//删除相册\n func deleteAlbum() {\n        let fecthOptions = PHFetchOptions();\n        let predicate = NSPredicate.init(format: \"localizedTitle == 'title'\");\n        fecthOptions.predicate = predicate;\n        let titleList = PHCollectionList.fetchCollectionLists(with: .folder, subtype: .regularFolder, options: fecthOptions);\n        \n        PHPhotoLibrary.shared().performChanges({\n            PHCollectionListChangeRequest.deleteCollectionLists(titleList);\n        }) { (ret, error) in\n            if ret {\n                print(\"删除成功\");\n            }\n        }\n    }\n//修改相册\n  func modifyAlbum() {\n        let fecthOptions = PHFetchOptions();\n        let predicate = NSPredicate.init(format: \"localizedTitle == 'title'\");\n        fecthOptions.predicate = predicate;\n        let titleList = PHCollectionList.fetchCollectionLists(with: .folder, subtype: .regularFolder, options: fecthOptions);\n        PHPhotoLibrary.shared().performChanges({\n            \n            if let collection = titleList.firstObject {\n                let modifyRequest = PHCollectionListChangeRequest(for: collection);\n                modifyRequest?.title = \"modify album\";\n            }\n        }) { (ret, error) in\n            if ret {\n                print(\"修改成功\");\n            }\n        }\n   }\n```\n###  Asset的操作\n```\n   //增加\n   func creationRequestForAsset(from image: UIImage) -> Self \n   func creationRequestForAssetFromImage(atFileURL fileURL: URL) -> Self?\n   func creationRequestForAssetFromVideo(atFileURL fileURL: URL) -> Self?\n   //删除\n   func deleteAssets(_ assets: NSFastEnumeration)\n   //修改\n  func requestContentEditingInput(with options: PHContentEditingInputRequestOptions?, completionHandler: @escaping (PHContentEditingInput?, [AnyHashable : Any]) -> Void) -> PHContentEditingInputRequestID\n  func cancelContentEditingInputRequest(_ requestID: PHContentEditingInputRequestID)\n\n   // MARK: UI Actions\n    /// - Tag: EditAlert\n    @IBAction func editAsset(_ sender: UIBarButtonItem) {\n        // Use a UIAlertController to display editing options to the user.\n        let alertController = UIAlertController(title: nil, message: nil, preferredStyle: .actionSheet)\n        #if os(iOS)\n        alertController.modalPresentationStyle = .popover\n        if let popoverController = alertController.popoverPresentationController {\n            popoverController.barButtonItem = sender\n            popoverController.permittedArrowDirections = .up\n        }\n        #endif\n        \n        // Add a Cancel action to dismiss the alert without doing anything.\n        alertController.addAction(UIAlertAction(title: NSLocalizedString(\"Cancel\", comment: \"\"),\n                                                style: .cancel, handler: nil))\n        // Allow editing only if the PHAsset supports edit operations.\n        if asset.canPerform(.content) {\n            // Add actions for some canned filters.\n            alertController.addAction(UIAlertAction(title: NSLocalizedString(\"Sepia Tone\", comment: \"\"),\n                                                    style: .default, handler: getFilter(\"CISepiaTone\")))\n            alertController.addAction(UIAlertAction(title: NSLocalizedString(\"Chrome\", comment: \"\"),\n                                                    style: .default, handler: getFilter(\"CIPhotoEffectChrome\")))\n            \n            // Add actions to revert any edits that have been made to the PHAsset.\n            alertController.addAction(UIAlertAction(title: NSLocalizedString(\"Revert\", comment: \"\"),\n                                                    style: .default, handler: revertAsset))\n        }\n        // Present the UIAlertController.\n        present(alertController, animated: true)\n    }\n    #if os(tvOS)\n    @IBAction func playLivePhoto(_ sender: Any) {\n        livePhotoView.startPlayback(with: .full)\n    }\n    #endif\n    /// - Tag: PlayVideo\n    @IBAction func play(_ sender: AnyObject) {\n        if playerLayer != nil {\n            // The app already created an AVPlayerLayer, so tell it to play.\n            playerLayer.player!.play()\n        } else {\n            let options = PHVideoRequestOptions()\n            options.isNetworkAccessAllowed = true\n            options.deliveryMode = .automatic\n            options.progressHandler = { progress, _, _, _ in\n                // The handler may originate on a background queue, so\n                // re-dispatch to the main queue for UI work.\n                DispatchQueue.main.sync {\n                    self.progressView.progress = Float(progress)\n                }\n            }\n            // Request an AVPlayerItem for the displayed PHAsset.\n            // Then configure a layer for playing it.\n            PHImageManager.default().requestPlayerItem(forVideo: asset, options: options, resultHandler: { playerItem, info in\n                DispatchQueue.main.sync {\n                    guard self.playerLayer == nil else { return }\n                    \n                    // Create an AVPlayer and AVPlayerLayer with the AVPlayerItem.\n                    let player = AVPlayer(playerItem: playerItem)\n                    let playerLayer = AVPlayerLayer(player: player)\n                    \n                    // Configure the AVPlayerLayer and add it to the view.\n                    playerLayer.videoGravity = AVLayerVideoGravity.resizeAspect\n                    playerLayer.frame = self.view.layer.bounds\n                    self.view.layer.addSublayer(playerLayer)\n                    \n                    player.play()\n                    \n                    // Cache the player layer by reference, so you can remove it later.\n                    self.playerLayer = playerLayer\n                }\n            })\n        }\n    }\n    /// - Tag: RemoveAsset\n    @IBAction func removeAsset(_ sender: AnyObject) {\n        let completion = { (success: Bool, error: Error?) -> Void in\n            if success {\n                PHPhotoLibrary.shared().unregisterChangeObserver(self)\n                DispatchQueue.main.sync {\n                    _ = self.navigationController!.popViewController(animated: true)\n                }\n            } else {\n                print(\"Can't remove the asset: \\(String(describing: error))\")\n            }\n        }\n        if assetCollection != nil {\n            // Remove the asset from the selected album.\n            PHPhotoLibrary.shared().performChanges({\n                let request = PHAssetCollectionChangeRequest(for: self.assetCollection)!\n                request.removeAssets([self.asset] as NSArray)\n            }, completionHandler: completion)\n        } else {\n            // Delete the asset from the photo library.\n            PHPhotoLibrary.shared().performChanges({\n                PHAssetChangeRequest.deleteAssets([self.asset] as NSArray)\n            }, completionHandler: completion)\n        }\n    }\n    /// - Tag: MarkFavorite\n    @IBAction func toggleFavorite(_ sender: UIBarButtonItem) {\n        PHPhotoLibrary.shared().performChanges({\n            let request = PHAssetChangeRequest(for: self.asset)\n            request.isFavorite = !self.asset.isFavorite\n        }, completionHandler: { success, error in\n            if success {\n                DispatchQueue.main.sync {\n                    sender.title = self.asset.isFavorite ? \"♥︎\" : \"♡\"\n                }\n            } else {\n                print(\"Can't mark the asset as a Favorite: \\(String(describing: error))\")\n            }\n        })\n    }\n    \n    // MARK: Image display\n    \n    var targetSize: CGSize {\n        let scale = UIScreen.main.scale\n        return CGSize(width: imageView.bounds.width * scale, height: imageView.bounds.height * scale)\n    }\n    \n    func updateImage() {\n        if asset.mediaSubtypes.contains(.photoLive) {\n            updateLivePhoto()\n        } else {\n            updateStaticImage()\n        }\n    }\n    \n    func updateLivePhoto() {\n        // Prepare the options to pass when fetching the live photo.\n        let options = PHLivePhotoRequestOptions()\n        options.deliveryMode = .highQualityFormat\n        options.isNetworkAccessAllowed = true\n        options.progressHandler = { progress, _, _, _ in\n            // The handler may originate on a background queue, so\n            // re-dispatch to the main queue for UI work.\n            DispatchQueue.main.sync {\n                self.progressView.progress = Float(progress)\n            }\n        }\n        \n        // Request the live photo for the asset from the default PHImageManager.\n        PHImageManager.default().requestLivePhoto(for: asset, targetSize: targetSize, contentMode: .aspectFit, options: options,\n                                                  resultHandler: { livePhoto, info in\n                                                    // PhotoKit finishes the request, so hide the progress view.\n                                                    self.progressView.isHidden = true\n                                                    \n                                                    // Show the Live Photo view.\n                                                    guard let livePhoto = livePhoto else { return }\n                                                    \n                                                    // Show the Live Photo.\n                                                    self.imageView.isHidden = true\n                                                    self.livePhotoView.isHidden = false\n                                                    self.livePhotoView.livePhoto = livePhoto\n                                                    \n                                                    if !self.isPlayingHint {\n                                                        // Play back a short section of the Live Photo, similar to the Photos share sheet.\n                                                        self.isPlayingHint = true\n                                                        self.livePhotoView.startPlayback(with: .hint)\n                                                    }\n        })\n    }\n    \n    func updateStaticImage() {\n        // Prepare the options to pass when fetching the (photo, or video preview) image.\n        let options = PHImageRequestOptions()\n        options.deliveryMode = .highQualityFormat\n        options.isNetworkAccessAllowed = true\n        options.progressHandler = { progress, _, _, _ in\n            // The handler may originate on a background queue, so\n            // re-dispatch to the main queue for UI work.\n            DispatchQueue.main.sync {\n                self.progressView.progress = Float(progress)\n            }\n        }\n        \n        PHImageManager.default().requestImage(for: asset, targetSize: targetSize, contentMode: .aspectFit, options: options,\n                                              resultHandler: { image, _ in\n                                                // PhotoKit finished the request, so hide the progress view.\n                                                self.progressView.isHidden = true\n                                                \n                                                // If the request succeeded, show the image view.\n                                                guard let image = image else { return }\n                                                \n                                                // Show the image.\n                                                self.livePhotoView.isHidden = true\n                                                self.imageView.isHidden = false\n                                                self.imageView.image = image\n        })\n    }\n    \n    // MARK: Asset editing\n    \n    func revertAsset(sender: UIAlertAction) {\n        PHPhotoLibrary.shared().performChanges({\n            let request = PHAssetChangeRequest(for: self.asset)\n            request.revertAssetContentToOriginal()\n        }, completionHandler: { success, error in\n            if !success { print(\"Can't revert the asset: \\(String(describing: error))\") }\n        })\n    }\n    \n    // Returns a filter-applier function for the named filter.\n    // Use the function as a handler for a UIAlertAction object.\n    /// - Tag: ApplyFilter\n    func getFilter(_ filterName: String) -> (UIAlertAction) -> Void {\n        func applyFilter(_: UIAlertAction) {\n            // Set up a handler to handle prior edits.\n            let options = PHContentEditingInputRequestOptions()\n            options.canHandleAdjustmentData = {\n                $0.formatIdentifier == self.formatIdentifier && $0.formatVersion == self.formatVersion\n            }\n            \n            // Prepare for editing.\n            asset.requestContentEditingInput(with: options, completionHandler: { input, info in\n                guard let input = input\n                    else { fatalError(\"Can't get the content-editing input: \\(info)\") }\n                \n                // This handler executes on the main thread; dispatch to a background queue for processing.\n                DispatchQueue.global(qos: .userInitiated).async {\n                    \n                    // Create adjustment data describing the edit.\n                    let adjustmentData = PHAdjustmentData(formatIdentifier: self.formatIdentifier,\n                                                          formatVersion: self.formatVersion,\n                                                          data: filterName.data(using: .utf8)!)\n                    \n                    // Create content editing output, write the adjustment data.\n                    let output = PHContentEditingOutput(contentEditingInput: input)\n                    output.adjustmentData = adjustmentData\n                    \n                    // Select a filtering function for the asset's media type.\n                    let applyFunc: (String, PHContentEditingInput, PHContentEditingOutput, @escaping () -> Void) -> Void\n                    if self.asset.mediaSubtypes.contains(.photoLive) {\n                        applyFunc = self.applyLivePhotoFilter\n                    } else if self.asset.mediaType == .image {\n                        applyFunc = self.applyPhotoFilter\n                    } else {\n                        applyFunc = self.applyVideoFilter\n                    }\n                    \n                    // Apply the filter.\n                    applyFunc(filterName, input, output, {\n                        // When the app finishes rendering the filtered result, commit the edit to the photo library.\n                        PHPhotoLibrary.shared().performChanges({\n                            let request = PHAssetChangeRequest(for: self.asset)\n                            request.contentEditingOutput = output\n                        }, completionHandler: { success, error in\n                            if !success { print(\"Can't edit the asset: \\(String(describing: error))\") }\n                        })\n                    })\n                }\n            })\n        }\n        return applyFilter\n    }\n    \n    func applyPhotoFilter(_ filterName: String, input: PHContentEditingInput, output: PHContentEditingOutput, completion: () -> Void) {\n        \n        // Load the full-size image.\n        guard let inputImage = CIImage(contentsOf: input.fullSizeImageURL!)\n            else { fatalError(\"Can't load the input image to edit.\") }\n        \n        // Apply the filter.\n        let outputImage = inputImage\n            .oriented(forExifOrientation: input.fullSizeImageOrientation)\n            .applyingFilter(filterName, parameters: [:])\n        \n        // Write the edited image as a JPEG.\n        do {\n            try self.ciContext.writeJPEGRepresentation(of: outputImage,\n                                                       to: output.renderedContentURL, colorSpace: inputImage.colorSpace!, options: [:])\n        } catch let error {\n            fatalError(\"Can't apply the filter to the image: \\(error).\")\n        }\n        completion()\n    }\n    \n    func applyLivePhotoFilter(_ filterName: String, input: PHContentEditingInput, output: PHContentEditingOutput, completion: @escaping () -> Void) {\n        \n        // This app filters assets only for output. In an app that previews\n        // filters while editing, create a livePhotoContext early and reuse it\n        // to render both for previewing and for final output.\n        guard let livePhotoContext = PHLivePhotoEditingContext(livePhotoEditingInput: input)\n            else { fatalError(\"Can't fetch the Live Photo to edit.\") }\n        \n        livePhotoContext.frameProcessor = { frame, _ in\n            return frame.image.applyingFilter(filterName, parameters: [:])\n        }\n        livePhotoContext.saveLivePhoto(to: output) { success, error in\n            if success {\n                completion()\n            } else {\n                print(\"Can't output the Live Photo.\")\n            }\n        }\n    }\n    \n    func applyVideoFilter(_ filterName: String, input: PHContentEditingInput, output: PHContentEditingOutput, completion: @escaping () -> Void) {\n        // Load the AVAsset to process from input.\n        guard let avAsset = input.audiovisualAsset\n            else { fatalError(\"Can't fetch the AVAsset to edit.\") }\n        \n        // Set up a video composition to apply the filter.\n        let composition = AVVideoComposition(\n            asset: avAsset,\n            applyingCIFiltersWithHandler: { request in\n                let filtered = request.sourceImage.applyingFilter(filterName, parameters: [:])\n                request.finish(with: filtered, context: nil)\n        })\n        \n        // Export the video composition to the output URL.\n        guard let export = AVAssetExportSession(asset: avAsset, presetName: AVAssetExportPresetHighestQuality)\n            else { fatalError(\"Can't configure the AVAssetExportSession.\") }\n        export.outputFileType = AVFileType.mov\n        export.outputURL = output.renderedContentURL\n        export.videoComposition = composition\n        export.exportAsynchronously(completionHandler: completion)\n    }\n\n// MARK: PHPhotoLibraryChangeObserver\nextension AssetViewController: PHPhotoLibraryChangeObserver {\n    func photoLibraryDidChange(_ changeInstance: PHChange) {\n        // The call might come on any background queue. Re-dispatch to the main queue to handle it.\n        DispatchQueue.main.sync {\n            // Check if there are changes to the displayed asset.\n            guard let details = changeInstance.changeDetails(for: asset) else { return }\n            \n            // Get the updated asset.\n            asset = details.objectAfterChanges\n            \n            // If the asset's content changes, update the image and stop any video playback.\n            if details.assetContentChanged {\n                updateImage()\n                \n                playerLayer?.removeFromSuperlayer()\n                playerLayer = nil\n            }\n        }\n    }\n}\n\n// MARK: PHLivePhotoViewDelegate\nextension AssetViewController: PHLivePhotoViewDelegate {\n    func livePhotoView(_ livePhotoView: PHLivePhotoView, willBeginPlaybackWith playbackStyle: PHLivePhotoViewPlaybackStyle) {\n        isPlayingHint = (playbackStyle == .hint)\n    }\n    \n    func livePhotoView(_ livePhotoView: PHLivePhotoView, didEndPlaybackWith playbackStyle: PHLivePhotoViewPlaybackStyle) {\n        isPlayingHint = (playbackStyle == .hint)\n    }\n}\n\n```\n\n## 参考资料\n[Browsing and Modifying Photo Albums](https://developer.apple.com/documentation/photokit/browsing_and_modifying_photo_albums)\n[NSPredicate](https://nshipster.cn/nspredicate/)\n[NSSortDescriptor](https://nshipster.cn/nssortdescriptor/)\n","source":"_posts/iOS/PhotoKit.md","raw":"---\ntitle:  PhotoKit \ndate:  2019-03-13 11:13\ncategories:\n- iOS\ntags: \n- PhotoKit \n---\n![Photos.png](https://upload-images.jianshu.io/upload_images/3340896-b7a0956c45c82900.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n### 介绍\n苹果的PhotoKit,是提供给开发者的对本地相册库的和iCloud 相册的资源进行操作的API,所有资源以PHAsset的形式来提供给PhotoKit使用,同时本地的图片库和iCloud图片的变动通知,会发送给PhotoKit;同时,PhotoKit也可以通过 **变更请求** (编辑请求,改变请求,删除请求...)来对资源进行变更.\n\n### 资源的操作\n```\nPHPhotoLibrary.shared().register(self); // viewDidLoad 执行\nPHPhotoLibrary.shared().unregisterChangeObserver(self);//deinit 方法中执行\n\nextension MasterViewController: PHPhotoLibraryChangeObserver {//资源变动后的通知\n    /// - Tag: RespondToChanges\n    func photoLibraryDidChange(_ changeInstance: PHChange) {\n        \n        // Change notifications may originate from a background queue.\n        // Re-dispatch to the main queue before acting on the change,\n        // so you can update the UI.\n        DispatchQueue.main.sync {\n        }\n    }\n}\n\n```\n\n### 资源的查找\n排序和筛选条件我们可以根据 [PHFetchOptions](https://developer.apple.com/documentation/photokit/phfetchoptions)里面的 `predicate` 和 `sortDescriptors` 属性来设置, 里面也包含支持 **predicate** 和 **sort** 的 keys, 可以参考 [NSPredicate](https://nshipster.cn/nspredicate/) 和  [NSSortDescriptor](https://nshipster.cn/nssortdescriptor/) 来了解更多筛选和排序条件的设置.\n```\nPHAssetCollection.fetchAssetCollections(with: .smartAlbum, subtype: .albumRegular, options: nil)//智能相册\nPHCollectionList.fetchTopLevelUserCollections(with: nil)//用户相册\nPHAsset.fetchAssets(with: phtotfectchOptions)//图片资源\n\n```\n\n### 资源的变更请求\n```\n//Asynchronously runs a block that requests changes to be performed in the photo library.  异步请求\nfunc  performChanges(_:completionHandler:)\n//Synchronously runs a block that requests changes to be performed in the photo library.  同步请求\nfunc performChangesAndWait(_ changeBlock: @escaping () -> Void) throws\n```\n\n### Album的操作(增加,修改,删除)\n```\n//增加相册\nfunc addAlbum() {\n        PHPhotoLibrary.shared().performChanges({\n            let assetCollectionRequest = PHCollectionListChangeRequest.creationRequestForCollectionList(withTitle: \"title\");\n            self.identifier =  assetCollectionRequest.placeholderForCreatedCollectionList.localIdentifier;\n        }) { (ret, error) in\n            if ret {\n                if let id = self.identifier {\n                    let collections = PHCollectionList.fetchCollectionLists(withLocalIdentifiers: [id], options: nil)\n                    print(\"\\(collections)\");\n                }\n            }\n        }\n    }\n    \n//删除相册\n func deleteAlbum() {\n        let fecthOptions = PHFetchOptions();\n        let predicate = NSPredicate.init(format: \"localizedTitle == 'title'\");\n        fecthOptions.predicate = predicate;\n        let titleList = PHCollectionList.fetchCollectionLists(with: .folder, subtype: .regularFolder, options: fecthOptions);\n        \n        PHPhotoLibrary.shared().performChanges({\n            PHCollectionListChangeRequest.deleteCollectionLists(titleList);\n        }) { (ret, error) in\n            if ret {\n                print(\"删除成功\");\n            }\n        }\n    }\n//修改相册\n  func modifyAlbum() {\n        let fecthOptions = PHFetchOptions();\n        let predicate = NSPredicate.init(format: \"localizedTitle == 'title'\");\n        fecthOptions.predicate = predicate;\n        let titleList = PHCollectionList.fetchCollectionLists(with: .folder, subtype: .regularFolder, options: fecthOptions);\n        PHPhotoLibrary.shared().performChanges({\n            \n            if let collection = titleList.firstObject {\n                let modifyRequest = PHCollectionListChangeRequest(for: collection);\n                modifyRequest?.title = \"modify album\";\n            }\n        }) { (ret, error) in\n            if ret {\n                print(\"修改成功\");\n            }\n        }\n   }\n```\n###  Asset的操作\n```\n   //增加\n   func creationRequestForAsset(from image: UIImage) -> Self \n   func creationRequestForAssetFromImage(atFileURL fileURL: URL) -> Self?\n   func creationRequestForAssetFromVideo(atFileURL fileURL: URL) -> Self?\n   //删除\n   func deleteAssets(_ assets: NSFastEnumeration)\n   //修改\n  func requestContentEditingInput(with options: PHContentEditingInputRequestOptions?, completionHandler: @escaping (PHContentEditingInput?, [AnyHashable : Any]) -> Void) -> PHContentEditingInputRequestID\n  func cancelContentEditingInputRequest(_ requestID: PHContentEditingInputRequestID)\n\n   // MARK: UI Actions\n    /// - Tag: EditAlert\n    @IBAction func editAsset(_ sender: UIBarButtonItem) {\n        // Use a UIAlertController to display editing options to the user.\n        let alertController = UIAlertController(title: nil, message: nil, preferredStyle: .actionSheet)\n        #if os(iOS)\n        alertController.modalPresentationStyle = .popover\n        if let popoverController = alertController.popoverPresentationController {\n            popoverController.barButtonItem = sender\n            popoverController.permittedArrowDirections = .up\n        }\n        #endif\n        \n        // Add a Cancel action to dismiss the alert without doing anything.\n        alertController.addAction(UIAlertAction(title: NSLocalizedString(\"Cancel\", comment: \"\"),\n                                                style: .cancel, handler: nil))\n        // Allow editing only if the PHAsset supports edit operations.\n        if asset.canPerform(.content) {\n            // Add actions for some canned filters.\n            alertController.addAction(UIAlertAction(title: NSLocalizedString(\"Sepia Tone\", comment: \"\"),\n                                                    style: .default, handler: getFilter(\"CISepiaTone\")))\n            alertController.addAction(UIAlertAction(title: NSLocalizedString(\"Chrome\", comment: \"\"),\n                                                    style: .default, handler: getFilter(\"CIPhotoEffectChrome\")))\n            \n            // Add actions to revert any edits that have been made to the PHAsset.\n            alertController.addAction(UIAlertAction(title: NSLocalizedString(\"Revert\", comment: \"\"),\n                                                    style: .default, handler: revertAsset))\n        }\n        // Present the UIAlertController.\n        present(alertController, animated: true)\n    }\n    #if os(tvOS)\n    @IBAction func playLivePhoto(_ sender: Any) {\n        livePhotoView.startPlayback(with: .full)\n    }\n    #endif\n    /// - Tag: PlayVideo\n    @IBAction func play(_ sender: AnyObject) {\n        if playerLayer != nil {\n            // The app already created an AVPlayerLayer, so tell it to play.\n            playerLayer.player!.play()\n        } else {\n            let options = PHVideoRequestOptions()\n            options.isNetworkAccessAllowed = true\n            options.deliveryMode = .automatic\n            options.progressHandler = { progress, _, _, _ in\n                // The handler may originate on a background queue, so\n                // re-dispatch to the main queue for UI work.\n                DispatchQueue.main.sync {\n                    self.progressView.progress = Float(progress)\n                }\n            }\n            // Request an AVPlayerItem for the displayed PHAsset.\n            // Then configure a layer for playing it.\n            PHImageManager.default().requestPlayerItem(forVideo: asset, options: options, resultHandler: { playerItem, info in\n                DispatchQueue.main.sync {\n                    guard self.playerLayer == nil else { return }\n                    \n                    // Create an AVPlayer and AVPlayerLayer with the AVPlayerItem.\n                    let player = AVPlayer(playerItem: playerItem)\n                    let playerLayer = AVPlayerLayer(player: player)\n                    \n                    // Configure the AVPlayerLayer and add it to the view.\n                    playerLayer.videoGravity = AVLayerVideoGravity.resizeAspect\n                    playerLayer.frame = self.view.layer.bounds\n                    self.view.layer.addSublayer(playerLayer)\n                    \n                    player.play()\n                    \n                    // Cache the player layer by reference, so you can remove it later.\n                    self.playerLayer = playerLayer\n                }\n            })\n        }\n    }\n    /// - Tag: RemoveAsset\n    @IBAction func removeAsset(_ sender: AnyObject) {\n        let completion = { (success: Bool, error: Error?) -> Void in\n            if success {\n                PHPhotoLibrary.shared().unregisterChangeObserver(self)\n                DispatchQueue.main.sync {\n                    _ = self.navigationController!.popViewController(animated: true)\n                }\n            } else {\n                print(\"Can't remove the asset: \\(String(describing: error))\")\n            }\n        }\n        if assetCollection != nil {\n            // Remove the asset from the selected album.\n            PHPhotoLibrary.shared().performChanges({\n                let request = PHAssetCollectionChangeRequest(for: self.assetCollection)!\n                request.removeAssets([self.asset] as NSArray)\n            }, completionHandler: completion)\n        } else {\n            // Delete the asset from the photo library.\n            PHPhotoLibrary.shared().performChanges({\n                PHAssetChangeRequest.deleteAssets([self.asset] as NSArray)\n            }, completionHandler: completion)\n        }\n    }\n    /// - Tag: MarkFavorite\n    @IBAction func toggleFavorite(_ sender: UIBarButtonItem) {\n        PHPhotoLibrary.shared().performChanges({\n            let request = PHAssetChangeRequest(for: self.asset)\n            request.isFavorite = !self.asset.isFavorite\n        }, completionHandler: { success, error in\n            if success {\n                DispatchQueue.main.sync {\n                    sender.title = self.asset.isFavorite ? \"♥︎\" : \"♡\"\n                }\n            } else {\n                print(\"Can't mark the asset as a Favorite: \\(String(describing: error))\")\n            }\n        })\n    }\n    \n    // MARK: Image display\n    \n    var targetSize: CGSize {\n        let scale = UIScreen.main.scale\n        return CGSize(width: imageView.bounds.width * scale, height: imageView.bounds.height * scale)\n    }\n    \n    func updateImage() {\n        if asset.mediaSubtypes.contains(.photoLive) {\n            updateLivePhoto()\n        } else {\n            updateStaticImage()\n        }\n    }\n    \n    func updateLivePhoto() {\n        // Prepare the options to pass when fetching the live photo.\n        let options = PHLivePhotoRequestOptions()\n        options.deliveryMode = .highQualityFormat\n        options.isNetworkAccessAllowed = true\n        options.progressHandler = { progress, _, _, _ in\n            // The handler may originate on a background queue, so\n            // re-dispatch to the main queue for UI work.\n            DispatchQueue.main.sync {\n                self.progressView.progress = Float(progress)\n            }\n        }\n        \n        // Request the live photo for the asset from the default PHImageManager.\n        PHImageManager.default().requestLivePhoto(for: asset, targetSize: targetSize, contentMode: .aspectFit, options: options,\n                                                  resultHandler: { livePhoto, info in\n                                                    // PhotoKit finishes the request, so hide the progress view.\n                                                    self.progressView.isHidden = true\n                                                    \n                                                    // Show the Live Photo view.\n                                                    guard let livePhoto = livePhoto else { return }\n                                                    \n                                                    // Show the Live Photo.\n                                                    self.imageView.isHidden = true\n                                                    self.livePhotoView.isHidden = false\n                                                    self.livePhotoView.livePhoto = livePhoto\n                                                    \n                                                    if !self.isPlayingHint {\n                                                        // Play back a short section of the Live Photo, similar to the Photos share sheet.\n                                                        self.isPlayingHint = true\n                                                        self.livePhotoView.startPlayback(with: .hint)\n                                                    }\n        })\n    }\n    \n    func updateStaticImage() {\n        // Prepare the options to pass when fetching the (photo, or video preview) image.\n        let options = PHImageRequestOptions()\n        options.deliveryMode = .highQualityFormat\n        options.isNetworkAccessAllowed = true\n        options.progressHandler = { progress, _, _, _ in\n            // The handler may originate on a background queue, so\n            // re-dispatch to the main queue for UI work.\n            DispatchQueue.main.sync {\n                self.progressView.progress = Float(progress)\n            }\n        }\n        \n        PHImageManager.default().requestImage(for: asset, targetSize: targetSize, contentMode: .aspectFit, options: options,\n                                              resultHandler: { image, _ in\n                                                // PhotoKit finished the request, so hide the progress view.\n                                                self.progressView.isHidden = true\n                                                \n                                                // If the request succeeded, show the image view.\n                                                guard let image = image else { return }\n                                                \n                                                // Show the image.\n                                                self.livePhotoView.isHidden = true\n                                                self.imageView.isHidden = false\n                                                self.imageView.image = image\n        })\n    }\n    \n    // MARK: Asset editing\n    \n    func revertAsset(sender: UIAlertAction) {\n        PHPhotoLibrary.shared().performChanges({\n            let request = PHAssetChangeRequest(for: self.asset)\n            request.revertAssetContentToOriginal()\n        }, completionHandler: { success, error in\n            if !success { print(\"Can't revert the asset: \\(String(describing: error))\") }\n        })\n    }\n    \n    // Returns a filter-applier function for the named filter.\n    // Use the function as a handler for a UIAlertAction object.\n    /// - Tag: ApplyFilter\n    func getFilter(_ filterName: String) -> (UIAlertAction) -> Void {\n        func applyFilter(_: UIAlertAction) {\n            // Set up a handler to handle prior edits.\n            let options = PHContentEditingInputRequestOptions()\n            options.canHandleAdjustmentData = {\n                $0.formatIdentifier == self.formatIdentifier && $0.formatVersion == self.formatVersion\n            }\n            \n            // Prepare for editing.\n            asset.requestContentEditingInput(with: options, completionHandler: { input, info in\n                guard let input = input\n                    else { fatalError(\"Can't get the content-editing input: \\(info)\") }\n                \n                // This handler executes on the main thread; dispatch to a background queue for processing.\n                DispatchQueue.global(qos: .userInitiated).async {\n                    \n                    // Create adjustment data describing the edit.\n                    let adjustmentData = PHAdjustmentData(formatIdentifier: self.formatIdentifier,\n                                                          formatVersion: self.formatVersion,\n                                                          data: filterName.data(using: .utf8)!)\n                    \n                    // Create content editing output, write the adjustment data.\n                    let output = PHContentEditingOutput(contentEditingInput: input)\n                    output.adjustmentData = adjustmentData\n                    \n                    // Select a filtering function for the asset's media type.\n                    let applyFunc: (String, PHContentEditingInput, PHContentEditingOutput, @escaping () -> Void) -> Void\n                    if self.asset.mediaSubtypes.contains(.photoLive) {\n                        applyFunc = self.applyLivePhotoFilter\n                    } else if self.asset.mediaType == .image {\n                        applyFunc = self.applyPhotoFilter\n                    } else {\n                        applyFunc = self.applyVideoFilter\n                    }\n                    \n                    // Apply the filter.\n                    applyFunc(filterName, input, output, {\n                        // When the app finishes rendering the filtered result, commit the edit to the photo library.\n                        PHPhotoLibrary.shared().performChanges({\n                            let request = PHAssetChangeRequest(for: self.asset)\n                            request.contentEditingOutput = output\n                        }, completionHandler: { success, error in\n                            if !success { print(\"Can't edit the asset: \\(String(describing: error))\") }\n                        })\n                    })\n                }\n            })\n        }\n        return applyFilter\n    }\n    \n    func applyPhotoFilter(_ filterName: String, input: PHContentEditingInput, output: PHContentEditingOutput, completion: () -> Void) {\n        \n        // Load the full-size image.\n        guard let inputImage = CIImage(contentsOf: input.fullSizeImageURL!)\n            else { fatalError(\"Can't load the input image to edit.\") }\n        \n        // Apply the filter.\n        let outputImage = inputImage\n            .oriented(forExifOrientation: input.fullSizeImageOrientation)\n            .applyingFilter(filterName, parameters: [:])\n        \n        // Write the edited image as a JPEG.\n        do {\n            try self.ciContext.writeJPEGRepresentation(of: outputImage,\n                                                       to: output.renderedContentURL, colorSpace: inputImage.colorSpace!, options: [:])\n        } catch let error {\n            fatalError(\"Can't apply the filter to the image: \\(error).\")\n        }\n        completion()\n    }\n    \n    func applyLivePhotoFilter(_ filterName: String, input: PHContentEditingInput, output: PHContentEditingOutput, completion: @escaping () -> Void) {\n        \n        // This app filters assets only for output. In an app that previews\n        // filters while editing, create a livePhotoContext early and reuse it\n        // to render both for previewing and for final output.\n        guard let livePhotoContext = PHLivePhotoEditingContext(livePhotoEditingInput: input)\n            else { fatalError(\"Can't fetch the Live Photo to edit.\") }\n        \n        livePhotoContext.frameProcessor = { frame, _ in\n            return frame.image.applyingFilter(filterName, parameters: [:])\n        }\n        livePhotoContext.saveLivePhoto(to: output) { success, error in\n            if success {\n                completion()\n            } else {\n                print(\"Can't output the Live Photo.\")\n            }\n        }\n    }\n    \n    func applyVideoFilter(_ filterName: String, input: PHContentEditingInput, output: PHContentEditingOutput, completion: @escaping () -> Void) {\n        // Load the AVAsset to process from input.\n        guard let avAsset = input.audiovisualAsset\n            else { fatalError(\"Can't fetch the AVAsset to edit.\") }\n        \n        // Set up a video composition to apply the filter.\n        let composition = AVVideoComposition(\n            asset: avAsset,\n            applyingCIFiltersWithHandler: { request in\n                let filtered = request.sourceImage.applyingFilter(filterName, parameters: [:])\n                request.finish(with: filtered, context: nil)\n        })\n        \n        // Export the video composition to the output URL.\n        guard let export = AVAssetExportSession(asset: avAsset, presetName: AVAssetExportPresetHighestQuality)\n            else { fatalError(\"Can't configure the AVAssetExportSession.\") }\n        export.outputFileType = AVFileType.mov\n        export.outputURL = output.renderedContentURL\n        export.videoComposition = composition\n        export.exportAsynchronously(completionHandler: completion)\n    }\n\n// MARK: PHPhotoLibraryChangeObserver\nextension AssetViewController: PHPhotoLibraryChangeObserver {\n    func photoLibraryDidChange(_ changeInstance: PHChange) {\n        // The call might come on any background queue. Re-dispatch to the main queue to handle it.\n        DispatchQueue.main.sync {\n            // Check if there are changes to the displayed asset.\n            guard let details = changeInstance.changeDetails(for: asset) else { return }\n            \n            // Get the updated asset.\n            asset = details.objectAfterChanges\n            \n            // If the asset's content changes, update the image and stop any video playback.\n            if details.assetContentChanged {\n                updateImage()\n                \n                playerLayer?.removeFromSuperlayer()\n                playerLayer = nil\n            }\n        }\n    }\n}\n\n// MARK: PHLivePhotoViewDelegate\nextension AssetViewController: PHLivePhotoViewDelegate {\n    func livePhotoView(_ livePhotoView: PHLivePhotoView, willBeginPlaybackWith playbackStyle: PHLivePhotoViewPlaybackStyle) {\n        isPlayingHint = (playbackStyle == .hint)\n    }\n    \n    func livePhotoView(_ livePhotoView: PHLivePhotoView, didEndPlaybackWith playbackStyle: PHLivePhotoViewPlaybackStyle) {\n        isPlayingHint = (playbackStyle == .hint)\n    }\n}\n\n```\n\n## 参考资料\n[Browsing and Modifying Photo Albums](https://developer.apple.com/documentation/photokit/browsing_and_modifying_photo_albums)\n[NSPredicate](https://nshipster.cn/nspredicate/)\n[NSSortDescriptor](https://nshipster.cn/nssortdescriptor/)\n","slug":"iOS/PhotoKit","published":1,"updated":"2020-09-27T10:30:02.824Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgq6gnzb0088t29kgpe81vir","content":"<p><img src=\"https://upload-images.jianshu.io/upload_images/3340896-b7a0956c45c82900.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Photos.png\"></p>\n<h3 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h3><p>苹果的PhotoKit,是提供给开发者的对本地相册库的和iCloud 相册的资源进行操作的API,所有资源以PHAsset的形式来提供给PhotoKit使用,同时本地的图片库和iCloud图片的变动通知,会发送给PhotoKit;同时,PhotoKit也可以通过 <strong>变更请求</strong> (编辑请求,改变请求,删除请求…)来对资源进行变更.</p>\n<h3 id=\"资源的操作\"><a href=\"#资源的操作\" class=\"headerlink\" title=\"资源的操作\"></a>资源的操作</h3><pre><code class=\"hljs reasonml\"><span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">PHPhotoLibrary</span>.</span></span>shared<span class=\"hljs-literal\">()</span>.register(self); <span class=\"hljs-comment\">// viewDidLoad 执行</span>\n<span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">PHPhotoLibrary</span>.</span></span>shared<span class=\"hljs-literal\">()</span>.unregister<span class=\"hljs-constructor\">ChangeObserver(<span class=\"hljs-params\">self</span>)</span>;<span class=\"hljs-comment\">//deinit 方法中执行</span>\n\nextension MasterViewController: PHPhotoLibraryChangeObserver &#123;<span class=\"hljs-comment\">//资源变动后的通知</span>\n    <span class=\"hljs-comment\">/// - Tag: RespondToChanges</span>\n    func photo<span class=\"hljs-constructor\">LibraryDidChange(<span class=\"hljs-params\">_</span> <span class=\"hljs-params\">changeInstance</span>: PHChange)</span> &#123;\n        \n        <span class=\"hljs-comment\">// Change notifications may originate from a background queue.</span>\n        <span class=\"hljs-comment\">// Re-dispatch to the main queue before acting on the change,</span>\n        <span class=\"hljs-comment\">// so you can update the UI.</span>\n        <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">DispatchQueue</span>.</span></span>main.sync &#123;\n        &#125;\n    &#125;\n&#125;\n</code></pre>\n\n<h3 id=\"资源的查找\"><a href=\"#资源的查找\" class=\"headerlink\" title=\"资源的查找\"></a>资源的查找</h3><p>排序和筛选条件我们可以根据 <a href=\"https://developer.apple.com/documentation/photokit/phfetchoptions\">PHFetchOptions</a>里面的 <code>predicate</code> 和 <code>sortDescriptors</code> 属性来设置, 里面也包含支持 <strong>predicate</strong> 和 <strong>sort</strong> 的 keys, 可以参考 <a href=\"https://nshipster.cn/nspredicate/\">NSPredicate</a> 和  <a href=\"https://nshipster.cn/nssortdescriptor/\">NSSortDescriptor</a> 来了解更多筛选和排序条件的设置.</p>\n<pre><code class=\"hljs reasonml\"><span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">PHAssetCollection</span>.</span></span>fetch<span class=\"hljs-constructor\">AssetCollections(<span class=\"hljs-params\">with</span>: .<span class=\"hljs-params\">smartAlbum</span>, <span class=\"hljs-params\">subtype</span>: .<span class=\"hljs-params\">albumRegular</span>, <span class=\"hljs-params\">options</span>: <span class=\"hljs-params\">nil</span>)</span><span class=\"hljs-comment\">//智能相册</span>\n<span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">PHCollectionList</span>.</span></span>fetch<span class=\"hljs-constructor\">TopLevelUserCollections(<span class=\"hljs-params\">with</span>: <span class=\"hljs-params\">nil</span>)</span><span class=\"hljs-comment\">//用户相册</span>\n<span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">PHAsset</span>.</span></span>fetch<span class=\"hljs-constructor\">Assets(<span class=\"hljs-params\">with</span>: <span class=\"hljs-params\">phtotfectchOptions</span>)</span><span class=\"hljs-comment\">//图片资源</span>\n</code></pre>\n\n<h3 id=\"资源的变更请求\"><a href=\"#资源的变更请求\" class=\"headerlink\" title=\"资源的变更请求\"></a>资源的变更请求</h3><pre><code class=\"hljs less\"><span class=\"hljs-comment\">//Asynchronously runs a block that requests changes to be performed in the photo library.  异步请求</span>\n<span class=\"hljs-selector-tag\">func</span>  <span class=\"hljs-selector-tag\">performChanges</span>(<span class=\"hljs-attribute\">_</span>:<span class=\"hljs-attribute\">completionHandler</span>:)\n<span class=\"hljs-comment\">//Synchronously runs a block that requests changes to be performed in the photo library.  同步请求</span>\n<span class=\"hljs-selector-tag\">func</span> <span class=\"hljs-selector-tag\">performChangesAndWait</span>(_ <span class=\"hljs-attribute\">changeBlock</span>: <span class=\"hljs-variable\">@escaping</span> () -&gt; Void) <span class=\"hljs-selector-tag\">throws</span></code></pre>\n\n<h3 id=\"Album的操作-增加-修改-删除\"><a href=\"#Album的操作-增加-修改-删除\" class=\"headerlink\" title=\"Album的操作(增加,修改,删除)\"></a>Album的操作(增加,修改,删除)</h3><pre><code class=\"hljs swift\"><span class=\"hljs-comment\">//增加相册</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">addAlbum</span><span class=\"hljs-params\">()</span></span> &#123;\n        <span class=\"hljs-type\">PHPhotoLibrary</span>.shared().performChanges(&#123;\n            <span class=\"hljs-keyword\">let</span> assetCollectionRequest = <span class=\"hljs-type\">PHCollectionListChangeRequest</span>.creationRequestForCollectionList(withTitle: <span class=\"hljs-string\">&quot;title&quot;</span>);\n            <span class=\"hljs-keyword\">self</span>.identifier =  assetCollectionRequest.placeholderForCreatedCollectionList.localIdentifier;\n        &#125;) &#123; (ret, error) <span class=\"hljs-keyword\">in</span>\n            <span class=\"hljs-keyword\">if</span> ret &#123;\n                <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">let</span> id = <span class=\"hljs-keyword\">self</span>.identifier &#123;\n                    <span class=\"hljs-keyword\">let</span> collections = <span class=\"hljs-type\">PHCollectionList</span>.fetchCollectionLists(withLocalIdentifiers: [id], options: <span class=\"hljs-literal\">nil</span>)\n                    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;\\(collections)&quot;</span>);\n                &#125;\n            &#125;\n        &#125;\n    &#125;\n    \n<span class=\"hljs-comment\">//删除相册</span>\n <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">deleteAlbum</span><span class=\"hljs-params\">()</span></span> &#123;\n        <span class=\"hljs-keyword\">let</span> fecthOptions = <span class=\"hljs-type\">PHFetchOptions</span>();\n        <span class=\"hljs-keyword\">let</span> predicate = <span class=\"hljs-type\">NSPredicate</span>.<span class=\"hljs-keyword\">init</span>(format: <span class=\"hljs-string\">&quot;localizedTitle == &#x27;title&#x27;&quot;</span>);\n        fecthOptions.predicate = predicate;\n        <span class=\"hljs-keyword\">let</span> titleList = <span class=\"hljs-type\">PHCollectionList</span>.fetchCollectionLists(with: .folder, subtype: .regularFolder, options: fecthOptions);\n        \n        <span class=\"hljs-type\">PHPhotoLibrary</span>.shared().performChanges(&#123;\n            <span class=\"hljs-type\">PHCollectionListChangeRequest</span>.deleteCollectionLists(titleList);\n        &#125;) &#123; (ret, error) <span class=\"hljs-keyword\">in</span>\n            <span class=\"hljs-keyword\">if</span> ret &#123;\n                <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;删除成功&quot;</span>);\n            &#125;\n        &#125;\n    &#125;\n<span class=\"hljs-comment\">//修改相册</span>\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">modifyAlbum</span><span class=\"hljs-params\">()</span></span> &#123;\n        <span class=\"hljs-keyword\">let</span> fecthOptions = <span class=\"hljs-type\">PHFetchOptions</span>();\n        <span class=\"hljs-keyword\">let</span> predicate = <span class=\"hljs-type\">NSPredicate</span>.<span class=\"hljs-keyword\">init</span>(format: <span class=\"hljs-string\">&quot;localizedTitle == &#x27;title&#x27;&quot;</span>);\n        fecthOptions.predicate = predicate;\n        <span class=\"hljs-keyword\">let</span> titleList = <span class=\"hljs-type\">PHCollectionList</span>.fetchCollectionLists(with: .folder, subtype: .regularFolder, options: fecthOptions);\n        <span class=\"hljs-type\">PHPhotoLibrary</span>.shared().performChanges(&#123;\n            \n            <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">let</span> collection = titleList.firstObject &#123;\n                <span class=\"hljs-keyword\">let</span> modifyRequest = <span class=\"hljs-type\">PHCollectionListChangeRequest</span>(<span class=\"hljs-keyword\">for</span>: collection);\n                modifyRequest?.title = <span class=\"hljs-string\">&quot;modify album&quot;</span>;\n            &#125;\n        &#125;) &#123; (ret, error) <span class=\"hljs-keyword\">in</span>\n            <span class=\"hljs-keyword\">if</span> ret &#123;\n                <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;修改成功&quot;</span>);\n            &#125;\n        &#125;\n   &#125;</code></pre>\n<h3 id=\"Asset的操作\"><a href=\"#Asset的操作\" class=\"headerlink\" title=\"Asset的操作\"></a>Asset的操作</h3><pre><code class=\"hljs swift\">   <span class=\"hljs-comment\">//增加</span>\n   <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">creationRequestForAsset</span><span class=\"hljs-params\">(from image: UIImage)</span></span> -&gt; <span class=\"hljs-type\">Self</span> \n   <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">creationRequestForAssetFromImage</span><span class=\"hljs-params\">(atFileURL fileURL: URL)</span></span> -&gt; <span class=\"hljs-type\">Self?</span>\n   <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">creationRequestForAssetFromVideo</span><span class=\"hljs-params\">(atFileURL fileURL: URL)</span></span> -&gt; <span class=\"hljs-type\">Self?</span>\n   <span class=\"hljs-comment\">//删除</span>\n   <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">deleteAssets</span><span class=\"hljs-params\">(<span class=\"hljs-number\">_</span> assets: NSFastEnumeration)</span></span>\n   <span class=\"hljs-comment\">//修改</span>\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">requestContentEditingInput</span><span class=\"hljs-params\">(with options: PHContentEditingInputRequestOptions?, completionHandler: @escaping <span class=\"hljs-params\">(PHContentEditingInput?, [AnyHashable : <span class=\"hljs-keyword\">Any</span>])</span></span></span> -&gt; <span class=\"hljs-type\">Void</span>) -&gt; <span class=\"hljs-type\">PHContentEditingInputRequestID</span>\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">cancelContentEditingInputRequest</span><span class=\"hljs-params\">(<span class=\"hljs-number\">_</span> requestID: PHContentEditingInputRequestID)</span></span>\n\n   <span class=\"hljs-comment\">// MARK: UI Actions</span>\n    <span class=\"hljs-comment\">/// - Tag: EditAlert</span>\n    <span class=\"hljs-meta\">@IBAction</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">editAsset</span><span class=\"hljs-params\">(<span class=\"hljs-number\">_</span> sender: UIBarButtonItem)</span></span> &#123;\n        <span class=\"hljs-comment\">// Use a UIAlertController to display editing options to the user.</span>\n        <span class=\"hljs-keyword\">let</span> alertController = <span class=\"hljs-type\">UIAlertController</span>(title: <span class=\"hljs-literal\">nil</span>, message: <span class=\"hljs-literal\">nil</span>, preferredStyle: .actionSheet)\n        #<span class=\"hljs-keyword\">if</span> os(iOS)\n        alertController.modalPresentationStyle = .popover\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">let</span> popoverController = alertController.popoverPresentationController &#123;\n            popoverController.barButtonItem = sender\n            popoverController.permittedArrowDirections = .up\n        &#125;\n        #endif\n        \n        <span class=\"hljs-comment\">// Add a Cancel action to dismiss the alert without doing anything.</span>\n        alertController.addAction(<span class=\"hljs-type\">UIAlertAction</span>(title: <span class=\"hljs-type\">NSLocalizedString</span>(<span class=\"hljs-string\">&quot;Cancel&quot;</span>, comment: <span class=\"hljs-string\">&quot;&quot;</span>),\n                                                style: .cancel, handler: <span class=\"hljs-literal\">nil</span>))\n        <span class=\"hljs-comment\">// Allow editing only if the PHAsset supports edit operations.</span>\n        <span class=\"hljs-keyword\">if</span> asset.canPerform(.content) &#123;\n            <span class=\"hljs-comment\">// Add actions for some canned filters.</span>\n            alertController.addAction(<span class=\"hljs-type\">UIAlertAction</span>(title: <span class=\"hljs-type\">NSLocalizedString</span>(<span class=\"hljs-string\">&quot;Sepia Tone&quot;</span>, comment: <span class=\"hljs-string\">&quot;&quot;</span>),\n                                                    style: .<span class=\"hljs-keyword\">default</span>, handler: getFilter(<span class=\"hljs-string\">&quot;CISepiaTone&quot;</span>)))\n            alertController.addAction(<span class=\"hljs-type\">UIAlertAction</span>(title: <span class=\"hljs-type\">NSLocalizedString</span>(<span class=\"hljs-string\">&quot;Chrome&quot;</span>, comment: <span class=\"hljs-string\">&quot;&quot;</span>),\n                                                    style: .<span class=\"hljs-keyword\">default</span>, handler: getFilter(<span class=\"hljs-string\">&quot;CIPhotoEffectChrome&quot;</span>)))\n            \n            <span class=\"hljs-comment\">// Add actions to revert any edits that have been made to the PHAsset.</span>\n            alertController.addAction(<span class=\"hljs-type\">UIAlertAction</span>(title: <span class=\"hljs-type\">NSLocalizedString</span>(<span class=\"hljs-string\">&quot;Revert&quot;</span>, comment: <span class=\"hljs-string\">&quot;&quot;</span>),\n                                                    style: .<span class=\"hljs-keyword\">default</span>, handler: revertAsset))\n        &#125;\n        <span class=\"hljs-comment\">// Present the UIAlertController.</span>\n        present(alertController, animated: <span class=\"hljs-literal\">true</span>)\n    &#125;\n    #<span class=\"hljs-keyword\">if</span> os(tvOS)\n    <span class=\"hljs-meta\">@IBAction</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">playLivePhoto</span><span class=\"hljs-params\">(<span class=\"hljs-number\">_</span> sender: <span class=\"hljs-keyword\">Any</span>)</span></span> &#123;\n        livePhotoView.startPlayback(with: .full)\n    &#125;\n    #endif\n    <span class=\"hljs-comment\">/// - Tag: PlayVideo</span>\n    <span class=\"hljs-meta\">@IBAction</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">play</span><span class=\"hljs-params\">(<span class=\"hljs-number\">_</span> sender: AnyObject)</span></span> &#123;\n        <span class=\"hljs-keyword\">if</span> playerLayer != <span class=\"hljs-literal\">nil</span> &#123;\n            <span class=\"hljs-comment\">// The app already created an AVPlayerLayer, so tell it to play.</span>\n            playerLayer.player!.play()\n        &#125; <span class=\"hljs-keyword\">else</span> &#123;\n            <span class=\"hljs-keyword\">let</span> options = <span class=\"hljs-type\">PHVideoRequestOptions</span>()\n            options.isNetworkAccessAllowed = <span class=\"hljs-literal\">true</span>\n            options.deliveryMode = .automatic\n            options.progressHandler = &#123; progress, <span class=\"hljs-number\">_</span>, <span class=\"hljs-number\">_</span>, <span class=\"hljs-number\">_</span> <span class=\"hljs-keyword\">in</span>\n                <span class=\"hljs-comment\">// The handler may originate on a background queue, so</span>\n                <span class=\"hljs-comment\">// re-dispatch to the main queue for UI work.</span>\n                <span class=\"hljs-type\">DispatchQueue</span>.main.sync &#123;\n                    <span class=\"hljs-keyword\">self</span>.progressView.progress = <span class=\"hljs-type\">Float</span>(progress)\n                &#125;\n            &#125;\n            <span class=\"hljs-comment\">// Request an AVPlayerItem for the displayed PHAsset.</span>\n            <span class=\"hljs-comment\">// Then configure a layer for playing it.</span>\n            <span class=\"hljs-type\">PHImageManager</span>.<span class=\"hljs-keyword\">default</span>().requestPlayerItem(forVideo: asset, options: options, resultHandler: &#123; playerItem, info <span class=\"hljs-keyword\">in</span>\n                <span class=\"hljs-type\">DispatchQueue</span>.main.sync &#123;\n                    <span class=\"hljs-keyword\">guard</span> <span class=\"hljs-keyword\">self</span>.playerLayer == <span class=\"hljs-literal\">nil</span> <span class=\"hljs-keyword\">else</span> &#123; <span class=\"hljs-keyword\">return</span> &#125;\n                    \n                    <span class=\"hljs-comment\">// Create an AVPlayer and AVPlayerLayer with the AVPlayerItem.</span>\n                    <span class=\"hljs-keyword\">let</span> player = <span class=\"hljs-type\">AVPlayer</span>(playerItem: playerItem)\n                    <span class=\"hljs-keyword\">let</span> playerLayer = <span class=\"hljs-type\">AVPlayerLayer</span>(player: player)\n                    \n                    <span class=\"hljs-comment\">// Configure the AVPlayerLayer and add it to the view.</span>\n                    playerLayer.videoGravity = <span class=\"hljs-type\">AVLayerVideoGravity</span>.resizeAspect\n                    playerLayer.frame = <span class=\"hljs-keyword\">self</span>.view.layer.bounds\n                    <span class=\"hljs-keyword\">self</span>.view.layer.addSublayer(playerLayer)\n                    \n                    player.play()\n                    \n                    <span class=\"hljs-comment\">// Cache the player layer by reference, so you can remove it later.</span>\n                    <span class=\"hljs-keyword\">self</span>.playerLayer = playerLayer\n                &#125;\n            &#125;)\n        &#125;\n    &#125;\n    <span class=\"hljs-comment\">/// - Tag: RemoveAsset</span>\n    <span class=\"hljs-meta\">@IBAction</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">removeAsset</span><span class=\"hljs-params\">(<span class=\"hljs-number\">_</span> sender: AnyObject)</span></span> &#123;\n        <span class=\"hljs-keyword\">let</span> completion = &#123; (success: <span class=\"hljs-type\">Bool</span>, error: <span class=\"hljs-type\">Error?</span>) -&gt; <span class=\"hljs-type\">Void</span> <span class=\"hljs-keyword\">in</span>\n            <span class=\"hljs-keyword\">if</span> success &#123;\n                <span class=\"hljs-type\">PHPhotoLibrary</span>.shared().unregisterChangeObserver(<span class=\"hljs-keyword\">self</span>)\n                <span class=\"hljs-type\">DispatchQueue</span>.main.sync &#123;\n                    <span class=\"hljs-number\">_</span> = <span class=\"hljs-keyword\">self</span>.navigationController!.popViewController(animated: <span class=\"hljs-literal\">true</span>)\n                &#125;\n            &#125; <span class=\"hljs-keyword\">else</span> &#123;\n                <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;Can&#x27;t remove the asset: \\(String(describing: error))&quot;</span>)\n            &#125;\n        &#125;\n        <span class=\"hljs-keyword\">if</span> assetCollection != <span class=\"hljs-literal\">nil</span> &#123;\n            <span class=\"hljs-comment\">// Remove the asset from the selected album.</span>\n            <span class=\"hljs-type\">PHPhotoLibrary</span>.shared().performChanges(&#123;\n                <span class=\"hljs-keyword\">let</span> request = <span class=\"hljs-type\">PHAssetCollectionChangeRequest</span>(<span class=\"hljs-keyword\">for</span>: <span class=\"hljs-keyword\">self</span>.assetCollection)!\n                request.removeAssets([<span class=\"hljs-keyword\">self</span>.asset] <span class=\"hljs-keyword\">as</span> <span class=\"hljs-type\">NSArray</span>)\n            &#125;, completionHandler: completion)\n        &#125; <span class=\"hljs-keyword\">else</span> &#123;\n            <span class=\"hljs-comment\">// Delete the asset from the photo library.</span>\n            <span class=\"hljs-type\">PHPhotoLibrary</span>.shared().performChanges(&#123;\n                <span class=\"hljs-type\">PHAssetChangeRequest</span>.deleteAssets([<span class=\"hljs-keyword\">self</span>.asset] <span class=\"hljs-keyword\">as</span> <span class=\"hljs-type\">NSArray</span>)\n            &#125;, completionHandler: completion)\n        &#125;\n    &#125;\n    <span class=\"hljs-comment\">/// - Tag: MarkFavorite</span>\n    <span class=\"hljs-meta\">@IBAction</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">toggleFavorite</span><span class=\"hljs-params\">(<span class=\"hljs-number\">_</span> sender: UIBarButtonItem)</span></span> &#123;\n        <span class=\"hljs-type\">PHPhotoLibrary</span>.shared().performChanges(&#123;\n            <span class=\"hljs-keyword\">let</span> request = <span class=\"hljs-type\">PHAssetChangeRequest</span>(<span class=\"hljs-keyword\">for</span>: <span class=\"hljs-keyword\">self</span>.asset)\n            request.isFavorite = !<span class=\"hljs-keyword\">self</span>.asset.isFavorite\n        &#125;, completionHandler: &#123; success, error <span class=\"hljs-keyword\">in</span>\n            <span class=\"hljs-keyword\">if</span> success &#123;\n                <span class=\"hljs-type\">DispatchQueue</span>.main.sync &#123;\n                    sender.title = <span class=\"hljs-keyword\">self</span>.asset.isFavorite ? <span class=\"hljs-string\">&quot;♥︎&quot;</span> : <span class=\"hljs-string\">&quot;♡&quot;</span>\n                &#125;\n            &#125; <span class=\"hljs-keyword\">else</span> &#123;\n                <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;Can&#x27;t mark the asset as a Favorite: \\(String(describing: error))&quot;</span>)\n            &#125;\n        &#125;)\n    &#125;\n    \n    <span class=\"hljs-comment\">// MARK: Image display</span>\n    \n    <span class=\"hljs-keyword\">var</span> targetSize: <span class=\"hljs-type\">CGSize</span> &#123;\n        <span class=\"hljs-keyword\">let</span> scale = <span class=\"hljs-type\">UIScreen</span>.main.scale\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-type\">CGSize</span>(width: imageView.bounds.width * scale, height: imageView.bounds.height * scale)\n    &#125;\n    \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">updateImage</span><span class=\"hljs-params\">()</span></span> &#123;\n        <span class=\"hljs-keyword\">if</span> asset.mediaSubtypes.<span class=\"hljs-built_in\">contains</span>(.photoLive) &#123;\n            updateLivePhoto()\n        &#125; <span class=\"hljs-keyword\">else</span> &#123;\n            updateStaticImage()\n        &#125;\n    &#125;\n    \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">updateLivePhoto</span><span class=\"hljs-params\">()</span></span> &#123;\n        <span class=\"hljs-comment\">// Prepare the options to pass when fetching the live photo.</span>\n        <span class=\"hljs-keyword\">let</span> options = <span class=\"hljs-type\">PHLivePhotoRequestOptions</span>()\n        options.deliveryMode = .highQualityFormat\n        options.isNetworkAccessAllowed = <span class=\"hljs-literal\">true</span>\n        options.progressHandler = &#123; progress, <span class=\"hljs-number\">_</span>, <span class=\"hljs-number\">_</span>, <span class=\"hljs-number\">_</span> <span class=\"hljs-keyword\">in</span>\n            <span class=\"hljs-comment\">// The handler may originate on a background queue, so</span>\n            <span class=\"hljs-comment\">// re-dispatch to the main queue for UI work.</span>\n            <span class=\"hljs-type\">DispatchQueue</span>.main.sync &#123;\n                <span class=\"hljs-keyword\">self</span>.progressView.progress = <span class=\"hljs-type\">Float</span>(progress)\n            &#125;\n        &#125;\n        \n        <span class=\"hljs-comment\">// Request the live photo for the asset from the default PHImageManager.</span>\n        <span class=\"hljs-type\">PHImageManager</span>.<span class=\"hljs-keyword\">default</span>().requestLivePhoto(<span class=\"hljs-keyword\">for</span>: asset, targetSize: targetSize, contentMode: .aspectFit, options: options,\n                                                  resultHandler: &#123; livePhoto, info <span class=\"hljs-keyword\">in</span>\n                                                    <span class=\"hljs-comment\">// PhotoKit finishes the request, so hide the progress view.</span>\n                                                    <span class=\"hljs-keyword\">self</span>.progressView.isHidden = <span class=\"hljs-literal\">true</span>\n                                                    \n                                                    <span class=\"hljs-comment\">// Show the Live Photo view.</span>\n                                                    <span class=\"hljs-keyword\">guard</span> <span class=\"hljs-keyword\">let</span> livePhoto = livePhoto <span class=\"hljs-keyword\">else</span> &#123; <span class=\"hljs-keyword\">return</span> &#125;\n                                                    \n                                                    <span class=\"hljs-comment\">// Show the Live Photo.</span>\n                                                    <span class=\"hljs-keyword\">self</span>.imageView.isHidden = <span class=\"hljs-literal\">true</span>\n                                                    <span class=\"hljs-keyword\">self</span>.livePhotoView.isHidden = <span class=\"hljs-literal\">false</span>\n                                                    <span class=\"hljs-keyword\">self</span>.livePhotoView.livePhoto = livePhoto\n                                                    \n                                                    <span class=\"hljs-keyword\">if</span> !<span class=\"hljs-keyword\">self</span>.isPlayingHint &#123;\n                                                        <span class=\"hljs-comment\">// Play back a short section of the Live Photo, similar to the Photos share sheet.</span>\n                                                        <span class=\"hljs-keyword\">self</span>.isPlayingHint = <span class=\"hljs-literal\">true</span>\n                                                        <span class=\"hljs-keyword\">self</span>.livePhotoView.startPlayback(with: .hint)\n                                                    &#125;\n        &#125;)\n    &#125;\n    \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">updateStaticImage</span><span class=\"hljs-params\">()</span></span> &#123;\n        <span class=\"hljs-comment\">// Prepare the options to pass when fetching the (photo, or video preview) image.</span>\n        <span class=\"hljs-keyword\">let</span> options = <span class=\"hljs-type\">PHImageRequestOptions</span>()\n        options.deliveryMode = .highQualityFormat\n        options.isNetworkAccessAllowed = <span class=\"hljs-literal\">true</span>\n        options.progressHandler = &#123; progress, <span class=\"hljs-number\">_</span>, <span class=\"hljs-number\">_</span>, <span class=\"hljs-number\">_</span> <span class=\"hljs-keyword\">in</span>\n            <span class=\"hljs-comment\">// The handler may originate on a background queue, so</span>\n            <span class=\"hljs-comment\">// re-dispatch to the main queue for UI work.</span>\n            <span class=\"hljs-type\">DispatchQueue</span>.main.sync &#123;\n                <span class=\"hljs-keyword\">self</span>.progressView.progress = <span class=\"hljs-type\">Float</span>(progress)\n            &#125;\n        &#125;\n        \n        <span class=\"hljs-type\">PHImageManager</span>.<span class=\"hljs-keyword\">default</span>().requestImage(<span class=\"hljs-keyword\">for</span>: asset, targetSize: targetSize, contentMode: .aspectFit, options: options,\n                                              resultHandler: &#123; image, <span class=\"hljs-number\">_</span> <span class=\"hljs-keyword\">in</span>\n                                                <span class=\"hljs-comment\">// PhotoKit finished the request, so hide the progress view.</span>\n                                                <span class=\"hljs-keyword\">self</span>.progressView.isHidden = <span class=\"hljs-literal\">true</span>\n                                                \n                                                <span class=\"hljs-comment\">// If the request succeeded, show the image view.</span>\n                                                <span class=\"hljs-keyword\">guard</span> <span class=\"hljs-keyword\">let</span> image = image <span class=\"hljs-keyword\">else</span> &#123; <span class=\"hljs-keyword\">return</span> &#125;\n                                                \n                                                <span class=\"hljs-comment\">// Show the image.</span>\n                                                <span class=\"hljs-keyword\">self</span>.livePhotoView.isHidden = <span class=\"hljs-literal\">true</span>\n                                                <span class=\"hljs-keyword\">self</span>.imageView.isHidden = <span class=\"hljs-literal\">false</span>\n                                                <span class=\"hljs-keyword\">self</span>.imageView.image = image\n        &#125;)\n    &#125;\n    \n    <span class=\"hljs-comment\">// MARK: Asset editing</span>\n    \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">revertAsset</span><span class=\"hljs-params\">(sender: UIAlertAction)</span></span> &#123;\n        <span class=\"hljs-type\">PHPhotoLibrary</span>.shared().performChanges(&#123;\n            <span class=\"hljs-keyword\">let</span> request = <span class=\"hljs-type\">PHAssetChangeRequest</span>(<span class=\"hljs-keyword\">for</span>: <span class=\"hljs-keyword\">self</span>.asset)\n            request.revertAssetContentToOriginal()\n        &#125;, completionHandler: &#123; success, error <span class=\"hljs-keyword\">in</span>\n            <span class=\"hljs-keyword\">if</span> !success &#123; <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;Can&#x27;t revert the asset: \\(String(describing: error))&quot;</span>) &#125;\n        &#125;)\n    &#125;\n    \n    <span class=\"hljs-comment\">// Returns a filter-applier function for the named filter.</span>\n    <span class=\"hljs-comment\">// Use the function as a handler for a UIAlertAction object.</span>\n    <span class=\"hljs-comment\">/// - Tag: ApplyFilter</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">getFilter</span><span class=\"hljs-params\">(<span class=\"hljs-number\">_</span> filterName: String)</span></span> -&gt; (<span class=\"hljs-type\">UIAlertAction</span>) -&gt; <span class=\"hljs-type\">Void</span> &#123;\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">applyFilter</span><span class=\"hljs-params\">(<span class=\"hljs-number\">_</span>: UIAlertAction)</span></span> &#123;\n            <span class=\"hljs-comment\">// Set up a handler to handle prior edits.</span>\n            <span class=\"hljs-keyword\">let</span> options = <span class=\"hljs-type\">PHContentEditingInputRequestOptions</span>()\n            options.canHandleAdjustmentData = &#123;\n                $<span class=\"hljs-number\">0</span>.formatIdentifier == <span class=\"hljs-keyword\">self</span>.formatIdentifier &amp;&amp; $<span class=\"hljs-number\">0</span>.formatVersion == <span class=\"hljs-keyword\">self</span>.formatVersion\n            &#125;\n            \n            <span class=\"hljs-comment\">// Prepare for editing.</span>\n            asset.requestContentEditingInput(with: options, completionHandler: &#123; input, info <span class=\"hljs-keyword\">in</span>\n                <span class=\"hljs-keyword\">guard</span> <span class=\"hljs-keyword\">let</span> input = input\n                    <span class=\"hljs-keyword\">else</span> &#123; <span class=\"hljs-built_in\">fatalError</span>(<span class=\"hljs-string\">&quot;Can&#x27;t get the content-editing input: \\(info)&quot;</span>) &#125;\n                \n                <span class=\"hljs-comment\">// This handler executes on the main thread; dispatch to a background queue for processing.</span>\n                <span class=\"hljs-type\">DispatchQueue</span>.global(qos: .userInitiated).async &#123;\n                    \n                    <span class=\"hljs-comment\">// Create adjustment data describing the edit.</span>\n                    <span class=\"hljs-keyword\">let</span> adjustmentData = <span class=\"hljs-type\">PHAdjustmentData</span>(formatIdentifier: <span class=\"hljs-keyword\">self</span>.formatIdentifier,\n                                                          formatVersion: <span class=\"hljs-keyword\">self</span>.formatVersion,\n                                                          data: filterName.data(using: .utf8)!)\n                    \n                    <span class=\"hljs-comment\">// Create content editing output, write the adjustment data.</span>\n                    <span class=\"hljs-keyword\">let</span> output = <span class=\"hljs-type\">PHContentEditingOutput</span>(contentEditingInput: input)\n                    output.adjustmentData = adjustmentData\n                    \n                    <span class=\"hljs-comment\">// Select a filtering function for the asset&#x27;s media type.</span>\n                    <span class=\"hljs-keyword\">let</span> applyFunc: (<span class=\"hljs-type\">String</span>, <span class=\"hljs-type\">PHContentEditingInput</span>, <span class=\"hljs-type\">PHContentEditingOutput</span>, @escaping () -&gt; <span class=\"hljs-type\">Void</span>) -&gt; <span class=\"hljs-type\">Void</span>\n                    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">self</span>.asset.mediaSubtypes.<span class=\"hljs-built_in\">contains</span>(.photoLive) &#123;\n                        applyFunc = <span class=\"hljs-keyword\">self</span>.applyLivePhotoFilter\n                    &#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">self</span>.asset.mediaType == .image &#123;\n                        applyFunc = <span class=\"hljs-keyword\">self</span>.applyPhotoFilter\n                    &#125; <span class=\"hljs-keyword\">else</span> &#123;\n                        applyFunc = <span class=\"hljs-keyword\">self</span>.applyVideoFilter\n                    &#125;\n                    \n                    <span class=\"hljs-comment\">// Apply the filter.</span>\n                    applyFunc(filterName, input, output, &#123;\n                        <span class=\"hljs-comment\">// When the app finishes rendering the filtered result, commit the edit to the photo library.</span>\n                        <span class=\"hljs-type\">PHPhotoLibrary</span>.shared().performChanges(&#123;\n                            <span class=\"hljs-keyword\">let</span> request = <span class=\"hljs-type\">PHAssetChangeRequest</span>(<span class=\"hljs-keyword\">for</span>: <span class=\"hljs-keyword\">self</span>.asset)\n                            request.contentEditingOutput = output\n                        &#125;, completionHandler: &#123; success, error <span class=\"hljs-keyword\">in</span>\n                            <span class=\"hljs-keyword\">if</span> !success &#123; <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;Can&#x27;t edit the asset: \\(String(describing: error))&quot;</span>) &#125;\n                        &#125;)\n                    &#125;)\n                &#125;\n            &#125;)\n        &#125;\n        <span class=\"hljs-keyword\">return</span> applyFilter\n    &#125;\n    \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">applyPhotoFilter</span><span class=\"hljs-params\">(<span class=\"hljs-number\">_</span> filterName: String, input: PHContentEditingInput, output: PHContentEditingOutput, completion: <span class=\"hljs-params\">()</span></span></span> -&gt; <span class=\"hljs-type\">Void</span>) &#123;\n        \n        <span class=\"hljs-comment\">// Load the full-size image.</span>\n        <span class=\"hljs-keyword\">guard</span> <span class=\"hljs-keyword\">let</span> inputImage = <span class=\"hljs-type\">CIImage</span>(contentsOf: input.fullSizeImageURL!)\n            <span class=\"hljs-keyword\">else</span> &#123; <span class=\"hljs-built_in\">fatalError</span>(<span class=\"hljs-string\">&quot;Can&#x27;t load the input image to edit.&quot;</span>) &#125;\n        \n        <span class=\"hljs-comment\">// Apply the filter.</span>\n        <span class=\"hljs-keyword\">let</span> outputImage = inputImage\n            .oriented(forExifOrientation: input.fullSizeImageOrientation)\n            .applyingFilter(filterName, parameters: [:])\n        \n        <span class=\"hljs-comment\">// Write the edited image as a JPEG.</span>\n        <span class=\"hljs-keyword\">do</span> &#123;\n            <span class=\"hljs-keyword\">try</span> <span class=\"hljs-keyword\">self</span>.ciContext.writeJPEGRepresentation(of: outputImage,\n                                                       to: output.renderedContentURL, colorSpace: inputImage.colorSpace!, options: [:])\n        &#125; <span class=\"hljs-keyword\">catch</span> <span class=\"hljs-keyword\">let</span> error &#123;\n            <span class=\"hljs-built_in\">fatalError</span>(<span class=\"hljs-string\">&quot;Can&#x27;t apply the filter to the image: \\(error).&quot;</span>)\n        &#125;\n        completion()\n    &#125;\n    \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">applyLivePhotoFilter</span><span class=\"hljs-params\">(<span class=\"hljs-number\">_</span> filterName: String, input: PHContentEditingInput, output: PHContentEditingOutput, completion: @escaping <span class=\"hljs-params\">()</span></span></span> -&gt; <span class=\"hljs-type\">Void</span>) &#123;\n        \n        <span class=\"hljs-comment\">// This app filters assets only for output. In an app that previews</span>\n        <span class=\"hljs-comment\">// filters while editing, create a livePhotoContext early and reuse it</span>\n        <span class=\"hljs-comment\">// to render both for previewing and for final output.</span>\n        <span class=\"hljs-keyword\">guard</span> <span class=\"hljs-keyword\">let</span> livePhotoContext = <span class=\"hljs-type\">PHLivePhotoEditingContext</span>(livePhotoEditingInput: input)\n            <span class=\"hljs-keyword\">else</span> &#123; <span class=\"hljs-built_in\">fatalError</span>(<span class=\"hljs-string\">&quot;Can&#x27;t fetch the Live Photo to edit.&quot;</span>) &#125;\n        \n        livePhotoContext.frameProcessor = &#123; frame, <span class=\"hljs-number\">_</span> <span class=\"hljs-keyword\">in</span>\n            <span class=\"hljs-keyword\">return</span> frame.image.applyingFilter(filterName, parameters: [:])\n        &#125;\n        livePhotoContext.saveLivePhoto(to: output) &#123; success, error <span class=\"hljs-keyword\">in</span>\n            <span class=\"hljs-keyword\">if</span> success &#123;\n                completion()\n            &#125; <span class=\"hljs-keyword\">else</span> &#123;\n                <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;Can&#x27;t output the Live Photo.&quot;</span>)\n            &#125;\n        &#125;\n    &#125;\n    \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">applyVideoFilter</span><span class=\"hljs-params\">(<span class=\"hljs-number\">_</span> filterName: String, input: PHContentEditingInput, output: PHContentEditingOutput, completion: @escaping <span class=\"hljs-params\">()</span></span></span> -&gt; <span class=\"hljs-type\">Void</span>) &#123;\n        <span class=\"hljs-comment\">// Load the AVAsset to process from input.</span>\n        <span class=\"hljs-keyword\">guard</span> <span class=\"hljs-keyword\">let</span> avAsset = input.audiovisualAsset\n            <span class=\"hljs-keyword\">else</span> &#123; <span class=\"hljs-built_in\">fatalError</span>(<span class=\"hljs-string\">&quot;Can&#x27;t fetch the AVAsset to edit.&quot;</span>) &#125;\n        \n        <span class=\"hljs-comment\">// Set up a video composition to apply the filter.</span>\n        <span class=\"hljs-keyword\">let</span> composition = <span class=\"hljs-type\">AVVideoComposition</span>(\n            asset: avAsset,\n            applyingCIFiltersWithHandler: &#123; request <span class=\"hljs-keyword\">in</span>\n                <span class=\"hljs-keyword\">let</span> filtered = request.sourceImage.applyingFilter(filterName, parameters: [:])\n                request.finish(with: filtered, context: <span class=\"hljs-literal\">nil</span>)\n        &#125;)\n        \n        <span class=\"hljs-comment\">// Export the video composition to the output URL.</span>\n        <span class=\"hljs-keyword\">guard</span> <span class=\"hljs-keyword\">let</span> export = <span class=\"hljs-type\">AVAssetExportSession</span>(asset: avAsset, presetName: <span class=\"hljs-type\">AVAssetExportPresetHighestQuality</span>)\n            <span class=\"hljs-keyword\">else</span> &#123; <span class=\"hljs-built_in\">fatalError</span>(<span class=\"hljs-string\">&quot;Can&#x27;t configure the AVAssetExportSession.&quot;</span>) &#125;\n        export.outputFileType = <span class=\"hljs-type\">AVFileType</span>.mov\n        export.outputURL = output.renderedContentURL\n        export.videoComposition = composition\n        export.exportAsynchronously(completionHandler: completion)\n    &#125;\n\n<span class=\"hljs-comment\">// MARK: PHPhotoLibraryChangeObserver</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">extension</span> <span class=\"hljs-title\">AssetViewController</span>: <span class=\"hljs-title\">PHPhotoLibraryChangeObserver</span> </span>&#123;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">photoLibraryDidChange</span><span class=\"hljs-params\">(<span class=\"hljs-number\">_</span> changeInstance: PHChange)</span></span> &#123;\n        <span class=\"hljs-comment\">// The call might come on any background queue. Re-dispatch to the main queue to handle it.</span>\n        <span class=\"hljs-type\">DispatchQueue</span>.main.sync &#123;\n            <span class=\"hljs-comment\">// Check if there are changes to the displayed asset.</span>\n            <span class=\"hljs-keyword\">guard</span> <span class=\"hljs-keyword\">let</span> details = changeInstance.changeDetails(<span class=\"hljs-keyword\">for</span>: asset) <span class=\"hljs-keyword\">else</span> &#123; <span class=\"hljs-keyword\">return</span> &#125;\n            \n            <span class=\"hljs-comment\">// Get the updated asset.</span>\n            asset = details.objectAfterChanges\n            \n            <span class=\"hljs-comment\">// If the asset&#x27;s content changes, update the image and stop any video playback.</span>\n            <span class=\"hljs-keyword\">if</span> details.assetContentChanged &#123;\n                updateImage()\n                \n                playerLayer?.removeFromSuperlayer()\n                playerLayer = <span class=\"hljs-literal\">nil</span>\n            &#125;\n        &#125;\n    &#125;\n&#125;\n\n<span class=\"hljs-comment\">// MARK: PHLivePhotoViewDelegate</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">extension</span> <span class=\"hljs-title\">AssetViewController</span>: <span class=\"hljs-title\">PHLivePhotoViewDelegate</span> </span>&#123;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">livePhotoView</span><span class=\"hljs-params\">(<span class=\"hljs-number\">_</span> livePhotoView: PHLivePhotoView, willBeginPlaybackWith playbackStyle: PHLivePhotoViewPlaybackStyle)</span></span> &#123;\n        isPlayingHint = (playbackStyle == .hint)\n    &#125;\n    \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">livePhotoView</span><span class=\"hljs-params\">(<span class=\"hljs-number\">_</span> livePhotoView: PHLivePhotoView, didEndPlaybackWith playbackStyle: PHLivePhotoViewPlaybackStyle)</span></span> &#123;\n        isPlayingHint = (playbackStyle == .hint)\n    &#125;\n&#125;\n</code></pre>\n\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p><a href=\"https://developer.apple.com/documentation/photokit/browsing_and_modifying_photo_albums\">Browsing and Modifying Photo Albums</a><br><a href=\"https://nshipster.cn/nspredicate/\">NSPredicate</a><br><a href=\"https://nshipster.cn/nssortdescriptor/\">NSSortDescriptor</a></p>\n","site":{"data":{"fluid_static_prefix":{"internal_js":"/js","internal_css":"/css","internal_img":"/img","iconfont":"//at.alicdn.com/t/font_1736178_kmeydafke9r.css","anchor":"https://cdn.staticfile.org/anchor-js/4.2.2/","github_markdown":"https://cdn.staticfile.org/github-markdown-css/4.0.0/","jquery":"https://cdn.staticfile.org/jquery/3.4.1/","bootstrap":"https://cdn.staticfile.org/twitter-bootstrap/4.4.1/","highlightjs":"https://cdn.staticfile.org/highlight.js/10.0.0/","prismjs":"https://cdn.staticfile.org/prism/1.21.0/","tocbot":"https://cdn.staticfile.org/tocbot/4.11.1/","typed":"https://cdn.staticfile.org/typed.js/2.0.11/","fancybox":"https://cdn.staticfile.org/fancybox/3.5.7/","mathjax":"https://cdn.staticfile.org/mathjax/3.0.5/es5/","katex":"https://cdn.staticfile.org/KaTeX/0.11.1/","aplayer":"https://cdn.staticfile.org/aplayer/1.10.1/","busuanzi":"https://busuanzi.ibruce.info/busuanzi/2.3/","clipboard":"https://cdn.staticfile.org/clipboard.js/2.0.6/","mermaid":"https://cdn.staticfile.org/mermaid/8.5.0/","valine":"https://cdn.staticfile.org/valine/1.4.14/","gitalk":"https://cdn.staticfile.org/gitalk/1.6.2/","blueimp_md5":"https://cdn.staticfile.org/blueimp-md5/2.13.0/","disqusjs":"https://cdn.jsdelivr.net/npm/disqusjs@1.0/dist/","hint":"/lib/hint/"},"fluid_config":{"favicon":"/img/favicon.png","apple_touch_icon":"/img/favicon.png","title_join_string":" - ","force_https":false,"code":{"copy_btn":true,"highlight":{"enable":true,"lib":"highlightjs","highlightjs":{"style":"Github Gist","bg_color":false},"prismjs":{"style":"default","preprocess":true}}},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"_","loop":false},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"right","visible":"hover","icon":""},"mouse_click":{"enable":false,"style":"values"}},"dark_mode":{"enable":true,"default":"auto"},"color":{"body_bg_color":"#eee","body_bg_color_dark":"#181c27","navbar_bg_color":"#2f4154","navbar_bg_color_dark":"#1f3144","navbar_text_color":"#fff","navbar_text_color_dark":"#d0d0d0","text_color":"#3c4858","text_color_dark":"#c4c6c9","sec_text_color":"#718096","sec_text_color_dark":"#a7a9ad","post_text_color":"#2c3e50","post_text_color_dark":"#c4c6c9","post_heading_color":"#1a202c","post_heading_color_dark":"#c4c6c9","post_link_color":"#0366d6","post_link_color_dark":"#1589e9","link_hover_color":"#30a9de","link_hover_color_dark":"#30a9de","link_hover_bg_color":"#f8f9fa","link_hover_bg_color_dark":"#364151","board_color":"#fff","board_color_dark":"#252d38"},"font":{"font_size":"16px","font_family":null,"code_font_size":"85%"},"custom_js":null,"custom_css":null,"custom_html":"","web_analytics":{"enable":false,"baidu":null,"google":null,"gtag":null,"tencent":{"sid":null,"cid":null},"woyaola":null,"cnzz":null,"leancloud":{"app_id":null,"app_key":null,"server_url":null}},"lazyload":{"enable":true,"onlypost":false},"daovoice":{"enable":false,"appid":""},"aplayer":{"enable":false,"autoplay":false,"loop":"all","order":"random","theme":"#b7daff","songs":[{"name":"name","artist":"artist","url":"/songs/test.mp3","cover":"/img/cover.jpg"},{"name":"name","artist":"artist","url":"https://...url.mp3","cover":"https://...cover.jpg"}]},"version":{"check":false},"navbar":{"blog_title":"吃面多放葱","ground_glass":{"enable":false,"px":3,"alpha":0.7},"menu":[{"key":"home","link":"/","icon":"iconfont icon-home-fill"},{"key":"category","link":"/categories/","icon":"iconfont icon-category-fill"},{"key":"tag","link":"/tags/","icon":"iconfont icon-tags-fill"},{"key":"about","link":"/about/","icon":"iconfont icon-user-fill"}]},"search":{"enable":true,"path":"/local-search.xml","generate_path":"/local-search.xml","field":"post","content":true},"scroll_down_arrow":{"enable":true,"banner_height_limit":90,"scroll_after_turning_page":true},"banner_parallax":true,"footer":{"statistics":{"enable":false,"source":"busuanzi","pv_format":"总访问量 {} 次","uv_format":"总访客数 {} 人"},"beian":{"enable":false,"icp_text":"京ICP证123456号","police_text":"京公网安备12345678号","police_code":12345678,"police_icon":"/img/police_beian.png"}},"scroll_top_arrow":{"enable":true},"index":{"banner_img":"/img/default.png","banner_img_height":100,"banner_mask_alpha":0.3,"post_default_img":"","slogan":{"enable":true,"text":"像蚂蚁一样工作，像蝴蝶一样生活"},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"category":true,"tag":true}},"page":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3},"post":{"banner_img":"/img/default.png","banner_img_height":70,"banner_mask_alpha":0.3,"meta":{"author":{"enable":false},"date":{"enable":true,"format":"LL a"},"wordcount":{"enable":true,"format":"{} 字"},"min2read":{"enable":true,"format":"{} 分钟","words":100},"views":{"enable":false,"source":"busuanzi","format":"{} 次"}},"updated":{"enable":false,"content":"本文最后更新于：","relative":false},"toc":{"enable":true,"headingSelector":"h1,h2,h3,h4,h5,h6","collapseDepth":0},"copyright":{"enable":true,"content":"本博客所有文章除特别声明外，均采用 <a href=\"https://creativecommons.org/licenses/by-sa/4.0/deed.zh\" rel=\"nofollow noopener\">CC BY-SA 4.0 协议</a> ，转载请注明出处！"},"prev_next":{"enable":true},"custom":{"enable":false,"content":"<img src=\"https://octodex.github.com/images/jetpacktocat.png\" class=\"rounded mx-auto d-block mt-5\" style=\"width:150px; height:150px;\">"},"image_zoom":{"enable":true},"footnote":{"enable":true,"header":""},"math":{"enable":false,"specific":false,"engine":"mathjax"},"mermaid":{"enable":false,"specific":false,"options":{"theme":"default"}},"comments":{"enable":false,"type":"disqus"}},"utterances":{"repo":null,"issue_term":"pathname","label":"utterances","theme":"github-light","theme_dark":"github-dark","crossorigin":"anonymous"},"disqus":{"shortname":null,"disqusjs":false,"apikey":null},"gitalk":{"clientID":null,"clientSecret":null,"repo":null,"owner":null,"admin":["name"],"id":"location.pathname","language":"zh-CN","labels":["Gitalk"],"perPage":10,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true},"valine":{"appid":null,"appkey":null,"placeholder":"说点什么","path":"window.location.pathname","avatar":"retro","meta":["nick","mail","link"],"pageSize":10,"lang":"zh-CN","highlight":false,"recordIP":false,"serverURLs":null},"changyan":{"appid":"","appkey":""},"livere":{"uid":""},"remark42":{"host":"https://remark.haoyizebo.com","site_id":"haoyizebo","max_shown_comments":10,"locale":"zh"},"archive":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null},"category":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"post_limit":10,"order_by":"-length","collapse_depth":0},"tag":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null,"tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"avatar":"/img/avatar.png","name":"蔺国防","introduce":"移动应用开发者，历史文学爱好者","icons":[{"class":"iconfont icon-github-fill","link":"https://github.com","tip":"GitHub"},{"class":"iconfont icon-douban-fill","link":"https://douban.com","tip":"豆瓣"},{"class":"iconfont icon-wechat-fill","qrcode":"/img/favicon.png"}]},"page404":{"banner_img":"/img/default.png","banner_img_height":85,"banner_mask_alpha":0.3,"subtitle":"Page not found"},"links":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"items":[{"title":"Fluid Docs","intro":"主题使用指南","link":"https://hexo.fluid-dev.com/docs/","image":"/img/favicon.png"},{"title":"Fluid Repo","intro":"主题 GitHub 仓库","link":"https://github.com/fluid-dev/hexo-theme-fluid","image":"/img/favicon.png"},{"title":"Fluid Example","intro":"主题操作示例","link":"https://hexo.fluid-dev.com/docs/example/","image":"/img/favicon.png"}]}}}},"excerpt":"","more":"<p><img src=\"https://upload-images.jianshu.io/upload_images/3340896-b7a0956c45c82900.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Photos.png\"></p>\n<h3 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h3><p>苹果的PhotoKit,是提供给开发者的对本地相册库的和iCloud 相册的资源进行操作的API,所有资源以PHAsset的形式来提供给PhotoKit使用,同时本地的图片库和iCloud图片的变动通知,会发送给PhotoKit;同时,PhotoKit也可以通过 <strong>变更请求</strong> (编辑请求,改变请求,删除请求…)来对资源进行变更.</p>\n<h3 id=\"资源的操作\"><a href=\"#资源的操作\" class=\"headerlink\" title=\"资源的操作\"></a>资源的操作</h3><pre><code class=\"hljs reasonml\"><span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">PHPhotoLibrary</span>.</span></span>shared<span class=\"hljs-literal\">()</span>.register(self); <span class=\"hljs-comment\">// viewDidLoad 执行</span>\n<span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">PHPhotoLibrary</span>.</span></span>shared<span class=\"hljs-literal\">()</span>.unregister<span class=\"hljs-constructor\">ChangeObserver(<span class=\"hljs-params\">self</span>)</span>;<span class=\"hljs-comment\">//deinit 方法中执行</span>\n\nextension MasterViewController: PHPhotoLibraryChangeObserver &#123;<span class=\"hljs-comment\">//资源变动后的通知</span>\n    <span class=\"hljs-comment\">/// - Tag: RespondToChanges</span>\n    func photo<span class=\"hljs-constructor\">LibraryDidChange(<span class=\"hljs-params\">_</span> <span class=\"hljs-params\">changeInstance</span>: PHChange)</span> &#123;\n        \n        <span class=\"hljs-comment\">// Change notifications may originate from a background queue.</span>\n        <span class=\"hljs-comment\">// Re-dispatch to the main queue before acting on the change,</span>\n        <span class=\"hljs-comment\">// so you can update the UI.</span>\n        <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">DispatchQueue</span>.</span></span>main.sync &#123;\n        &#125;\n    &#125;\n&#125;\n</code></pre>\n\n<h3 id=\"资源的查找\"><a href=\"#资源的查找\" class=\"headerlink\" title=\"资源的查找\"></a>资源的查找</h3><p>排序和筛选条件我们可以根据 <a href=\"https://developer.apple.com/documentation/photokit/phfetchoptions\">PHFetchOptions</a>里面的 <code>predicate</code> 和 <code>sortDescriptors</code> 属性来设置, 里面也包含支持 <strong>predicate</strong> 和 <strong>sort</strong> 的 keys, 可以参考 <a href=\"https://nshipster.cn/nspredicate/\">NSPredicate</a> 和  <a href=\"https://nshipster.cn/nssortdescriptor/\">NSSortDescriptor</a> 来了解更多筛选和排序条件的设置.</p>\n<pre><code class=\"hljs reasonml\"><span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">PHAssetCollection</span>.</span></span>fetch<span class=\"hljs-constructor\">AssetCollections(<span class=\"hljs-params\">with</span>: .<span class=\"hljs-params\">smartAlbum</span>, <span class=\"hljs-params\">subtype</span>: .<span class=\"hljs-params\">albumRegular</span>, <span class=\"hljs-params\">options</span>: <span class=\"hljs-params\">nil</span>)</span><span class=\"hljs-comment\">//智能相册</span>\n<span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">PHCollectionList</span>.</span></span>fetch<span class=\"hljs-constructor\">TopLevelUserCollections(<span class=\"hljs-params\">with</span>: <span class=\"hljs-params\">nil</span>)</span><span class=\"hljs-comment\">//用户相册</span>\n<span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">PHAsset</span>.</span></span>fetch<span class=\"hljs-constructor\">Assets(<span class=\"hljs-params\">with</span>: <span class=\"hljs-params\">phtotfectchOptions</span>)</span><span class=\"hljs-comment\">//图片资源</span>\n</code></pre>\n\n<h3 id=\"资源的变更请求\"><a href=\"#资源的变更请求\" class=\"headerlink\" title=\"资源的变更请求\"></a>资源的变更请求</h3><pre><code class=\"hljs less\"><span class=\"hljs-comment\">//Asynchronously runs a block that requests changes to be performed in the photo library.  异步请求</span>\n<span class=\"hljs-selector-tag\">func</span>  <span class=\"hljs-selector-tag\">performChanges</span>(<span class=\"hljs-attribute\">_</span>:<span class=\"hljs-attribute\">completionHandler</span>:)\n<span class=\"hljs-comment\">//Synchronously runs a block that requests changes to be performed in the photo library.  同步请求</span>\n<span class=\"hljs-selector-tag\">func</span> <span class=\"hljs-selector-tag\">performChangesAndWait</span>(_ <span class=\"hljs-attribute\">changeBlock</span>: <span class=\"hljs-variable\">@escaping</span> () -&gt; Void) <span class=\"hljs-selector-tag\">throws</span></code></pre>\n\n<h3 id=\"Album的操作-增加-修改-删除\"><a href=\"#Album的操作-增加-修改-删除\" class=\"headerlink\" title=\"Album的操作(增加,修改,删除)\"></a>Album的操作(增加,修改,删除)</h3><pre><code class=\"hljs swift\"><span class=\"hljs-comment\">//增加相册</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">addAlbum</span><span class=\"hljs-params\">()</span></span> &#123;\n        <span class=\"hljs-type\">PHPhotoLibrary</span>.shared().performChanges(&#123;\n            <span class=\"hljs-keyword\">let</span> assetCollectionRequest = <span class=\"hljs-type\">PHCollectionListChangeRequest</span>.creationRequestForCollectionList(withTitle: <span class=\"hljs-string\">&quot;title&quot;</span>);\n            <span class=\"hljs-keyword\">self</span>.identifier =  assetCollectionRequest.placeholderForCreatedCollectionList.localIdentifier;\n        &#125;) &#123; (ret, error) <span class=\"hljs-keyword\">in</span>\n            <span class=\"hljs-keyword\">if</span> ret &#123;\n                <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">let</span> id = <span class=\"hljs-keyword\">self</span>.identifier &#123;\n                    <span class=\"hljs-keyword\">let</span> collections = <span class=\"hljs-type\">PHCollectionList</span>.fetchCollectionLists(withLocalIdentifiers: [id], options: <span class=\"hljs-literal\">nil</span>)\n                    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;\\(collections)&quot;</span>);\n                &#125;\n            &#125;\n        &#125;\n    &#125;\n    \n<span class=\"hljs-comment\">//删除相册</span>\n <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">deleteAlbum</span><span class=\"hljs-params\">()</span></span> &#123;\n        <span class=\"hljs-keyword\">let</span> fecthOptions = <span class=\"hljs-type\">PHFetchOptions</span>();\n        <span class=\"hljs-keyword\">let</span> predicate = <span class=\"hljs-type\">NSPredicate</span>.<span class=\"hljs-keyword\">init</span>(format: <span class=\"hljs-string\">&quot;localizedTitle == &#x27;title&#x27;&quot;</span>);\n        fecthOptions.predicate = predicate;\n        <span class=\"hljs-keyword\">let</span> titleList = <span class=\"hljs-type\">PHCollectionList</span>.fetchCollectionLists(with: .folder, subtype: .regularFolder, options: fecthOptions);\n        \n        <span class=\"hljs-type\">PHPhotoLibrary</span>.shared().performChanges(&#123;\n            <span class=\"hljs-type\">PHCollectionListChangeRequest</span>.deleteCollectionLists(titleList);\n        &#125;) &#123; (ret, error) <span class=\"hljs-keyword\">in</span>\n            <span class=\"hljs-keyword\">if</span> ret &#123;\n                <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;删除成功&quot;</span>);\n            &#125;\n        &#125;\n    &#125;\n<span class=\"hljs-comment\">//修改相册</span>\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">modifyAlbum</span><span class=\"hljs-params\">()</span></span> &#123;\n        <span class=\"hljs-keyword\">let</span> fecthOptions = <span class=\"hljs-type\">PHFetchOptions</span>();\n        <span class=\"hljs-keyword\">let</span> predicate = <span class=\"hljs-type\">NSPredicate</span>.<span class=\"hljs-keyword\">init</span>(format: <span class=\"hljs-string\">&quot;localizedTitle == &#x27;title&#x27;&quot;</span>);\n        fecthOptions.predicate = predicate;\n        <span class=\"hljs-keyword\">let</span> titleList = <span class=\"hljs-type\">PHCollectionList</span>.fetchCollectionLists(with: .folder, subtype: .regularFolder, options: fecthOptions);\n        <span class=\"hljs-type\">PHPhotoLibrary</span>.shared().performChanges(&#123;\n            \n            <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">let</span> collection = titleList.firstObject &#123;\n                <span class=\"hljs-keyword\">let</span> modifyRequest = <span class=\"hljs-type\">PHCollectionListChangeRequest</span>(<span class=\"hljs-keyword\">for</span>: collection);\n                modifyRequest?.title = <span class=\"hljs-string\">&quot;modify album&quot;</span>;\n            &#125;\n        &#125;) &#123; (ret, error) <span class=\"hljs-keyword\">in</span>\n            <span class=\"hljs-keyword\">if</span> ret &#123;\n                <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;修改成功&quot;</span>);\n            &#125;\n        &#125;\n   &#125;</code></pre>\n<h3 id=\"Asset的操作\"><a href=\"#Asset的操作\" class=\"headerlink\" title=\"Asset的操作\"></a>Asset的操作</h3><pre><code class=\"hljs swift\">   <span class=\"hljs-comment\">//增加</span>\n   <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">creationRequestForAsset</span><span class=\"hljs-params\">(from image: UIImage)</span></span> -&gt; <span class=\"hljs-type\">Self</span> \n   <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">creationRequestForAssetFromImage</span><span class=\"hljs-params\">(atFileURL fileURL: URL)</span></span> -&gt; <span class=\"hljs-type\">Self?</span>\n   <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">creationRequestForAssetFromVideo</span><span class=\"hljs-params\">(atFileURL fileURL: URL)</span></span> -&gt; <span class=\"hljs-type\">Self?</span>\n   <span class=\"hljs-comment\">//删除</span>\n   <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">deleteAssets</span><span class=\"hljs-params\">(<span class=\"hljs-number\">_</span> assets: NSFastEnumeration)</span></span>\n   <span class=\"hljs-comment\">//修改</span>\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">requestContentEditingInput</span><span class=\"hljs-params\">(with options: PHContentEditingInputRequestOptions?, completionHandler: @escaping <span class=\"hljs-params\">(PHContentEditingInput?, [AnyHashable : <span class=\"hljs-keyword\">Any</span>])</span></span></span> -&gt; <span class=\"hljs-type\">Void</span>) -&gt; <span class=\"hljs-type\">PHContentEditingInputRequestID</span>\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">cancelContentEditingInputRequest</span><span class=\"hljs-params\">(<span class=\"hljs-number\">_</span> requestID: PHContentEditingInputRequestID)</span></span>\n\n   <span class=\"hljs-comment\">// MARK: UI Actions</span>\n    <span class=\"hljs-comment\">/// - Tag: EditAlert</span>\n    <span class=\"hljs-meta\">@IBAction</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">editAsset</span><span class=\"hljs-params\">(<span class=\"hljs-number\">_</span> sender: UIBarButtonItem)</span></span> &#123;\n        <span class=\"hljs-comment\">// Use a UIAlertController to display editing options to the user.</span>\n        <span class=\"hljs-keyword\">let</span> alertController = <span class=\"hljs-type\">UIAlertController</span>(title: <span class=\"hljs-literal\">nil</span>, message: <span class=\"hljs-literal\">nil</span>, preferredStyle: .actionSheet)\n        #<span class=\"hljs-keyword\">if</span> os(iOS)\n        alertController.modalPresentationStyle = .popover\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">let</span> popoverController = alertController.popoverPresentationController &#123;\n            popoverController.barButtonItem = sender\n            popoverController.permittedArrowDirections = .up\n        &#125;\n        #endif\n        \n        <span class=\"hljs-comment\">// Add a Cancel action to dismiss the alert without doing anything.</span>\n        alertController.addAction(<span class=\"hljs-type\">UIAlertAction</span>(title: <span class=\"hljs-type\">NSLocalizedString</span>(<span class=\"hljs-string\">&quot;Cancel&quot;</span>, comment: <span class=\"hljs-string\">&quot;&quot;</span>),\n                                                style: .cancel, handler: <span class=\"hljs-literal\">nil</span>))\n        <span class=\"hljs-comment\">// Allow editing only if the PHAsset supports edit operations.</span>\n        <span class=\"hljs-keyword\">if</span> asset.canPerform(.content) &#123;\n            <span class=\"hljs-comment\">// Add actions for some canned filters.</span>\n            alertController.addAction(<span class=\"hljs-type\">UIAlertAction</span>(title: <span class=\"hljs-type\">NSLocalizedString</span>(<span class=\"hljs-string\">&quot;Sepia Tone&quot;</span>, comment: <span class=\"hljs-string\">&quot;&quot;</span>),\n                                                    style: .<span class=\"hljs-keyword\">default</span>, handler: getFilter(<span class=\"hljs-string\">&quot;CISepiaTone&quot;</span>)))\n            alertController.addAction(<span class=\"hljs-type\">UIAlertAction</span>(title: <span class=\"hljs-type\">NSLocalizedString</span>(<span class=\"hljs-string\">&quot;Chrome&quot;</span>, comment: <span class=\"hljs-string\">&quot;&quot;</span>),\n                                                    style: .<span class=\"hljs-keyword\">default</span>, handler: getFilter(<span class=\"hljs-string\">&quot;CIPhotoEffectChrome&quot;</span>)))\n            \n            <span class=\"hljs-comment\">// Add actions to revert any edits that have been made to the PHAsset.</span>\n            alertController.addAction(<span class=\"hljs-type\">UIAlertAction</span>(title: <span class=\"hljs-type\">NSLocalizedString</span>(<span class=\"hljs-string\">&quot;Revert&quot;</span>, comment: <span class=\"hljs-string\">&quot;&quot;</span>),\n                                                    style: .<span class=\"hljs-keyword\">default</span>, handler: revertAsset))\n        &#125;\n        <span class=\"hljs-comment\">// Present the UIAlertController.</span>\n        present(alertController, animated: <span class=\"hljs-literal\">true</span>)\n    &#125;\n    #<span class=\"hljs-keyword\">if</span> os(tvOS)\n    <span class=\"hljs-meta\">@IBAction</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">playLivePhoto</span><span class=\"hljs-params\">(<span class=\"hljs-number\">_</span> sender: <span class=\"hljs-keyword\">Any</span>)</span></span> &#123;\n        livePhotoView.startPlayback(with: .full)\n    &#125;\n    #endif\n    <span class=\"hljs-comment\">/// - Tag: PlayVideo</span>\n    <span class=\"hljs-meta\">@IBAction</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">play</span><span class=\"hljs-params\">(<span class=\"hljs-number\">_</span> sender: AnyObject)</span></span> &#123;\n        <span class=\"hljs-keyword\">if</span> playerLayer != <span class=\"hljs-literal\">nil</span> &#123;\n            <span class=\"hljs-comment\">// The app already created an AVPlayerLayer, so tell it to play.</span>\n            playerLayer.player!.play()\n        &#125; <span class=\"hljs-keyword\">else</span> &#123;\n            <span class=\"hljs-keyword\">let</span> options = <span class=\"hljs-type\">PHVideoRequestOptions</span>()\n            options.isNetworkAccessAllowed = <span class=\"hljs-literal\">true</span>\n            options.deliveryMode = .automatic\n            options.progressHandler = &#123; progress, <span class=\"hljs-number\">_</span>, <span class=\"hljs-number\">_</span>, <span class=\"hljs-number\">_</span> <span class=\"hljs-keyword\">in</span>\n                <span class=\"hljs-comment\">// The handler may originate on a background queue, so</span>\n                <span class=\"hljs-comment\">// re-dispatch to the main queue for UI work.</span>\n                <span class=\"hljs-type\">DispatchQueue</span>.main.sync &#123;\n                    <span class=\"hljs-keyword\">self</span>.progressView.progress = <span class=\"hljs-type\">Float</span>(progress)\n                &#125;\n            &#125;\n            <span class=\"hljs-comment\">// Request an AVPlayerItem for the displayed PHAsset.</span>\n            <span class=\"hljs-comment\">// Then configure a layer for playing it.</span>\n            <span class=\"hljs-type\">PHImageManager</span>.<span class=\"hljs-keyword\">default</span>().requestPlayerItem(forVideo: asset, options: options, resultHandler: &#123; playerItem, info <span class=\"hljs-keyword\">in</span>\n                <span class=\"hljs-type\">DispatchQueue</span>.main.sync &#123;\n                    <span class=\"hljs-keyword\">guard</span> <span class=\"hljs-keyword\">self</span>.playerLayer == <span class=\"hljs-literal\">nil</span> <span class=\"hljs-keyword\">else</span> &#123; <span class=\"hljs-keyword\">return</span> &#125;\n                    \n                    <span class=\"hljs-comment\">// Create an AVPlayer and AVPlayerLayer with the AVPlayerItem.</span>\n                    <span class=\"hljs-keyword\">let</span> player = <span class=\"hljs-type\">AVPlayer</span>(playerItem: playerItem)\n                    <span class=\"hljs-keyword\">let</span> playerLayer = <span class=\"hljs-type\">AVPlayerLayer</span>(player: player)\n                    \n                    <span class=\"hljs-comment\">// Configure the AVPlayerLayer and add it to the view.</span>\n                    playerLayer.videoGravity = <span class=\"hljs-type\">AVLayerVideoGravity</span>.resizeAspect\n                    playerLayer.frame = <span class=\"hljs-keyword\">self</span>.view.layer.bounds\n                    <span class=\"hljs-keyword\">self</span>.view.layer.addSublayer(playerLayer)\n                    \n                    player.play()\n                    \n                    <span class=\"hljs-comment\">// Cache the player layer by reference, so you can remove it later.</span>\n                    <span class=\"hljs-keyword\">self</span>.playerLayer = playerLayer\n                &#125;\n            &#125;)\n        &#125;\n    &#125;\n    <span class=\"hljs-comment\">/// - Tag: RemoveAsset</span>\n    <span class=\"hljs-meta\">@IBAction</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">removeAsset</span><span class=\"hljs-params\">(<span class=\"hljs-number\">_</span> sender: AnyObject)</span></span> &#123;\n        <span class=\"hljs-keyword\">let</span> completion = &#123; (success: <span class=\"hljs-type\">Bool</span>, error: <span class=\"hljs-type\">Error?</span>) -&gt; <span class=\"hljs-type\">Void</span> <span class=\"hljs-keyword\">in</span>\n            <span class=\"hljs-keyword\">if</span> success &#123;\n                <span class=\"hljs-type\">PHPhotoLibrary</span>.shared().unregisterChangeObserver(<span class=\"hljs-keyword\">self</span>)\n                <span class=\"hljs-type\">DispatchQueue</span>.main.sync &#123;\n                    <span class=\"hljs-number\">_</span> = <span class=\"hljs-keyword\">self</span>.navigationController!.popViewController(animated: <span class=\"hljs-literal\">true</span>)\n                &#125;\n            &#125; <span class=\"hljs-keyword\">else</span> &#123;\n                <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;Can&#x27;t remove the asset: \\(String(describing: error))&quot;</span>)\n            &#125;\n        &#125;\n        <span class=\"hljs-keyword\">if</span> assetCollection != <span class=\"hljs-literal\">nil</span> &#123;\n            <span class=\"hljs-comment\">// Remove the asset from the selected album.</span>\n            <span class=\"hljs-type\">PHPhotoLibrary</span>.shared().performChanges(&#123;\n                <span class=\"hljs-keyword\">let</span> request = <span class=\"hljs-type\">PHAssetCollectionChangeRequest</span>(<span class=\"hljs-keyword\">for</span>: <span class=\"hljs-keyword\">self</span>.assetCollection)!\n                request.removeAssets([<span class=\"hljs-keyword\">self</span>.asset] <span class=\"hljs-keyword\">as</span> <span class=\"hljs-type\">NSArray</span>)\n            &#125;, completionHandler: completion)\n        &#125; <span class=\"hljs-keyword\">else</span> &#123;\n            <span class=\"hljs-comment\">// Delete the asset from the photo library.</span>\n            <span class=\"hljs-type\">PHPhotoLibrary</span>.shared().performChanges(&#123;\n                <span class=\"hljs-type\">PHAssetChangeRequest</span>.deleteAssets([<span class=\"hljs-keyword\">self</span>.asset] <span class=\"hljs-keyword\">as</span> <span class=\"hljs-type\">NSArray</span>)\n            &#125;, completionHandler: completion)\n        &#125;\n    &#125;\n    <span class=\"hljs-comment\">/// - Tag: MarkFavorite</span>\n    <span class=\"hljs-meta\">@IBAction</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">toggleFavorite</span><span class=\"hljs-params\">(<span class=\"hljs-number\">_</span> sender: UIBarButtonItem)</span></span> &#123;\n        <span class=\"hljs-type\">PHPhotoLibrary</span>.shared().performChanges(&#123;\n            <span class=\"hljs-keyword\">let</span> request = <span class=\"hljs-type\">PHAssetChangeRequest</span>(<span class=\"hljs-keyword\">for</span>: <span class=\"hljs-keyword\">self</span>.asset)\n            request.isFavorite = !<span class=\"hljs-keyword\">self</span>.asset.isFavorite\n        &#125;, completionHandler: &#123; success, error <span class=\"hljs-keyword\">in</span>\n            <span class=\"hljs-keyword\">if</span> success &#123;\n                <span class=\"hljs-type\">DispatchQueue</span>.main.sync &#123;\n                    sender.title = <span class=\"hljs-keyword\">self</span>.asset.isFavorite ? <span class=\"hljs-string\">&quot;♥︎&quot;</span> : <span class=\"hljs-string\">&quot;♡&quot;</span>\n                &#125;\n            &#125; <span class=\"hljs-keyword\">else</span> &#123;\n                <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;Can&#x27;t mark the asset as a Favorite: \\(String(describing: error))&quot;</span>)\n            &#125;\n        &#125;)\n    &#125;\n    \n    <span class=\"hljs-comment\">// MARK: Image display</span>\n    \n    <span class=\"hljs-keyword\">var</span> targetSize: <span class=\"hljs-type\">CGSize</span> &#123;\n        <span class=\"hljs-keyword\">let</span> scale = <span class=\"hljs-type\">UIScreen</span>.main.scale\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-type\">CGSize</span>(width: imageView.bounds.width * scale, height: imageView.bounds.height * scale)\n    &#125;\n    \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">updateImage</span><span class=\"hljs-params\">()</span></span> &#123;\n        <span class=\"hljs-keyword\">if</span> asset.mediaSubtypes.<span class=\"hljs-built_in\">contains</span>(.photoLive) &#123;\n            updateLivePhoto()\n        &#125; <span class=\"hljs-keyword\">else</span> &#123;\n            updateStaticImage()\n        &#125;\n    &#125;\n    \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">updateLivePhoto</span><span class=\"hljs-params\">()</span></span> &#123;\n        <span class=\"hljs-comment\">// Prepare the options to pass when fetching the live photo.</span>\n        <span class=\"hljs-keyword\">let</span> options = <span class=\"hljs-type\">PHLivePhotoRequestOptions</span>()\n        options.deliveryMode = .highQualityFormat\n        options.isNetworkAccessAllowed = <span class=\"hljs-literal\">true</span>\n        options.progressHandler = &#123; progress, <span class=\"hljs-number\">_</span>, <span class=\"hljs-number\">_</span>, <span class=\"hljs-number\">_</span> <span class=\"hljs-keyword\">in</span>\n            <span class=\"hljs-comment\">// The handler may originate on a background queue, so</span>\n            <span class=\"hljs-comment\">// re-dispatch to the main queue for UI work.</span>\n            <span class=\"hljs-type\">DispatchQueue</span>.main.sync &#123;\n                <span class=\"hljs-keyword\">self</span>.progressView.progress = <span class=\"hljs-type\">Float</span>(progress)\n            &#125;\n        &#125;\n        \n        <span class=\"hljs-comment\">// Request the live photo for the asset from the default PHImageManager.</span>\n        <span class=\"hljs-type\">PHImageManager</span>.<span class=\"hljs-keyword\">default</span>().requestLivePhoto(<span class=\"hljs-keyword\">for</span>: asset, targetSize: targetSize, contentMode: .aspectFit, options: options,\n                                                  resultHandler: &#123; livePhoto, info <span class=\"hljs-keyword\">in</span>\n                                                    <span class=\"hljs-comment\">// PhotoKit finishes the request, so hide the progress view.</span>\n                                                    <span class=\"hljs-keyword\">self</span>.progressView.isHidden = <span class=\"hljs-literal\">true</span>\n                                                    \n                                                    <span class=\"hljs-comment\">// Show the Live Photo view.</span>\n                                                    <span class=\"hljs-keyword\">guard</span> <span class=\"hljs-keyword\">let</span> livePhoto = livePhoto <span class=\"hljs-keyword\">else</span> &#123; <span class=\"hljs-keyword\">return</span> &#125;\n                                                    \n                                                    <span class=\"hljs-comment\">// Show the Live Photo.</span>\n                                                    <span class=\"hljs-keyword\">self</span>.imageView.isHidden = <span class=\"hljs-literal\">true</span>\n                                                    <span class=\"hljs-keyword\">self</span>.livePhotoView.isHidden = <span class=\"hljs-literal\">false</span>\n                                                    <span class=\"hljs-keyword\">self</span>.livePhotoView.livePhoto = livePhoto\n                                                    \n                                                    <span class=\"hljs-keyword\">if</span> !<span class=\"hljs-keyword\">self</span>.isPlayingHint &#123;\n                                                        <span class=\"hljs-comment\">// Play back a short section of the Live Photo, similar to the Photos share sheet.</span>\n                                                        <span class=\"hljs-keyword\">self</span>.isPlayingHint = <span class=\"hljs-literal\">true</span>\n                                                        <span class=\"hljs-keyword\">self</span>.livePhotoView.startPlayback(with: .hint)\n                                                    &#125;\n        &#125;)\n    &#125;\n    \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">updateStaticImage</span><span class=\"hljs-params\">()</span></span> &#123;\n        <span class=\"hljs-comment\">// Prepare the options to pass when fetching the (photo, or video preview) image.</span>\n        <span class=\"hljs-keyword\">let</span> options = <span class=\"hljs-type\">PHImageRequestOptions</span>()\n        options.deliveryMode = .highQualityFormat\n        options.isNetworkAccessAllowed = <span class=\"hljs-literal\">true</span>\n        options.progressHandler = &#123; progress, <span class=\"hljs-number\">_</span>, <span class=\"hljs-number\">_</span>, <span class=\"hljs-number\">_</span> <span class=\"hljs-keyword\">in</span>\n            <span class=\"hljs-comment\">// The handler may originate on a background queue, so</span>\n            <span class=\"hljs-comment\">// re-dispatch to the main queue for UI work.</span>\n            <span class=\"hljs-type\">DispatchQueue</span>.main.sync &#123;\n                <span class=\"hljs-keyword\">self</span>.progressView.progress = <span class=\"hljs-type\">Float</span>(progress)\n            &#125;\n        &#125;\n        \n        <span class=\"hljs-type\">PHImageManager</span>.<span class=\"hljs-keyword\">default</span>().requestImage(<span class=\"hljs-keyword\">for</span>: asset, targetSize: targetSize, contentMode: .aspectFit, options: options,\n                                              resultHandler: &#123; image, <span class=\"hljs-number\">_</span> <span class=\"hljs-keyword\">in</span>\n                                                <span class=\"hljs-comment\">// PhotoKit finished the request, so hide the progress view.</span>\n                                                <span class=\"hljs-keyword\">self</span>.progressView.isHidden = <span class=\"hljs-literal\">true</span>\n                                                \n                                                <span class=\"hljs-comment\">// If the request succeeded, show the image view.</span>\n                                                <span class=\"hljs-keyword\">guard</span> <span class=\"hljs-keyword\">let</span> image = image <span class=\"hljs-keyword\">else</span> &#123; <span class=\"hljs-keyword\">return</span> &#125;\n                                                \n                                                <span class=\"hljs-comment\">// Show the image.</span>\n                                                <span class=\"hljs-keyword\">self</span>.livePhotoView.isHidden = <span class=\"hljs-literal\">true</span>\n                                                <span class=\"hljs-keyword\">self</span>.imageView.isHidden = <span class=\"hljs-literal\">false</span>\n                                                <span class=\"hljs-keyword\">self</span>.imageView.image = image\n        &#125;)\n    &#125;\n    \n    <span class=\"hljs-comment\">// MARK: Asset editing</span>\n    \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">revertAsset</span><span class=\"hljs-params\">(sender: UIAlertAction)</span></span> &#123;\n        <span class=\"hljs-type\">PHPhotoLibrary</span>.shared().performChanges(&#123;\n            <span class=\"hljs-keyword\">let</span> request = <span class=\"hljs-type\">PHAssetChangeRequest</span>(<span class=\"hljs-keyword\">for</span>: <span class=\"hljs-keyword\">self</span>.asset)\n            request.revertAssetContentToOriginal()\n        &#125;, completionHandler: &#123; success, error <span class=\"hljs-keyword\">in</span>\n            <span class=\"hljs-keyword\">if</span> !success &#123; <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;Can&#x27;t revert the asset: \\(String(describing: error))&quot;</span>) &#125;\n        &#125;)\n    &#125;\n    \n    <span class=\"hljs-comment\">// Returns a filter-applier function for the named filter.</span>\n    <span class=\"hljs-comment\">// Use the function as a handler for a UIAlertAction object.</span>\n    <span class=\"hljs-comment\">/// - Tag: ApplyFilter</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">getFilter</span><span class=\"hljs-params\">(<span class=\"hljs-number\">_</span> filterName: String)</span></span> -&gt; (<span class=\"hljs-type\">UIAlertAction</span>) -&gt; <span class=\"hljs-type\">Void</span> &#123;\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">applyFilter</span><span class=\"hljs-params\">(<span class=\"hljs-number\">_</span>: UIAlertAction)</span></span> &#123;\n            <span class=\"hljs-comment\">// Set up a handler to handle prior edits.</span>\n            <span class=\"hljs-keyword\">let</span> options = <span class=\"hljs-type\">PHContentEditingInputRequestOptions</span>()\n            options.canHandleAdjustmentData = &#123;\n                $<span class=\"hljs-number\">0</span>.formatIdentifier == <span class=\"hljs-keyword\">self</span>.formatIdentifier &amp;&amp; $<span class=\"hljs-number\">0</span>.formatVersion == <span class=\"hljs-keyword\">self</span>.formatVersion\n            &#125;\n            \n            <span class=\"hljs-comment\">// Prepare for editing.</span>\n            asset.requestContentEditingInput(with: options, completionHandler: &#123; input, info <span class=\"hljs-keyword\">in</span>\n                <span class=\"hljs-keyword\">guard</span> <span class=\"hljs-keyword\">let</span> input = input\n                    <span class=\"hljs-keyword\">else</span> &#123; <span class=\"hljs-built_in\">fatalError</span>(<span class=\"hljs-string\">&quot;Can&#x27;t get the content-editing input: \\(info)&quot;</span>) &#125;\n                \n                <span class=\"hljs-comment\">// This handler executes on the main thread; dispatch to a background queue for processing.</span>\n                <span class=\"hljs-type\">DispatchQueue</span>.global(qos: .userInitiated).async &#123;\n                    \n                    <span class=\"hljs-comment\">// Create adjustment data describing the edit.</span>\n                    <span class=\"hljs-keyword\">let</span> adjustmentData = <span class=\"hljs-type\">PHAdjustmentData</span>(formatIdentifier: <span class=\"hljs-keyword\">self</span>.formatIdentifier,\n                                                          formatVersion: <span class=\"hljs-keyword\">self</span>.formatVersion,\n                                                          data: filterName.data(using: .utf8)!)\n                    \n                    <span class=\"hljs-comment\">// Create content editing output, write the adjustment data.</span>\n                    <span class=\"hljs-keyword\">let</span> output = <span class=\"hljs-type\">PHContentEditingOutput</span>(contentEditingInput: input)\n                    output.adjustmentData = adjustmentData\n                    \n                    <span class=\"hljs-comment\">// Select a filtering function for the asset&#x27;s media type.</span>\n                    <span class=\"hljs-keyword\">let</span> applyFunc: (<span class=\"hljs-type\">String</span>, <span class=\"hljs-type\">PHContentEditingInput</span>, <span class=\"hljs-type\">PHContentEditingOutput</span>, @escaping () -&gt; <span class=\"hljs-type\">Void</span>) -&gt; <span class=\"hljs-type\">Void</span>\n                    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">self</span>.asset.mediaSubtypes.<span class=\"hljs-built_in\">contains</span>(.photoLive) &#123;\n                        applyFunc = <span class=\"hljs-keyword\">self</span>.applyLivePhotoFilter\n                    &#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">self</span>.asset.mediaType == .image &#123;\n                        applyFunc = <span class=\"hljs-keyword\">self</span>.applyPhotoFilter\n                    &#125; <span class=\"hljs-keyword\">else</span> &#123;\n                        applyFunc = <span class=\"hljs-keyword\">self</span>.applyVideoFilter\n                    &#125;\n                    \n                    <span class=\"hljs-comment\">// Apply the filter.</span>\n                    applyFunc(filterName, input, output, &#123;\n                        <span class=\"hljs-comment\">// When the app finishes rendering the filtered result, commit the edit to the photo library.</span>\n                        <span class=\"hljs-type\">PHPhotoLibrary</span>.shared().performChanges(&#123;\n                            <span class=\"hljs-keyword\">let</span> request = <span class=\"hljs-type\">PHAssetChangeRequest</span>(<span class=\"hljs-keyword\">for</span>: <span class=\"hljs-keyword\">self</span>.asset)\n                            request.contentEditingOutput = output\n                        &#125;, completionHandler: &#123; success, error <span class=\"hljs-keyword\">in</span>\n                            <span class=\"hljs-keyword\">if</span> !success &#123; <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;Can&#x27;t edit the asset: \\(String(describing: error))&quot;</span>) &#125;\n                        &#125;)\n                    &#125;)\n                &#125;\n            &#125;)\n        &#125;\n        <span class=\"hljs-keyword\">return</span> applyFilter\n    &#125;\n    \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">applyPhotoFilter</span><span class=\"hljs-params\">(<span class=\"hljs-number\">_</span> filterName: String, input: PHContentEditingInput, output: PHContentEditingOutput, completion: <span class=\"hljs-params\">()</span></span></span> -&gt; <span class=\"hljs-type\">Void</span>) &#123;\n        \n        <span class=\"hljs-comment\">// Load the full-size image.</span>\n        <span class=\"hljs-keyword\">guard</span> <span class=\"hljs-keyword\">let</span> inputImage = <span class=\"hljs-type\">CIImage</span>(contentsOf: input.fullSizeImageURL!)\n            <span class=\"hljs-keyword\">else</span> &#123; <span class=\"hljs-built_in\">fatalError</span>(<span class=\"hljs-string\">&quot;Can&#x27;t load the input image to edit.&quot;</span>) &#125;\n        \n        <span class=\"hljs-comment\">// Apply the filter.</span>\n        <span class=\"hljs-keyword\">let</span> outputImage = inputImage\n            .oriented(forExifOrientation: input.fullSizeImageOrientation)\n            .applyingFilter(filterName, parameters: [:])\n        \n        <span class=\"hljs-comment\">// Write the edited image as a JPEG.</span>\n        <span class=\"hljs-keyword\">do</span> &#123;\n            <span class=\"hljs-keyword\">try</span> <span class=\"hljs-keyword\">self</span>.ciContext.writeJPEGRepresentation(of: outputImage,\n                                                       to: output.renderedContentURL, colorSpace: inputImage.colorSpace!, options: [:])\n        &#125; <span class=\"hljs-keyword\">catch</span> <span class=\"hljs-keyword\">let</span> error &#123;\n            <span class=\"hljs-built_in\">fatalError</span>(<span class=\"hljs-string\">&quot;Can&#x27;t apply the filter to the image: \\(error).&quot;</span>)\n        &#125;\n        completion()\n    &#125;\n    \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">applyLivePhotoFilter</span><span class=\"hljs-params\">(<span class=\"hljs-number\">_</span> filterName: String, input: PHContentEditingInput, output: PHContentEditingOutput, completion: @escaping <span class=\"hljs-params\">()</span></span></span> -&gt; <span class=\"hljs-type\">Void</span>) &#123;\n        \n        <span class=\"hljs-comment\">// This app filters assets only for output. In an app that previews</span>\n        <span class=\"hljs-comment\">// filters while editing, create a livePhotoContext early and reuse it</span>\n        <span class=\"hljs-comment\">// to render both for previewing and for final output.</span>\n        <span class=\"hljs-keyword\">guard</span> <span class=\"hljs-keyword\">let</span> livePhotoContext = <span class=\"hljs-type\">PHLivePhotoEditingContext</span>(livePhotoEditingInput: input)\n            <span class=\"hljs-keyword\">else</span> &#123; <span class=\"hljs-built_in\">fatalError</span>(<span class=\"hljs-string\">&quot;Can&#x27;t fetch the Live Photo to edit.&quot;</span>) &#125;\n        \n        livePhotoContext.frameProcessor = &#123; frame, <span class=\"hljs-number\">_</span> <span class=\"hljs-keyword\">in</span>\n            <span class=\"hljs-keyword\">return</span> frame.image.applyingFilter(filterName, parameters: [:])\n        &#125;\n        livePhotoContext.saveLivePhoto(to: output) &#123; success, error <span class=\"hljs-keyword\">in</span>\n            <span class=\"hljs-keyword\">if</span> success &#123;\n                completion()\n            &#125; <span class=\"hljs-keyword\">else</span> &#123;\n                <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;Can&#x27;t output the Live Photo.&quot;</span>)\n            &#125;\n        &#125;\n    &#125;\n    \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">applyVideoFilter</span><span class=\"hljs-params\">(<span class=\"hljs-number\">_</span> filterName: String, input: PHContentEditingInput, output: PHContentEditingOutput, completion: @escaping <span class=\"hljs-params\">()</span></span></span> -&gt; <span class=\"hljs-type\">Void</span>) &#123;\n        <span class=\"hljs-comment\">// Load the AVAsset to process from input.</span>\n        <span class=\"hljs-keyword\">guard</span> <span class=\"hljs-keyword\">let</span> avAsset = input.audiovisualAsset\n            <span class=\"hljs-keyword\">else</span> &#123; <span class=\"hljs-built_in\">fatalError</span>(<span class=\"hljs-string\">&quot;Can&#x27;t fetch the AVAsset to edit.&quot;</span>) &#125;\n        \n        <span class=\"hljs-comment\">// Set up a video composition to apply the filter.</span>\n        <span class=\"hljs-keyword\">let</span> composition = <span class=\"hljs-type\">AVVideoComposition</span>(\n            asset: avAsset,\n            applyingCIFiltersWithHandler: &#123; request <span class=\"hljs-keyword\">in</span>\n                <span class=\"hljs-keyword\">let</span> filtered = request.sourceImage.applyingFilter(filterName, parameters: [:])\n                request.finish(with: filtered, context: <span class=\"hljs-literal\">nil</span>)\n        &#125;)\n        \n        <span class=\"hljs-comment\">// Export the video composition to the output URL.</span>\n        <span class=\"hljs-keyword\">guard</span> <span class=\"hljs-keyword\">let</span> export = <span class=\"hljs-type\">AVAssetExportSession</span>(asset: avAsset, presetName: <span class=\"hljs-type\">AVAssetExportPresetHighestQuality</span>)\n            <span class=\"hljs-keyword\">else</span> &#123; <span class=\"hljs-built_in\">fatalError</span>(<span class=\"hljs-string\">&quot;Can&#x27;t configure the AVAssetExportSession.&quot;</span>) &#125;\n        export.outputFileType = <span class=\"hljs-type\">AVFileType</span>.mov\n        export.outputURL = output.renderedContentURL\n        export.videoComposition = composition\n        export.exportAsynchronously(completionHandler: completion)\n    &#125;\n\n<span class=\"hljs-comment\">// MARK: PHPhotoLibraryChangeObserver</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">extension</span> <span class=\"hljs-title\">AssetViewController</span>: <span class=\"hljs-title\">PHPhotoLibraryChangeObserver</span> </span>&#123;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">photoLibraryDidChange</span><span class=\"hljs-params\">(<span class=\"hljs-number\">_</span> changeInstance: PHChange)</span></span> &#123;\n        <span class=\"hljs-comment\">// The call might come on any background queue. Re-dispatch to the main queue to handle it.</span>\n        <span class=\"hljs-type\">DispatchQueue</span>.main.sync &#123;\n            <span class=\"hljs-comment\">// Check if there are changes to the displayed asset.</span>\n            <span class=\"hljs-keyword\">guard</span> <span class=\"hljs-keyword\">let</span> details = changeInstance.changeDetails(<span class=\"hljs-keyword\">for</span>: asset) <span class=\"hljs-keyword\">else</span> &#123; <span class=\"hljs-keyword\">return</span> &#125;\n            \n            <span class=\"hljs-comment\">// Get the updated asset.</span>\n            asset = details.objectAfterChanges\n            \n            <span class=\"hljs-comment\">// If the asset&#x27;s content changes, update the image and stop any video playback.</span>\n            <span class=\"hljs-keyword\">if</span> details.assetContentChanged &#123;\n                updateImage()\n                \n                playerLayer?.removeFromSuperlayer()\n                playerLayer = <span class=\"hljs-literal\">nil</span>\n            &#125;\n        &#125;\n    &#125;\n&#125;\n\n<span class=\"hljs-comment\">// MARK: PHLivePhotoViewDelegate</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">extension</span> <span class=\"hljs-title\">AssetViewController</span>: <span class=\"hljs-title\">PHLivePhotoViewDelegate</span> </span>&#123;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">livePhotoView</span><span class=\"hljs-params\">(<span class=\"hljs-number\">_</span> livePhotoView: PHLivePhotoView, willBeginPlaybackWith playbackStyle: PHLivePhotoViewPlaybackStyle)</span></span> &#123;\n        isPlayingHint = (playbackStyle == .hint)\n    &#125;\n    \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">livePhotoView</span><span class=\"hljs-params\">(<span class=\"hljs-number\">_</span> livePhotoView: PHLivePhotoView, didEndPlaybackWith playbackStyle: PHLivePhotoViewPlaybackStyle)</span></span> &#123;\n        isPlayingHint = (playbackStyle == .hint)\n    &#125;\n&#125;\n</code></pre>\n\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p><a href=\"https://developer.apple.com/documentation/photokit/browsing_and_modifying_photo_albums\">Browsing and Modifying Photo Albums</a><br><a href=\"https://nshipster.cn/nspredicate/\">NSPredicate</a><br><a href=\"https://nshipster.cn/nssortdescriptor/\">NSSortDescriptor</a></p>\n"},{"title":"Runtime编程指南","date":"2018-01-16T12:54:00.000Z","_content":"## 介绍\n\nObjective-C语言从编译、链接、到运行都有很多决策。只要有可能，它都是动态的。这意味着该语言不仅需要编译器，还需要运行时系统来执行编译后的代码。运行时系统作为Objective-C语言的一种操作系统;这就是语言的作用。\n本文档关注NSObject类，以及Objective-C程序如何与运行时系统交互。特别是，它检查了在运行时动态加载新类的范例，并将消息转发给其他对象。它还提供关于在程序运行时如何查找对象信息的相关内容。\n您应该阅读本文档以了解Objective-C运行时系统如何工作以及如何利用它。但是，通常情况下，您不需要知道和理解这些材料来编写Cocoa应用程序。\n## Runtime 版本和平台（省略）\n\n## Runtime交互\n\nOC在三个不同层面跟runtime系统交互: 通过OC源代码;通过Foundation框架下NSObject定义的方法;通过直接调用runtime函数.\n\n### Objective-C 源码\n\n在大多数情况下，运行时系统会自动地在幕后工作。您只需编写和编译Objective-C源代码就可以使用它。\n\n当编译包含Objective-C类和方法的代码时，编译器会创建实现语言动态特性的数据结构和函数调用。数据结构捕获在类和类别定义,协议声明中发现的信息;它们包括在Objective-C编程语言中定义的类对象和协议对象，以及方法选择器、实例变量的模板和从源代码中提取的其他信息。runtime最重要的函数是发送消息的函数，如*消息传递*中所描述的那样。它是由源代码消息表达式调用的。\n\n### NSObject 方法\n\nCocoa中的大多数对象都是NSObject类的子类，所以大多数对象继承了它定义的方法。(值得注意的例外是NSProxy类;参见*消息转发*以获取更多信息。因此，它的方法建立了每个实例和每个类对象固有的行为。然而，在少数情况下，NSObject类仅仅定义了应该如何做的模板;它没有提供所有必要的代码。\n\n例如，NSObject类定义了一个描述实例方法，该方法返回描述类内容的字符串。这主要用于调试——GDB打印对象命令打印从该方法返回的字符串。NSObject的这个方法的实现不知道类包含什么，所以它返回一个带有对象名称和地址的字符串。NSObject的子类可以实现这个方法来返回更多的细节。例如，Foundation类NSArray返回它所包含的对象的描述列表。\n\n一些NSObject方法简单地查询运行时系统的信息。这些方法允许对象执行内部自检。此类方法的示例是类方法，该类要求对象标识其类;`isKindOfClass:`和`isMemberOfClass:`测试对象在继承层次结构中的位置;`respondsToSelector:`表示一个对象是否可以接受特定的消息;`conformsToProtocol:`表示一个对象是否实现了特定协议中定义的方法;和`methodForSelector:`，它提供了方法实现的地址。像这样的方法给了一个对象自检的能力。\n\n### Runtime 函数\n\n运行时系统是一个动态共享库，其公共接口由位于目录/usr/include/objc中的头文件中的一组函数和数据结构组成。许多这些函数允许您使用plain C来复制编译器在编写Objective-C代码时所做的工作。其他则是通过NSObject类方法导出的功能的基础。这些功能使开发运行时系统的其他接口成为可能，并生成增强开发环境的工具;在Objective-C中编程时不需要它们。然而，在编写Objective-C程序时，一些运行时函数可能会非常有用。所有这些功能都记录在Objective-C运行时引用中。\n\n## 消息传递\n\n本章描述如何将消息表达式转换为`objc_msgSend`函数调用，以及如何通过名称引用方法。然后它解释了如何利用`objc_msgSend`，如果需要的话，可以绕过动态绑定。\n\n### objc_msgSend 函数\n\n在Objective-C中，消息直到运行时才绑定到方法实现。编译器将消息表达式转换为对消息传递函数`objc_msgSend`的调用。该函数接受消息的接收者和消息中提到的方法的名称，即方法selector—作为它的两个主要参数:\n\n```\nobjc_msgSend(receiver, selector)\n```\n消息中传送过来的任何参数也通过`objc_msgSend`来处理:\n\n```\nobjc_msgSend(receiver, selector, arg1, arg2, ...)\n```\n消息传递函数为实现动态绑定所做的必要事情:\n\n- 它首先查找选择器引用的过程(方法实现)。由于相同的方法可以通过不同的类实现不同的实现，因此它所发现的精确过程取决于接收者的类。\n- 然后在调用程序中，将接收对象(指向它的数据的指针)传递，以及为该方法指定的任何参数。\n- 最后，它将程序的返回值作为其本身的返回值传递。\n\n> 注意: 编译器通常调用消息传递函数.不要在你写的代码中直接调用它.\n\n消息传递的关键在于编译器为每个类和对象构建的结构。每个类结构包括这两个基本要素:\n\n- 指向父类的指针。\n- 一个类分派表。这个表有关联方法选择器和它们识别的方法的类特定地址的条目。`setOrigin`方法的选择器与其实现地址相关联;`display`方法的选择器与其实现地址相关联，等等。\n\n创建新对象时，将分配内存，并初始化其实例变量。对象的首个变量是指向其类结构的指针。这个指针称为isa，它使对象可以访问它的类，并通过该类对它继承的所有类进行访问。\n\n> 虽然这不是语言的一部分，但是需要isa指针来处理Objective-C运行时系统。在结构定义的任何字段中，对象需要“等效”到struct objc_object(在objc/objc.h中定义)。然而，您很少需要创建自己的根对象，而从NSObject或NSProxy继承的对象会自动拥有isa变量。\n\n这些类元素和对象结构在 *Figure 3- 1* 中阐述.\n\n![Figure 3-1 消息传递结构](http://upload-images.jianshu.io/upload_images/3340896-dc0283a1fceff976.gif?imageMogr2/auto-orient/strip)\n\n当消息被发送到一个对象时，消息传递函数会跟随对象的isa指针到类结构，它在分派表中查找方法选择器。如果它在那里找不到选择器，`objc_msgSend`会跟随指向父类的指针，并试图在它的分派表中找到选择器。连续的失败导致`objc_msgSend`爬升类层次结构，直到它到达NSObject类。一旦它定位了选择器，函数调用表中的该方法并将接收对象的数据结构传递给它。\n\n这是在运行时选择方法实现的方式——或者，用面向对象编程的行话来说，方法是动态绑定到消息的。\n\n为了加快消息传递进程，运行时系统将缓存选择器和方法的地址。每个类都有一个单独的缓存，它可以包含用于继承方法的选择器以及类中定义的方法。在搜索调度表之前，消息传递例程首先检查接收对象的类的缓存(关于可能再次使用的方法可能会再次使用的理论)。如果方法选择器在缓存中，消息传递只比函数调用稍微慢一点。一旦程序运行足够长的时间来“预热”它的缓存，它发送的几乎所有消息都会找到一个缓存的方法。当程序运行时，缓存会动态地增长以容纳新的消息。\n\n### 使用隐藏的参数\n\n当`objc_msgSend`找到实现方法的过程时，它调用该过程并将消息中的所有参数传递给它。同时传递隐藏的两个参数:\n\n- 接收对象\n- 方法的选择器。\n这些参数提供了关于调用它的消息表达式的另一半显式信息。它们被认为是“隐藏的”，因为它们没有在定义方法的源代码中声明。当代码被编译时，它们被插入到实现中。\n\n虽然这些参数没有显式地声明，但是源代码仍然可以引用它们(就像它可以引用接收对象的实例变量一样)。方法将接收对象作为self，并将它的方法选择器作为_cmd。在下面的示例中，_cmd 引用方法选择器作为strange的方法,引用self做为strange消息的接收对象。\n\n```\n- strange\n{\n    id  target = getTheReceiver();\n    SEL method = getTheMethod();\n \n    if ( target == self || method == _cmd )\n        return nil;\n    return [target performSelector:method];\n}\n```\nself是两个参数中比较有用的一个。实际上，接收对象的实例变量的方式可以用于方法定义。\n\n### 获取一个方法的地址\n\n规避动态绑定的唯一方法是获取方法的地址，并直接调用它，就像它是一个函数一样。这可能适用于极少数情况下，特定的方法将连续多次执行，并且您希望在每次执行方法时避免消息传递的开销。\n\n使用NSObject类中定义的方法，methodForSelector:，您可以要求一个指向方法实现的指针，然后使用指针来调用该过程。methodForSelector:返回的指针必须小心地转换为合适的函数类型。返回类型和参数类型都应该包含在转换中。\n\n下面的示例展示了实现`setFilled`方法可能调用的流程:\n\n```\nvoid (*setter)(id, SEL, BOOL);\nint i;\n \nsetter = (void (*)(id, SEL, BOOL))[target\n    methodForSelector:@selector(setFilled:)];\nfor ( i = 0 ; i < 1000 ; i++ )\n    setter(targetList[i], @selector(setFilled:), YES);\n```\n传递给流程的前两个参数是接收对象(self)和方法选择器(_cmd)。这些参数隐藏在方法语法中，但是当方法被调用为函数时，必须显式地进行说明。\n\n使用methodForSelector:规避动态绑定可以节省消息传递所需的大部分时间。但是，只有在一个特定的消息重复多次的情况下，才会有显著的节省，如上面所示的for循环。\n\n注意，methodForSelector:由Cocoa运行时系统提供;这不是Objective-C语言本身的特性。\n\n## 动态方法解决方案\n\n本章描述如何动态地提供方法的实现。\n\n### 动态方法解决方案\n\n有些情况下，您可能希望动态地提供方法的实现。例如，Objective-C声明的属性特性(参见Objective-C编程语言中的声明属性)包括@dynamic指令:\n\n```\n@dynamic propertyName;\n```\n它告诉编译器将动态地提供与属性关联的方法。\n\n您可以实现方法resolveInstanceMethod:和resolveClassMethod:为实例和类方法动态地提供给定选择器的实现。\n\nObjective-C方法仅仅是一个C函数，它至少需要两个参数-self和_cmd。您可以使用函数`class_addMethod`将函数添加到类中。因此，给定以下函数:\n\n```\nvoid dynamicMethodIMP(id self, SEL _cmd) {\n    // implementation ....\n}\n```\n可以动态地将其添加到一个类作为一个方法(称为resolveThisMethodDynamically)使用resolveInstanceMethod:是这样的:\n```\n@implementation MyClass\n+ (BOOL)resolveInstanceMethod:(SEL)aSEL\n{\n    if (aSEL == @selector(resolveThisMethodDynamically)) {\n          class_addMethod([self class], aSEL, (IMP) dynamicMethodIMP, \"v@:\");\n          return YES;\n    }\n    return [super resolveInstanceMethod:aSEL];\n}\n@end\n```\n转发方法(如消息转发中所描述的)和动态方法解析在很大程度上是正交的。类有机会在转发机制启动之前动态解析方法。如果调用`respondsToSelector`或`instancesRespondToSelector:`方法,动态方法解析器就有机会给选择器提供一个IMP。如果您实现了`resolveInstanceMethod:`但是希望特定的选择器通过转发机制来转发，给这些方法选择器返回NO.\n\n### 动态加载\n\nObjective-C程序可以在运行时加载和链接新的类和类别。新代码合并到程序中，并在开始时对加载的类和类别进行相同的处理。\n\n动态加载可以用来做很多不同的事情。例如，系统首选项应用程序中的各个模块是动态加载的。\n\n在Cocoa环境中，动态加载通常用于允许定制应用程序。其他人可以编写程序在运行时加载的模块——就像接口构建器加载自定义面板和OS X系统首选项应用程序加载自定义的偏好模块一样。可加载模块扩展了应用程序的功能。他们以你允许的方式对它做出贡献，但却无法预见或定义你自己。您提供了框架，但其他人提供了代码。\n\n虽然有一个运行时函数，在Mach-O文件中执行Objective-C模块的动态加载(objc /objc-load.h中定义的objc_loadmodule)，但Cocoa的NSBundle类为动态加载提供了一个更方便的接口，这是面向对象的，并与相关的服务集成在一起。在Foundation框架参考中查看NSBundle类规范，了解关于NSBundle类及其使用的信息。请参阅OS X ABI Mach-O文件格式参考，以获取关于Mach-O文件的信息。\n\n## 消息转发\n\n向不处理该消息的对象发送消息是错误的。然而，在宣布错误之前，运行时系统会再给接收对象一个机会来处理该消息。\n\n### 转发\n\n如果您向一个不处理该消息的对象发送消息，在宣布一个错误之前，运行时将向对象发送对象一个`forwardInvocation:`消息,并携带一个`NSInvocation`对象参数——NSInvocation对象封装了原始消息和传递给它的参数。\n\n您可以实现一个`forwardInvocation:`方法来提供对消息的默认响应，或者以其他方式避免错误。正如其名称所暗示的,`forwardInvocation`通常用于将消息转发到另一个对象。\n\n为了查看转发的范围和意图，请想象以下场景:假设您正在设计一个对象，该对象可以响应一个名为`negotiate`的消息，您希望它的响应包含另一类型对象的响应。通过在您实现`negotiate`方法的主体中传递一个`negotiate`消息到其他对象，您可以轻松完成这一任务。\n\n更进一步，假设您希望您的对象对`negotiate`消息的响应完全在另一个类中实现。实现这一点的一种方法是让您的类继承其他类的方法。然而，这样安排是不可能的。也许有很好的理由来说明为什么不可能.\n\n即使您的类不能继承`negotiate`方法，您仍然可以通过将消息传递给其他类的实例方法来“借用”它:\n\n```\n- (id)negotiate\n{\n    if ( [someOtherObject respondsTo:@selector(negotiate)] )\n        return [someOtherObject negotiate];\n    return self;\n}\n```\n这样做可能会有点麻烦，特别是如果有许多消息需要您的对象传递给其他对象时。您必须实现一种方法来覆盖您想要从其他类中借用的每个方法。此外，在您编写代码时，您不知道您可能想要转发的完整的消息集是不可能处理的。该集合可能依赖于运行时的事件，并且随着新的方法和类在将来实现，它可能会发生变化。\n\n`forwardInvocation:`提供的第二次机会为这个问题提供了一个的临时解决方案，它是动态的，而不是静态的。它的工作原理是这样的:当一个对象不能响应消息时，因为它没有找到与消息中的选择器匹配的方法，运行时系统通过发送一个`forwardInvocation:`消息来通知对象。每个对象都继承了来自NSObject类的`forwardInvocation:`方法。然而,NSObject版本的方法只是简单地调用`doesNotRecognizeSelector:`。通过重写NSObject的版本并实现您自己的版本，您可以利用`forwardInvocation:`消息将消息转发给其他对象。\n\n要转发一条消息，所有`forwardInvocation:`方法需要做的是:\n\n- 确定消息应该发送到哪里，以及。\n- 将原始参数发送到那里.\n\n可以用`invokeWithTarget:`方法发送消息:\n```\n- (void)forwardInvocation:(NSInvocation *)anInvocation\n{\n    if ([someOtherObject respondsToSelector:\n            [anInvocation selector]])\n        [anInvocation invokeWithTarget:someOtherObject];\n    else\n        [super forwardInvocation:anInvocation];\n}\n```\n\n转发消息的返回值将返回给原始发送方。所有类型的返回值都可以传递给发送方，包括id、结构和双精度浮点数。\n\n`forwardInvocation:`方法可以作为 **未识别** 消息的分发中心，将它们分配给不同的接收者。或者它可以是一个传输站，将所有的消息发送到同一个目的地。它可以将一个消息转换成另一个消息，或者简单地“吞下”一些消息，因此没有响应，没有错误。`forwardInvocation`方法还可以将多个消息合并为一个响应。`forwardInvocation` 是由实现者决定的。它为对象链到转发链提供了一个机会，这也为相关程序设计提供了可能。\n\n> **注意:** `forwardInvocation:`只有在名义接收方不调用现有方法的情况下，该方法才可以处理消息。例如，如果您希望您的对象转发`negotiate`消息给另一个对象，那么它就不能拥有自己的`negotiate`方法。如果是这样，消息将永远不会到达`forwardInvocation:`。\n\n有关转发和调用的更多信息，请参阅基础框架引用中的NSInvocation类规范。\n\n### 转发和多继承\n\n转发模仿继承，并可用于向Objective-C程序提供多继承的一些影响。如图5-1所示，通过转发来响应消息的对象似乎可以借用或“继承”在另一个类中定义的方法实现。\n![图5-1](http://upload-images.jianshu.io/upload_images/3340896-e628ceb1736d6121.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n在这个例子中，一个战士类的实例将一个协商消息转发给一个外交官类的实例。战士会像外交官一样谈判。它似乎会对谈判的信息作出回应，而且对于所有实际的目的而言，它确实会做出回应(尽管它确实是一名从事这项工作的外交官)。\n\n因此，转发消息的对象从继承层次结构的两个分支中“继承”方法——它自己的分支和响应消息的对象的分支。在上面的例子中，似乎战士层级继承了外交官和它自己的父类。\n\n转发提供了您通常希望从多个继承中获得的大部分特性。然而，两者之间有一个重要的区别:多重继承将不同的功能组合在一个对象中。它倾向于大的、多层面的对象。而转发是将不同的责任分配给不同的对象。它将问题分解成更小的对象，由这些小的对象来处理相关消息。\n\n### Surrogate对象\n\n转发不仅可以模仿多重继承，还可以开发轻量级对象,这个对象可以表示或者涵盖更多实用的功能。Surrogate代表另一个对象，并将消息传递给它。\n\n在Objective-C编程语言中“远程消息传递”中讨论的Surrogate是这样的代理。Surrogate处理消息转发到远程接收器的细节，确保在连接中复制和检索参数值，等等。但它并没有尝试去做其他的事情;它不会复制远程对象的功能，而是简单地给远程对象一个本地地址，一个可以在另一个应用程序中接收消息的地方。\n\n其他类型的Surrogate对象也是可能的。例如，假设您有一个处理大量数据的对象，可能会创建一个复杂的映像或读取磁盘上文件的内容。设置这个对象可能非常耗时，所以您更喜欢在实际需要时或系统资源临时空闲时使用它。与此同时，为了使应用程序中的其他对象能够正常工作，您至少需要一个占位符来支持该对象。\n\n在这种情况下，您可以开始创建，而不是完全的对象，而是一个轻量级的Surrogate。这个对象可以自己做一些事情，比如回答关于数据的问题，但大多数情况下，它只会为较大的对象保留一个位置，当时间到来时，将消息转发给它。当Surrogate的`forwardInvocation:`方法接收一个转发给另一个对象的消息时，它将确保该对象存在，并且如果它不存在，将创建它。对于较大对象的所有消息都通过Surrogate，因此，就程序的其余部分而言，Surrogate和较大的对象将是相同的。\n\n### 转发和继承\n\n尽管转发模仿继承，NSObject类从不混淆两者。方法类似respondsToSelector:和isKindOfClass:只查看继承层次结构，而不关注转发链。例如，如果询问一个战士对象是否响应协商消息，\n```\nif ( [aWarrior respondsToSelector:@selector(negotiate)] )\n    ...\n```\n答案是否定的，即使它可以在没有错误的情况下接受协商，并且在某种意义上，通过将它们转发给一个外交官来回应。(见图5 - 1)。\n\n在很多情况下，答案是否定的。但事实可能并非如此。如果您使用转发来设置代理对象或扩展类的功能，则转发机制应该像继承一样透明。如果您希望您的对象表现得好像它们确实继承了它们转发消息的对象的行为，那么您将需要重新实现respondsToSelector:和isKindOfClass:方法来包含您的转发算法:\n\n```\n- (BOOL)respondsToSelector:(SEL)aSelector\n{\n    if ( [super respondsToSelector:aSelector] )\n        return YES;\n    else {\n        /* Here, test whether the aSelector message can     *\n         * be forwarded to another object and whether that  *\n         * object can respond to it. Return YES if it can.  */\n    }\n    return NO;\n}\n```\n除了`respondsToSelector:` `isMemberOfClass:`和`isKindOfClass:`,`instancesRespondToSelector:`方法也应该实现转发算法。如果使用了协议，那么`conformsToProtocol:`方法也应该被添加到列表中。类似地,如果一个对象将任何远程转发消息接收,它应该有一个版本的`methodSignatureForSelector:`可以返回准确的描述方法,最终回复转发消息;例如,如果一个对象将消息转发给Surrogate,您将实现`methodSignatureForSelector:`如下:\n```\n- (NSMethodSignature*)methodSignatureForSelector:(SEL)selector\n{\n    NSMethodSignature* signature = [super methodSignatureForSelector:selector];\n    if (!signature) {\n       signature = [surrogate methodSignatureForSelector:selector];\n    }\n    return signature;\n}\n```\n您可能会考虑将转发算法放在私有代码的某个地方，并拥有所有这些方法，`forwardInvocation:`包括，调用它。\n> 注意: 这是一种先进的技术，只适用于没有其他解决方案的情况下。它不是用来代替继承的。如果您必须使用这种技术，请确保您完全理解了正在转发的类的行为和转发的类。\n本节中提到的方法在Foundation框架引用中的NSObject类规范中进行了描述。有关`invokeWithTarget`的信息,在Foundation框架引用中查看NSInvocation类规范。\n\n## 类型编码\n\n为了帮助运行时系统，编译器为字符串中的每个方法编码返回和参数类型，并将字符串与方法选择器关联起来。它所使用的编码方案在其他上下文中也很有用，因此可以通过公开的@encode()编译器指令。当给定一个类型规范时，@encode()将返回一个编码该类型的字符串。类型可以是基本类型，例如int、指针、标记的结构体或union，或者类名称——任何类型，实际上都可以用作对C sizeof()操作符的参数。\n\n```\nchar *buf1 = @encode(int **);\nchar *buf2 = @encode(struct key);\nchar *buf3 = @encode(Rectangle);\n```\n下表列出了类型代码。请注意，它们中的许多都与为存档或分发目的而编码对象时使用的代码重叠。但是，这里列出的代码是在编写代码时不能使用的，而且在编写代码时，您可能想要使用一些代码，这些代码不是由@encode()生成的。(请参阅Foundation框架参考中的NSCoder类规范，以获得关于用于存档或分发的编码对象的更多信息)。\n\n**Table 6-1** Objectiv-C 类型编码\n\n|Code|含义|\n|-----|----|\n|c| char|\n|i| int|\n|s| short|\n|l|long|\n|q|long long |\n|C|unsingned char|\n|I|unsigned int|\n|S|unsigned short|\n|L|unsigned long|\n|Q|unsigned long long|\n|f|float|\n|d|double|\n|B|C++ bool 或者 C99 _Bool|\n|v|void|\n|*|A character string(char *)|\n|@|object(不管是静态类型或者id类型)\n|#|class object (Class)|\n|:|method selector(SEL)|\n|[array type]|array|\n|{name=type...}|structure|\n|(name=type...)|union|\n|bnum|A bit field of *num* bits|\n|^type|A pointer to type|\n|?|unknown type(among other things, this code is used for function pointers)|\n\n>**重要**: Objective-C 不支持 long double 类型.@encode(long double)返回 d,编码形式跟 double一样.\n\n数组的类型代码括在方括号内;数组中元素的数量是在数组类型之前，在打开括号之后立即指定的。例如，浮点数的12个指针的数组将被编码为:\n\n```\n[12^f]\n```\n结构是在大括号内指定的，而在括号内的结合。结构标记首先列出，然后是一个等号和序列中列出的结构域的代码。例如,结构体\n```\ntypedef struct example {\n    id   anObject;\n    char *aString;\n    int  anInt;\n} Example;\n```\n会像这样编码:\n```\n{example=@*i}\n```\n同样的编码结果，无论定义的类型名称(Example)还是结构标记(example)都传递给@encode()。结构指针的编码包含与结构字段相同的信息量:\n```\n^{example=@*i}\n```\n然而,另一层间接移除了内部具体的类型:\n```\n^^{example}\n```\n对象被看做结构体.举例来说,传递一个NSObject类名可以这样编码:\n```\n{NSObject=#}\n```\nNSObject类只声明了一个类的实例变量isa。\n\n注意，虽然@encode()指令没有返回它们，但是运行时系统使用表6-2中列出的附加编码，用于在协议中声明方法的类型限定符。\n\n**Table 6-2** Objective-C 方法编码\n\n|Code|含义|\n|---|---|\n|r|const|\n|n|in|\n|N|inout|\n|o|out|\n|O|bycopy|\n|R|byref|\n|V|oneway|\n\n\n## 属性声明\n\n当编译器遇到属性声明(在Objective-C编程语言中看到已声明的属性)时，它会生成与封装类、类别或协议相关的描述性元数据。您可以使用支持在类或协议上查找属性的函数来访问此元数据，获取属性的类型为@encode字符串，并将属性的属性列表复制为C字符串数组。每个类和协议都有一个声明的属性列表。\n### 属性 类型和函数\n属性结构为属性描述符定义了一个不透明的句柄。\n```\ntypedef struct objc_property *Property;\n```\n您可以使用函数`class_copyPropertyList`和`protocol _copypropertylist`检索与类(包括已经加载的类别)关联属性的数组，以及一个协议:\n```\nobjc_property_t *class_copyPropertyList(Class cls, unsigned int *outCount)\nobjc_property_t *protocol_copyPropertyList(Protocol *proto, unsigned int *outCount)\n```\n例如，给定以下类声明:\n```\n@interface Lender : NSObject {\n    float alone;\n}\n@property float alone;\n@end\n```\n您可以使用以下方法获取属性列表:\n```\nid LenderClass = objc_getClass(\"Lender\");\nunsigned int outCount;\nobjc_property_t *properties = class_copyPropertyList(LenderClass, &outCount);\n```\n您可以使用`property_getName`函数来发现属性的名称:\n```\nconst char *property_getName(objc_property_t property)\n```\n您可以使用函数`class_getProperty`和`protocol _getproperty`来获得类和协议中给定名称的属性的引用:\n```\nobjc_property_t class_getProperty(Class cls, const char *name)\nobjc_property_t protocol_getProperty(Protocol *proto, const char *name, BOOL isRequiredProperty, BOOL isInstanceProperty)\n```\n您可以使用`property_getAttributes`函数来发现属性的名称和@encode类型字符串。有关编码类型字符串的详细信息，请参阅类型编码;有关此字符串的详细信息，请参见属性类型字符串和属性属性描述示例。\n```\nconst char *property_getAttributes(objc_property_t property)\n```\n将这些组合在一起，您可以使用以下代码打印与类关联的所有属性:\n```\nid LenderClass = objc_getClass(\"Lender\");\nunsigned int outCount, i;\nobjc_property_t *properties = class_copyPropertyList(LenderClass, &outCount);\nfor (i = 0; i < outCount; i++) {\n    objc_property_t property = properties[i];\n    fprintf(stdout, \"%s %s\\n\", property_getName(property), property_getAttributes(property));\n}\n\n```\n\n### 属性 类型字符串\n您可以使用`property_getAttributes`函数来发现属性的名称、@encode类型字符串和属性的其他属性。\n\n字符串以一个T开头，后面是@encode类型和一个逗号，最后是一个V，后面跟着一个支持实例变量的名称。在他们之间，填充属性描述符，由逗号分隔:\n\n详细内容请看[**Table 7-1**](https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/ObjCRuntimeGuide/Articles/ocrtPropertyIntrospection.html)和属性特性描述示例\n\n## 总结\n本文主要关注关注runtime 消息的动态解析与转发，主要包含三个方法：\n- `resolveInstanceMethod:` \n当实例对象无法找到 sel 实现时，首先调用此方法，对sel做处理\n- `resolveClassMethod:` \n当类对象无法找到 sel 实现时，首先调用此方法，对sel做处理\n-  `forwardTargetForSelector:`\nsel 仍未处理，接着调用此方法，在这里可以对sel做处理\n-  `methodSignatureForSelector:`\nsel 仍未处理，runtime会通过`methodSigntureForSelector`方法尝试获取本次消息调用的具体环境信息，包括消息的参数与返回值类型。并封装成NSInvocation对象。我们可以在`forwardInvocation`方法内部对该对象作进一步的处理，并使之能够成功的完成消息处理。如果末能成功获取NSInvocation对象，那么程序就会发送`doesNotRecognizeSelector`消息抛出`unrecognized Selector send to xxx`的异常。\n\n\n关于runtime的更多有趣的使用，可以在[Objective-C Runtime](https://www.jianshu.com/p/6a72f21bf521)中寻找对应的API来探索，里面有runtime 各方法的说明。\n\n## 代码\n[Runtime_Demo](https://github.com/913868456/OCDemo)\n\n## 参考资料\n[iOS runtime之消息机制](https://www.jianshu.com/p/e6a9492995a5)\n[forwardTargetForSelector:](https://developer.apple.com/documentation/objectivec/nsobject/1418855-forwardingtargetforselector)\n[Objective-C Runtime Programming Guide](https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/ObjCRuntimeGuide/Introduction/Introduction.html#//apple_ref/doc/uid/TP40008048-CH1-SW1)\n","source":"_posts/iOS/Runtime-编程指南.md","raw":"\n---\ntitle:  Runtime编程指南 \ndate:  2018-01-16 20:54\ncategories:\n- iOS\ntags: \n- Runtime \n---\n## 介绍\n\nObjective-C语言从编译、链接、到运行都有很多决策。只要有可能，它都是动态的。这意味着该语言不仅需要编译器，还需要运行时系统来执行编译后的代码。运行时系统作为Objective-C语言的一种操作系统;这就是语言的作用。\n本文档关注NSObject类，以及Objective-C程序如何与运行时系统交互。特别是，它检查了在运行时动态加载新类的范例，并将消息转发给其他对象。它还提供关于在程序运行时如何查找对象信息的相关内容。\n您应该阅读本文档以了解Objective-C运行时系统如何工作以及如何利用它。但是，通常情况下，您不需要知道和理解这些材料来编写Cocoa应用程序。\n## Runtime 版本和平台（省略）\n\n## Runtime交互\n\nOC在三个不同层面跟runtime系统交互: 通过OC源代码;通过Foundation框架下NSObject定义的方法;通过直接调用runtime函数.\n\n### Objective-C 源码\n\n在大多数情况下，运行时系统会自动地在幕后工作。您只需编写和编译Objective-C源代码就可以使用它。\n\n当编译包含Objective-C类和方法的代码时，编译器会创建实现语言动态特性的数据结构和函数调用。数据结构捕获在类和类别定义,协议声明中发现的信息;它们包括在Objective-C编程语言中定义的类对象和协议对象，以及方法选择器、实例变量的模板和从源代码中提取的其他信息。runtime最重要的函数是发送消息的函数，如*消息传递*中所描述的那样。它是由源代码消息表达式调用的。\n\n### NSObject 方法\n\nCocoa中的大多数对象都是NSObject类的子类，所以大多数对象继承了它定义的方法。(值得注意的例外是NSProxy类;参见*消息转发*以获取更多信息。因此，它的方法建立了每个实例和每个类对象固有的行为。然而，在少数情况下，NSObject类仅仅定义了应该如何做的模板;它没有提供所有必要的代码。\n\n例如，NSObject类定义了一个描述实例方法，该方法返回描述类内容的字符串。这主要用于调试——GDB打印对象命令打印从该方法返回的字符串。NSObject的这个方法的实现不知道类包含什么，所以它返回一个带有对象名称和地址的字符串。NSObject的子类可以实现这个方法来返回更多的细节。例如，Foundation类NSArray返回它所包含的对象的描述列表。\n\n一些NSObject方法简单地查询运行时系统的信息。这些方法允许对象执行内部自检。此类方法的示例是类方法，该类要求对象标识其类;`isKindOfClass:`和`isMemberOfClass:`测试对象在继承层次结构中的位置;`respondsToSelector:`表示一个对象是否可以接受特定的消息;`conformsToProtocol:`表示一个对象是否实现了特定协议中定义的方法;和`methodForSelector:`，它提供了方法实现的地址。像这样的方法给了一个对象自检的能力。\n\n### Runtime 函数\n\n运行时系统是一个动态共享库，其公共接口由位于目录/usr/include/objc中的头文件中的一组函数和数据结构组成。许多这些函数允许您使用plain C来复制编译器在编写Objective-C代码时所做的工作。其他则是通过NSObject类方法导出的功能的基础。这些功能使开发运行时系统的其他接口成为可能，并生成增强开发环境的工具;在Objective-C中编程时不需要它们。然而，在编写Objective-C程序时，一些运行时函数可能会非常有用。所有这些功能都记录在Objective-C运行时引用中。\n\n## 消息传递\n\n本章描述如何将消息表达式转换为`objc_msgSend`函数调用，以及如何通过名称引用方法。然后它解释了如何利用`objc_msgSend`，如果需要的话，可以绕过动态绑定。\n\n### objc_msgSend 函数\n\n在Objective-C中，消息直到运行时才绑定到方法实现。编译器将消息表达式转换为对消息传递函数`objc_msgSend`的调用。该函数接受消息的接收者和消息中提到的方法的名称，即方法selector—作为它的两个主要参数:\n\n```\nobjc_msgSend(receiver, selector)\n```\n消息中传送过来的任何参数也通过`objc_msgSend`来处理:\n\n```\nobjc_msgSend(receiver, selector, arg1, arg2, ...)\n```\n消息传递函数为实现动态绑定所做的必要事情:\n\n- 它首先查找选择器引用的过程(方法实现)。由于相同的方法可以通过不同的类实现不同的实现，因此它所发现的精确过程取决于接收者的类。\n- 然后在调用程序中，将接收对象(指向它的数据的指针)传递，以及为该方法指定的任何参数。\n- 最后，它将程序的返回值作为其本身的返回值传递。\n\n> 注意: 编译器通常调用消息传递函数.不要在你写的代码中直接调用它.\n\n消息传递的关键在于编译器为每个类和对象构建的结构。每个类结构包括这两个基本要素:\n\n- 指向父类的指针。\n- 一个类分派表。这个表有关联方法选择器和它们识别的方法的类特定地址的条目。`setOrigin`方法的选择器与其实现地址相关联;`display`方法的选择器与其实现地址相关联，等等。\n\n创建新对象时，将分配内存，并初始化其实例变量。对象的首个变量是指向其类结构的指针。这个指针称为isa，它使对象可以访问它的类，并通过该类对它继承的所有类进行访问。\n\n> 虽然这不是语言的一部分，但是需要isa指针来处理Objective-C运行时系统。在结构定义的任何字段中，对象需要“等效”到struct objc_object(在objc/objc.h中定义)。然而，您很少需要创建自己的根对象，而从NSObject或NSProxy继承的对象会自动拥有isa变量。\n\n这些类元素和对象结构在 *Figure 3- 1* 中阐述.\n\n![Figure 3-1 消息传递结构](http://upload-images.jianshu.io/upload_images/3340896-dc0283a1fceff976.gif?imageMogr2/auto-orient/strip)\n\n当消息被发送到一个对象时，消息传递函数会跟随对象的isa指针到类结构，它在分派表中查找方法选择器。如果它在那里找不到选择器，`objc_msgSend`会跟随指向父类的指针，并试图在它的分派表中找到选择器。连续的失败导致`objc_msgSend`爬升类层次结构，直到它到达NSObject类。一旦它定位了选择器，函数调用表中的该方法并将接收对象的数据结构传递给它。\n\n这是在运行时选择方法实现的方式——或者，用面向对象编程的行话来说，方法是动态绑定到消息的。\n\n为了加快消息传递进程，运行时系统将缓存选择器和方法的地址。每个类都有一个单独的缓存，它可以包含用于继承方法的选择器以及类中定义的方法。在搜索调度表之前，消息传递例程首先检查接收对象的类的缓存(关于可能再次使用的方法可能会再次使用的理论)。如果方法选择器在缓存中，消息传递只比函数调用稍微慢一点。一旦程序运行足够长的时间来“预热”它的缓存，它发送的几乎所有消息都会找到一个缓存的方法。当程序运行时，缓存会动态地增长以容纳新的消息。\n\n### 使用隐藏的参数\n\n当`objc_msgSend`找到实现方法的过程时，它调用该过程并将消息中的所有参数传递给它。同时传递隐藏的两个参数:\n\n- 接收对象\n- 方法的选择器。\n这些参数提供了关于调用它的消息表达式的另一半显式信息。它们被认为是“隐藏的”，因为它们没有在定义方法的源代码中声明。当代码被编译时，它们被插入到实现中。\n\n虽然这些参数没有显式地声明，但是源代码仍然可以引用它们(就像它可以引用接收对象的实例变量一样)。方法将接收对象作为self，并将它的方法选择器作为_cmd。在下面的示例中，_cmd 引用方法选择器作为strange的方法,引用self做为strange消息的接收对象。\n\n```\n- strange\n{\n    id  target = getTheReceiver();\n    SEL method = getTheMethod();\n \n    if ( target == self || method == _cmd )\n        return nil;\n    return [target performSelector:method];\n}\n```\nself是两个参数中比较有用的一个。实际上，接收对象的实例变量的方式可以用于方法定义。\n\n### 获取一个方法的地址\n\n规避动态绑定的唯一方法是获取方法的地址，并直接调用它，就像它是一个函数一样。这可能适用于极少数情况下，特定的方法将连续多次执行，并且您希望在每次执行方法时避免消息传递的开销。\n\n使用NSObject类中定义的方法，methodForSelector:，您可以要求一个指向方法实现的指针，然后使用指针来调用该过程。methodForSelector:返回的指针必须小心地转换为合适的函数类型。返回类型和参数类型都应该包含在转换中。\n\n下面的示例展示了实现`setFilled`方法可能调用的流程:\n\n```\nvoid (*setter)(id, SEL, BOOL);\nint i;\n \nsetter = (void (*)(id, SEL, BOOL))[target\n    methodForSelector:@selector(setFilled:)];\nfor ( i = 0 ; i < 1000 ; i++ )\n    setter(targetList[i], @selector(setFilled:), YES);\n```\n传递给流程的前两个参数是接收对象(self)和方法选择器(_cmd)。这些参数隐藏在方法语法中，但是当方法被调用为函数时，必须显式地进行说明。\n\n使用methodForSelector:规避动态绑定可以节省消息传递所需的大部分时间。但是，只有在一个特定的消息重复多次的情况下，才会有显著的节省，如上面所示的for循环。\n\n注意，methodForSelector:由Cocoa运行时系统提供;这不是Objective-C语言本身的特性。\n\n## 动态方法解决方案\n\n本章描述如何动态地提供方法的实现。\n\n### 动态方法解决方案\n\n有些情况下，您可能希望动态地提供方法的实现。例如，Objective-C声明的属性特性(参见Objective-C编程语言中的声明属性)包括@dynamic指令:\n\n```\n@dynamic propertyName;\n```\n它告诉编译器将动态地提供与属性关联的方法。\n\n您可以实现方法resolveInstanceMethod:和resolveClassMethod:为实例和类方法动态地提供给定选择器的实现。\n\nObjective-C方法仅仅是一个C函数，它至少需要两个参数-self和_cmd。您可以使用函数`class_addMethod`将函数添加到类中。因此，给定以下函数:\n\n```\nvoid dynamicMethodIMP(id self, SEL _cmd) {\n    // implementation ....\n}\n```\n可以动态地将其添加到一个类作为一个方法(称为resolveThisMethodDynamically)使用resolveInstanceMethod:是这样的:\n```\n@implementation MyClass\n+ (BOOL)resolveInstanceMethod:(SEL)aSEL\n{\n    if (aSEL == @selector(resolveThisMethodDynamically)) {\n          class_addMethod([self class], aSEL, (IMP) dynamicMethodIMP, \"v@:\");\n          return YES;\n    }\n    return [super resolveInstanceMethod:aSEL];\n}\n@end\n```\n转发方法(如消息转发中所描述的)和动态方法解析在很大程度上是正交的。类有机会在转发机制启动之前动态解析方法。如果调用`respondsToSelector`或`instancesRespondToSelector:`方法,动态方法解析器就有机会给选择器提供一个IMP。如果您实现了`resolveInstanceMethod:`但是希望特定的选择器通过转发机制来转发，给这些方法选择器返回NO.\n\n### 动态加载\n\nObjective-C程序可以在运行时加载和链接新的类和类别。新代码合并到程序中，并在开始时对加载的类和类别进行相同的处理。\n\n动态加载可以用来做很多不同的事情。例如，系统首选项应用程序中的各个模块是动态加载的。\n\n在Cocoa环境中，动态加载通常用于允许定制应用程序。其他人可以编写程序在运行时加载的模块——就像接口构建器加载自定义面板和OS X系统首选项应用程序加载自定义的偏好模块一样。可加载模块扩展了应用程序的功能。他们以你允许的方式对它做出贡献，但却无法预见或定义你自己。您提供了框架，但其他人提供了代码。\n\n虽然有一个运行时函数，在Mach-O文件中执行Objective-C模块的动态加载(objc /objc-load.h中定义的objc_loadmodule)，但Cocoa的NSBundle类为动态加载提供了一个更方便的接口，这是面向对象的，并与相关的服务集成在一起。在Foundation框架参考中查看NSBundle类规范，了解关于NSBundle类及其使用的信息。请参阅OS X ABI Mach-O文件格式参考，以获取关于Mach-O文件的信息。\n\n## 消息转发\n\n向不处理该消息的对象发送消息是错误的。然而，在宣布错误之前，运行时系统会再给接收对象一个机会来处理该消息。\n\n### 转发\n\n如果您向一个不处理该消息的对象发送消息，在宣布一个错误之前，运行时将向对象发送对象一个`forwardInvocation:`消息,并携带一个`NSInvocation`对象参数——NSInvocation对象封装了原始消息和传递给它的参数。\n\n您可以实现一个`forwardInvocation:`方法来提供对消息的默认响应，或者以其他方式避免错误。正如其名称所暗示的,`forwardInvocation`通常用于将消息转发到另一个对象。\n\n为了查看转发的范围和意图，请想象以下场景:假设您正在设计一个对象，该对象可以响应一个名为`negotiate`的消息，您希望它的响应包含另一类型对象的响应。通过在您实现`negotiate`方法的主体中传递一个`negotiate`消息到其他对象，您可以轻松完成这一任务。\n\n更进一步，假设您希望您的对象对`negotiate`消息的响应完全在另一个类中实现。实现这一点的一种方法是让您的类继承其他类的方法。然而，这样安排是不可能的。也许有很好的理由来说明为什么不可能.\n\n即使您的类不能继承`negotiate`方法，您仍然可以通过将消息传递给其他类的实例方法来“借用”它:\n\n```\n- (id)negotiate\n{\n    if ( [someOtherObject respondsTo:@selector(negotiate)] )\n        return [someOtherObject negotiate];\n    return self;\n}\n```\n这样做可能会有点麻烦，特别是如果有许多消息需要您的对象传递给其他对象时。您必须实现一种方法来覆盖您想要从其他类中借用的每个方法。此外，在您编写代码时，您不知道您可能想要转发的完整的消息集是不可能处理的。该集合可能依赖于运行时的事件，并且随着新的方法和类在将来实现，它可能会发生变化。\n\n`forwardInvocation:`提供的第二次机会为这个问题提供了一个的临时解决方案，它是动态的，而不是静态的。它的工作原理是这样的:当一个对象不能响应消息时，因为它没有找到与消息中的选择器匹配的方法，运行时系统通过发送一个`forwardInvocation:`消息来通知对象。每个对象都继承了来自NSObject类的`forwardInvocation:`方法。然而,NSObject版本的方法只是简单地调用`doesNotRecognizeSelector:`。通过重写NSObject的版本并实现您自己的版本，您可以利用`forwardInvocation:`消息将消息转发给其他对象。\n\n要转发一条消息，所有`forwardInvocation:`方法需要做的是:\n\n- 确定消息应该发送到哪里，以及。\n- 将原始参数发送到那里.\n\n可以用`invokeWithTarget:`方法发送消息:\n```\n- (void)forwardInvocation:(NSInvocation *)anInvocation\n{\n    if ([someOtherObject respondsToSelector:\n            [anInvocation selector]])\n        [anInvocation invokeWithTarget:someOtherObject];\n    else\n        [super forwardInvocation:anInvocation];\n}\n```\n\n转发消息的返回值将返回给原始发送方。所有类型的返回值都可以传递给发送方，包括id、结构和双精度浮点数。\n\n`forwardInvocation:`方法可以作为 **未识别** 消息的分发中心，将它们分配给不同的接收者。或者它可以是一个传输站，将所有的消息发送到同一个目的地。它可以将一个消息转换成另一个消息，或者简单地“吞下”一些消息，因此没有响应，没有错误。`forwardInvocation`方法还可以将多个消息合并为一个响应。`forwardInvocation` 是由实现者决定的。它为对象链到转发链提供了一个机会，这也为相关程序设计提供了可能。\n\n> **注意:** `forwardInvocation:`只有在名义接收方不调用现有方法的情况下，该方法才可以处理消息。例如，如果您希望您的对象转发`negotiate`消息给另一个对象，那么它就不能拥有自己的`negotiate`方法。如果是这样，消息将永远不会到达`forwardInvocation:`。\n\n有关转发和调用的更多信息，请参阅基础框架引用中的NSInvocation类规范。\n\n### 转发和多继承\n\n转发模仿继承，并可用于向Objective-C程序提供多继承的一些影响。如图5-1所示，通过转发来响应消息的对象似乎可以借用或“继承”在另一个类中定义的方法实现。\n![图5-1](http://upload-images.jianshu.io/upload_images/3340896-e628ceb1736d6121.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n在这个例子中，一个战士类的实例将一个协商消息转发给一个外交官类的实例。战士会像外交官一样谈判。它似乎会对谈判的信息作出回应，而且对于所有实际的目的而言，它确实会做出回应(尽管它确实是一名从事这项工作的外交官)。\n\n因此，转发消息的对象从继承层次结构的两个分支中“继承”方法——它自己的分支和响应消息的对象的分支。在上面的例子中，似乎战士层级继承了外交官和它自己的父类。\n\n转发提供了您通常希望从多个继承中获得的大部分特性。然而，两者之间有一个重要的区别:多重继承将不同的功能组合在一个对象中。它倾向于大的、多层面的对象。而转发是将不同的责任分配给不同的对象。它将问题分解成更小的对象，由这些小的对象来处理相关消息。\n\n### Surrogate对象\n\n转发不仅可以模仿多重继承，还可以开发轻量级对象,这个对象可以表示或者涵盖更多实用的功能。Surrogate代表另一个对象，并将消息传递给它。\n\n在Objective-C编程语言中“远程消息传递”中讨论的Surrogate是这样的代理。Surrogate处理消息转发到远程接收器的细节，确保在连接中复制和检索参数值，等等。但它并没有尝试去做其他的事情;它不会复制远程对象的功能，而是简单地给远程对象一个本地地址，一个可以在另一个应用程序中接收消息的地方。\n\n其他类型的Surrogate对象也是可能的。例如，假设您有一个处理大量数据的对象，可能会创建一个复杂的映像或读取磁盘上文件的内容。设置这个对象可能非常耗时，所以您更喜欢在实际需要时或系统资源临时空闲时使用它。与此同时，为了使应用程序中的其他对象能够正常工作，您至少需要一个占位符来支持该对象。\n\n在这种情况下，您可以开始创建，而不是完全的对象，而是一个轻量级的Surrogate。这个对象可以自己做一些事情，比如回答关于数据的问题，但大多数情况下，它只会为较大的对象保留一个位置，当时间到来时，将消息转发给它。当Surrogate的`forwardInvocation:`方法接收一个转发给另一个对象的消息时，它将确保该对象存在，并且如果它不存在，将创建它。对于较大对象的所有消息都通过Surrogate，因此，就程序的其余部分而言，Surrogate和较大的对象将是相同的。\n\n### 转发和继承\n\n尽管转发模仿继承，NSObject类从不混淆两者。方法类似respondsToSelector:和isKindOfClass:只查看继承层次结构，而不关注转发链。例如，如果询问一个战士对象是否响应协商消息，\n```\nif ( [aWarrior respondsToSelector:@selector(negotiate)] )\n    ...\n```\n答案是否定的，即使它可以在没有错误的情况下接受协商，并且在某种意义上，通过将它们转发给一个外交官来回应。(见图5 - 1)。\n\n在很多情况下，答案是否定的。但事实可能并非如此。如果您使用转发来设置代理对象或扩展类的功能，则转发机制应该像继承一样透明。如果您希望您的对象表现得好像它们确实继承了它们转发消息的对象的行为，那么您将需要重新实现respondsToSelector:和isKindOfClass:方法来包含您的转发算法:\n\n```\n- (BOOL)respondsToSelector:(SEL)aSelector\n{\n    if ( [super respondsToSelector:aSelector] )\n        return YES;\n    else {\n        /* Here, test whether the aSelector message can     *\n         * be forwarded to another object and whether that  *\n         * object can respond to it. Return YES if it can.  */\n    }\n    return NO;\n}\n```\n除了`respondsToSelector:` `isMemberOfClass:`和`isKindOfClass:`,`instancesRespondToSelector:`方法也应该实现转发算法。如果使用了协议，那么`conformsToProtocol:`方法也应该被添加到列表中。类似地,如果一个对象将任何远程转发消息接收,它应该有一个版本的`methodSignatureForSelector:`可以返回准确的描述方法,最终回复转发消息;例如,如果一个对象将消息转发给Surrogate,您将实现`methodSignatureForSelector:`如下:\n```\n- (NSMethodSignature*)methodSignatureForSelector:(SEL)selector\n{\n    NSMethodSignature* signature = [super methodSignatureForSelector:selector];\n    if (!signature) {\n       signature = [surrogate methodSignatureForSelector:selector];\n    }\n    return signature;\n}\n```\n您可能会考虑将转发算法放在私有代码的某个地方，并拥有所有这些方法，`forwardInvocation:`包括，调用它。\n> 注意: 这是一种先进的技术，只适用于没有其他解决方案的情况下。它不是用来代替继承的。如果您必须使用这种技术，请确保您完全理解了正在转发的类的行为和转发的类。\n本节中提到的方法在Foundation框架引用中的NSObject类规范中进行了描述。有关`invokeWithTarget`的信息,在Foundation框架引用中查看NSInvocation类规范。\n\n## 类型编码\n\n为了帮助运行时系统，编译器为字符串中的每个方法编码返回和参数类型，并将字符串与方法选择器关联起来。它所使用的编码方案在其他上下文中也很有用，因此可以通过公开的@encode()编译器指令。当给定一个类型规范时，@encode()将返回一个编码该类型的字符串。类型可以是基本类型，例如int、指针、标记的结构体或union，或者类名称——任何类型，实际上都可以用作对C sizeof()操作符的参数。\n\n```\nchar *buf1 = @encode(int **);\nchar *buf2 = @encode(struct key);\nchar *buf3 = @encode(Rectangle);\n```\n下表列出了类型代码。请注意，它们中的许多都与为存档或分发目的而编码对象时使用的代码重叠。但是，这里列出的代码是在编写代码时不能使用的，而且在编写代码时，您可能想要使用一些代码，这些代码不是由@encode()生成的。(请参阅Foundation框架参考中的NSCoder类规范，以获得关于用于存档或分发的编码对象的更多信息)。\n\n**Table 6-1** Objectiv-C 类型编码\n\n|Code|含义|\n|-----|----|\n|c| char|\n|i| int|\n|s| short|\n|l|long|\n|q|long long |\n|C|unsingned char|\n|I|unsigned int|\n|S|unsigned short|\n|L|unsigned long|\n|Q|unsigned long long|\n|f|float|\n|d|double|\n|B|C++ bool 或者 C99 _Bool|\n|v|void|\n|*|A character string(char *)|\n|@|object(不管是静态类型或者id类型)\n|#|class object (Class)|\n|:|method selector(SEL)|\n|[array type]|array|\n|{name=type...}|structure|\n|(name=type...)|union|\n|bnum|A bit field of *num* bits|\n|^type|A pointer to type|\n|?|unknown type(among other things, this code is used for function pointers)|\n\n>**重要**: Objective-C 不支持 long double 类型.@encode(long double)返回 d,编码形式跟 double一样.\n\n数组的类型代码括在方括号内;数组中元素的数量是在数组类型之前，在打开括号之后立即指定的。例如，浮点数的12个指针的数组将被编码为:\n\n```\n[12^f]\n```\n结构是在大括号内指定的，而在括号内的结合。结构标记首先列出，然后是一个等号和序列中列出的结构域的代码。例如,结构体\n```\ntypedef struct example {\n    id   anObject;\n    char *aString;\n    int  anInt;\n} Example;\n```\n会像这样编码:\n```\n{example=@*i}\n```\n同样的编码结果，无论定义的类型名称(Example)还是结构标记(example)都传递给@encode()。结构指针的编码包含与结构字段相同的信息量:\n```\n^{example=@*i}\n```\n然而,另一层间接移除了内部具体的类型:\n```\n^^{example}\n```\n对象被看做结构体.举例来说,传递一个NSObject类名可以这样编码:\n```\n{NSObject=#}\n```\nNSObject类只声明了一个类的实例变量isa。\n\n注意，虽然@encode()指令没有返回它们，但是运行时系统使用表6-2中列出的附加编码，用于在协议中声明方法的类型限定符。\n\n**Table 6-2** Objective-C 方法编码\n\n|Code|含义|\n|---|---|\n|r|const|\n|n|in|\n|N|inout|\n|o|out|\n|O|bycopy|\n|R|byref|\n|V|oneway|\n\n\n## 属性声明\n\n当编译器遇到属性声明(在Objective-C编程语言中看到已声明的属性)时，它会生成与封装类、类别或协议相关的描述性元数据。您可以使用支持在类或协议上查找属性的函数来访问此元数据，获取属性的类型为@encode字符串，并将属性的属性列表复制为C字符串数组。每个类和协议都有一个声明的属性列表。\n### 属性 类型和函数\n属性结构为属性描述符定义了一个不透明的句柄。\n```\ntypedef struct objc_property *Property;\n```\n您可以使用函数`class_copyPropertyList`和`protocol _copypropertylist`检索与类(包括已经加载的类别)关联属性的数组，以及一个协议:\n```\nobjc_property_t *class_copyPropertyList(Class cls, unsigned int *outCount)\nobjc_property_t *protocol_copyPropertyList(Protocol *proto, unsigned int *outCount)\n```\n例如，给定以下类声明:\n```\n@interface Lender : NSObject {\n    float alone;\n}\n@property float alone;\n@end\n```\n您可以使用以下方法获取属性列表:\n```\nid LenderClass = objc_getClass(\"Lender\");\nunsigned int outCount;\nobjc_property_t *properties = class_copyPropertyList(LenderClass, &outCount);\n```\n您可以使用`property_getName`函数来发现属性的名称:\n```\nconst char *property_getName(objc_property_t property)\n```\n您可以使用函数`class_getProperty`和`protocol _getproperty`来获得类和协议中给定名称的属性的引用:\n```\nobjc_property_t class_getProperty(Class cls, const char *name)\nobjc_property_t protocol_getProperty(Protocol *proto, const char *name, BOOL isRequiredProperty, BOOL isInstanceProperty)\n```\n您可以使用`property_getAttributes`函数来发现属性的名称和@encode类型字符串。有关编码类型字符串的详细信息，请参阅类型编码;有关此字符串的详细信息，请参见属性类型字符串和属性属性描述示例。\n```\nconst char *property_getAttributes(objc_property_t property)\n```\n将这些组合在一起，您可以使用以下代码打印与类关联的所有属性:\n```\nid LenderClass = objc_getClass(\"Lender\");\nunsigned int outCount, i;\nobjc_property_t *properties = class_copyPropertyList(LenderClass, &outCount);\nfor (i = 0; i < outCount; i++) {\n    objc_property_t property = properties[i];\n    fprintf(stdout, \"%s %s\\n\", property_getName(property), property_getAttributes(property));\n}\n\n```\n\n### 属性 类型字符串\n您可以使用`property_getAttributes`函数来发现属性的名称、@encode类型字符串和属性的其他属性。\n\n字符串以一个T开头，后面是@encode类型和一个逗号，最后是一个V，后面跟着一个支持实例变量的名称。在他们之间，填充属性描述符，由逗号分隔:\n\n详细内容请看[**Table 7-1**](https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/ObjCRuntimeGuide/Articles/ocrtPropertyIntrospection.html)和属性特性描述示例\n\n## 总结\n本文主要关注关注runtime 消息的动态解析与转发，主要包含三个方法：\n- `resolveInstanceMethod:` \n当实例对象无法找到 sel 实现时，首先调用此方法，对sel做处理\n- `resolveClassMethod:` \n当类对象无法找到 sel 实现时，首先调用此方法，对sel做处理\n-  `forwardTargetForSelector:`\nsel 仍未处理，接着调用此方法，在这里可以对sel做处理\n-  `methodSignatureForSelector:`\nsel 仍未处理，runtime会通过`methodSigntureForSelector`方法尝试获取本次消息调用的具体环境信息，包括消息的参数与返回值类型。并封装成NSInvocation对象。我们可以在`forwardInvocation`方法内部对该对象作进一步的处理，并使之能够成功的完成消息处理。如果末能成功获取NSInvocation对象，那么程序就会发送`doesNotRecognizeSelector`消息抛出`unrecognized Selector send to xxx`的异常。\n\n\n关于runtime的更多有趣的使用，可以在[Objective-C Runtime](https://www.jianshu.com/p/6a72f21bf521)中寻找对应的API来探索，里面有runtime 各方法的说明。\n\n## 代码\n[Runtime_Demo](https://github.com/913868456/OCDemo)\n\n## 参考资料\n[iOS runtime之消息机制](https://www.jianshu.com/p/e6a9492995a5)\n[forwardTargetForSelector:](https://developer.apple.com/documentation/objectivec/nsobject/1418855-forwardingtargetforselector)\n[Objective-C Runtime Programming Guide](https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/ObjCRuntimeGuide/Introduction/Introduction.html#//apple_ref/doc/uid/TP40008048-CH1-SW1)\n","slug":"iOS/Runtime-编程指南","published":1,"updated":"2020-09-27T10:42:45.234Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgq6gnzc008bt29k9o2scq96","content":"<h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><p>Objective-C语言从编译、链接、到运行都有很多决策。只要有可能，它都是动态的。这意味着该语言不仅需要编译器，还需要运行时系统来执行编译后的代码。运行时系统作为Objective-C语言的一种操作系统;这就是语言的作用。<br>本文档关注NSObject类，以及Objective-C程序如何与运行时系统交互。特别是，它检查了在运行时动态加载新类的范例，并将消息转发给其他对象。它还提供关于在程序运行时如何查找对象信息的相关内容。<br>您应该阅读本文档以了解Objective-C运行时系统如何工作以及如何利用它。但是，通常情况下，您不需要知道和理解这些材料来编写Cocoa应用程序。</p>\n<h2 id=\"Runtime-版本和平台（省略）\"><a href=\"#Runtime-版本和平台（省略）\" class=\"headerlink\" title=\"Runtime 版本和平台（省略）\"></a>Runtime 版本和平台（省略）</h2><h2 id=\"Runtime交互\"><a href=\"#Runtime交互\" class=\"headerlink\" title=\"Runtime交互\"></a>Runtime交互</h2><p>OC在三个不同层面跟runtime系统交互: 通过OC源代码;通过Foundation框架下NSObject定义的方法;通过直接调用runtime函数.</p>\n<h3 id=\"Objective-C-源码\"><a href=\"#Objective-C-源码\" class=\"headerlink\" title=\"Objective-C 源码\"></a>Objective-C 源码</h3><p>在大多数情况下，运行时系统会自动地在幕后工作。您只需编写和编译Objective-C源代码就可以使用它。</p>\n<p>当编译包含Objective-C类和方法的代码时，编译器会创建实现语言动态特性的数据结构和函数调用。数据结构捕获在类和类别定义,协议声明中发现的信息;它们包括在Objective-C编程语言中定义的类对象和协议对象，以及方法选择器、实例变量的模板和从源代码中提取的其他信息。runtime最重要的函数是发送消息的函数，如<em>消息传递</em>中所描述的那样。它是由源代码消息表达式调用的。</p>\n<h3 id=\"NSObject-方法\"><a href=\"#NSObject-方法\" class=\"headerlink\" title=\"NSObject 方法\"></a>NSObject 方法</h3><p>Cocoa中的大多数对象都是NSObject类的子类，所以大多数对象继承了它定义的方法。(值得注意的例外是NSProxy类;参见<em>消息转发</em>以获取更多信息。因此，它的方法建立了每个实例和每个类对象固有的行为。然而，在少数情况下，NSObject类仅仅定义了应该如何做的模板;它没有提供所有必要的代码。</p>\n<p>例如，NSObject类定义了一个描述实例方法，该方法返回描述类内容的字符串。这主要用于调试——GDB打印对象命令打印从该方法返回的字符串。NSObject的这个方法的实现不知道类包含什么，所以它返回一个带有对象名称和地址的字符串。NSObject的子类可以实现这个方法来返回更多的细节。例如，Foundation类NSArray返回它所包含的对象的描述列表。</p>\n<p>一些NSObject方法简单地查询运行时系统的信息。这些方法允许对象执行内部自检。此类方法的示例是类方法，该类要求对象标识其类;<code>isKindOfClass:</code>和<code>isMemberOfClass:</code>测试对象在继承层次结构中的位置;<code>respondsToSelector:</code>表示一个对象是否可以接受特定的消息;<code>conformsToProtocol:</code>表示一个对象是否实现了特定协议中定义的方法;和<code>methodForSelector:</code>，它提供了方法实现的地址。像这样的方法给了一个对象自检的能力。</p>\n<h3 id=\"Runtime-函数\"><a href=\"#Runtime-函数\" class=\"headerlink\" title=\"Runtime 函数\"></a>Runtime 函数</h3><p>运行时系统是一个动态共享库，其公共接口由位于目录/usr/include/objc中的头文件中的一组函数和数据结构组成。许多这些函数允许您使用plain C来复制编译器在编写Objective-C代码时所做的工作。其他则是通过NSObject类方法导出的功能的基础。这些功能使开发运行时系统的其他接口成为可能，并生成增强开发环境的工具;在Objective-C中编程时不需要它们。然而，在编写Objective-C程序时，一些运行时函数可能会非常有用。所有这些功能都记录在Objective-C运行时引用中。</p>\n<h2 id=\"消息传递\"><a href=\"#消息传递\" class=\"headerlink\" title=\"消息传递\"></a>消息传递</h2><p>本章描述如何将消息表达式转换为<code>objc_msgSend</code>函数调用，以及如何通过名称引用方法。然后它解释了如何利用<code>objc_msgSend</code>，如果需要的话，可以绕过动态绑定。</p>\n<h3 id=\"objc-msgSend-函数\"><a href=\"#objc-msgSend-函数\" class=\"headerlink\" title=\"objc_msgSend 函数\"></a>objc_msgSend 函数</h3><p>在Objective-C中，消息直到运行时才绑定到方法实现。编译器将消息表达式转换为对消息传递函数<code>objc_msgSend</code>的调用。该函数接受消息的接收者和消息中提到的方法的名称，即方法selector—作为它的两个主要参数:</p>\n<pre><code class=\"hljs reasonml\">objc<span class=\"hljs-constructor\">_msgSend(<span class=\"hljs-params\">receiver</span>, <span class=\"hljs-params\">selector</span>)</span></code></pre>\n<p>消息中传送过来的任何参数也通过<code>objc_msgSend</code>来处理:</p>\n<pre><code class=\"hljs reasonml\">objc<span class=\"hljs-constructor\">_msgSend(<span class=\"hljs-params\">receiver</span>, <span class=\"hljs-params\">selector</span>, <span class=\"hljs-params\">arg1</span>, <span class=\"hljs-params\">arg2</span>, <span class=\"hljs-operator\">...</span>)</span></code></pre>\n<p>消息传递函数为实现动态绑定所做的必要事情:</p>\n<ul>\n<li>它首先查找选择器引用的过程(方法实现)。由于相同的方法可以通过不同的类实现不同的实现，因此它所发现的精确过程取决于接收者的类。</li>\n<li>然后在调用程序中，将接收对象(指向它的数据的指针)传递，以及为该方法指定的任何参数。</li>\n<li>最后，它将程序的返回值作为其本身的返回值传递。</li>\n</ul>\n<blockquote>\n<p>注意: 编译器通常调用消息传递函数.不要在你写的代码中直接调用它.</p>\n</blockquote>\n<p>消息传递的关键在于编译器为每个类和对象构建的结构。每个类结构包括这两个基本要素:</p>\n<ul>\n<li>指向父类的指针。</li>\n<li>一个类分派表。这个表有关联方法选择器和它们识别的方法的类特定地址的条目。<code>setOrigin</code>方法的选择器与其实现地址相关联;<code>display</code>方法的选择器与其实现地址相关联，等等。</li>\n</ul>\n<p>创建新对象时，将分配内存，并初始化其实例变量。对象的首个变量是指向其类结构的指针。这个指针称为isa，它使对象可以访问它的类，并通过该类对它继承的所有类进行访问。</p>\n<blockquote>\n<p>虽然这不是语言的一部分，但是需要isa指针来处理Objective-C运行时系统。在结构定义的任何字段中，对象需要“等效”到struct objc_object(在objc/objc.h中定义)。然而，您很少需要创建自己的根对象，而从NSObject或NSProxy继承的对象会自动拥有isa变量。</p>\n</blockquote>\n<p>这些类元素和对象结构在 <em>Figure 3- 1</em> 中阐述.</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/3340896-dc0283a1fceff976.gif?imageMogr2/auto-orient/strip\" alt=\"Figure 3-1 消息传递结构\"></p>\n<p>当消息被发送到一个对象时，消息传递函数会跟随对象的isa指针到类结构，它在分派表中查找方法选择器。如果它在那里找不到选择器，<code>objc_msgSend</code>会跟随指向父类的指针，并试图在它的分派表中找到选择器。连续的失败导致<code>objc_msgSend</code>爬升类层次结构，直到它到达NSObject类。一旦它定位了选择器，函数调用表中的该方法并将接收对象的数据结构传递给它。</p>\n<p>这是在运行时选择方法实现的方式——或者，用面向对象编程的行话来说，方法是动态绑定到消息的。</p>\n<p>为了加快消息传递进程，运行时系统将缓存选择器和方法的地址。每个类都有一个单独的缓存，它可以包含用于继承方法的选择器以及类中定义的方法。在搜索调度表之前，消息传递例程首先检查接收对象的类的缓存(关于可能再次使用的方法可能会再次使用的理论)。如果方法选择器在缓存中，消息传递只比函数调用稍微慢一点。一旦程序运行足够长的时间来“预热”它的缓存，它发送的几乎所有消息都会找到一个缓存的方法。当程序运行时，缓存会动态地增长以容纳新的消息。</p>\n<h3 id=\"使用隐藏的参数\"><a href=\"#使用隐藏的参数\" class=\"headerlink\" title=\"使用隐藏的参数\"></a>使用隐藏的参数</h3><p>当<code>objc_msgSend</code>找到实现方法的过程时，它调用该过程并将消息中的所有参数传递给它。同时传递隐藏的两个参数:</p>\n<ul>\n<li>接收对象</li>\n<li>方法的选择器。<br>这些参数提供了关于调用它的消息表达式的另一半显式信息。它们被认为是“隐藏的”，因为它们没有在定义方法的源代码中声明。当代码被编译时，它们被插入到实现中。</li>\n</ul>\n<p>虽然这些参数没有显式地声明，但是源代码仍然可以引用它们(就像它可以引用接收对象的实例变量一样)。方法将接收对象作为self，并将它的方法选择器作为_cmd。在下面的示例中，_cmd 引用方法选择器作为strange的方法,引用self做为strange消息的接收对象。</p>\n<pre><code class=\"hljs monkey\">- strange\n&#123;\n    id  target = getTheReceiver();\n    SEL <span class=\"hljs-function\"><span class=\"hljs-keyword\">method</span> =</span> getTheMethod();\n \n    <span class=\"hljs-keyword\">if</span> ( target == <span class=\"hljs-built_in\">self</span> || <span class=\"hljs-function\"><span class=\"hljs-keyword\">method</span> =</span>= _cmd )\n        <span class=\"hljs-keyword\">return</span> nil;\n    <span class=\"hljs-keyword\">return</span> [target performSelector:<span class=\"hljs-function\"><span class=\"hljs-keyword\">method</span>];</span>\n&#125;</code></pre>\n<p>self是两个参数中比较有用的一个。实际上，接收对象的实例变量的方式可以用于方法定义。</p>\n<h3 id=\"获取一个方法的地址\"><a href=\"#获取一个方法的地址\" class=\"headerlink\" title=\"获取一个方法的地址\"></a>获取一个方法的地址</h3><p>规避动态绑定的唯一方法是获取方法的地址，并直接调用它，就像它是一个函数一样。这可能适用于极少数情况下，特定的方法将连续多次执行，并且您希望在每次执行方法时避免消息传递的开销。</p>\n<p>使用NSObject类中定义的方法，methodForSelector:，您可以要求一个指向方法实现的指针，然后使用指针来调用该过程。methodForSelector:返回的指针必须小心地转换为合适的函数类型。返回类型和参数类型都应该包含在转换中。</p>\n<p>下面的示例展示了实现<code>setFilled</code>方法可能调用的流程:</p>\n<pre><code class=\"hljs objectivec\"><span class=\"hljs-keyword\">void</span> (*<span class=\"hljs-keyword\">setter</span>)(<span class=\"hljs-keyword\">id</span>, SEL, <span class=\"hljs-built_in\">BOOL</span>);\n<span class=\"hljs-keyword\">int</span> i;\n \n<span class=\"hljs-keyword\">setter</span> = (<span class=\"hljs-keyword\">void</span> (*)(<span class=\"hljs-keyword\">id</span>, SEL, <span class=\"hljs-built_in\">BOOL</span>))[target\n    methodForSelector:<span class=\"hljs-keyword\">@selector</span>(setFilled:)];\n<span class=\"hljs-keyword\">for</span> ( i = <span class=\"hljs-number\">0</span> ; i &lt; <span class=\"hljs-number\">1000</span> ; i++ )\n    <span class=\"hljs-keyword\">setter</span>(targetList[i], <span class=\"hljs-keyword\">@selector</span>(setFilled:), <span class=\"hljs-literal\">YES</span>);</code></pre>\n<p>传递给流程的前两个参数是接收对象(self)和方法选择器(_cmd)。这些参数隐藏在方法语法中，但是当方法被调用为函数时，必须显式地进行说明。</p>\n<p>使用methodForSelector:规避动态绑定可以节省消息传递所需的大部分时间。但是，只有在一个特定的消息重复多次的情况下，才会有显著的节省，如上面所示的for循环。</p>\n<p>注意，methodForSelector:由Cocoa运行时系统提供;这不是Objective-C语言本身的特性。</p>\n<h2 id=\"动态方法解决方案\"><a href=\"#动态方法解决方案\" class=\"headerlink\" title=\"动态方法解决方案\"></a>动态方法解决方案</h2><p>本章描述如何动态地提供方法的实现。</p>\n<h3 id=\"动态方法解决方案-1\"><a href=\"#动态方法解决方案-1\" class=\"headerlink\" title=\"动态方法解决方案\"></a>动态方法解决方案</h3><p>有些情况下，您可能希望动态地提供方法的实现。例如，Objective-C声明的属性特性(参见Objective-C编程语言中的声明属性)包括@dynamic指令:</p>\n<pre><code class=\"hljs css\"><span class=\"hljs-keyword\">@dynamic</span> propertyName;</code></pre>\n<p>它告诉编译器将动态地提供与属性关联的方法。</p>\n<p>您可以实现方法resolveInstanceMethod:和resolveClassMethod:为实例和类方法动态地提供给定选择器的实现。</p>\n<p>Objective-C方法仅仅是一个C函数，它至少需要两个参数-self和_cmd。您可以使用函数<code>class_addMethod</code>将函数添加到类中。因此，给定以下函数:</p>\n<pre><code class=\"hljs reasonml\">void dynamic<span class=\"hljs-constructor\">MethodIMP(<span class=\"hljs-params\">id</span> <span class=\"hljs-params\">self</span>, SEL <span class=\"hljs-params\">_cmd</span>)</span> &#123;\n    <span class=\"hljs-comment\">// implementation ....</span>\n&#125;</code></pre>\n<p>可以动态地将其添加到一个类作为一个方法(称为resolveThisMethodDynamically)使用resolveInstanceMethod:是这样的:</p>\n<pre><code class=\"hljs less\"><span class=\"hljs-variable\">@implementation</span> MyClass\n+ (BOOL)<span class=\"hljs-attribute\">resolveInstanceMethod</span>:(SEL)aSEL\n&#123;\n    <span class=\"hljs-selector-tag\">if</span> (aSEL == <span class=\"hljs-variable\">@selector</span>(resolveThisMethodDynamically)) &#123;\n          <span class=\"hljs-selector-tag\">class_addMethod</span>([self class], aSEL, (IMP) dynamicMethodIMP, <span class=\"hljs-string\">&quot;v@:&quot;</span>);\n          <span class=\"hljs-selector-tag\">return</span> <span class=\"hljs-selector-tag\">YES</span>;\n    &#125;\n    <span class=\"hljs-selector-tag\">return</span> <span class=\"hljs-selector-attr\">[super resolveInstanceMethod:aSEL]</span>;\n&#125;\n@<span class=\"hljs-selector-tag\">end</span></code></pre>\n<p>转发方法(如消息转发中所描述的)和动态方法解析在很大程度上是正交的。类有机会在转发机制启动之前动态解析方法。如果调用<code>respondsToSelector</code>或<code>instancesRespondToSelector:</code>方法,动态方法解析器就有机会给选择器提供一个IMP。如果您实现了<code>resolveInstanceMethod:</code>但是希望特定的选择器通过转发机制来转发，给这些方法选择器返回NO.</p>\n<h3 id=\"动态加载\"><a href=\"#动态加载\" class=\"headerlink\" title=\"动态加载\"></a>动态加载</h3><p>Objective-C程序可以在运行时加载和链接新的类和类别。新代码合并到程序中，并在开始时对加载的类和类别进行相同的处理。</p>\n<p>动态加载可以用来做很多不同的事情。例如，系统首选项应用程序中的各个模块是动态加载的。</p>\n<p>在Cocoa环境中，动态加载通常用于允许定制应用程序。其他人可以编写程序在运行时加载的模块——就像接口构建器加载自定义面板和OS X系统首选项应用程序加载自定义的偏好模块一样。可加载模块扩展了应用程序的功能。他们以你允许的方式对它做出贡献，但却无法预见或定义你自己。您提供了框架，但其他人提供了代码。</p>\n<p>虽然有一个运行时函数，在Mach-O文件中执行Objective-C模块的动态加载(objc /objc-load.h中定义的objc_loadmodule)，但Cocoa的NSBundle类为动态加载提供了一个更方便的接口，这是面向对象的，并与相关的服务集成在一起。在Foundation框架参考中查看NSBundle类规范，了解关于NSBundle类及其使用的信息。请参阅OS X ABI Mach-O文件格式参考，以获取关于Mach-O文件的信息。</p>\n<h2 id=\"消息转发\"><a href=\"#消息转发\" class=\"headerlink\" title=\"消息转发\"></a>消息转发</h2><p>向不处理该消息的对象发送消息是错误的。然而，在宣布错误之前，运行时系统会再给接收对象一个机会来处理该消息。</p>\n<h3 id=\"转发\"><a href=\"#转发\" class=\"headerlink\" title=\"转发\"></a>转发</h3><p>如果您向一个不处理该消息的对象发送消息，在宣布一个错误之前，运行时将向对象发送对象一个<code>forwardInvocation:</code>消息,并携带一个<code>NSInvocation</code>对象参数——NSInvocation对象封装了原始消息和传递给它的参数。</p>\n<p>您可以实现一个<code>forwardInvocation:</code>方法来提供对消息的默认响应，或者以其他方式避免错误。正如其名称所暗示的,<code>forwardInvocation</code>通常用于将消息转发到另一个对象。</p>\n<p>为了查看转发的范围和意图，请想象以下场景:假设您正在设计一个对象，该对象可以响应一个名为<code>negotiate</code>的消息，您希望它的响应包含另一类型对象的响应。通过在您实现<code>negotiate</code>方法的主体中传递一个<code>negotiate</code>消息到其他对象，您可以轻松完成这一任务。</p>\n<p>更进一步，假设您希望您的对象对<code>negotiate</code>消息的响应完全在另一个类中实现。实现这一点的一种方法是让您的类继承其他类的方法。然而，这样安排是不可能的。也许有很好的理由来说明为什么不可能.</p>\n<p>即使您的类不能继承<code>negotiate</code>方法，您仍然可以通过将消息传递给其他类的实例方法来“借用”它:</p>\n<pre><code class=\"hljs less\"><span class=\"hljs-selector-tag\">-</span> (id)<span class=\"hljs-selector-tag\">negotiate</span>\n&#123;\n    <span class=\"hljs-selector-tag\">if</span> ( [someOtherObject <span class=\"hljs-attribute\">respondsTo</span>:<span class=\"hljs-variable\">@selector</span>(negotiate)] )\n        <span class=\"hljs-selector-tag\">return</span> <span class=\"hljs-selector-attr\">[someOtherObject negotiate]</span>;\n    <span class=\"hljs-selector-tag\">return</span> <span class=\"hljs-selector-tag\">self</span>;\n&#125;</code></pre>\n<p>这样做可能会有点麻烦，特别是如果有许多消息需要您的对象传递给其他对象时。您必须实现一种方法来覆盖您想要从其他类中借用的每个方法。此外，在您编写代码时，您不知道您可能想要转发的完整的消息集是不可能处理的。该集合可能依赖于运行时的事件，并且随着新的方法和类在将来实现，它可能会发生变化。</p>\n<p><code>forwardInvocation:</code>提供的第二次机会为这个问题提供了一个的临时解决方案，它是动态的，而不是静态的。它的工作原理是这样的:当一个对象不能响应消息时，因为它没有找到与消息中的选择器匹配的方法，运行时系统通过发送一个<code>forwardInvocation:</code>消息来通知对象。每个对象都继承了来自NSObject类的<code>forwardInvocation:</code>方法。然而,NSObject版本的方法只是简单地调用<code>doesNotRecognizeSelector:</code>。通过重写NSObject的版本并实现您自己的版本，您可以利用<code>forwardInvocation:</code>消息将消息转发给其他对象。</p>\n<p>要转发一条消息，所有<code>forwardInvocation:</code>方法需要做的是:</p>\n<ul>\n<li>确定消息应该发送到哪里，以及。</li>\n<li>将原始参数发送到那里.</li>\n</ul>\n<p>可以用<code>invokeWithTarget:</code>方法发送消息:</p>\n<pre><code class=\"hljs groovy\">- (<span class=\"hljs-keyword\">void</span>)<span class=\"hljs-attr\">forwardInvocation:</span>(NSInvocation *)anInvocation\n&#123;\n    <span class=\"hljs-keyword\">if</span> ([someOtherObject <span class=\"hljs-attr\">respondsToSelector:</span>\n            [anInvocation selector]])\n        [anInvocation <span class=\"hljs-attr\">invokeWithTarget:</span>someOtherObject];\n    <span class=\"hljs-keyword\">else</span>\n        [<span class=\"hljs-built_in\">super</span> <span class=\"hljs-attr\">forwardInvocation:</span>anInvocation];\n&#125;</code></pre>\n\n<p>转发消息的返回值将返回给原始发送方。所有类型的返回值都可以传递给发送方，包括id、结构和双精度浮点数。</p>\n<p><code>forwardInvocation:</code>方法可以作为 <strong>未识别</strong> 消息的分发中心，将它们分配给不同的接收者。或者它可以是一个传输站，将所有的消息发送到同一个目的地。它可以将一个消息转换成另一个消息，或者简单地“吞下”一些消息，因此没有响应，没有错误。<code>forwardInvocation</code>方法还可以将多个消息合并为一个响应。<code>forwardInvocation</code> 是由实现者决定的。它为对象链到转发链提供了一个机会，这也为相关程序设计提供了可能。</p>\n<blockquote>\n<p><strong>注意:</strong> <code>forwardInvocation:</code>只有在名义接收方不调用现有方法的情况下，该方法才可以处理消息。例如，如果您希望您的对象转发<code>negotiate</code>消息给另一个对象，那么它就不能拥有自己的<code>negotiate</code>方法。如果是这样，消息将永远不会到达<code>forwardInvocation:</code>。</p>\n</blockquote>\n<p>有关转发和调用的更多信息，请参阅基础框架引用中的NSInvocation类规范。</p>\n<h3 id=\"转发和多继承\"><a href=\"#转发和多继承\" class=\"headerlink\" title=\"转发和多继承\"></a>转发和多继承</h3><p>转发模仿继承，并可用于向Objective-C程序提供多继承的一些影响。如图5-1所示，通过转发来响应消息的对象似乎可以借用或“继承”在另一个类中定义的方法实现。<br><img src=\"http://upload-images.jianshu.io/upload_images/3340896-e628ceb1736d6121.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"图5-1\"></p>\n<p>在这个例子中，一个战士类的实例将一个协商消息转发给一个外交官类的实例。战士会像外交官一样谈判。它似乎会对谈判的信息作出回应，而且对于所有实际的目的而言，它确实会做出回应(尽管它确实是一名从事这项工作的外交官)。</p>\n<p>因此，转发消息的对象从继承层次结构的两个分支中“继承”方法——它自己的分支和响应消息的对象的分支。在上面的例子中，似乎战士层级继承了外交官和它自己的父类。</p>\n<p>转发提供了您通常希望从多个继承中获得的大部分特性。然而，两者之间有一个重要的区别:多重继承将不同的功能组合在一个对象中。它倾向于大的、多层面的对象。而转发是将不同的责任分配给不同的对象。它将问题分解成更小的对象，由这些小的对象来处理相关消息。</p>\n<h3 id=\"Surrogate对象\"><a href=\"#Surrogate对象\" class=\"headerlink\" title=\"Surrogate对象\"></a>Surrogate对象</h3><p>转发不仅可以模仿多重继承，还可以开发轻量级对象,这个对象可以表示或者涵盖更多实用的功能。Surrogate代表另一个对象，并将消息传递给它。</p>\n<p>在Objective-C编程语言中“远程消息传递”中讨论的Surrogate是这样的代理。Surrogate处理消息转发到远程接收器的细节，确保在连接中复制和检索参数值，等等。但它并没有尝试去做其他的事情;它不会复制远程对象的功能，而是简单地给远程对象一个本地地址，一个可以在另一个应用程序中接收消息的地方。</p>\n<p>其他类型的Surrogate对象也是可能的。例如，假设您有一个处理大量数据的对象，可能会创建一个复杂的映像或读取磁盘上文件的内容。设置这个对象可能非常耗时，所以您更喜欢在实际需要时或系统资源临时空闲时使用它。与此同时，为了使应用程序中的其他对象能够正常工作，您至少需要一个占位符来支持该对象。</p>\n<p>在这种情况下，您可以开始创建，而不是完全的对象，而是一个轻量级的Surrogate。这个对象可以自己做一些事情，比如回答关于数据的问题，但大多数情况下，它只会为较大的对象保留一个位置，当时间到来时，将消息转发给它。当Surrogate的<code>forwardInvocation:</code>方法接收一个转发给另一个对象的消息时，它将确保该对象存在，并且如果它不存在，将创建它。对于较大对象的所有消息都通过Surrogate，因此，就程序的其余部分而言，Surrogate和较大的对象将是相同的。</p>\n<h3 id=\"转发和继承\"><a href=\"#转发和继承\" class=\"headerlink\" title=\"转发和继承\"></a>转发和继承</h3><p>尽管转发模仿继承，NSObject类从不混淆两者。方法类似respondsToSelector:和isKindOfClass:只查看继承层次结构，而不关注转发链。例如，如果询问一个战士对象是否响应协商消息，</p>\n<pre><code class=\"hljs less\"><span class=\"hljs-selector-tag\">if</span> ( [aWarrior <span class=\"hljs-attribute\">respondsToSelector</span>:<span class=\"hljs-variable\">@selector</span>(negotiate)] )\n    ...</code></pre>\n<p>答案是否定的，即使它可以在没有错误的情况下接受协商，并且在某种意义上，通过将它们转发给一个外交官来回应。(见图5 - 1)。</p>\n<p>在很多情况下，答案是否定的。但事实可能并非如此。如果您使用转发来设置代理对象或扩展类的功能，则转发机制应该像继承一样透明。如果您希望您的对象表现得好像它们确实继承了它们转发消息的对象的行为，那么您将需要重新实现respondsToSelector:和isKindOfClass:方法来包含您的转发算法:</p>\n<pre><code class=\"hljs objectivec\">- (<span class=\"hljs-built_in\">BOOL</span>)respondsToSelector:(SEL)aSelector\n&#123;\n    <span class=\"hljs-keyword\">if</span> ( [<span class=\"hljs-keyword\">super</span> respondsToSelector:aSelector] )\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">YES</span>;\n    <span class=\"hljs-keyword\">else</span> &#123;\n        <span class=\"hljs-comment\">/* Here, test whether the aSelector message can     *</span>\n<span class=\"hljs-comment\">         * be forwarded to another object and whether that  *</span>\n<span class=\"hljs-comment\">         * object can respond to it. Return YES if it can.  */</span>\n    &#125;\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">NO</span>;\n&#125;</code></pre>\n<p>除了<code>respondsToSelector:</code> <code>isMemberOfClass:</code>和<code>isKindOfClass:</code>,<code>instancesRespondToSelector:</code>方法也应该实现转发算法。如果使用了协议，那么<code>conformsToProtocol:</code>方法也应该被添加到列表中。类似地,如果一个对象将任何远程转发消息接收,它应该有一个版本的<code>methodSignatureForSelector:</code>可以返回准确的描述方法,最终回复转发消息;例如,如果一个对象将消息转发给Surrogate,您将实现<code>methodSignatureForSelector:</code>如下:</p>\n<pre><code class=\"hljs groovy\">- (NSMethodSignature*)<span class=\"hljs-attr\">methodSignatureForSelector:</span>(SEL)selector\n&#123;\n    NSMethodSignature* signature = [<span class=\"hljs-built_in\">super</span> <span class=\"hljs-attr\">methodSignatureForSelector:</span>selector];\n    <span class=\"hljs-keyword\">if</span> (!signature) &#123;\n       signature = [surrogate <span class=\"hljs-attr\">methodSignatureForSelector:</span>selector];\n    &#125;\n    <span class=\"hljs-keyword\">return</span> signature;\n&#125;</code></pre>\n<p>您可能会考虑将转发算法放在私有代码的某个地方，并拥有所有这些方法，<code>forwardInvocation:</code>包括，调用它。</p>\n<blockquote>\n<p>注意: 这是一种先进的技术，只适用于没有其他解决方案的情况下。它不是用来代替继承的。如果您必须使用这种技术，请确保您完全理解了正在转发的类的行为和转发的类。<br>本节中提到的方法在Foundation框架引用中的NSObject类规范中进行了描述。有关<code>invokeWithTarget</code>的信息,在Foundation框架引用中查看NSInvocation类规范。</p>\n</blockquote>\n<h2 id=\"类型编码\"><a href=\"#类型编码\" class=\"headerlink\" title=\"类型编码\"></a>类型编码</h2><p>为了帮助运行时系统，编译器为字符串中的每个方法编码返回和参数类型，并将字符串与方法选择器关联起来。它所使用的编码方案在其他上下文中也很有用，因此可以通过公开的@encode()编译器指令。当给定一个类型规范时，@encode()将返回一个编码该类型的字符串。类型可以是基本类型，例如int、指针、标记的结构体或union，或者类名称——任何类型，实际上都可以用作对C sizeof()操作符的参数。</p>\n<pre><code class=\"hljs java\"><span class=\"hljs-keyword\">char</span> *buf1 = <span class=\"hljs-meta\">@encode(int **)</span>;\n<span class=\"hljs-keyword\">char</span> *buf2 = <span class=\"hljs-meta\">@encode(struct key)</span>;\n<span class=\"hljs-keyword\">char</span> *buf3 = <span class=\"hljs-meta\">@encode(Rectangle)</span>;</code></pre>\n<p>下表列出了类型代码。请注意，它们中的许多都与为存档或分发目的而编码对象时使用的代码重叠。但是，这里列出的代码是在编写代码时不能使用的，而且在编写代码时，您可能想要使用一些代码，这些代码不是由@encode()生成的。(请参阅Foundation框架参考中的NSCoder类规范，以获得关于用于存档或分发的编码对象的更多信息)。</p>\n<p><strong>Table 6-1</strong> Objectiv-C 类型编码</p>\n<table>\n<thead>\n<tr>\n<th>Code</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>c</td>\n<td>char</td>\n</tr>\n<tr>\n<td>i</td>\n<td>int</td>\n</tr>\n<tr>\n<td>s</td>\n<td>short</td>\n</tr>\n<tr>\n<td>l</td>\n<td>long</td>\n</tr>\n<tr>\n<td>q</td>\n<td>long long</td>\n</tr>\n<tr>\n<td>C</td>\n<td>unsingned char</td>\n</tr>\n<tr>\n<td>I</td>\n<td>unsigned int</td>\n</tr>\n<tr>\n<td>S</td>\n<td>unsigned short</td>\n</tr>\n<tr>\n<td>L</td>\n<td>unsigned long</td>\n</tr>\n<tr>\n<td>Q</td>\n<td>unsigned long long</td>\n</tr>\n<tr>\n<td>f</td>\n<td>float</td>\n</tr>\n<tr>\n<td>d</td>\n<td>double</td>\n</tr>\n<tr>\n<td>B</td>\n<td>C++ bool 或者 C99 _Bool</td>\n</tr>\n<tr>\n<td>v</td>\n<td>void</td>\n</tr>\n<tr>\n<td>*</td>\n<td>A character string(char *)</td>\n</tr>\n<tr>\n<td>@</td>\n<td>object(不管是静态类型或者id类型)</td>\n</tr>\n<tr>\n<td>#</td>\n<td>class object (Class)</td>\n</tr>\n<tr>\n<td>:</td>\n<td>method selector(SEL)</td>\n</tr>\n<tr>\n<td>[array type]</td>\n<td>array</td>\n</tr>\n<tr>\n<td>{name=type…}</td>\n<td>structure</td>\n</tr>\n<tr>\n<td>(name=type…)</td>\n<td>union</td>\n</tr>\n<tr>\n<td>bnum</td>\n<td>A bit field of <em>num</em> bits</td>\n</tr>\n<tr>\n<td>^type</td>\n<td>A pointer to type</td>\n</tr>\n<tr>\n<td>?</td>\n<td>unknown type(among other things, this code is used for function pointers)</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p><strong>重要</strong>: Objective-C 不支持 long double 类型.@encode(long double)返回 d,编码形式跟 double一样.</p>\n</blockquote>\n<p>数组的类型代码括在方括号内;数组中元素的数量是在数组类型之前，在打开括号之后立即指定的。例如，浮点数的12个指针的数组将被编码为:</p>\n<pre><code class=\"hljs clojure\">[<span class=\"hljs-number\">12</span><span class=\"hljs-comment\">^f</span>]</code></pre>\n<p>结构是在大括号内指定的，而在括号内的结合。结构标记首先列出，然后是一个等号和序列中列出的结构域的代码。例如,结构体</p>\n<pre><code class=\"hljs cpp\"><span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">example</span> &#123;</span>\n    id   anObject;\n    <span class=\"hljs-keyword\">char</span> *aString;\n    <span class=\"hljs-keyword\">int</span>  anInt;\n&#125; Example;</code></pre>\n<p>会像这样编码:</p>\n<pre><code class=\"hljs routeros\">&#123;<span class=\"hljs-attribute\">example</span>=@*i&#125;</code></pre>\n<p>同样的编码结果，无论定义的类型名称(Example)还是结构标记(example)都传递给@encode()。结构指针的编码包含与结构字段相同的信息量:</p>\n<pre><code class=\"hljs routeros\">^&#123;<span class=\"hljs-attribute\">example</span>=@*i&#125;</code></pre>\n<p>然而,另一层间接移除了内部具体的类型:</p>\n<pre><code class=\"hljs dust\"><span class=\"xml\">^^</span><span class=\"hljs-template-variable\">&#123;example&#125;</span></code></pre>\n<p>对象被看做结构体.举例来说,传递一个NSObject类名可以这样编码:</p>\n<pre><code class=\"hljs routeros\">&#123;<span class=\"hljs-attribute\">NSObject</span>=#&#125;</code></pre>\n<p>NSObject类只声明了一个类的实例变量isa。</p>\n<p>注意，虽然@encode()指令没有返回它们，但是运行时系统使用表6-2中列出的附加编码，用于在协议中声明方法的类型限定符。</p>\n<p><strong>Table 6-2</strong> Objective-C 方法编码</p>\n<table>\n<thead>\n<tr>\n<th>Code</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>r</td>\n<td>const</td>\n</tr>\n<tr>\n<td>n</td>\n<td>in</td>\n</tr>\n<tr>\n<td>N</td>\n<td>inout</td>\n</tr>\n<tr>\n<td>o</td>\n<td>out</td>\n</tr>\n<tr>\n<td>O</td>\n<td>bycopy</td>\n</tr>\n<tr>\n<td>R</td>\n<td>byref</td>\n</tr>\n<tr>\n<td>V</td>\n<td>oneway</td>\n</tr>\n</tbody></table>\n<h2 id=\"属性声明\"><a href=\"#属性声明\" class=\"headerlink\" title=\"属性声明\"></a>属性声明</h2><p>当编译器遇到属性声明(在Objective-C编程语言中看到已声明的属性)时，它会生成与封装类、类别或协议相关的描述性元数据。您可以使用支持在类或协议上查找属性的函数来访问此元数据，获取属性的类型为@encode字符串，并将属性的属性列表复制为C字符串数组。每个类和协议都有一个声明的属性列表。</p>\n<h3 id=\"属性-类型和函数\"><a href=\"#属性-类型和函数\" class=\"headerlink\" title=\"属性 类型和函数\"></a>属性 类型和函数</h3><p>属性结构为属性描述符定义了一个不透明的句柄。</p>\n<pre><code class=\"hljs cpp\"><span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">objc_property</span> *<span class=\"hljs-title\">Property</span>;</span></code></pre>\n<p>您可以使用函数<code>class_copyPropertyList</code>和<code>protocol _copypropertylist</code>检索与类(包括已经加载的类别)关联属性的数组，以及一个协议:</p>\n<pre><code class=\"hljs reasonml\">objc_property_t *<span class=\"hljs-keyword\">class</span><span class=\"hljs-constructor\">_copyPropertyList(Class <span class=\"hljs-params\">cls</span>, <span class=\"hljs-params\">unsigned</span> <span class=\"hljs-params\">int</span> <span class=\"hljs-operator\">*</span><span class=\"hljs-params\">outCount</span>)</span>\nobjc_property_t *protocol<span class=\"hljs-constructor\">_copyPropertyList(Protocol <span class=\"hljs-operator\">*</span><span class=\"hljs-params\">proto</span>, <span class=\"hljs-params\">unsigned</span> <span class=\"hljs-params\">int</span> <span class=\"hljs-operator\">*</span><span class=\"hljs-params\">outCount</span>)</span></code></pre>\n<p>例如，给定以下类声明:</p>\n<pre><code class=\"hljs angelscript\">@<span class=\"hljs-keyword\">interface</span> <span class=\"hljs-symbol\">Lender</span> : <span class=\"hljs-symbol\">NSObject</span> &#123;\n    <span class=\"hljs-built_in\">float</span> alone;\n&#125;\n@<span class=\"hljs-keyword\">property</span> <span class=\"hljs-built_in\">float</span> alone;\n@end</code></pre>\n<p>您可以使用以下方法获取属性列表:</p>\n<pre><code class=\"hljs reasonml\">id LenderClass = objc<span class=\"hljs-constructor\">_getClass(<span class=\"hljs-string\">&quot;Lender&quot;</span>)</span>;\nunsigned <span class=\"hljs-built_in\">int</span> outCount;\nobjc_property_t *properties = <span class=\"hljs-keyword\">class</span><span class=\"hljs-constructor\">_copyPropertyList(LenderClass, &amp;<span class=\"hljs-params\">outCount</span>)</span>;</code></pre>\n<p>您可以使用<code>property_getName</code>函数来发现属性的名称:</p>\n<pre><code class=\"hljs reasonml\">const <span class=\"hljs-built_in\">char</span> *property<span class=\"hljs-constructor\">_getName(<span class=\"hljs-params\">objc_property_t</span> <span class=\"hljs-params\">property</span>)</span></code></pre>\n<p>您可以使用函数<code>class_getProperty</code>和<code>protocol _getproperty</code>来获得类和协议中给定名称的属性的引用:</p>\n<pre><code class=\"hljs reasonml\">objc_property_t <span class=\"hljs-keyword\">class</span><span class=\"hljs-constructor\">_getProperty(Class <span class=\"hljs-params\">cls</span>, <span class=\"hljs-params\">const</span> <span class=\"hljs-params\">char</span> <span class=\"hljs-operator\">*</span><span class=\"hljs-params\">name</span>)</span>\nobjc_property_t protocol<span class=\"hljs-constructor\">_getProperty(Protocol <span class=\"hljs-operator\">*</span><span class=\"hljs-params\">proto</span>, <span class=\"hljs-params\">const</span> <span class=\"hljs-params\">char</span> <span class=\"hljs-operator\">*</span><span class=\"hljs-params\">name</span>, BOOL <span class=\"hljs-params\">isRequiredProperty</span>, BOOL <span class=\"hljs-params\">isInstanceProperty</span>)</span></code></pre>\n<p>您可以使用<code>property_getAttributes</code>函数来发现属性的名称和@encode类型字符串。有关编码类型字符串的详细信息，请参阅类型编码;有关此字符串的详细信息，请参见属性类型字符串和属性属性描述示例。</p>\n<pre><code class=\"hljs reasonml\">const <span class=\"hljs-built_in\">char</span> *property<span class=\"hljs-constructor\">_getAttributes(<span class=\"hljs-params\">objc_property_t</span> <span class=\"hljs-params\">property</span>)</span></code></pre>\n<p>将这些组合在一起，您可以使用以下代码打印与类关联的所有属性:</p>\n<pre><code class=\"hljs reasonml\">id LenderClass = objc<span class=\"hljs-constructor\">_getClass(<span class=\"hljs-string\">&quot;Lender&quot;</span>)</span>;\nunsigned <span class=\"hljs-built_in\">int</span> outCount, i;\nobjc_property_t *properties = <span class=\"hljs-keyword\">class</span><span class=\"hljs-constructor\">_copyPropertyList(LenderClass, &amp;<span class=\"hljs-params\">outCount</span>)</span>;\n<span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; outCount; i++) &#123;\n    objc_property_t property = properties<span class=\"hljs-literal\">[<span class=\"hljs-identifier\">i</span>]</span>;\n    fprintf(stdout, <span class=\"hljs-string\">&quot;%s %s\\n&quot;</span>, property<span class=\"hljs-constructor\">_getName(<span class=\"hljs-params\">property</span>)</span>, property<span class=\"hljs-constructor\">_getAttributes(<span class=\"hljs-params\">property</span>)</span>);\n&#125;\n</code></pre>\n\n<h3 id=\"属性-类型字符串\"><a href=\"#属性-类型字符串\" class=\"headerlink\" title=\"属性 类型字符串\"></a>属性 类型字符串</h3><p>您可以使用<code>property_getAttributes</code>函数来发现属性的名称、@encode类型字符串和属性的其他属性。</p>\n<p>字符串以一个T开头，后面是@encode类型和一个逗号，最后是一个V，后面跟着一个支持实例变量的名称。在他们之间，填充属性描述符，由逗号分隔:</p>\n<p>详细内容请看<a href=\"https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/ObjCRuntimeGuide/Articles/ocrtPropertyIntrospection.html\"><strong>Table 7-1</strong></a>和属性特性描述示例</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>本文主要关注关注runtime 消息的动态解析与转发，主要包含三个方法：</p>\n<ul>\n<li><code>resolveInstanceMethod:</code><br>当实例对象无法找到 sel 实现时，首先调用此方法，对sel做处理</li>\n<li><code>resolveClassMethod:</code><br>当类对象无法找到 sel 实现时，首先调用此方法，对sel做处理</li>\n<li><code>forwardTargetForSelector:</code><br>sel 仍未处理，接着调用此方法，在这里可以对sel做处理</li>\n<li><code>methodSignatureForSelector:</code><br>sel 仍未处理，runtime会通过<code>methodSigntureForSelector</code>方法尝试获取本次消息调用的具体环境信息，包括消息的参数与返回值类型。并封装成NSInvocation对象。我们可以在<code>forwardInvocation</code>方法内部对该对象作进一步的处理，并使之能够成功的完成消息处理。如果末能成功获取NSInvocation对象，那么程序就会发送<code>doesNotRecognizeSelector</code>消息抛出<code>unrecognized Selector send to xxx</code>的异常。</li>\n</ul>\n<p>关于runtime的更多有趣的使用，可以在<a href=\"https://www.jianshu.com/p/6a72f21bf521\">Objective-C Runtime</a>中寻找对应的API来探索，里面有runtime 各方法的说明。</p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><p><a href=\"https://github.com/913868456/OCDemo\">Runtime_Demo</a></p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p><a href=\"https://www.jianshu.com/p/e6a9492995a5\">iOS runtime之消息机制</a><br><a href=\"https://developer.apple.com/documentation/objectivec/nsobject/1418855-forwardingtargetforselector\">forwardTargetForSelector:</a><br><a href=\"https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/ObjCRuntimeGuide/Introduction/Introduction.html#//apple_ref/doc/uid/TP40008048-CH1-SW1\">Objective-C Runtime Programming Guide</a></p>\n","site":{"data":{"fluid_static_prefix":{"internal_js":"/js","internal_css":"/css","internal_img":"/img","iconfont":"//at.alicdn.com/t/font_1736178_kmeydafke9r.css","anchor":"https://cdn.staticfile.org/anchor-js/4.2.2/","github_markdown":"https://cdn.staticfile.org/github-markdown-css/4.0.0/","jquery":"https://cdn.staticfile.org/jquery/3.4.1/","bootstrap":"https://cdn.staticfile.org/twitter-bootstrap/4.4.1/","highlightjs":"https://cdn.staticfile.org/highlight.js/10.0.0/","prismjs":"https://cdn.staticfile.org/prism/1.21.0/","tocbot":"https://cdn.staticfile.org/tocbot/4.11.1/","typed":"https://cdn.staticfile.org/typed.js/2.0.11/","fancybox":"https://cdn.staticfile.org/fancybox/3.5.7/","mathjax":"https://cdn.staticfile.org/mathjax/3.0.5/es5/","katex":"https://cdn.staticfile.org/KaTeX/0.11.1/","aplayer":"https://cdn.staticfile.org/aplayer/1.10.1/","busuanzi":"https://busuanzi.ibruce.info/busuanzi/2.3/","clipboard":"https://cdn.staticfile.org/clipboard.js/2.0.6/","mermaid":"https://cdn.staticfile.org/mermaid/8.5.0/","valine":"https://cdn.staticfile.org/valine/1.4.14/","gitalk":"https://cdn.staticfile.org/gitalk/1.6.2/","blueimp_md5":"https://cdn.staticfile.org/blueimp-md5/2.13.0/","disqusjs":"https://cdn.jsdelivr.net/npm/disqusjs@1.0/dist/","hint":"/lib/hint/"},"fluid_config":{"favicon":"/img/favicon.png","apple_touch_icon":"/img/favicon.png","title_join_string":" - ","force_https":false,"code":{"copy_btn":true,"highlight":{"enable":true,"lib":"highlightjs","highlightjs":{"style":"Github Gist","bg_color":false},"prismjs":{"style":"default","preprocess":true}}},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"_","loop":false},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"right","visible":"hover","icon":""},"mouse_click":{"enable":false,"style":"values"}},"dark_mode":{"enable":true,"default":"auto"},"color":{"body_bg_color":"#eee","body_bg_color_dark":"#181c27","navbar_bg_color":"#2f4154","navbar_bg_color_dark":"#1f3144","navbar_text_color":"#fff","navbar_text_color_dark":"#d0d0d0","text_color":"#3c4858","text_color_dark":"#c4c6c9","sec_text_color":"#718096","sec_text_color_dark":"#a7a9ad","post_text_color":"#2c3e50","post_text_color_dark":"#c4c6c9","post_heading_color":"#1a202c","post_heading_color_dark":"#c4c6c9","post_link_color":"#0366d6","post_link_color_dark":"#1589e9","link_hover_color":"#30a9de","link_hover_color_dark":"#30a9de","link_hover_bg_color":"#f8f9fa","link_hover_bg_color_dark":"#364151","board_color":"#fff","board_color_dark":"#252d38"},"font":{"font_size":"16px","font_family":null,"code_font_size":"85%"},"custom_js":null,"custom_css":null,"custom_html":"","web_analytics":{"enable":false,"baidu":null,"google":null,"gtag":null,"tencent":{"sid":null,"cid":null},"woyaola":null,"cnzz":null,"leancloud":{"app_id":null,"app_key":null,"server_url":null}},"lazyload":{"enable":true,"onlypost":false},"daovoice":{"enable":false,"appid":""},"aplayer":{"enable":false,"autoplay":false,"loop":"all","order":"random","theme":"#b7daff","songs":[{"name":"name","artist":"artist","url":"/songs/test.mp3","cover":"/img/cover.jpg"},{"name":"name","artist":"artist","url":"https://...url.mp3","cover":"https://...cover.jpg"}]},"version":{"check":false},"navbar":{"blog_title":"吃面多放葱","ground_glass":{"enable":false,"px":3,"alpha":0.7},"menu":[{"key":"home","link":"/","icon":"iconfont icon-home-fill"},{"key":"category","link":"/categories/","icon":"iconfont icon-category-fill"},{"key":"tag","link":"/tags/","icon":"iconfont icon-tags-fill"},{"key":"about","link":"/about/","icon":"iconfont icon-user-fill"}]},"search":{"enable":true,"path":"/local-search.xml","generate_path":"/local-search.xml","field":"post","content":true},"scroll_down_arrow":{"enable":true,"banner_height_limit":90,"scroll_after_turning_page":true},"banner_parallax":true,"footer":{"statistics":{"enable":false,"source":"busuanzi","pv_format":"总访问量 {} 次","uv_format":"总访客数 {} 人"},"beian":{"enable":false,"icp_text":"京ICP证123456号","police_text":"京公网安备12345678号","police_code":12345678,"police_icon":"/img/police_beian.png"}},"scroll_top_arrow":{"enable":true},"index":{"banner_img":"/img/default.png","banner_img_height":100,"banner_mask_alpha":0.3,"post_default_img":"","slogan":{"enable":true,"text":"像蚂蚁一样工作，像蝴蝶一样生活"},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"category":true,"tag":true}},"page":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3},"post":{"banner_img":"/img/default.png","banner_img_height":70,"banner_mask_alpha":0.3,"meta":{"author":{"enable":false},"date":{"enable":true,"format":"LL a"},"wordcount":{"enable":true,"format":"{} 字"},"min2read":{"enable":true,"format":"{} 分钟","words":100},"views":{"enable":false,"source":"busuanzi","format":"{} 次"}},"updated":{"enable":false,"content":"本文最后更新于：","relative":false},"toc":{"enable":true,"headingSelector":"h1,h2,h3,h4,h5,h6","collapseDepth":0},"copyright":{"enable":true,"content":"本博客所有文章除特别声明外，均采用 <a href=\"https://creativecommons.org/licenses/by-sa/4.0/deed.zh\" rel=\"nofollow noopener\">CC BY-SA 4.0 协议</a> ，转载请注明出处！"},"prev_next":{"enable":true},"custom":{"enable":false,"content":"<img src=\"https://octodex.github.com/images/jetpacktocat.png\" class=\"rounded mx-auto d-block mt-5\" style=\"width:150px; height:150px;\">"},"image_zoom":{"enable":true},"footnote":{"enable":true,"header":""},"math":{"enable":false,"specific":false,"engine":"mathjax"},"mermaid":{"enable":false,"specific":false,"options":{"theme":"default"}},"comments":{"enable":false,"type":"disqus"}},"utterances":{"repo":null,"issue_term":"pathname","label":"utterances","theme":"github-light","theme_dark":"github-dark","crossorigin":"anonymous"},"disqus":{"shortname":null,"disqusjs":false,"apikey":null},"gitalk":{"clientID":null,"clientSecret":null,"repo":null,"owner":null,"admin":["name"],"id":"location.pathname","language":"zh-CN","labels":["Gitalk"],"perPage":10,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true},"valine":{"appid":null,"appkey":null,"placeholder":"说点什么","path":"window.location.pathname","avatar":"retro","meta":["nick","mail","link"],"pageSize":10,"lang":"zh-CN","highlight":false,"recordIP":false,"serverURLs":null},"changyan":{"appid":"","appkey":""},"livere":{"uid":""},"remark42":{"host":"https://remark.haoyizebo.com","site_id":"haoyizebo","max_shown_comments":10,"locale":"zh"},"archive":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null},"category":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"post_limit":10,"order_by":"-length","collapse_depth":0},"tag":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null,"tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"avatar":"/img/avatar.png","name":"蔺国防","introduce":"移动应用开发者，历史文学爱好者","icons":[{"class":"iconfont icon-github-fill","link":"https://github.com","tip":"GitHub"},{"class":"iconfont icon-douban-fill","link":"https://douban.com","tip":"豆瓣"},{"class":"iconfont icon-wechat-fill","qrcode":"/img/favicon.png"}]},"page404":{"banner_img":"/img/default.png","banner_img_height":85,"banner_mask_alpha":0.3,"subtitle":"Page not found"},"links":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"items":[{"title":"Fluid Docs","intro":"主题使用指南","link":"https://hexo.fluid-dev.com/docs/","image":"/img/favicon.png"},{"title":"Fluid Repo","intro":"主题 GitHub 仓库","link":"https://github.com/fluid-dev/hexo-theme-fluid","image":"/img/favicon.png"},{"title":"Fluid Example","intro":"主题操作示例","link":"https://hexo.fluid-dev.com/docs/example/","image":"/img/favicon.png"}]}}}},"excerpt":"","more":"<h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><p>Objective-C语言从编译、链接、到运行都有很多决策。只要有可能，它都是动态的。这意味着该语言不仅需要编译器，还需要运行时系统来执行编译后的代码。运行时系统作为Objective-C语言的一种操作系统;这就是语言的作用。<br>本文档关注NSObject类，以及Objective-C程序如何与运行时系统交互。特别是，它检查了在运行时动态加载新类的范例，并将消息转发给其他对象。它还提供关于在程序运行时如何查找对象信息的相关内容。<br>您应该阅读本文档以了解Objective-C运行时系统如何工作以及如何利用它。但是，通常情况下，您不需要知道和理解这些材料来编写Cocoa应用程序。</p>\n<h2 id=\"Runtime-版本和平台（省略）\"><a href=\"#Runtime-版本和平台（省略）\" class=\"headerlink\" title=\"Runtime 版本和平台（省略）\"></a>Runtime 版本和平台（省略）</h2><h2 id=\"Runtime交互\"><a href=\"#Runtime交互\" class=\"headerlink\" title=\"Runtime交互\"></a>Runtime交互</h2><p>OC在三个不同层面跟runtime系统交互: 通过OC源代码;通过Foundation框架下NSObject定义的方法;通过直接调用runtime函数.</p>\n<h3 id=\"Objective-C-源码\"><a href=\"#Objective-C-源码\" class=\"headerlink\" title=\"Objective-C 源码\"></a>Objective-C 源码</h3><p>在大多数情况下，运行时系统会自动地在幕后工作。您只需编写和编译Objective-C源代码就可以使用它。</p>\n<p>当编译包含Objective-C类和方法的代码时，编译器会创建实现语言动态特性的数据结构和函数调用。数据结构捕获在类和类别定义,协议声明中发现的信息;它们包括在Objective-C编程语言中定义的类对象和协议对象，以及方法选择器、实例变量的模板和从源代码中提取的其他信息。runtime最重要的函数是发送消息的函数，如<em>消息传递</em>中所描述的那样。它是由源代码消息表达式调用的。</p>\n<h3 id=\"NSObject-方法\"><a href=\"#NSObject-方法\" class=\"headerlink\" title=\"NSObject 方法\"></a>NSObject 方法</h3><p>Cocoa中的大多数对象都是NSObject类的子类，所以大多数对象继承了它定义的方法。(值得注意的例外是NSProxy类;参见<em>消息转发</em>以获取更多信息。因此，它的方法建立了每个实例和每个类对象固有的行为。然而，在少数情况下，NSObject类仅仅定义了应该如何做的模板;它没有提供所有必要的代码。</p>\n<p>例如，NSObject类定义了一个描述实例方法，该方法返回描述类内容的字符串。这主要用于调试——GDB打印对象命令打印从该方法返回的字符串。NSObject的这个方法的实现不知道类包含什么，所以它返回一个带有对象名称和地址的字符串。NSObject的子类可以实现这个方法来返回更多的细节。例如，Foundation类NSArray返回它所包含的对象的描述列表。</p>\n<p>一些NSObject方法简单地查询运行时系统的信息。这些方法允许对象执行内部自检。此类方法的示例是类方法，该类要求对象标识其类;<code>isKindOfClass:</code>和<code>isMemberOfClass:</code>测试对象在继承层次结构中的位置;<code>respondsToSelector:</code>表示一个对象是否可以接受特定的消息;<code>conformsToProtocol:</code>表示一个对象是否实现了特定协议中定义的方法;和<code>methodForSelector:</code>，它提供了方法实现的地址。像这样的方法给了一个对象自检的能力。</p>\n<h3 id=\"Runtime-函数\"><a href=\"#Runtime-函数\" class=\"headerlink\" title=\"Runtime 函数\"></a>Runtime 函数</h3><p>运行时系统是一个动态共享库，其公共接口由位于目录/usr/include/objc中的头文件中的一组函数和数据结构组成。许多这些函数允许您使用plain C来复制编译器在编写Objective-C代码时所做的工作。其他则是通过NSObject类方法导出的功能的基础。这些功能使开发运行时系统的其他接口成为可能，并生成增强开发环境的工具;在Objective-C中编程时不需要它们。然而，在编写Objective-C程序时，一些运行时函数可能会非常有用。所有这些功能都记录在Objective-C运行时引用中。</p>\n<h2 id=\"消息传递\"><a href=\"#消息传递\" class=\"headerlink\" title=\"消息传递\"></a>消息传递</h2><p>本章描述如何将消息表达式转换为<code>objc_msgSend</code>函数调用，以及如何通过名称引用方法。然后它解释了如何利用<code>objc_msgSend</code>，如果需要的话，可以绕过动态绑定。</p>\n<h3 id=\"objc-msgSend-函数\"><a href=\"#objc-msgSend-函数\" class=\"headerlink\" title=\"objc_msgSend 函数\"></a>objc_msgSend 函数</h3><p>在Objective-C中，消息直到运行时才绑定到方法实现。编译器将消息表达式转换为对消息传递函数<code>objc_msgSend</code>的调用。该函数接受消息的接收者和消息中提到的方法的名称，即方法selector—作为它的两个主要参数:</p>\n<pre><code class=\"hljs reasonml\">objc<span class=\"hljs-constructor\">_msgSend(<span class=\"hljs-params\">receiver</span>, <span class=\"hljs-params\">selector</span>)</span></code></pre>\n<p>消息中传送过来的任何参数也通过<code>objc_msgSend</code>来处理:</p>\n<pre><code class=\"hljs reasonml\">objc<span class=\"hljs-constructor\">_msgSend(<span class=\"hljs-params\">receiver</span>, <span class=\"hljs-params\">selector</span>, <span class=\"hljs-params\">arg1</span>, <span class=\"hljs-params\">arg2</span>, <span class=\"hljs-operator\">...</span>)</span></code></pre>\n<p>消息传递函数为实现动态绑定所做的必要事情:</p>\n<ul>\n<li>它首先查找选择器引用的过程(方法实现)。由于相同的方法可以通过不同的类实现不同的实现，因此它所发现的精确过程取决于接收者的类。</li>\n<li>然后在调用程序中，将接收对象(指向它的数据的指针)传递，以及为该方法指定的任何参数。</li>\n<li>最后，它将程序的返回值作为其本身的返回值传递。</li>\n</ul>\n<blockquote>\n<p>注意: 编译器通常调用消息传递函数.不要在你写的代码中直接调用它.</p>\n</blockquote>\n<p>消息传递的关键在于编译器为每个类和对象构建的结构。每个类结构包括这两个基本要素:</p>\n<ul>\n<li>指向父类的指针。</li>\n<li>一个类分派表。这个表有关联方法选择器和它们识别的方法的类特定地址的条目。<code>setOrigin</code>方法的选择器与其实现地址相关联;<code>display</code>方法的选择器与其实现地址相关联，等等。</li>\n</ul>\n<p>创建新对象时，将分配内存，并初始化其实例变量。对象的首个变量是指向其类结构的指针。这个指针称为isa，它使对象可以访问它的类，并通过该类对它继承的所有类进行访问。</p>\n<blockquote>\n<p>虽然这不是语言的一部分，但是需要isa指针来处理Objective-C运行时系统。在结构定义的任何字段中，对象需要“等效”到struct objc_object(在objc/objc.h中定义)。然而，您很少需要创建自己的根对象，而从NSObject或NSProxy继承的对象会自动拥有isa变量。</p>\n</blockquote>\n<p>这些类元素和对象结构在 <em>Figure 3- 1</em> 中阐述.</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/3340896-dc0283a1fceff976.gif?imageMogr2/auto-orient/strip\" alt=\"Figure 3-1 消息传递结构\"></p>\n<p>当消息被发送到一个对象时，消息传递函数会跟随对象的isa指针到类结构，它在分派表中查找方法选择器。如果它在那里找不到选择器，<code>objc_msgSend</code>会跟随指向父类的指针，并试图在它的分派表中找到选择器。连续的失败导致<code>objc_msgSend</code>爬升类层次结构，直到它到达NSObject类。一旦它定位了选择器，函数调用表中的该方法并将接收对象的数据结构传递给它。</p>\n<p>这是在运行时选择方法实现的方式——或者，用面向对象编程的行话来说，方法是动态绑定到消息的。</p>\n<p>为了加快消息传递进程，运行时系统将缓存选择器和方法的地址。每个类都有一个单独的缓存，它可以包含用于继承方法的选择器以及类中定义的方法。在搜索调度表之前，消息传递例程首先检查接收对象的类的缓存(关于可能再次使用的方法可能会再次使用的理论)。如果方法选择器在缓存中，消息传递只比函数调用稍微慢一点。一旦程序运行足够长的时间来“预热”它的缓存，它发送的几乎所有消息都会找到一个缓存的方法。当程序运行时，缓存会动态地增长以容纳新的消息。</p>\n<h3 id=\"使用隐藏的参数\"><a href=\"#使用隐藏的参数\" class=\"headerlink\" title=\"使用隐藏的参数\"></a>使用隐藏的参数</h3><p>当<code>objc_msgSend</code>找到实现方法的过程时，它调用该过程并将消息中的所有参数传递给它。同时传递隐藏的两个参数:</p>\n<ul>\n<li>接收对象</li>\n<li>方法的选择器。<br>这些参数提供了关于调用它的消息表达式的另一半显式信息。它们被认为是“隐藏的”，因为它们没有在定义方法的源代码中声明。当代码被编译时，它们被插入到实现中。</li>\n</ul>\n<p>虽然这些参数没有显式地声明，但是源代码仍然可以引用它们(就像它可以引用接收对象的实例变量一样)。方法将接收对象作为self，并将它的方法选择器作为_cmd。在下面的示例中，_cmd 引用方法选择器作为strange的方法,引用self做为strange消息的接收对象。</p>\n<pre><code class=\"hljs monkey\">- strange\n&#123;\n    id  target = getTheReceiver();\n    SEL <span class=\"hljs-function\"><span class=\"hljs-keyword\">method</span> =</span> getTheMethod();\n \n    <span class=\"hljs-keyword\">if</span> ( target == <span class=\"hljs-built_in\">self</span> || <span class=\"hljs-function\"><span class=\"hljs-keyword\">method</span> =</span>= _cmd )\n        <span class=\"hljs-keyword\">return</span> nil;\n    <span class=\"hljs-keyword\">return</span> [target performSelector:<span class=\"hljs-function\"><span class=\"hljs-keyword\">method</span>];</span>\n&#125;</code></pre>\n<p>self是两个参数中比较有用的一个。实际上，接收对象的实例变量的方式可以用于方法定义。</p>\n<h3 id=\"获取一个方法的地址\"><a href=\"#获取一个方法的地址\" class=\"headerlink\" title=\"获取一个方法的地址\"></a>获取一个方法的地址</h3><p>规避动态绑定的唯一方法是获取方法的地址，并直接调用它，就像它是一个函数一样。这可能适用于极少数情况下，特定的方法将连续多次执行，并且您希望在每次执行方法时避免消息传递的开销。</p>\n<p>使用NSObject类中定义的方法，methodForSelector:，您可以要求一个指向方法实现的指针，然后使用指针来调用该过程。methodForSelector:返回的指针必须小心地转换为合适的函数类型。返回类型和参数类型都应该包含在转换中。</p>\n<p>下面的示例展示了实现<code>setFilled</code>方法可能调用的流程:</p>\n<pre><code class=\"hljs objectivec\"><span class=\"hljs-keyword\">void</span> (*<span class=\"hljs-keyword\">setter</span>)(<span class=\"hljs-keyword\">id</span>, SEL, <span class=\"hljs-built_in\">BOOL</span>);\n<span class=\"hljs-keyword\">int</span> i;\n \n<span class=\"hljs-keyword\">setter</span> = (<span class=\"hljs-keyword\">void</span> (*)(<span class=\"hljs-keyword\">id</span>, SEL, <span class=\"hljs-built_in\">BOOL</span>))[target\n    methodForSelector:<span class=\"hljs-keyword\">@selector</span>(setFilled:)];\n<span class=\"hljs-keyword\">for</span> ( i = <span class=\"hljs-number\">0</span> ; i &lt; <span class=\"hljs-number\">1000</span> ; i++ )\n    <span class=\"hljs-keyword\">setter</span>(targetList[i], <span class=\"hljs-keyword\">@selector</span>(setFilled:), <span class=\"hljs-literal\">YES</span>);</code></pre>\n<p>传递给流程的前两个参数是接收对象(self)和方法选择器(_cmd)。这些参数隐藏在方法语法中，但是当方法被调用为函数时，必须显式地进行说明。</p>\n<p>使用methodForSelector:规避动态绑定可以节省消息传递所需的大部分时间。但是，只有在一个特定的消息重复多次的情况下，才会有显著的节省，如上面所示的for循环。</p>\n<p>注意，methodForSelector:由Cocoa运行时系统提供;这不是Objective-C语言本身的特性。</p>\n<h2 id=\"动态方法解决方案\"><a href=\"#动态方法解决方案\" class=\"headerlink\" title=\"动态方法解决方案\"></a>动态方法解决方案</h2><p>本章描述如何动态地提供方法的实现。</p>\n<h3 id=\"动态方法解决方案-1\"><a href=\"#动态方法解决方案-1\" class=\"headerlink\" title=\"动态方法解决方案\"></a>动态方法解决方案</h3><p>有些情况下，您可能希望动态地提供方法的实现。例如，Objective-C声明的属性特性(参见Objective-C编程语言中的声明属性)包括@dynamic指令:</p>\n<pre><code class=\"hljs css\"><span class=\"hljs-keyword\">@dynamic</span> propertyName;</code></pre>\n<p>它告诉编译器将动态地提供与属性关联的方法。</p>\n<p>您可以实现方法resolveInstanceMethod:和resolveClassMethod:为实例和类方法动态地提供给定选择器的实现。</p>\n<p>Objective-C方法仅仅是一个C函数，它至少需要两个参数-self和_cmd。您可以使用函数<code>class_addMethod</code>将函数添加到类中。因此，给定以下函数:</p>\n<pre><code class=\"hljs reasonml\">void dynamic<span class=\"hljs-constructor\">MethodIMP(<span class=\"hljs-params\">id</span> <span class=\"hljs-params\">self</span>, SEL <span class=\"hljs-params\">_cmd</span>)</span> &#123;\n    <span class=\"hljs-comment\">// implementation ....</span>\n&#125;</code></pre>\n<p>可以动态地将其添加到一个类作为一个方法(称为resolveThisMethodDynamically)使用resolveInstanceMethod:是这样的:</p>\n<pre><code class=\"hljs less\"><span class=\"hljs-variable\">@implementation</span> MyClass\n+ (BOOL)<span class=\"hljs-attribute\">resolveInstanceMethod</span>:(SEL)aSEL\n&#123;\n    <span class=\"hljs-selector-tag\">if</span> (aSEL == <span class=\"hljs-variable\">@selector</span>(resolveThisMethodDynamically)) &#123;\n          <span class=\"hljs-selector-tag\">class_addMethod</span>([self class], aSEL, (IMP) dynamicMethodIMP, <span class=\"hljs-string\">&quot;v@:&quot;</span>);\n          <span class=\"hljs-selector-tag\">return</span> <span class=\"hljs-selector-tag\">YES</span>;\n    &#125;\n    <span class=\"hljs-selector-tag\">return</span> <span class=\"hljs-selector-attr\">[super resolveInstanceMethod:aSEL]</span>;\n&#125;\n@<span class=\"hljs-selector-tag\">end</span></code></pre>\n<p>转发方法(如消息转发中所描述的)和动态方法解析在很大程度上是正交的。类有机会在转发机制启动之前动态解析方法。如果调用<code>respondsToSelector</code>或<code>instancesRespondToSelector:</code>方法,动态方法解析器就有机会给选择器提供一个IMP。如果您实现了<code>resolveInstanceMethod:</code>但是希望特定的选择器通过转发机制来转发，给这些方法选择器返回NO.</p>\n<h3 id=\"动态加载\"><a href=\"#动态加载\" class=\"headerlink\" title=\"动态加载\"></a>动态加载</h3><p>Objective-C程序可以在运行时加载和链接新的类和类别。新代码合并到程序中，并在开始时对加载的类和类别进行相同的处理。</p>\n<p>动态加载可以用来做很多不同的事情。例如，系统首选项应用程序中的各个模块是动态加载的。</p>\n<p>在Cocoa环境中，动态加载通常用于允许定制应用程序。其他人可以编写程序在运行时加载的模块——就像接口构建器加载自定义面板和OS X系统首选项应用程序加载自定义的偏好模块一样。可加载模块扩展了应用程序的功能。他们以你允许的方式对它做出贡献，但却无法预见或定义你自己。您提供了框架，但其他人提供了代码。</p>\n<p>虽然有一个运行时函数，在Mach-O文件中执行Objective-C模块的动态加载(objc /objc-load.h中定义的objc_loadmodule)，但Cocoa的NSBundle类为动态加载提供了一个更方便的接口，这是面向对象的，并与相关的服务集成在一起。在Foundation框架参考中查看NSBundle类规范，了解关于NSBundle类及其使用的信息。请参阅OS X ABI Mach-O文件格式参考，以获取关于Mach-O文件的信息。</p>\n<h2 id=\"消息转发\"><a href=\"#消息转发\" class=\"headerlink\" title=\"消息转发\"></a>消息转发</h2><p>向不处理该消息的对象发送消息是错误的。然而，在宣布错误之前，运行时系统会再给接收对象一个机会来处理该消息。</p>\n<h3 id=\"转发\"><a href=\"#转发\" class=\"headerlink\" title=\"转发\"></a>转发</h3><p>如果您向一个不处理该消息的对象发送消息，在宣布一个错误之前，运行时将向对象发送对象一个<code>forwardInvocation:</code>消息,并携带一个<code>NSInvocation</code>对象参数——NSInvocation对象封装了原始消息和传递给它的参数。</p>\n<p>您可以实现一个<code>forwardInvocation:</code>方法来提供对消息的默认响应，或者以其他方式避免错误。正如其名称所暗示的,<code>forwardInvocation</code>通常用于将消息转发到另一个对象。</p>\n<p>为了查看转发的范围和意图，请想象以下场景:假设您正在设计一个对象，该对象可以响应一个名为<code>negotiate</code>的消息，您希望它的响应包含另一类型对象的响应。通过在您实现<code>negotiate</code>方法的主体中传递一个<code>negotiate</code>消息到其他对象，您可以轻松完成这一任务。</p>\n<p>更进一步，假设您希望您的对象对<code>negotiate</code>消息的响应完全在另一个类中实现。实现这一点的一种方法是让您的类继承其他类的方法。然而，这样安排是不可能的。也许有很好的理由来说明为什么不可能.</p>\n<p>即使您的类不能继承<code>negotiate</code>方法，您仍然可以通过将消息传递给其他类的实例方法来“借用”它:</p>\n<pre><code class=\"hljs less\"><span class=\"hljs-selector-tag\">-</span> (id)<span class=\"hljs-selector-tag\">negotiate</span>\n&#123;\n    <span class=\"hljs-selector-tag\">if</span> ( [someOtherObject <span class=\"hljs-attribute\">respondsTo</span>:<span class=\"hljs-variable\">@selector</span>(negotiate)] )\n        <span class=\"hljs-selector-tag\">return</span> <span class=\"hljs-selector-attr\">[someOtherObject negotiate]</span>;\n    <span class=\"hljs-selector-tag\">return</span> <span class=\"hljs-selector-tag\">self</span>;\n&#125;</code></pre>\n<p>这样做可能会有点麻烦，特别是如果有许多消息需要您的对象传递给其他对象时。您必须实现一种方法来覆盖您想要从其他类中借用的每个方法。此外，在您编写代码时，您不知道您可能想要转发的完整的消息集是不可能处理的。该集合可能依赖于运行时的事件，并且随着新的方法和类在将来实现，它可能会发生变化。</p>\n<p><code>forwardInvocation:</code>提供的第二次机会为这个问题提供了一个的临时解决方案，它是动态的，而不是静态的。它的工作原理是这样的:当一个对象不能响应消息时，因为它没有找到与消息中的选择器匹配的方法，运行时系统通过发送一个<code>forwardInvocation:</code>消息来通知对象。每个对象都继承了来自NSObject类的<code>forwardInvocation:</code>方法。然而,NSObject版本的方法只是简单地调用<code>doesNotRecognizeSelector:</code>。通过重写NSObject的版本并实现您自己的版本，您可以利用<code>forwardInvocation:</code>消息将消息转发给其他对象。</p>\n<p>要转发一条消息，所有<code>forwardInvocation:</code>方法需要做的是:</p>\n<ul>\n<li>确定消息应该发送到哪里，以及。</li>\n<li>将原始参数发送到那里.</li>\n</ul>\n<p>可以用<code>invokeWithTarget:</code>方法发送消息:</p>\n<pre><code class=\"hljs groovy\">- (<span class=\"hljs-keyword\">void</span>)<span class=\"hljs-attr\">forwardInvocation:</span>(NSInvocation *)anInvocation\n&#123;\n    <span class=\"hljs-keyword\">if</span> ([someOtherObject <span class=\"hljs-attr\">respondsToSelector:</span>\n            [anInvocation selector]])\n        [anInvocation <span class=\"hljs-attr\">invokeWithTarget:</span>someOtherObject];\n    <span class=\"hljs-keyword\">else</span>\n        [<span class=\"hljs-built_in\">super</span> <span class=\"hljs-attr\">forwardInvocation:</span>anInvocation];\n&#125;</code></pre>\n\n<p>转发消息的返回值将返回给原始发送方。所有类型的返回值都可以传递给发送方，包括id、结构和双精度浮点数。</p>\n<p><code>forwardInvocation:</code>方法可以作为 <strong>未识别</strong> 消息的分发中心，将它们分配给不同的接收者。或者它可以是一个传输站，将所有的消息发送到同一个目的地。它可以将一个消息转换成另一个消息，或者简单地“吞下”一些消息，因此没有响应，没有错误。<code>forwardInvocation</code>方法还可以将多个消息合并为一个响应。<code>forwardInvocation</code> 是由实现者决定的。它为对象链到转发链提供了一个机会，这也为相关程序设计提供了可能。</p>\n<blockquote>\n<p><strong>注意:</strong> <code>forwardInvocation:</code>只有在名义接收方不调用现有方法的情况下，该方法才可以处理消息。例如，如果您希望您的对象转发<code>negotiate</code>消息给另一个对象，那么它就不能拥有自己的<code>negotiate</code>方法。如果是这样，消息将永远不会到达<code>forwardInvocation:</code>。</p>\n</blockquote>\n<p>有关转发和调用的更多信息，请参阅基础框架引用中的NSInvocation类规范。</p>\n<h3 id=\"转发和多继承\"><a href=\"#转发和多继承\" class=\"headerlink\" title=\"转发和多继承\"></a>转发和多继承</h3><p>转发模仿继承，并可用于向Objective-C程序提供多继承的一些影响。如图5-1所示，通过转发来响应消息的对象似乎可以借用或“继承”在另一个类中定义的方法实现。<br><img src=\"http://upload-images.jianshu.io/upload_images/3340896-e628ceb1736d6121.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"图5-1\"></p>\n<p>在这个例子中，一个战士类的实例将一个协商消息转发给一个外交官类的实例。战士会像外交官一样谈判。它似乎会对谈判的信息作出回应，而且对于所有实际的目的而言，它确实会做出回应(尽管它确实是一名从事这项工作的外交官)。</p>\n<p>因此，转发消息的对象从继承层次结构的两个分支中“继承”方法——它自己的分支和响应消息的对象的分支。在上面的例子中，似乎战士层级继承了外交官和它自己的父类。</p>\n<p>转发提供了您通常希望从多个继承中获得的大部分特性。然而，两者之间有一个重要的区别:多重继承将不同的功能组合在一个对象中。它倾向于大的、多层面的对象。而转发是将不同的责任分配给不同的对象。它将问题分解成更小的对象，由这些小的对象来处理相关消息。</p>\n<h3 id=\"Surrogate对象\"><a href=\"#Surrogate对象\" class=\"headerlink\" title=\"Surrogate对象\"></a>Surrogate对象</h3><p>转发不仅可以模仿多重继承，还可以开发轻量级对象,这个对象可以表示或者涵盖更多实用的功能。Surrogate代表另一个对象，并将消息传递给它。</p>\n<p>在Objective-C编程语言中“远程消息传递”中讨论的Surrogate是这样的代理。Surrogate处理消息转发到远程接收器的细节，确保在连接中复制和检索参数值，等等。但它并没有尝试去做其他的事情;它不会复制远程对象的功能，而是简单地给远程对象一个本地地址，一个可以在另一个应用程序中接收消息的地方。</p>\n<p>其他类型的Surrogate对象也是可能的。例如，假设您有一个处理大量数据的对象，可能会创建一个复杂的映像或读取磁盘上文件的内容。设置这个对象可能非常耗时，所以您更喜欢在实际需要时或系统资源临时空闲时使用它。与此同时，为了使应用程序中的其他对象能够正常工作，您至少需要一个占位符来支持该对象。</p>\n<p>在这种情况下，您可以开始创建，而不是完全的对象，而是一个轻量级的Surrogate。这个对象可以自己做一些事情，比如回答关于数据的问题，但大多数情况下，它只会为较大的对象保留一个位置，当时间到来时，将消息转发给它。当Surrogate的<code>forwardInvocation:</code>方法接收一个转发给另一个对象的消息时，它将确保该对象存在，并且如果它不存在，将创建它。对于较大对象的所有消息都通过Surrogate，因此，就程序的其余部分而言，Surrogate和较大的对象将是相同的。</p>\n<h3 id=\"转发和继承\"><a href=\"#转发和继承\" class=\"headerlink\" title=\"转发和继承\"></a>转发和继承</h3><p>尽管转发模仿继承，NSObject类从不混淆两者。方法类似respondsToSelector:和isKindOfClass:只查看继承层次结构，而不关注转发链。例如，如果询问一个战士对象是否响应协商消息，</p>\n<pre><code class=\"hljs less\"><span class=\"hljs-selector-tag\">if</span> ( [aWarrior <span class=\"hljs-attribute\">respondsToSelector</span>:<span class=\"hljs-variable\">@selector</span>(negotiate)] )\n    ...</code></pre>\n<p>答案是否定的，即使它可以在没有错误的情况下接受协商，并且在某种意义上，通过将它们转发给一个外交官来回应。(见图5 - 1)。</p>\n<p>在很多情况下，答案是否定的。但事实可能并非如此。如果您使用转发来设置代理对象或扩展类的功能，则转发机制应该像继承一样透明。如果您希望您的对象表现得好像它们确实继承了它们转发消息的对象的行为，那么您将需要重新实现respondsToSelector:和isKindOfClass:方法来包含您的转发算法:</p>\n<pre><code class=\"hljs objectivec\">- (<span class=\"hljs-built_in\">BOOL</span>)respondsToSelector:(SEL)aSelector\n&#123;\n    <span class=\"hljs-keyword\">if</span> ( [<span class=\"hljs-keyword\">super</span> respondsToSelector:aSelector] )\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">YES</span>;\n    <span class=\"hljs-keyword\">else</span> &#123;\n        <span class=\"hljs-comment\">/* Here, test whether the aSelector message can     *</span>\n<span class=\"hljs-comment\">         * be forwarded to another object and whether that  *</span>\n<span class=\"hljs-comment\">         * object can respond to it. Return YES if it can.  */</span>\n    &#125;\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">NO</span>;\n&#125;</code></pre>\n<p>除了<code>respondsToSelector:</code> <code>isMemberOfClass:</code>和<code>isKindOfClass:</code>,<code>instancesRespondToSelector:</code>方法也应该实现转发算法。如果使用了协议，那么<code>conformsToProtocol:</code>方法也应该被添加到列表中。类似地,如果一个对象将任何远程转发消息接收,它应该有一个版本的<code>methodSignatureForSelector:</code>可以返回准确的描述方法,最终回复转发消息;例如,如果一个对象将消息转发给Surrogate,您将实现<code>methodSignatureForSelector:</code>如下:</p>\n<pre><code class=\"hljs groovy\">- (NSMethodSignature*)<span class=\"hljs-attr\">methodSignatureForSelector:</span>(SEL)selector\n&#123;\n    NSMethodSignature* signature = [<span class=\"hljs-built_in\">super</span> <span class=\"hljs-attr\">methodSignatureForSelector:</span>selector];\n    <span class=\"hljs-keyword\">if</span> (!signature) &#123;\n       signature = [surrogate <span class=\"hljs-attr\">methodSignatureForSelector:</span>selector];\n    &#125;\n    <span class=\"hljs-keyword\">return</span> signature;\n&#125;</code></pre>\n<p>您可能会考虑将转发算法放在私有代码的某个地方，并拥有所有这些方法，<code>forwardInvocation:</code>包括，调用它。</p>\n<blockquote>\n<p>注意: 这是一种先进的技术，只适用于没有其他解决方案的情况下。它不是用来代替继承的。如果您必须使用这种技术，请确保您完全理解了正在转发的类的行为和转发的类。<br>本节中提到的方法在Foundation框架引用中的NSObject类规范中进行了描述。有关<code>invokeWithTarget</code>的信息,在Foundation框架引用中查看NSInvocation类规范。</p>\n</blockquote>\n<h2 id=\"类型编码\"><a href=\"#类型编码\" class=\"headerlink\" title=\"类型编码\"></a>类型编码</h2><p>为了帮助运行时系统，编译器为字符串中的每个方法编码返回和参数类型，并将字符串与方法选择器关联起来。它所使用的编码方案在其他上下文中也很有用，因此可以通过公开的@encode()编译器指令。当给定一个类型规范时，@encode()将返回一个编码该类型的字符串。类型可以是基本类型，例如int、指针、标记的结构体或union，或者类名称——任何类型，实际上都可以用作对C sizeof()操作符的参数。</p>\n<pre><code class=\"hljs java\"><span class=\"hljs-keyword\">char</span> *buf1 = <span class=\"hljs-meta\">@encode(int **)</span>;\n<span class=\"hljs-keyword\">char</span> *buf2 = <span class=\"hljs-meta\">@encode(struct key)</span>;\n<span class=\"hljs-keyword\">char</span> *buf3 = <span class=\"hljs-meta\">@encode(Rectangle)</span>;</code></pre>\n<p>下表列出了类型代码。请注意，它们中的许多都与为存档或分发目的而编码对象时使用的代码重叠。但是，这里列出的代码是在编写代码时不能使用的，而且在编写代码时，您可能想要使用一些代码，这些代码不是由@encode()生成的。(请参阅Foundation框架参考中的NSCoder类规范，以获得关于用于存档或分发的编码对象的更多信息)。</p>\n<p><strong>Table 6-1</strong> Objectiv-C 类型编码</p>\n<table>\n<thead>\n<tr>\n<th>Code</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>c</td>\n<td>char</td>\n</tr>\n<tr>\n<td>i</td>\n<td>int</td>\n</tr>\n<tr>\n<td>s</td>\n<td>short</td>\n</tr>\n<tr>\n<td>l</td>\n<td>long</td>\n</tr>\n<tr>\n<td>q</td>\n<td>long long</td>\n</tr>\n<tr>\n<td>C</td>\n<td>unsingned char</td>\n</tr>\n<tr>\n<td>I</td>\n<td>unsigned int</td>\n</tr>\n<tr>\n<td>S</td>\n<td>unsigned short</td>\n</tr>\n<tr>\n<td>L</td>\n<td>unsigned long</td>\n</tr>\n<tr>\n<td>Q</td>\n<td>unsigned long long</td>\n</tr>\n<tr>\n<td>f</td>\n<td>float</td>\n</tr>\n<tr>\n<td>d</td>\n<td>double</td>\n</tr>\n<tr>\n<td>B</td>\n<td>C++ bool 或者 C99 _Bool</td>\n</tr>\n<tr>\n<td>v</td>\n<td>void</td>\n</tr>\n<tr>\n<td>*</td>\n<td>A character string(char *)</td>\n</tr>\n<tr>\n<td>@</td>\n<td>object(不管是静态类型或者id类型)</td>\n</tr>\n<tr>\n<td>#</td>\n<td>class object (Class)</td>\n</tr>\n<tr>\n<td>:</td>\n<td>method selector(SEL)</td>\n</tr>\n<tr>\n<td>[array type]</td>\n<td>array</td>\n</tr>\n<tr>\n<td>{name=type…}</td>\n<td>structure</td>\n</tr>\n<tr>\n<td>(name=type…)</td>\n<td>union</td>\n</tr>\n<tr>\n<td>bnum</td>\n<td>A bit field of <em>num</em> bits</td>\n</tr>\n<tr>\n<td>^type</td>\n<td>A pointer to type</td>\n</tr>\n<tr>\n<td>?</td>\n<td>unknown type(among other things, this code is used for function pointers)</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p><strong>重要</strong>: Objective-C 不支持 long double 类型.@encode(long double)返回 d,编码形式跟 double一样.</p>\n</blockquote>\n<p>数组的类型代码括在方括号内;数组中元素的数量是在数组类型之前，在打开括号之后立即指定的。例如，浮点数的12个指针的数组将被编码为:</p>\n<pre><code class=\"hljs clojure\">[<span class=\"hljs-number\">12</span><span class=\"hljs-comment\">^f</span>]</code></pre>\n<p>结构是在大括号内指定的，而在括号内的结合。结构标记首先列出，然后是一个等号和序列中列出的结构域的代码。例如,结构体</p>\n<pre><code class=\"hljs cpp\"><span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">example</span> &#123;</span>\n    id   anObject;\n    <span class=\"hljs-keyword\">char</span> *aString;\n    <span class=\"hljs-keyword\">int</span>  anInt;\n&#125; Example;</code></pre>\n<p>会像这样编码:</p>\n<pre><code class=\"hljs routeros\">&#123;<span class=\"hljs-attribute\">example</span>=@*i&#125;</code></pre>\n<p>同样的编码结果，无论定义的类型名称(Example)还是结构标记(example)都传递给@encode()。结构指针的编码包含与结构字段相同的信息量:</p>\n<pre><code class=\"hljs routeros\">^&#123;<span class=\"hljs-attribute\">example</span>=@*i&#125;</code></pre>\n<p>然而,另一层间接移除了内部具体的类型:</p>\n<pre><code class=\"hljs dust\"><span class=\"xml\">^^</span><span class=\"hljs-template-variable\">&#123;example&#125;</span></code></pre>\n<p>对象被看做结构体.举例来说,传递一个NSObject类名可以这样编码:</p>\n<pre><code class=\"hljs routeros\">&#123;<span class=\"hljs-attribute\">NSObject</span>=#&#125;</code></pre>\n<p>NSObject类只声明了一个类的实例变量isa。</p>\n<p>注意，虽然@encode()指令没有返回它们，但是运行时系统使用表6-2中列出的附加编码，用于在协议中声明方法的类型限定符。</p>\n<p><strong>Table 6-2</strong> Objective-C 方法编码</p>\n<table>\n<thead>\n<tr>\n<th>Code</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>r</td>\n<td>const</td>\n</tr>\n<tr>\n<td>n</td>\n<td>in</td>\n</tr>\n<tr>\n<td>N</td>\n<td>inout</td>\n</tr>\n<tr>\n<td>o</td>\n<td>out</td>\n</tr>\n<tr>\n<td>O</td>\n<td>bycopy</td>\n</tr>\n<tr>\n<td>R</td>\n<td>byref</td>\n</tr>\n<tr>\n<td>V</td>\n<td>oneway</td>\n</tr>\n</tbody></table>\n<h2 id=\"属性声明\"><a href=\"#属性声明\" class=\"headerlink\" title=\"属性声明\"></a>属性声明</h2><p>当编译器遇到属性声明(在Objective-C编程语言中看到已声明的属性)时，它会生成与封装类、类别或协议相关的描述性元数据。您可以使用支持在类或协议上查找属性的函数来访问此元数据，获取属性的类型为@encode字符串，并将属性的属性列表复制为C字符串数组。每个类和协议都有一个声明的属性列表。</p>\n<h3 id=\"属性-类型和函数\"><a href=\"#属性-类型和函数\" class=\"headerlink\" title=\"属性 类型和函数\"></a>属性 类型和函数</h3><p>属性结构为属性描述符定义了一个不透明的句柄。</p>\n<pre><code class=\"hljs cpp\"><span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">objc_property</span> *<span class=\"hljs-title\">Property</span>;</span></code></pre>\n<p>您可以使用函数<code>class_copyPropertyList</code>和<code>protocol _copypropertylist</code>检索与类(包括已经加载的类别)关联属性的数组，以及一个协议:</p>\n<pre><code class=\"hljs reasonml\">objc_property_t *<span class=\"hljs-keyword\">class</span><span class=\"hljs-constructor\">_copyPropertyList(Class <span class=\"hljs-params\">cls</span>, <span class=\"hljs-params\">unsigned</span> <span class=\"hljs-params\">int</span> <span class=\"hljs-operator\">*</span><span class=\"hljs-params\">outCount</span>)</span>\nobjc_property_t *protocol<span class=\"hljs-constructor\">_copyPropertyList(Protocol <span class=\"hljs-operator\">*</span><span class=\"hljs-params\">proto</span>, <span class=\"hljs-params\">unsigned</span> <span class=\"hljs-params\">int</span> <span class=\"hljs-operator\">*</span><span class=\"hljs-params\">outCount</span>)</span></code></pre>\n<p>例如，给定以下类声明:</p>\n<pre><code class=\"hljs angelscript\">@<span class=\"hljs-keyword\">interface</span> <span class=\"hljs-symbol\">Lender</span> : <span class=\"hljs-symbol\">NSObject</span> &#123;\n    <span class=\"hljs-built_in\">float</span> alone;\n&#125;\n@<span class=\"hljs-keyword\">property</span> <span class=\"hljs-built_in\">float</span> alone;\n@end</code></pre>\n<p>您可以使用以下方法获取属性列表:</p>\n<pre><code class=\"hljs reasonml\">id LenderClass = objc<span class=\"hljs-constructor\">_getClass(<span class=\"hljs-string\">&quot;Lender&quot;</span>)</span>;\nunsigned <span class=\"hljs-built_in\">int</span> outCount;\nobjc_property_t *properties = <span class=\"hljs-keyword\">class</span><span class=\"hljs-constructor\">_copyPropertyList(LenderClass, &amp;<span class=\"hljs-params\">outCount</span>)</span>;</code></pre>\n<p>您可以使用<code>property_getName</code>函数来发现属性的名称:</p>\n<pre><code class=\"hljs reasonml\">const <span class=\"hljs-built_in\">char</span> *property<span class=\"hljs-constructor\">_getName(<span class=\"hljs-params\">objc_property_t</span> <span class=\"hljs-params\">property</span>)</span></code></pre>\n<p>您可以使用函数<code>class_getProperty</code>和<code>protocol _getproperty</code>来获得类和协议中给定名称的属性的引用:</p>\n<pre><code class=\"hljs reasonml\">objc_property_t <span class=\"hljs-keyword\">class</span><span class=\"hljs-constructor\">_getProperty(Class <span class=\"hljs-params\">cls</span>, <span class=\"hljs-params\">const</span> <span class=\"hljs-params\">char</span> <span class=\"hljs-operator\">*</span><span class=\"hljs-params\">name</span>)</span>\nobjc_property_t protocol<span class=\"hljs-constructor\">_getProperty(Protocol <span class=\"hljs-operator\">*</span><span class=\"hljs-params\">proto</span>, <span class=\"hljs-params\">const</span> <span class=\"hljs-params\">char</span> <span class=\"hljs-operator\">*</span><span class=\"hljs-params\">name</span>, BOOL <span class=\"hljs-params\">isRequiredProperty</span>, BOOL <span class=\"hljs-params\">isInstanceProperty</span>)</span></code></pre>\n<p>您可以使用<code>property_getAttributes</code>函数来发现属性的名称和@encode类型字符串。有关编码类型字符串的详细信息，请参阅类型编码;有关此字符串的详细信息，请参见属性类型字符串和属性属性描述示例。</p>\n<pre><code class=\"hljs reasonml\">const <span class=\"hljs-built_in\">char</span> *property<span class=\"hljs-constructor\">_getAttributes(<span class=\"hljs-params\">objc_property_t</span> <span class=\"hljs-params\">property</span>)</span></code></pre>\n<p>将这些组合在一起，您可以使用以下代码打印与类关联的所有属性:</p>\n<pre><code class=\"hljs reasonml\">id LenderClass = objc<span class=\"hljs-constructor\">_getClass(<span class=\"hljs-string\">&quot;Lender&quot;</span>)</span>;\nunsigned <span class=\"hljs-built_in\">int</span> outCount, i;\nobjc_property_t *properties = <span class=\"hljs-keyword\">class</span><span class=\"hljs-constructor\">_copyPropertyList(LenderClass, &amp;<span class=\"hljs-params\">outCount</span>)</span>;\n<span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; outCount; i++) &#123;\n    objc_property_t property = properties<span class=\"hljs-literal\">[<span class=\"hljs-identifier\">i</span>]</span>;\n    fprintf(stdout, <span class=\"hljs-string\">&quot;%s %s\\n&quot;</span>, property<span class=\"hljs-constructor\">_getName(<span class=\"hljs-params\">property</span>)</span>, property<span class=\"hljs-constructor\">_getAttributes(<span class=\"hljs-params\">property</span>)</span>);\n&#125;\n</code></pre>\n\n<h3 id=\"属性-类型字符串\"><a href=\"#属性-类型字符串\" class=\"headerlink\" title=\"属性 类型字符串\"></a>属性 类型字符串</h3><p>您可以使用<code>property_getAttributes</code>函数来发现属性的名称、@encode类型字符串和属性的其他属性。</p>\n<p>字符串以一个T开头，后面是@encode类型和一个逗号，最后是一个V，后面跟着一个支持实例变量的名称。在他们之间，填充属性描述符，由逗号分隔:</p>\n<p>详细内容请看<a href=\"https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/ObjCRuntimeGuide/Articles/ocrtPropertyIntrospection.html\"><strong>Table 7-1</strong></a>和属性特性描述示例</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>本文主要关注关注runtime 消息的动态解析与转发，主要包含三个方法：</p>\n<ul>\n<li><code>resolveInstanceMethod:</code><br>当实例对象无法找到 sel 实现时，首先调用此方法，对sel做处理</li>\n<li><code>resolveClassMethod:</code><br>当类对象无法找到 sel 实现时，首先调用此方法，对sel做处理</li>\n<li><code>forwardTargetForSelector:</code><br>sel 仍未处理，接着调用此方法，在这里可以对sel做处理</li>\n<li><code>methodSignatureForSelector:</code><br>sel 仍未处理，runtime会通过<code>methodSigntureForSelector</code>方法尝试获取本次消息调用的具体环境信息，包括消息的参数与返回值类型。并封装成NSInvocation对象。我们可以在<code>forwardInvocation</code>方法内部对该对象作进一步的处理，并使之能够成功的完成消息处理。如果末能成功获取NSInvocation对象，那么程序就会发送<code>doesNotRecognizeSelector</code>消息抛出<code>unrecognized Selector send to xxx</code>的异常。</li>\n</ul>\n<p>关于runtime的更多有趣的使用，可以在<a href=\"https://www.jianshu.com/p/6a72f21bf521\">Objective-C Runtime</a>中寻找对应的API来探索，里面有runtime 各方法的说明。</p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><p><a href=\"https://github.com/913868456/OCDemo\">Runtime_Demo</a></p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p><a href=\"https://www.jianshu.com/p/e6a9492995a5\">iOS runtime之消息机制</a><br><a href=\"https://developer.apple.com/documentation/objectivec/nsobject/1418855-forwardingtargetforselector\">forwardTargetForSelector:</a><br><a href=\"https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/ObjCRuntimeGuide/Introduction/Introduction.html#//apple_ref/doc/uid/TP40008048-CH1-SW1\">Objective-C Runtime Programming Guide</a></p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"ckgq6gnw00001t29k0hxvaawq","category_id":"ckgq6gnw50005t29k4ixm81qb","_id":"ckgq6gnwn0011t29k865metzu"},{"post_id":"ckgq6gnw00001t29k0hxvaawq","category_id":"ckgq6gnwg000ot29k04agg5lp","_id":"ckgq6gnwo0014t29k152xh3jb"},{"post_id":"ckgq6gnwl000wt29k2yckfmmr","category_id":"ckgq6gnwi000tt29ke45jchh7","_id":"ckgq6gnwq0019t29khtvte6rl"},{"post_id":"ckgq6gnw70007t29k7qrb1uus","category_id":"ckgq6gnwi000tt29ke45jchh7","_id":"ckgq6gnwr001ct29ka3pygjh9"},{"post_id":"ckgq6gnwm000zt29kb37n1d29","category_id":"ckgq6gnwi000tt29ke45jchh7","_id":"ckgq6gnwu001ht29k57jlhhdh"},{"post_id":"ckgq6gnwn0013t29k9ub91bo2","category_id":"ckgq6gnwi000tt29ke45jchh7","_id":"ckgq6gnwu001kt29k1kjm21py"},{"post_id":"ckgq6gnwa000bt29k1k5edma7","category_id":"ckgq6gnwi000tt29ke45jchh7","_id":"ckgq6gnww001pt29kcc10c4ik"},{"post_id":"ckgq6gnw20002t29kbuj24kuu","category_id":"ckgq6gnw50005t29k4ixm81qb","_id":"ckgq6gnx1001st29k8qc230z4"},{"post_id":"ckgq6gnw20002t29kbuj24kuu","category_id":"ckgq6gnwp0018t29k87raawgl","_id":"ckgq6gnx2001wt29kb0u55kvv"},{"post_id":"ckgq6gnwb000ct29k2vgocejh","category_id":"ckgq6gnwi000tt29ke45jchh7","_id":"ckgq6gnx3001zt29kb9brhmk1"},{"post_id":"ckgq6gnwd000ft29k7bbgbq92","category_id":"ckgq6gnwi000tt29ke45jchh7","_id":"ckgq6gnx40023t29k74jx7y4y"},{"post_id":"ckgq6gnw50004t29k1libe2xu","category_id":"ckgq6gnw50005t29k4ixm81qb","_id":"ckgq6gnx7002bt29k49p97m4d"},{"post_id":"ckgq6gnw50004t29k1libe2xu","category_id":"ckgq6gnx2001vt29k3w8k1aj7","_id":"ckgq6gnx8002et29k3n0mfk6t"},{"post_id":"ckgq6gnwd000gt29k5stee0qv","category_id":"ckgq6gnwi000tt29ke45jchh7","_id":"ckgq6gnx8002it29kdbr7dkzv"},{"post_id":"ckgq6gnwf000jt29kg08qh0s2","category_id":"ckgq6gnwi000tt29ke45jchh7","_id":"ckgq6gnxa002lt29k5snv3zxe"},{"post_id":"ckgq6gnw60006t29kb6uobp34","category_id":"ckgq6gnwe000ht29kd9bgbon2","_id":"ckgq6gnxe002ut29kdfj47o31"},{"post_id":"ckgq6gnw60006t29kb6uobp34","category_id":"ckgq6gnx8002ft29kbnpn9mz7","_id":"ckgq6gnxe002xt29k80y6b7b7"},{"post_id":"ckgq6gnwf000lt29k0p6m8mju","category_id":"ckgq6gnwi000tt29ke45jchh7","_id":"ckgq6gnxg0031t29k19l8baln"},{"post_id":"ckgq6gnwh000pt29k6ncf1xmd","category_id":"ckgq6gnwi000tt29ke45jchh7","_id":"ckgq6gnxh0035t29k24g8azp7"},{"post_id":"ckgq6gnwi000rt29kchzkfulx","category_id":"ckgq6gnwi000tt29ke45jchh7","_id":"ckgq6gnxi003at29k8jsr6y7i"},{"post_id":"ckgq6gnwj000ut29k17sb3njh","category_id":"ckgq6gnwi000tt29ke45jchh7","_id":"ckgq6gnxl003ft29kgatcaag1"},{"post_id":"ckgq6gnwo0017t29kala339h0","category_id":"ckgq6gnxi0039t29kbcvy857k","_id":"ckgq6gnxn003nt29kbwmthlw3"},{"post_id":"ckgq6gnwq001bt29khub16ovm","category_id":"ckgq6gnxi0039t29kbcvy857k","_id":"ckgq6gnxq003tt29kclj476a6"},{"post_id":"ckgq6gnws001ft29kcbnu4vir","category_id":"ckgq6gnxi0039t29kbcvy857k","_id":"ckgq6gnxs003zt29kgcrv690t"},{"post_id":"ckgq6gnwu001jt29k508p9j98","category_id":"ckgq6gnxi0039t29kbcvy857k","_id":"ckgq6gnxu0044t29kf8kmhp37"},{"post_id":"ckgq6gnwv001nt29k11mw17kz","category_id":"ckgq6gnxi0039t29kbcvy857k","_id":"ckgq6gnxv004at29kgn792x31"},{"post_id":"ckgq6gnx0001rt29k8dvd29hq","category_id":"ckgq6gnxi0039t29kbcvy857k","_id":"ckgq6gnxx004ht29k3z6u6z7n"},{"post_id":"ckgq6gnx1001ut29k5c7nhoi0","category_id":"ckgq6gnxi0039t29kbcvy857k","_id":"ckgq6gnxy004kt29k1nk32k95"},{"post_id":"ckgq6gnx2001yt29kc831f29j","category_id":"ckgq6gnxi0039t29kbcvy857k","_id":"ckgq6gnxz004ot29kf41qdmpe"},{"post_id":"ckgq6gnx30021t29k2y237jeb","category_id":"ckgq6gnxi0039t29kbcvy857k","_id":"ckgq6gnxz004st29k62bbe337"},{"post_id":"ckgq6gnx40025t29kclkhby7s","category_id":"ckgq6gnxi0039t29kbcvy857k","_id":"ckgq6gny0004vt29k5ydy151s"},{"post_id":"ckgq6gnx50027t29k3rt0au1d","category_id":"ckgq6gnxi0039t29kbcvy857k","_id":"ckgq6gny1004zt29khzwdcecw"},{"post_id":"ckgq6gnx6002at29k7xqe76gq","category_id":"ckgq6gnxi0039t29kbcvy857k","_id":"ckgq6gny20053t29kggjnc96r"},{"post_id":"ckgq6gnx7002dt29k5fgtfvfv","category_id":"ckgq6gnxi0039t29kbcvy857k","_id":"ckgq6gny30057t29kaoi55tzd"},{"post_id":"ckgq6gnx8002ht29k9gti3eaj","category_id":"ckgq6gnxi0039t29kbcvy857k","_id":"ckgq6gny4005bt29kge6959fq"},{"post_id":"ckgq6gnx9002kt29kh268asu1","category_id":"ckgq6gnxi0039t29kbcvy857k","_id":"ckgq6gny4005ft29k9imudlba"},{"post_id":"ckgq6gnxa002ot29kepcafosj","category_id":"ckgq6gnxi0039t29kbcvy857k","_id":"ckgq6gny5005it29k06i39599"},{"post_id":"ckgq6gnxb002pt29k0xsdcvmm","category_id":"ckgq6gnxi0039t29kbcvy857k","_id":"ckgq6gny6005mt29k13lifzow"},{"post_id":"ckgq6gnxd002tt29k8c5k0zr4","category_id":"ckgq6gnxi0039t29kbcvy857k","_id":"ckgq6gny6005qt29k0n7g0fwn"},{"post_id":"ckgq6gnxe002vt29k17ms2fai","category_id":"ckgq6gnxi0039t29kbcvy857k","_id":"ckgq6gny7005vt29k2pm53o5f"},{"post_id":"ckgq6gnxf002zt29kcf98asz1","category_id":"ckgq6gnxi0039t29kbcvy857k","_id":"ckgq6gny7005yt29kf2owey7w"},{"post_id":"ckgq6gnxg0032t29k87gsa1bl","category_id":"ckgq6gnxi0039t29kbcvy857k","_id":"ckgq6gnya0062t29k8yqd36fg"},{"post_id":"ckgq6gnxh0036t29k4u1n8e8s","category_id":"ckgq6gnxi0039t29kbcvy857k","_id":"ckgq6gnyb0065t29k8vi5ap8t"},{"post_id":"ckgq6gnxh0038t29ke7hsdpbw","category_id":"ckgq6gny90061t29k0d9o331q","_id":"ckgq6gnyc006at29kcosj3p2m"},{"post_id":"ckgq6gnxi003ct29khag63m6q","category_id":"ckgq6gny90061t29k0d9o331q","_id":"ckgq6gnyd006et29kaog1fsuq"},{"post_id":"ckgq6gnxk003et29k3rmq5c6s","category_id":"ckgq6gny90061t29k0d9o331q","_id":"ckgq6gnye006ht29k3d2q037r"},{"post_id":"ckgq6gnxl003gt29k1r0t0gi3","category_id":"ckgq6gny90061t29k0d9o331q","_id":"ckgq6gnyf006lt29k6m8nhhy3"},{"post_id":"ckgq6gnxm003kt29k0wmh4oo4","category_id":"ckgq6gny90061t29k0d9o331q","_id":"ckgq6gnyf006pt29khkxe5s8w"},{"post_id":"ckgq6gnxn003lt29kb9pz57xa","category_id":"ckgq6gny90061t29k0d9o331q","_id":"ckgq6gnyg006tt29kh1v9e3fz"},{"post_id":"ckgq6gnxo003pt29kb0856m14","category_id":"ckgq6gny90061t29k0d9o331q","_id":"ckgq6gnyg006xt29kdumiefqd"},{"post_id":"ckgq6gnxp003rt29k9fzm8a5z","category_id":"ckgq6gny90061t29k0d9o331q","_id":"ckgq6gnyh0071t29k9g29706e"},{"post_id":"ckgq6gnxr003vt29k2yqt5cjx","category_id":"ckgq6gny90061t29k0d9o331q","_id":"ckgq6gnyi0075t29kcz792xoa"},{"post_id":"ckgq6gnxs003xt29khwi3awh2","category_id":"ckgq6gny90061t29k0d9o331q","_id":"ckgq6gnyi0077t29k18di86gx"},{"post_id":"ckgq6gnxt0041t29k61om3eol","category_id":"ckgq6gnyi0074t29k3g8bfjia","_id":"ckgq6gnyj007ct29kafs3gjfn"},{"post_id":"ckgq6gnxt0042t29k00ns6klg","category_id":"ckgq6gnyi0074t29k3g8bfjia","_id":"ckgq6gnyj007ft29k9whg04ps"},{"post_id":"ckgq6gnxu0046t29ke7n51n8g","category_id":"ckgq6gnyj007bt29k78xfb4bg","_id":"ckgq6gnyk007kt29keu4i3xxb"},{"post_id":"ckgq6gnxv0048t29k5gnfgn48","category_id":"ckgq6gnyj007bt29k78xfb4bg","_id":"ckgq6gnyl007ot29k0miifh2m"},{"post_id":"ckgq6gnxw004ct29k0058eh3v","category_id":"ckgq6gnyj007bt29k78xfb4bg","_id":"ckgq6gnyl007rt29k7igv1d80"},{"post_id":"ckgq6gnxx004ft29k38syabe1","category_id":"ckgq6gnyj007bt29k78xfb4bg","_id":"ckgq6gnym007ut29kfn2w4we2"},{"post_id":"ckgq6gnz2007yt29kdlsnbo4k","category_id":"ckgq6gnxi0039t29kbcvy857k","_id":"ckgq6gnza0083t29k6b8j1b1w"},{"post_id":"ckgq6gnz8007zt29kcz3lbgdx","category_id":"ckgq6gnxi0039t29kbcvy857k","_id":"ckgq6gnzb0085t29kek4idpj9"},{"post_id":"ckgq6gnz90081t29k8jv36t97","category_id":"ckgq6gnxi0039t29kbcvy857k","_id":"ckgq6gnzc0089t29k5amt5ikt"},{"post_id":"ckgq6gnza0082t29k4tgvaxku","category_id":"ckgq6gnxi0039t29kbcvy857k","_id":"ckgq6gnzc008ct29kfz4k6azz"},{"post_id":"ckgq6gnza0084t29kbzy82rrq","category_id":"ckgq6gnxi0039t29kbcvy857k","_id":"ckgq6gnzd008et29k5vqp2f9m"},{"post_id":"ckgq6gnzb0088t29kgpe81vir","category_id":"ckgq6gnxi0039t29kbcvy857k","_id":"ckgq6gnzd008gt29k8ntd915y"},{"post_id":"ckgq6gnzc008bt29k9o2scq96","category_id":"ckgq6gnxi0039t29kbcvy857k","_id":"ckgq6gnzd008it29k69yy4wo3"}],"PostTag":[{"post_id":"ckgq6gnw00001t29k0hxvaawq","tag_id":"ckgq6gnw40003t29kapk0e4e8","_id":"ckgq6gnwa000at29kal64dhuo"},{"post_id":"ckgq6gnw20002t29kbuj24kuu","tag_id":"ckgq6gnw80008t29k3kab7zyp","_id":"ckgq6gnwf000kt29kfz4nb9fy"},{"post_id":"ckgq6gnw20002t29kbuj24kuu","tag_id":"ckgq6gnw40003t29kapk0e4e8","_id":"ckgq6gnwg000mt29k540h5o15"},{"post_id":"ckgq6gnw50004t29k1libe2xu","tag_id":"ckgq6gnw40003t29kapk0e4e8","_id":"ckgq6gnwh000qt29k563zbm6h"},{"post_id":"ckgq6gnw60006t29kb6uobp34","tag_id":"ckgq6gnwg000nt29k27uec0e3","_id":"ckgq6gnwl000vt29k0ewy0xvj"},{"post_id":"ckgq6gnwj000ut29k17sb3njh","tag_id":"ckgq6gnwi000st29k4m05fn5q","_id":"ckgq6gnwm000xt29kgypj9cbd"},{"post_id":"ckgq6gnw70007t29k7qrb1uus","tag_id":"ckgq6gnwi000st29k4m05fn5q","_id":"ckgq6gnwn0012t29kguqr905r"},{"post_id":"ckgq6gnwl000wt29k2yckfmmr","tag_id":"ckgq6gnwi000st29k4m05fn5q","_id":"ckgq6gnwo0015t29k4j7jdjgw"},{"post_id":"ckgq6gnwm000zt29kb37n1d29","tag_id":"ckgq6gnwi000st29k4m05fn5q","_id":"ckgq6gnwq001at29kcxmc74gz"},{"post_id":"ckgq6gnwa000bt29k1k5edma7","tag_id":"ckgq6gnwi000st29k4m05fn5q","_id":"ckgq6gnws001dt29k4o2s7wsc"},{"post_id":"ckgq6gnwn0013t29k9ub91bo2","tag_id":"ckgq6gnwi000st29k4m05fn5q","_id":"ckgq6gnwu001it29kekomde7j"},{"post_id":"ckgq6gnwb000ct29k2vgocejh","tag_id":"ckgq6gnwi000st29k4m05fn5q","_id":"ckgq6gnwu001lt29kci0e2sas"},{"post_id":"ckgq6gnwd000ft29k7bbgbq92","tag_id":"ckgq6gnwi000st29k4m05fn5q","_id":"ckgq6gnx0001qt29k57vi6li5"},{"post_id":"ckgq6gnwd000gt29k5stee0qv","tag_id":"ckgq6gnwi000st29k4m05fn5q","_id":"ckgq6gnx2001xt29k90oz2kn9"},{"post_id":"ckgq6gnwf000jt29kg08qh0s2","tag_id":"ckgq6gnwi000st29k4m05fn5q","_id":"ckgq6gnx40024t29k6s4428hb"},{"post_id":"ckgq6gnwf000lt29k0p6m8mju","tag_id":"ckgq6gnwi000st29k4m05fn5q","_id":"ckgq6gnx60029t29kex06df2z"},{"post_id":"ckgq6gnwh000pt29k6ncf1xmd","tag_id":"ckgq6gnwi000st29k4m05fn5q","_id":"ckgq6gnx8002gt29kh87phujh"},{"post_id":"ckgq6gnwi000rt29kchzkfulx","tag_id":"ckgq6gnwi000st29k4m05fn5q","_id":"ckgq6gnxa002mt29khv782d76"},{"post_id":"ckgq6gnwo0017t29kala339h0","tag_id":"ckgq6gnx9002jt29k990se94r","_id":"ckgq6gnxd002st29kdc2w1s3d"},{"post_id":"ckgq6gnwq001bt29khub16ovm","tag_id":"ckgq6gnxb002qt29k0ple4h8w","_id":"ckgq6gnxf0030t29k8nyrcy2a"},{"post_id":"ckgq6gnws001ft29kcbnu4vir","tag_id":"ckgq6gnxe002wt29k7s0ugahp","_id":"ckgq6gnxh0037t29k1yymh4vk"},{"post_id":"ckgq6gnwu001jt29k508p9j98","tag_id":"ckgq6gnxg0033t29kep3f4y75","_id":"ckgq6gnxj003dt29k75xgdvbl"},{"post_id":"ckgq6gnwv001nt29k11mw17kz","tag_id":"ckgq6gnxi003bt29kg4m907ns","_id":"ckgq6gnxm003jt29k7rhodlx4"},{"post_id":"ckgq6gnx0001rt29k8dvd29hq","tag_id":"ckgq6gnxl003it29k1gnidayp","_id":"ckgq6gnxp003qt29ke2rf6yd4"},{"post_id":"ckgq6gnx1001ut29k5c7nhoi0","tag_id":"ckgq6gnxo003ot29khj9n26eb","_id":"ckgq6gnxr003wt29kfa5h16kr"},{"post_id":"ckgq6gnx2001yt29kc831f29j","tag_id":"ckgq6gnxo003ot29khj9n26eb","_id":"ckgq6gnxv0047t29k7mvkg7vy"},{"post_id":"ckgq6gnx2001yt29kc831f29j","tag_id":"ckgq6gnxs0040t29kfmvzaf0l","_id":"ckgq6gnxw004bt29k2i78h4kz"},{"post_id":"ckgq6gnx30021t29k2y237jeb","tag_id":"ckgq6gnxu0045t29kahhh41dd","_id":"ckgq6gnxx004et29k163na9vj"},{"post_id":"ckgq6gnx40025t29kclkhby7s","tag_id":"ckgq6gnxw004dt29kelfsb1pn","_id":"ckgq6gnxy004lt29kgqsjhzx1"},{"post_id":"ckgq6gnx50027t29k3rt0au1d","tag_id":"ckgq6gnxy004it29k33va5ujl","_id":"ckgq6gnxz004pt29ka3edds6c"},{"post_id":"ckgq6gnx6002at29k7xqe76gq","tag_id":"ckgq6gnxy004mt29k25fs0h05","_id":"ckgq6gny0004tt29kel4rharn"},{"post_id":"ckgq6gnx7002dt29k5fgtfvfv","tag_id":"ckgq6gnxz004qt29k9n8gg9qz","_id":"ckgq6gny0004xt29kcuk62w7e"},{"post_id":"ckgq6gnx8002ht29k9gti3eaj","tag_id":"ckgq6gny0004wt29k72hpfapv","_id":"ckgq6gny10051t29k14317k02"},{"post_id":"ckgq6gnx9002kt29kh268asu1","tag_id":"ckgq6gny10050t29k3pto0c3q","_id":"ckgq6gny30055t29k84p1f764"},{"post_id":"ckgq6gnxa002ot29kepcafosj","tag_id":"ckgq6gny20054t29k5pcrf7ra","_id":"ckgq6gny40059t29k8ufq3u2o"},{"post_id":"ckgq6gnxb002pt29k0xsdcvmm","tag_id":"ckgq6gny30058t29kes9d2483","_id":"ckgq6gny4005dt29kcltzaf6l"},{"post_id":"ckgq6gnxd002tt29k8c5k0zr4","tag_id":"ckgq6gny4005ct29kfauu1m1j","_id":"ckgq6gny5005jt29khlp66svd"},{"post_id":"ckgq6gnxe002vt29k17ms2fai","tag_id":"ckgq6gny5005gt29kcv7k8c81","_id":"ckgq6gny6005nt29kc6lebhql"},{"post_id":"ckgq6gnxf002zt29kcf98asz1","tag_id":"ckgq6gnw80008t29k3kab7zyp","_id":"ckgq6gny6005rt29k9nje0zzj"},{"post_id":"ckgq6gnxf002zt29kcf98asz1","tag_id":"ckgq6gny5005kt29k20o59ugl","_id":"ckgq6gny7005st29kd0gmbhvl"},{"post_id":"ckgq6gnxg0032t29k87gsa1bl","tag_id":"ckgq6gny0004wt29k72hpfapv","_id":"ckgq6gny7005wt29k8gzlcwid"},{"post_id":"ckgq6gnxh0036t29k4u1n8e8s","tag_id":"ckgq6gny7005tt29k1b7qfnyo","_id":"ckgq6gny80060t29k0mpwewzd"},{"post_id":"ckgq6gnxh0038t29ke7hsdpbw","tag_id":"ckgq6gny7005zt29kgr5je8xy","_id":"ckgq6gnya0064t29ke7ec4a85"},{"post_id":"ckgq6gnxi003ct29khag63m6q","tag_id":"ckgq6gny7005zt29kgr5je8xy","_id":"ckgq6gnyc0068t29k0pbgcxty"},{"post_id":"ckgq6gnxk003et29k3rmq5c6s","tag_id":"ckgq6gnyb0067t29k8c4gf2vd","_id":"ckgq6gnyd006ct29k0ghi7abq"},{"post_id":"ckgq6gnxl003gt29k1r0t0gi3","tag_id":"ckgq6gnyc006bt29k4o61g6j7","_id":"ckgq6gnye006jt29khsc2h6p4"},{"post_id":"ckgq6gnxl003gt29k1r0t0gi3","tag_id":"ckgq6gnyb0067t29k8c4gf2vd","_id":"ckgq6gnyf006mt29k1fl2fr97"},{"post_id":"ckgq6gnxm003kt29k0wmh4oo4","tag_id":"ckgq6gnye006it29k1ox90vuz","_id":"ckgq6gnyg006rt29k4d5g44kg"},{"post_id":"ckgq6gnxm003kt29k0wmh4oo4","tag_id":"ckgq6gnyf006nt29k1i8i9m7i","_id":"ckgq6gnyg006ut29k7ynmae1n"},{"post_id":"ckgq6gnxn003lt29kb9pz57xa","tag_id":"ckgq6gnyf006qt29k25an35c2","_id":"ckgq6gnyg006yt29kc2plf0n5"},{"post_id":"ckgq6gnxo003pt29kb0856m14","tag_id":"ckgq6gnyg006vt29kcf3t0ylv","_id":"ckgq6gnyh0072t29k4drh5cji"},{"post_id":"ckgq6gnxp003rt29k9fzm8a5z","tag_id":"ckgq6gnyh006zt29k3gyzd9dh","_id":"ckgq6gnyi0076t29k63fc1jfw"},{"post_id":"ckgq6gnxr003vt29k2yqt5cjx","tag_id":"ckgq6gnyh0073t29k73oce1q8","_id":"ckgq6gnyi007at29kd2jb42nm"},{"post_id":"ckgq6gnxs003xt29khwi3awh2","tag_id":"ckgq6gnyi0078t29kdtcbdbqr","_id":"ckgq6gnyj007et29ka93pchs6"},{"post_id":"ckgq6gnxt0041t29k61om3eol","tag_id":"ckgq6gnyj007dt29k88pk0qrz","_id":"ckgq6gnyk007it29k79os7cbx"},{"post_id":"ckgq6gnxt0042t29k00ns6klg","tag_id":"ckgq6gnyj007ht29kf8qbenus","_id":"ckgq6gnyk007mt29k0wki4fq4"},{"post_id":"ckgq6gnxu0046t29ke7n51n8g","tag_id":"ckgq6gnyk007lt29k488y9xr8","_id":"ckgq6gnyl007qt29k7cs4fkav"},{"post_id":"ckgq6gnxv0048t29k5gnfgn48","tag_id":"ckgq6gnyk007lt29k488y9xr8","_id":"ckgq6gnym007tt29kas2s2w6h"},{"post_id":"ckgq6gnxw004ct29k0058eh3v","tag_id":"ckgq6gnyk007lt29k488y9xr8","_id":"ckgq6gnyn007wt29k44nx8fzh"},{"post_id":"ckgq6gnxx004ft29k38syabe1","tag_id":"ckgq6gnyk007lt29k488y9xr8","_id":"ckgq6gnyn007xt29k4678dw2l"},{"post_id":"ckgq6gnza0082t29k4tgvaxku","tag_id":"ckgq6gnxu0045t29kahhh41dd","_id":"ckgq6gnzb0087t29kfprobnm4"},{"post_id":"ckgq6gnz2007yt29kdlsnbo4k","tag_id":"ckgq6gnz90080t29k3zc3dxwc","_id":"ckgq6gnzc008at29k187bfcwe"},{"post_id":"ckgq6gnz8007zt29kcz3lbgdx","tag_id":"ckgq6gnzb0086t29k193tey88","_id":"ckgq6gnzd008ft29k7i8selae"},{"post_id":"ckgq6gnz90081t29k8jv36t97","tag_id":"ckgq6gnzc008dt29kenzza1rd","_id":"ckgq6gnzd008jt29k92m38y7b"},{"post_id":"ckgq6gnza0084t29kbzy82rrq","tag_id":"ckgq6gnzd008ht29k07pa44de","_id":"ckgq6gnzd008lt29kg0cw3zvw"},{"post_id":"ckgq6gnzb0088t29kgpe81vir","tag_id":"ckgq6gnzd008kt29kfzzgeo3b","_id":"ckgq6gnze008nt29kc0os11qz"},{"post_id":"ckgq6gnzc008bt29k9o2scq96","tag_id":"ckgq6gnzd008mt29kfjp9fti1","_id":"ckgq6gnze008ot29kbxm480j6"}],"Tag":[{"name":"Linux","_id":"ckgq6gnw40003t29kapk0e4e8"},{"name":"Shell","_id":"ckgq6gnw80008t29k3kab7zyp"},{"name":"PHP","_id":"ckgq6gnwg000nt29k27uec0e3"},{"name":"Swift","_id":"ckgq6gnwi000st29k4m05fn5q"},{"name":"iOS","_id":"ckgq6gnx9002jt29k990se94r"},{"name":"切面编程","_id":"ckgq6gnxb002qt29k0ple4h8w"},{"name":"CoreAnimation","_id":"ckgq6gnxe002wt29k7s0ugahp"},{"name":"CoreGraphics","_id":"ckgq6gnxg0033t29kep3f4y75"},{"name":"CoreNFC","_id":"ckgq6gnxi003bt29kg4m907ns"},{"name":"DispatchQueue","_id":"ckgq6gnxl003it29k1gnidayp"},{"name":"JavaScriptCore","_id":"ckgq6gnxo003ot29khj9n26eb"},{"name":"WebView","_id":"ckgq6gnxs0040t29kfmvzaf0l"},{"name":"KVC","_id":"ckgq6gnxu0045t29kahhh41dd"},{"name":"Layout","_id":"ckgq6gnxw004dt29kelfsb1pn"},{"name":"Notification","_id":"ckgq6gnxy004it29k33va5ujl"},{"name":"UITextView","_id":"ckgq6gnxy004mt29k25fs0h05"},{"name":"AutoLayout","_id":"ckgq6gnxz004qt29k9n8gg9qz"},{"name":"Xcode","_id":"ckgq6gny0004wt29k72hpfapv"},{"name":"YYCategories","_id":"ckgq6gny10050t29k3pto0c3q"},{"name":"应用瘦身","_id":"ckgq6gny20054t29k5pcrf7ra"},{"name":"Router","_id":"ckgq6gny30058t29kes9d2483"},{"name":"编程指南","_id":"ckgq6gny4005ct29kfauu1m1j"},{"name":"友盟","_id":"ckgq6gny5005gt29kcv7k8c81"},{"name":"自动打包","_id":"ckgq6gny5005kt29k20o59ugl"},{"name":"算法","_id":"ckgq6gny7005tt29k1b7qfnyo"},{"name":"依赖管理","_id":"ckgq6gny7005zt29kgr5je8xy"},{"name":"Git","_id":"ckgq6gnyb0067t29k8c4gf2vd"},{"name":"SSH","_id":"ckgq6gnyc006bt29k4o61g6j7"},{"name":"SVN","_id":"ckgq6gnye006it29k1ox90vuz"},{"name":"Mac","_id":"ckgq6gnyf006nt29k1i8i9m7i"},{"name":"CocoaPods","_id":"ckgq6gnyf006qt29k25an35c2"},{"name":"fastlane","_id":"ckgq6gnyg006vt29kcf3t0ylv"},{"name":"证书","_id":"ckgq6gnyh006zt29k3gyzd9dh"},{"name":"MacOS","_id":"ckgq6gnyh0073t29k73oce1q8"},{"name":"正则表达式","_id":"ckgq6gnyi0078t29kdtcbdbqr"},{"name":"数据结构","_id":"ckgq6gnyj007dt29k88pk0qrz"},{"name":"编译","_id":"ckgq6gnyj007ht29kf8qbenus"},{"name":"旅游","_id":"ckgq6gnyk007lt29k488y9xr8"},{"name":"runtime","_id":"ckgq6gnz90080t29k3zc3dxwc"},{"name":"Block","_id":"ckgq6gnzb0086t29k193tey88"},{"name":"CoreBluetooth","_id":"ckgq6gnzc008dt29kenzza1rd"},{"name":"KVO","_id":"ckgq6gnzd008ht29k07pa44de"},{"name":"PhotoKit","_id":"ckgq6gnzd008kt29kfzzgeo3b"},{"name":"Runtime","_id":"ckgq6gnzd008mt29kfjp9fti1"}]}}